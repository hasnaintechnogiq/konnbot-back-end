const mongoose = require('mongoose');
const Activities = require('../models/Activities.js');
const Lead = require('../models/Lead.js');
const Project = require('../models/Project.js');
const Quotation = require('../models/Quotation.js');
const Checks = require('../models/Checks.js');
const Snags = require('../models/Snags.js');
const SubActivities = require('../models/SubActivities.js');
const Subtask = require('../models/SubTaskForSubactivities.js');
const Projectspace = require('../models/ProjectSpace.js');
const Material = require('../models/Material.js');
const QuantitiesMaterial = require('../models/QuantitiesMaterial.js');


const addNewActivities = async (req, res) => {
    try {
        let data = new Activities(req.body);
        const result = await data.save();

        let objID = new mongoose.Types.ObjectId(data.id)
        let newss = new mongoose.Types.ObjectId(req.body.projectID)
       // console.log(objID);
        await Project.updateOne(
            { _id: newss },
            {
                $push: {
                    activitiesID: objID
                }
            }
        )
        res.send(result);
    } catch (err) {
        res.status(500).json(err);
    }
};


const getSingleLeadactivities = async (req, resp) => {
    try {
        let single = await Project.findById({ _id: req.params._id }).populate({
            path: 'activitiesID',
            populate: {
                path: 'subactivitiesID',
                model: 'subactivities',
                populate: [
                    { path: 'subtaskID', model: 'subtask' },
                    { path: 'checksID', model: 'checks' },
                    { path: 'snagsID', model: 'snags' }
                ]
                //   populate: {
                //       path: 'subtaskID', 
                //       model: 'subtask' // Replace NestedModel with the actual model name
                //   }
            }
        });
        resp.send(single);
    } catch (err) {
        resp.status(500).json(err);
    }
};

const getSingleLeadOnlyActivities = async (req, resp) => {
    try {
        let single = await Project.findById({ _id: req.params._id }).populate({
            path: 'activitiesID',
            populate: {
                path: 'subactivitiesID',
                model: 'subactivities'
            }
        });
        resp.send(single);
    } catch (err) {
        resp.status(500).json(err);
    }
};

const getSingleProjectAllDocuments = async (req, resp) => {
    try {
        let single = await Project.findById({ _id: req.params._id }).populate("documentsID");
        resp.send(single);
    } catch (err) {
        resp.status(500).json(err);
    }
};

const getSingleProjectAllPhotoes = async (req, resp) => {
    try {
        let single = await Project.findById({ _id: req.params._id }).populate({
            path: 'activitiesID',
            populate: {
                path: 'subactivitiesID',
                model: 'subactivities',
                populate: [
                    { path: 'imagesID', model: 'photosforsubtask' }
                ]
            }
        });
        resp.send(single);
    } catch (err) {
        resp.status(500).json(err);
    }
};




const deleteActivities = async (req, res) => {
    try {
        let data = await Activities.deleteOne(req.params);
        res.send(data);
    } catch (error) {
        res.status(500).json(error);
    }
};

const updateActivities = async (req, res) => {
    try {
     // console.log(req.params)
        let data = await Activities.updateOne(
            req.params,
            { $set: req.body }
        );
        res.send(data);
    } catch (error) {
        res.status(500).json(error);
    }
};









const createAllActivites = async (req, resp) => {
    try {

        let project = new Project();

        const projectresul = await project.save();

        let objectproID = new mongoose.Types.ObjectId(project.id)

        let newcheck = new mongoose.Types.ObjectId(req.body.leadID)

        await Lead.updateOne(
            { _id: newcheck },
            {
                $push: {
                    projectID: objectproID
                }
            }
        )

        var quotationSelectedDetails = await Quotation.findById(req.body.quotationSelectedID)
        if (quotationSelectedDetails) {
            var fottingtypecheck = quotationSelectedDetails.NormalFooting;
            var NumbersOfFlorrs = quotationSelectedDetails.FloorGPlus;
            var NumbersOfBasemetFloor = quotationSelectedDetails.BasementFloor;
            var InternalPlaster = quotationSelectedDetails.InternalPlaster;
            var FlaseCeilingTyHNR = quotationSelectedDetails.FlaseCeilingType;


        }
        else { var fottingtypecheck = "ISOLATED"; }

        var materlID = await QuantitiesMaterial.findById(quotationSelectedDetails.quantitiesAndMaerialID)







        // estimated days calculation Start









        var SiteClearanceSoil = "YELLOW, RED & MIX";
        var FINALINPUTSDONE_C18 = SiteClearanceSoil;
        var QUANTITIESDONE_B6 = FINALINPUTSDONE_C18 === "BLACK COTTON" ? 1 : FINALINPUTSDONE_C18 === "YELLOW, RED & MIX" ? 2 : FINALINPUTSDONE_C18 === "ORDINARY ROCK" ? 3 : FINALINPUTSDONE_C18 === "HARD ROCK" ? 4 : 0;

        var FINALINPUTSDONE_D5 = quotationSelectedDetails.BasementFloor;
        var QUANTITIESDONE_D6 = FINALINPUTSDONE_D5 === 1 ? 1.5 : FINALINPUTSDONE_D5 === 2 ? 3 : FINALINPUTSDONE_D5 === 3 ? 4.5 : 0;

        var RMCInFooting = "YES";
        var FINALINPUTSDONE_B46 = RMCInFooting; // not complete
        var QUANTITIESDONE_G5 = FINALINPUTSDONE_B46 === "YES" ? 1 : 0;

        var StaricaseRailing = "SS";
        var FINALINPUTSDONE_G104 = StaricaseRailing;  // not complete
        var QUANTITIESDONE_L4 = FINALINPUTSDONE_G104 === "STANDARD" ? 0 : FINALINPUTSDONE_G104 === "1.25X" ? 1 : FINALINPUTSDONE_G104 === "1.5X" ? 2 : FINALINPUTSDONE_G104 === "1.75X" ? 3 : FINALINPUTSDONE_G104 === "2X" ? 4 : 0;
        var QUANTITIESDONE_L5 = QUANTITIESDONE_L4 === 0 ? 1 : QUANTITIESDONE_L4 === 1 ? 1.25 : QUANTITIESDONE_L4 === 2 ? 1.5 : QUANTITIESDONE_L4 === 3 ? 1.75 : QUANTITIESDONE_L4 === 4 ? 2 : 0;









        // Site Mobalization
        // var FINALINPUTSDONE_B17 = quotationSelectedDetails.SiteClearanceTobeDone;
        // var SiteClearance_Factor = (FINALINPUTSDONE_B17 === "YES" ? 0.012 : 0.003) / QUANTITIESDONE_L5;
        // var RoadLevelLayoutLevelling_Factor = 1;
        // var BSExcavation_Factor = (QUANTITIESDONE_B6 === 1 ? 0.011 : QUANTITIESDONE_B6 === 2 ? 0.011 * 1.25 : QUANTITIESDONE_B6 === 3 ? 0.008 : QUANTITIESDONE_B6 === 4 ? 0.017 : 0) / QUANTITIESDONE_L5;
        // var ShoringProtection_Factor = (QUANTITIESDONE_D6 === 1.5 ? 0.004 : QUANTITIESDONE_D6 === 3 ? 0.007 : QUANTITIESDONE_D6 === 4.5 ? 0.011 : 0) / QUANTITIESDONE_L5;
        // var BSLayoutLevelling_Factor = 1;


        // var siteClearance_ESTD = Math.ceil(SiteClearance_Factor * Site_ClearanceQTD);
        // var roadLevelLayoutAndLevelling_ESTD = Road_Level_Layout_LevellingQTD > 0 ? 1 : 0;
        // var bsExcavation_ESTD = Math.ceil(BSExcavation_Factor * BS_ExcavationQTD);
        // var shoringProtection_ESTD = Math.ceil(ShoringProtection_Factor * Shoring_ProtectionQTD);
        // var bsLayoutAndLevelling_ESTD = Math.ceil(BSLayoutLevelling_Factor * BS_Layout_LevellingQTD);





        // // Isolater Footing Below the Raft Level - Case 1.1

        // var BSExcavation_IRDL_Factor = (QUANTITIESDONE_B6 === 1 ? 0.011 : QUANTITIESDONE_B6 === 2 ? 0.011 * 1.25 : QUANTITIESDONE_B6 === 3 ? 0.008 : QUANTITIESDONE_B6 === 4 ? 0.017 : 0) / QUANTITIESDONE_L5;
        // var BSPCC_IRDL_Factor = 0.107 / QUANTITIESDONE_L5;
        // var BSFootingReinforcement_IRDL_Factor = 0.002 / QUANTITIESDONE_L5;
        // var BSFootingRCC_IRDL_Factor = (QUANTITIESDONE_G5 === 1 ? 0.04 : 0.02) / QUANTITIESDONE_L5;
        // var BSPedestalRCC_IRDL_Factor = (QUANTITIESDONE_G5 === 1 ? 0.04 : (QUANTITIESDONE_G5 === 2 ? 0.02 : 0)) / QUANTITIESDONE_L5;
        // var BSWaterproofing_IRDL_Factor = 0.044 / QUANTITIESDONE_L5;
        // var BSBackfilling_IRDL_Factor = 0.015 / QUANTITIESDONE_L5;
        // var BSHardFilling_IRDL_Factor = 0.036 / QUANTITIESDONE_L5;
        // var BSSewageLine_IRDL_Factor = 0.061 / QUANTITIESDONE_L5;
        // var BSRaftReinforcement_IRDL_Factor = BSFootingReinforcement_IRDL_Factor;
        // var BSRaftRCC_IRDL_Factor = (QUANTITIESDONE_G5 === 1 ? 0.04 : (QUANTITIESDONE_G5 === 2 ? 0.02 : 0)) / QUANTITIESDONE_L5;


        // var bsExcavation_IRDL_ESTD = Math.ceil(BSExcavation_IRDL_Factor * BS_Excavation_IRDLQTD);
        // var bsPCC_IRDL_ESTD = Math.ceil(BSPCC_IRDL_Factor * BS_PCC_IRDLQTD);
        // var bsFootingReinforcement_IRDL_ESTD = Math.ceil(BSFootingReinforcement_IRDL_Factor * BS_Footing_Reinforcement_IRDLQTD);
        // var bsFootingRCC_IRDL_ESTD = Math.ceil(BSFootingRCC_IRDL_Factor * BS_Footing_RCC_IRDLQTD);
        // var bsPedestalRCC_IRDL_ESTD = Math.ceil(BSPedestalRCC_IRDL_Factor * BS_Pedestal_RCC_IRDLQTD);
        // var bsWaterproofing_IRDL_ESTD = Math.ceil(BSWaterproofing_IRDL_Factor * BS_Waterproofing_IRDLQTD);
        // var bsBackfilling_IRDL_ESTD = Math.ceil(BSBackfilling_IRDL_Factor * BS_Backfilling_IRDLQTD);
        // var bsHardFilling_IRDL_ESTD = Math.ceil(BSHardFilling_IRDL_Factor * BS_Hard_Filling_IRDLQTD);
        // var bsSewageLine_IRDL_ESTD = Math.ceil(BSSewageLine_IRDL_Factor * BS_Sewage_Line_IRDLQTD);
        // var bsRaftReinforcement_IRDL_ESTD = Math.ceil(BS_Raft_Reinforcement_IRDLQTD * BSRaftReinforcement_IRDL_Factor);
        // var bsRaftRCC_IRDL_ESTD = Math.ceil(BS_Raft_RCC_IRDLQTD * BSRaftRCC_IRDL_Factor);




        // // Isolater Footing with Raft at same level & Brick Work - Case 1.2


        // var BSExcavation_IRSLB_Factor = BSExcavation_IRDL_Factor;
        // var BSPCCBelow_IRSLB_Factor = BSPCC_IRDL_Factor;
        // var BSBrickWorkAroundFootingBeam_IRSLB_Factor = 0.04 / QUANTITIESDONE_L5;
        // var BSHardFilling_IRSLB_Factor = BSHardFilling_IRDL_Factor;
        // var BSSewageLine_IRSLB_Factor = 0.061 / QUANTITIESDONE_L5;
        // var BSPCCAbove_IRSLB_Factor = BSPCCBelow_IRSLB_Factor;
        // var BSReinforcement_IRSLB_Factor = BSRaftReinforcement_IRDL_Factor;
        // var BSFootingRCC_IRSLB_Factor = (QUANTITIESDONE_G5 === 1 ? 0.04 : QUANTITIESDONE_G5 === 2 ? 0.02 : 0) / QUANTITIESDONE_L5;
        // var BSWaterproofing_IRSLB_Factor = 0.044 / QUANTITIESDONE_L5;


        // var bsExcavation_IRSLB_ESTD = Math.ceil(BS_Excavation_IRSLBQTD * BSExcavation_IRSLB_Factor);
        // var bsPCCBelow_IRSLB_ESTD = Math.ceil(BS_PCC_Below_IRSLBQTD * BSPCCBelow_IRSLB_Factor);
        // var bsBrickWorkAroundFootingAndBeam_IRSLB_ESTD = Math.ceil(BS_Brick_Work_Around_Footing_Beam_IRSLBQTD * BSBrickWorkAroundFootingBeam_IRSLB_Factor);
        // var bsHardFilling_IRSLB_ESTD = Math.ceil(BS_Hard_Filling_IRSLBQTD * BSHardFilling_IRSLB_Factor);
        // var bsSewageLine_IRSLB_ESTD = Math.ceil(BS_Sewage_Line_IRSLBQTD * BSSewageLine_IRSLB_Factor);
        // var bsPCCAbove_IRSLB_ESTD = Math.ceil(BS_PCC_Above_IRSLBQTD * BSPCCAbove_IRSLB_Factor);
        // var bsReinforcement_IRSLB_ESTD = Math.ceil(BS_Reinforcement_IRSLBQTD * BSReinforcement_IRSLB_Factor);
        // var bsFootingRCC_IRSLB_ESTD = Math.ceil(BS_Footing_RCC_IRSLBQTD * BSFootingRCC_IRSLB_Factor);
        // var bsWaterproofing_IRSLB_ESTD = Math.ceil(BS_Waterproofing_IRSLBQTD * BSWaterproofing_IRSLB_Factor);





        // //  Isolater Footing with Raft at same level & Shuttering - Case 1.3



        // var BSExcavation_IRSLS_Factor = BSExcavation_IRSLB_Factor;
        // var BSPCCBelow_IRSLS_Factor = BSPCCBelow_IRSLB_Factor;
        // var BSShuttering_IRSLS_Factor = 0.013 / QUANTITIESDONE_L5;
        // var BSRaftReinforcement_IRSLS_Factor = BSReinforcement_IRSLB_Factor;
        // var BSRaftFootingRCC_IRSLS_Factor = (QUANTITIESDONE_G5 === 1 ? 0.04 : (QUANTITIESDONE_G5 === 2 ? 0.02 : 0)) / QUANTITIESDONE_L5;
        // var BSWaterproofing_IRSLS_Factor = 0.044 / QUANTITIESDONE_L5;
        // var BSHardFilling_IRSLS_Factor = BSHardFilling_IRSLB_Factor;
        // var BSSewageLine_IRSLS_Factor = 0.061 / QUANTITIESDONE_L5;
        // var BSPCCAbove_IRSLS_Factor = BSPCCBelow_IRSLS_Factor;



        // var bsExcavation_IRSLS_ESTD = Math.ceil(BSExcavation_IRSLS_Factor * BS_Excavation_IRSLSQTD);
        // var bsPCCBelow_IRSLS_ESTD = Math.ceil(BSPCCBelow_IRSLS_Factor * BS_PCC_Below_IRSLSQTD);
        // var bsShuttering_IRSLS_ESTD = Math.ceil(BSShuttering_IRSLS_Factor * BS_Shuttering_IRSLSQTD);
        // var bsRaftReinforcement_IRSLS_ESTD = Math.ceil(BSRaftReinforcement_IRSLS_Factor * BS_Raft_Reinforcement_IRSLSQTD);
        // var bsRaftFootingRCC_IRSLS_ESTD = Math.ceil(BSRaftFootingRCC_IRSLS_Factor * BS_Raft_Footing_RCC_IRSLSQTD);
        // var bsWaterproofing_IRSLS_ESTD = Math.ceil(BSWaterproofing_IRSLS_Factor * BS_Waterproofing_IRSLSQTD);
        // var bsHardFilling_IRSLS_ESTD = Math.ceil(BSHardFilling_IRSLS_Factor * BS_Hard_Filling_IRSLSQTD);
        // var bsSewageLine_IRSLS_ESTD = Math.ceil(BSSewageLine_IRSLS_Factor * BS_Sewage_Line_IRSLSQTD);
        // var bsPCCAbove_IRSLS_ESTD = Math.ceil(BSPCCAbove_IRSLS_Factor * BS_PCC_Above_IRSLSQTD);







        // // Pile Footing with Raft at the Same Level & Brick Work - Case 2.1


        // var bsPileReinforcement_PRSLB_Factor = BSRaftReinforcement_IRSLS_Factor;
        // var bsPileExcavation_PRSLB_Factor = BSExcavation_IRSLB_Factor;
        // var bsPileRCC_PRSLB_Factor = BSRaftReinforcement_IRSLS_Factor;
        // var bsPCCBelow_PRSLB_Factor = BSPCCBelow_IRSLS_Factor;
        // var bsBrickWorkAroundFootingAndBeam_PRSLB_Factor = 0.04 / QUANTITIESDONE_L5;
        // var bsHardFilling_PRSLB_Factor = BSHardFilling_IRSLS_Factor;
        // var bsSewageLine_PRSLB_Factor = 0.061 / QUANTITIESDONE_L5;
        // var bsPCCAbove_PRSLB_Factor = bsPCCBelow_PRSLB_Factor;
        // var bsRaftReinforcement_PRSLB_Factor = BSRaftReinforcement_IRSLS_Factor;
        // var bsRaftRCC_PRSLB_Factor = BSRaftFootingRCC_IRSLS_Factor;
        // var bsWaterproofing_PRSLB_Factor = 0.044 / QUANTITIESDONE_L5;



        // var bsPileReinforcement_PRSLB_ESTD = Math.ceil(bsPileReinforcement_PRSLB_Factor * BS_Pile_Reinforcement_PRSLBQTD);
        // var bsPileExcavation_PRSLB_ESTD = Math.ceil(bsPileExcavation_PRSLB_Factor * BS_Pile_Excavation_PRSLBQTD);
        // var bsPileRCC_PRSLB_ESTD = Math.ceil(bsPileRCC_PRSLB_Factor * BS_Pile_RCC_PRSLBQTD);
        // var bsPCCBelow_PRSLB_ESTD = Math.ceil(bsPCCBelow_PRSLB_Factor * BS_PCC_Below_PRSLBQTD);
        // var bsBrickWorkAroundFootingAndBeam_PRSLB_ESTD = Math.ceil(bsBrickWorkAroundFootingAndBeam_PRSLB_Factor * BS_Brick_Work_around_Footing_Beam_PRSLBQTD);
        // var bsHardFilling_PRSLB_ESTD = Math.ceil(bsHardFilling_PRSLB_Factor * BS_Hard_Filling_PRSLBQTD);
        // var bsSewageLine_PRSLB_ESTD = Math.ceil(bsSewageLine_PRSLB_Factor * BS_Sewage_Line_PRSLBQTD);
        // var bsPCCAbove_PRSLB_ESTD = Math.ceil(bsPCCAbove_PRSLB_Factor * BS_PCC_Above_PRSLBQTD);
        // var bsRaftReinforcement_PRSLB_ESTD = Math.ceil(bsRaftReinforcement_PRSLB_Factor * BS_Raft_Reinforcement_PRSLBQTD);
        // var bsRaftRCC_PRSLB_ESTD = Math.ceil(bsRaftRCC_PRSLB_Factor * BS_Raft_RCC_PRSLBQTD);
        // var bsWaterproofing_PRSLB_ESTD = Math.ceil(bsWaterproofing_PRSLB_Factor * BS_Waterproofing_PRSLBQTD);





        // // Pile Footing with Raft at the Same Level & Shuttering Work  - Case 2.2


        // var BSPileReinforcement_PRSLS_Factor = bsPileReinforcement_PRSLB_Factor;
        // var BSPileExcavation_PRSLS_Factor = bsPileExcavation_PRSLB_Factor;
        // var BSPileRCC_PRSLS_Factor = bsPileRCC_PRSLB_Factor;
        // var BSSewageLine_PRSLS_Factor = 0.061 / QUANTITIESDONE_L5;
        // var BSShuttering_PRSLS_Factor = BSShuttering_IRSLS_Factor;
        // var BSRaftReinforcement_PRSLS_Factor = bsRaftReinforcement_PRSLB_Factor;
        // var BSRaftFootingRCC_PRSLS_Factor = bsRaftRCC_PRSLB_Factor;
        // var BSWaterproofing_PRSLS_Factor = 0.044 / QUANTITIESDONE_L5;
        // var BSHardFilling_PRSLS_Factor = bsHardFilling_PRSLB_Factor;
        // var BSPCCAbove_PRSLS_Factor = BSPileRCC_PRSLS_Factor;



        // var bsPileReinforcement_PRSLS_ESTD = Math.ceil(BS_Pile_Reinforcement_PRSLSQTD * BSPileReinforcement_PRSLS_Factor);
        // var bsPileExcavation_PRSLS_ESTD = Math.ceil(BS_Pile_Excavation_PRSLSQTD * BSPileExcavation_PRSLS_Factor);
        // var bsPileRCC_PRSLS_ESTD = Math.ceil(BS_Pile_RCC_PRSLSQTD * BSPileRCC_PRSLS_Factor);
        // var bsSewageLine_PRSLS_ESTD = Math.ceil(BS_Sewage_Line_PRSLSQTD * BSSewageLine_PRSLS_Factor);
        // var bsShuttering_PRSLS_ESTD = Math.ceil(BS_Shuttering_PRSLSQTD * BSShuttering_PRSLS_Factor);
        // var bsRaftReinforcement_PRSLS_ESTD = Math.ceil(BS_Raft_Reinforcement_PRSLSQTD * BSRaftReinforcement_PRSLS_Factor);
        // var bsRaftFootingRCC_PRSLS_ESTD = Math.ceil(BS_Raft_Footing_RCC_PRSLSQTD * BSRaftFootingRCC_PRSLS_Factor);
        // var bsWaterproofing_PRSLS_ESTD = Math.ceil(BS_Waterproofing_PRSLSQTD * BSWaterproofing_PRSLS_Factor);
        // var bsHardFilling_PRSLS_ESTD = Math.ceil(BS_Hard_Filling_PRSLSQTD * BSHardFilling_PRSLS_Factor);
        // var bsPCCAbove_PRSLS_ESTD = Math.ceil(BS_PCC_Above_PRSLSQTD * BSPCCAbove_PRSLS_Factor);










        // // Raft Footing - Case - 3.0


        // var BSHardFillingWork_RSL_Factor = BSHardFilling_PRSLS_Factor;
        // var BSSewageLine_RSL_Factor = 0.061 / QUANTITIESDONE_L5;
        // var BSPCCUnderRaft_RSL_Factor = bsPCCBelow_PRSLB_Factor;
        // var BSReinforcement_RSL_Factor = bsRaftReinforcement_PRSLS_ESTD;
        // var BSRaftRCC_RSL_Factor = BSRaftFootingRCC_PRSLS_Factor;
        // var BSWaterproofing_RSL_Factor = 0.044 / QUANTITIESDONE_L5;


        // var bsHardFillingWork_RSL_ESTD = Math.ceil(BS_Hard_Filling_Work_RSLQTD * BSHardFillingWork_RSL_Factor);
        // var bsSewageLine_RSL_ESTD = Math.ceil(BS_Sewage_Line_RSLQTD * BSSewageLine_RSL_Factor);
        // var bsPCCUnderRaft_RSL_ESTD = Math.ceil(BS_PCC_under_Raft_RSLQTD * BSPCCUnderRaft_RSL_Factor);
        // var bsReinforcement_RSL_ESTD = Math.ceil(BS_Reinforcement_RSLQTD * BSReinforcement_RSL_Factor);
        // var bsRaftRCC_RSL_ESTD = Math.ceil(BS_Raft_RCC_RSLQTD * BSRaftRCC_RSL_Factor);
        // var bsWaterproofing_RSL_ESTD = Math.ceil(BS_Waterproofing_RSLQTD * BSWaterproofing_RSL_Factor);








        // // B1 RCC Column & Slab Work


        // // Column + Curtain Wall

        // var B1ColumnReinforcement_Factor = BSReinforcement_RSL_Factor;
        // var B1CurtainWallShuttering_Factor = 0.039 / QUANTITIESDONE_L5;
        // var B1RCCColumnCurtainWall_Factor = 0.02 / QUANTITIESDONE_L5;
        // var B1Waterproofing_Factor = 0.044 / QUANTITIESDONE_L5;

        // // Slab + Beam

        // var B1BrickWork_Factor = 0.333 / QUANTITIESDONE_L5;
        // var B1SlabShuttering_Factor = 0.037 / QUANTITIESDONE_L5;
        // var B1SlabReinforcement_Factor = 0.002 / QUANTITIESDONE_L5;
        // var B1SlabElectricalConducting_Factor = 1;
        // var B1SlabRCC_Factor = 0.04 / QUANTITIESDONE_L5;




        // // Column + Curtain Wall

        // var b1ColumnReinforcement_ESTD = Math.ceil(B1_Column_Reinforcement_QTD * B1ColumnReinforcement_Factor);
        // var b1CurtainWallShuttering_ESTD = Math.ceil(B1_Curtain_Wall_Shuttering_QTD * B1CurtainWallShuttering_Factor);
        // var b1RCCColumnAndCurtainWall_ESTD = Math.ceil(B1_RCC_Column_Curtain_Wall_QTD * B1RCCColumnCurtainWall_Factor);
        // var b1Waterproofing_ESTD = Math.ceil(B1_Waterproofing_QTD * B1Waterproofing_Factor);

        // // Slab + Beam

        // var b1BrickWork_ESTD = Math.ceil(B1_Brick_Work_QTD * B1BrickWork_Factor);
        // var b1SlabShuttering_ESTD = Math.ceil(B1_Slab_Shuttering_QTD * B1SlabShuttering_Factor);
        // var b1SlabReinforcement_ESTD = Math.ceil(B1_Slab_Reinforcement_QTD * B1SlabReinforcement_Factor);
        // var b1SlabElectricalConduiting_ESTD = B1_Slab_Electrical_Conduiting_QTD > 0 ? 1 : 0;
        // var b1SlabRCC_ESTD = Math.ceil(B1_Slab_RCC_QTD * B1SlabRCC_Factor);









        // // B2 RCC Column & Slab Work

        // // Column + Curtain Wall


        // var B2ColumnReinforcement_Factor = BSReinforcement_RSL_Factor;
        // var B2CurtainWallShuttering_Factor = 0.039 / QUANTITIESDONE_L5;
        // var B2RCCColumnCurtainWall_Factor = 0.02 / QUANTITIESDONE_L5;
        // var B2Waterproofing_Factor = 0.044 / QUANTITIESDONE_L5;

        // // Slab + Beam

        // var B2BrickWork_Factor = 0.333 / QUANTITIESDONE_L5;
        // var B2SlabShuttering_Factor = 0.037 / QUANTITIESDONE_L5;
        // var B2SlabReinforcement_Factor = 0.002 / QUANTITIESDONE_L5;
        // var B2SlabElectricalConducting_Factor = 1;
        // var B2SlabRCC_Factor = 0.04 / QUANTITIESDONE_L5;




        // // Column + Curtain Wall

        // var b2ColumnReinforcement_ESTD = Math.ceil(B2_Column_Reinforcement_QTD * B2ColumnReinforcement_Factor);
        // var b2CurtainWallShuttering_ESTD = Math.ceil(B2_Curtain_Wall_Shuttering_QTD * B2CurtainWallShuttering_Factor);
        // var b2RCCColumnAndCurtainWall_ESTD = Math.ceil(B2_RCC_Column_Curtain_Wall_QTD * B2RCCColumnCurtainWall_Factor);
        // var b2Waterproofing_ESTD = Math.ceil(B2_Waterproofing_QTD * B2Waterproofing_Factor);

        // // Slab + Beam

        // var b2BrickWork_ESTD = Math.ceil(B2_Brick_Work_QTD * B2BrickWork_Factor);
        // var b2SlabShuttering_ESTD = Math.ceil(B2_Slab_Shuttering_QTD * B2SlabShuttering_Factor);
        // var b2SlabReinforcement_ESTD = Math.ceil(B2_Slab_Reinforcement_QTD * B2SlabReinforcement_Factor);
        // var b2SlabElectricalConduiting_ESTD = B2_Slab_Electrical_Conduiting_QTD > 0 ? 1 : 0;
        // var b2SlabRCC_ESTD = Math.ceil(B2_Slab_RCC_QTD * B2SlabRCC_Factor);









        // // B3 RCC Column & Slab Work

        // // Column + Curtain Wall


        // var B3ColumnReinforcement_Factor = BSReinforcement_RSL_Factor;
        // var B3CurtainWallShuttering_Factor = 0.039 / QUANTITIESDONE_L5;
        // var B3RCCColumnCurtainWall_Factor = 0.02 / QUANTITIESDONE_L5;
        // var B3Waterproofing_Factor = 0.044 / QUANTITIESDONE_L5;

        // // Slab + Beam

        // var B3BrickWork_Factor = 0.333 / QUANTITIESDONE_L5;
        // var B3SlabShuttering_Factor = 0.037 / QUANTITIESDONE_L5;
        // var B3SlabReinforcement_Factor = 0.002 / QUANTITIESDONE_L5;
        // var B3SlabElectricalConducting_Factor = 1;
        // var B3SlabRCC_Factor = 0.04 / QUANTITIESDONE_L5;




        // // Column + Curtain Wall

        // var b3ColumnReinforcement_ESTD = Math.ceil(B3_Column_Reinforcement_QTD * B3ColumnReinforcement_Factor);
        // var b3CurtainWallShuttering_ESTD = Math.ceil(B3_Curtain_Wall_Shuttering_QTD * B3CurtainWallShuttering_Factor);
        // var b3RCCColumnAndCurtainWall_ESTD = Math.ceil(B3_RCC_Column_Curtain_Wall_QTD * B3RCCColumnCurtainWall_Factor);
        // var b3Waterproofing_ESTD = Math.ceil(B3_Waterproofing_QTD * B3Waterproofing_Factor);

        // // Slab + Beam

        // var b3BrickWork_ESTD = Math.ceil(B3_Brick_Work_QTD * B3BrickWork_Factor);
        // var b3SlabShuttering_ESTD = Math.ceil(B3_Slab_Shuttering_QTD * B3SlabShuttering_Factor);
        // var b3SlabReinforcement_ESTD = Math.ceil(B3_Slab_Reinforcement_QTD * B3SlabReinforcement_Factor);
        // var b3SlabElectricalConduiting_ESTD = B3_Slab_Electrical_Conduiting_QTD > 0 ? 1 : 0;
        // var b3SlabRCC_ESTD = Math.ceil(B3_Slab_RCC_QTD * B3SlabRCC_Factor);







        // // B4 RCC Column & Slab Work

        // // Column + Curtain Wall


        // var B4ColumnReinforcement_Factor = BSReinforcement_RSL_Factor;
        // var B4CurtainWallShuttering_Factor = 0.039 / QUANTITIESDONE_L5;
        // var B4RCCColumnCurtainWall_Factor = 0.02 / QUANTITIESDONE_L5;
        // var B4Waterproofing_Factor = 0.044 / QUANTITIESDONE_L5;

        // // Slab + Beam

        // var B4BrickWork_Factor = 0.333 / QUANTITIESDONE_L5;
        // var B4SlabShuttering_Factor = 0.037 / QUANTITIESDONE_L5;
        // var B4SlabReinforcement_Factor = 0.002 / QUANTITIESDONE_L5;
        // var B4SlabElectricalConducting_Factor = 1;
        // var B4SlabRCC_Factor = 0.04 / QUANTITIESDONE_L5;




        // // Column + Curtain Wall

        // var b4ColumnReinforcement_ESTD = Math.ceil(B4_Column_Reinforcement_QTD * B4ColumnReinforcement_Factor);
        // var b4CurtainWallShuttering_ESTD = Math.ceil(B4_Curtain_Wall_Shuttering_QTD * B4CurtainWallShuttering_Factor);
        // var b4RCCColumnAndCurtainWall_ESTD = Math.ceil(B4_RCC_Column_Curtain_Wall_QTD * B4RCCColumnCurtainWall_Factor);
        // var b4Waterproofing_ESTD = Math.ceil(B4_Waterproofing_QTD * B4Waterproofing_Factor);

        // // Slab + Beam

        // var b4BrickWork_ESTD = Math.ceil(B4_Brick_Work_QTD * B4BrickWork_Factor);
        // var b4SlabShuttering_ESTD = Math.ceil(B4_Slab_Shuttering_QTD * B4SlabShuttering_Factor);
        // var b4SlabReinforcement_ESTD = Math.ceil(B4_Slab_Reinforcement_QTD * B4SlabReinforcement_Factor);
        // var b4SlabElectricalConduiting_ESTD = B4_Slab_Electrical_Conduiting_QTD > 0 ? 1 : 0;
        // var b4SlabRCC_ESTD = Math.ceil(B4_Slab_RCC_QTD * B4SlabRCC_Factor);







        // Isloated Footing

        var ISOLayoutLevelling_Factor = 1;
        var ISOExcavation_Factor = QUANTITIESDONE_B6 === 1 ? 0.016 : QUANTITIESDONE_B6 === 2 ? 0.016 * 1.25 : QUANTITIESDONE_B6 === 3 ? 0.008 : QUANTITIESDONE_B6 === 4 ? 0.017 : 0;
        var ISOReinforcement_Factor = 0.002 / QUANTITIESDONE_L5;
        var ISOPCC_Factor = 0.107 / QUANTITIESDONE_L5;
        var ISOFootingRCC_Factor = (QUANTITIESDONE_G5 === 1 ? 0.04 : (QUANTITIESDONE_G5 === 2 ? 0.02 : 0)) / QUANTITIESDONE_L5;
        var ISOPedestalRCC_Factor = ISOFootingRCC_Factor;
        var ISOWaterproofing_Factor = 0.044 / QUANTITIESDONE_L5;
        var ISOBackfillingWork_Factor = 0.015 / QUANTITIESDONE_L5;


        var isoLayoutAndLevelling_ESTD = materlID.ISO_Layout_Levelling_QTD > 0 ? 1 : 0;
        var isoExcavation_ESTD = Math.ceil(materlID.ISO_Excavation_QTD * ISOExcavation_Factor);
        var isoReinforcement_ESTD = Math.ceil(materlID.ISO_Reinforcement_QTD * ISOReinforcement_Factor);
        var isoPCC_ESTD = Math.ceil(materlID.ISO_PCC_QTD * ISOPCC_Factor);
        var isoFootingRCC_ESTD = Math.ceil(materlID.ISO_Footing_RCC_QTD * ISOFootingRCC_Factor);
        var isoPedestalRCC_ESTD = Math.ceil(materlID.ISO_Pedestal_RCC_QTD * ISOPedestalRCC_Factor);
        var isoWaterproofing_ESTD = Math.ceil(materlID.ISO_Waterproofing_QTD * ISOWaterproofing_Factor);
        var isoBackfillingWork_ESTD = Math.ceil(materlID.ISO_Backfilling_Work_QTD * ISOBackfillingWork_Factor);





        // Pile Footing


        var PILELayoutLevelling_Factor = 1;
        var PILEReinforcement_Factor = ISOReinforcement_Factor;
        var PILEExcavation_Factor = ISOExcavation_Factor;
        var PILERCC_Factor = (QUANTITIESDONE_G5 === 1 ? 0.04 : (QUANTITIESDONE_G5 === 2 ? 0.02 : 0)) / QUANTITIESDONE_L5;


        var pileLayoutAndLevelling_ESTD = materlID.PILE_Layout_Levelling_QTD > 0 ? 1 : 0;
        var pileReinforcement_ESTD = Math.ceil(materlID.PILE_Reinforcement_QTD * PILEReinforcement_Factor);
        var pileExcavation_ESTD = Math.ceil(materlID.PILE_Excavation_QTD * PILEExcavation_Factor);
        var pileRCC_ESTD = Math.ceil(materlID.PILE_RCC_QTD * PILERCC_Factor);








        // Raft Footing



        var RAFTLayoutLevelling_Factor = 1;
        var RAFTExcavation_Factor = ISOExcavation_Factor;
        var RAFTFilling_Factor = ISOBackfillingWork_Factor;
        var RAFTSewageLine_Factor = 0.061 / QUANTITIESDONE_L5;
        var RAFTPCC_Factor = ISOPCC_Factor;
        var RAFTReinforcement_Factor = PILEReinforcement_Factor;
        var RAFTRCC_Factor = (QUANTITIESDONE_G5 === 1 ? 0.04 : (QUANTITIESDONE_G5 === 2 ? 0.02 : 0)) / QUANTITIESDONE_L5;
        var RAFTWaterproofing_Factor = ISOWaterproofing_Factor;


        var raftLayoutAndLevelling_ESTD = materlID.RAFT_Layout_Levelling_QTD > 0 ? 1 : 0;
        var raftExcavation_ESTD = Math.ceil(materlID.RAFT_Excavation_QTD * RAFTExcavation_Factor);
        var raftFilling_ESTD = Math.ceil(materlID.RAFT_Filling_QTD * RAFTFilling_Factor);
        var raftSewageLine_ESTD = Math.ceil(materlID.RAFT_Sewage_Line_QTD * RAFTSewageLine_Factor);
        var raftPCC_ESTD = Math.ceil(materlID.RAFT_PCC_QTD * RAFTPCC_Factor);
        var raftReinforcement_ESTD = Math.ceil(materlID.RAFT_Reinforcement_QTD * RAFTReinforcement_Factor);
        var raftRCC_ESTD = Math.ceil(materlID.RAFT_RCC_QTD * RAFTRCC_Factor);
        var raftWaterproofing_ESTD = Math.ceil(materlID.RAFT_Waterproofing_QTD * RAFTWaterproofing_Factor);





        // // Plinth Work - Case - 01


        // var FillingUpToPlinthBottom_Factor = 0.036 / QUANTITIESDONE_L5;
        // var PCCBelowBeam_Factor = RAFTPCC_Factor;
        // var BrickWorkAlongThePlinth_Factor = 0.04 / QUANTITIESDONE_L5;
        // var FillingWorkInGaps_Factor = ISOBackfillingWork_Factor;
        // var ReinforcementWork_Factor = RAFTReinforcement_Factor;
        // var SewageLineWork_Factor = 0.061 / QUANTITIESDONE_L5;
        var AntiTermiteWork_Factor = 0.333 / QUANTITIESDONE_L5;
        // var PCCAbove_Factor = RAFTPCC_Factor;
        // var GradeSlabReinforcement_Factor = RAFTReinforcement_Factor;
        // var GradeSlabPlinthRCCWork_Factor = (QUANTITIESDONE_G5 === 1 ? 0.04 : (QUANTITIESDONE_G5 === 2 ? 0.02 : 0)) / QUANTITIESDONE_L5;



        // var fillingUpToPlinthBottom_ESTD = Math.ceil(Filling_up_to_Plinth_Bottom_QTD * FillingUpToPlinthBottom_Factor);
        // var pccBelowBeam_ESTD = Math.ceil(PCC_Below_Beam_QTD * PCCBelowBeam_Factor);
        // var brickWorkAlongThePlinth_ESTD = Math.ceil(Brick_Work_along_the_Plinth_QTD * BrickWorkAlongThePlinth_Factor);
        // var fillingWorkInGaps_ESTD = Math.ceil(Filling_Work_in_Gaps_QTD * FillingWorkInGaps_Factor);
        // var reinforcementWork_ESTD = Math.ceil(Reinforcement_Work_QTD * ReinforcementWork_Factor);
        // var sewageLineWork_ESTD = Math.ceil(Sewage_Line_Work_QTD * SewageLineWork_Factor);
        // var antiTermiteWork_ESTD = Anti_Termite_Work_QTD > 0 ? 1 : 0;
        // var pccAbove_ESTD = Math.ceil(PCC_Above_QTD * PCCAbove_Factor);
        // var gradeSlabReinforcement_ESTD = Math.ceil(Grade_Slab_Reinforcement_QTD * GradeSlabReinforcement_Factor);
        // var gradeSlabAndPlinthRCCWork_ESTD = Math.ceil(Grade_Slab_Plinth_RCC_Work_QTD * GradeSlabPlinthRCCWork_Factor);


        // Plinth Work - Case - 02



        var ShutteringBottom_Factor = 0.013 / QUANTITIESDONE_L5;
        var ReinforcementWork_Factor = RAFTReinforcement_Factor;
        var ShutteringSide_Factor = ShutteringBottom_Factor;
        var RCC_Factor = (QUANTITIESDONE_G5 === 1 ? 0.04 : (QUANTITIESDONE_G5 === 2 ? 0.02 : 0)) / QUANTITIESDONE_L5;
        var FillingWork_Factor = ISOBackfillingWork_Factor;
        var SewageLineWork_Factor = 0.061 / QUANTITIESDONE_L5;
        var AntiTermiteWork_Factor = AntiTermiteWork_Factor;
        var GradeSlabReinforcementWork_Factor = RAFTReinforcement_Factor;
        var GradeSlabRCCWork_Factor = (QUANTITIESDONE_G5 === 1 ? 0.04 : (QUANTITIESDONE_G5 === 2 ? 0.02 : 0)) / QUANTITIESDONE_L5;


        var shutteringBottom_ESTD = Math.ceil(materlID.Shuttering_Bottom_QTD * ShutteringBottom_Factor);
        var reinforcementWork_ESTD = Math.ceil(materlID.Reinforcement_Work_QTD * ReinforcementWork_Factor);
        var shutteringSide_ESTD = Math.ceil(materlID.Shuttering_Side_QTD * ShutteringSide_Factor);
        var rcc_ESTD = Math.ceil(materlID.RCC_QTD * RCC_Factor);
        var fillingWork_ESTD = Math.ceil(materlID.Filling_Work_QTD * FillingWork_Factor);
        var sewageLineWork_ESTD = Math.ceil(materlID.Sewage_Line_Work_QTD * SewageLineWork_Factor);
        var antiTermiteWork_ESTD = materlID.Anti_Termite_Work_QTD > 0 ? 1 : 0;
        var gradeSlabReinforcementWork_ESTD = Math.ceil(materlID.Grade_Slab_Reinforcement_Work_QTD * GradeSlabReinforcementWork_Factor);
        var gradeSlabRCCWork_ESTD = Math.ceil(materlID.Grade_Slab_RCC_Work_QTD * GradeSlabRCCWork_Factor);




        // Ground Floor 



        var GFColumnReinforcement_Factor = 0.002 / QUANTITIESDONE_L5;
        var GFRCCColumn_Factor = 0.04 / QUANTITIESDONE_L5;
        var GFBrickWork_Factor = 0.333 / QUANTITIESDONE_L5;
        var GFSlabShuttering_Factor = 0.037 / QUANTITIESDONE_L5;
        var GFSlabReinforcement_Factor = 0.002 / QUANTITIESDONE_L5;
        var GFSlabElectricalConducting_Factor = 1;
        var GFRCCSlab_Factor = (QUANTITIESDONE_G5 === 1 ? 0.04 : (QUANTITIESDONE_G5 === 2 ? 0.02 : 0)) / QUANTITIESDONE_L5;



        var gfColumnReinforcement_ESTD = Math.ceil(materlID.GF_Column_Reinforcement_QTD * GFColumnReinforcement_Factor);
        var gfRCCColumn_ESTD = Math.ceil(materlID.GF_RCC_Column_QTD * GFRCCColumn_Factor);
        var gfBrickWork_ESTD = Math.ceil(materlID.GF_Brick_Work_QTD * GFBrickWork_Factor);
        var gfSlabShuttering_ESTD = Math.ceil(materlID.GF_Slab_Shuttering_QTD * GFSlabShuttering_Factor);
        var gfSlabReinforcement_ESTD = Math.ceil(materlID.GF_Slab_Reinforcement_QTD * GFSlabReinforcement_Factor);
        // var gfSlabElectricalConducting_ESTD = materlID.GF_Slab_Electrical_Conducting_QTD > 0 ? 1 : 0;
        var gfRCCSlab_ESTD = Math.ceil(materlID.GF_RCC_Slab_QTD * GFRCCSlab_Factor);







        // First Floor 




        var FFColumnReinforcement_Factor = 0.002 / QUANTITIESDONE_L5;
        var FFRCCColumn_Factor = 0.04 / QUANTITIESDONE_L5;
        var FFBrickWork_Factor = 0.333 / QUANTITIESDONE_L5;
        var FFSlabShuttering_Factor = 0.037 / QUANTITIESDONE_L5;
        var FFSlabReinforcement_Factor = 0.002 / QUANTITIESDONE_L5;
        var FFSlabElectricalConducting_Factor = 1;
        var FFRCCSlab_Factor = (QUANTITIESDONE_G5 === 1 ? 0.04 : (QUANTITIESDONE_G5 === 2 ? 0.02 : 0)) / QUANTITIESDONE_L5;



        var FfColumnReinforcement_ESTD = Math.ceil(materlID.FF_Column_Reinforcement_QTD * FFColumnReinforcement_Factor);
        var FfRCCColumn_ESTD = Math.ceil(materlID.FF_RCC_Column_QTD * FFRCCColumn_Factor);
        var FfBrickWork_ESTD = Math.ceil(materlID.FF_Brick_Work_QTD * FFBrickWork_Factor);
        var FfSlabShuttering_ESTD = Math.ceil(materlID.FF_Slab_Shuttering_QTD * FFSlabShuttering_Factor);
        var FfSlabReinforcement_ESTD = Math.ceil(materlID.FF_Slab_Reinforcement_QTD * FFSlabReinforcement_Factor);
        // var FfSlabElectricalConducting_ESTD = materlID.FF_Slab_Electrical_Conducting_QTD > 0 ? 1 : 0;
        var FfRCCSlab_ESTD = Math.ceil(materlID.FF_RCC_Slab_QTD * FFRCCSlab_Factor);







        // Second Floor




        var SFColumnReinforcement_Factor = 0.002 / QUANTITIESDONE_L5;
        var SFRCCColumn_Factor = 0.04 / QUANTITIESDONE_L5;
        var SFBrickWork_Factor = 0.333 / QUANTITIESDONE_L5;
        var SFSlabShuttering_Factor = 0.037 / QUANTITIESDONE_L5;
        var SFSlabReinforcement_Factor = 0.002 / QUANTITIESDONE_L5;
        var SFSlabElectricalConducting_Factor = 1;
        var SFRCCSlab_Factor = (QUANTITIESDONE_G5 === 1 ? 0.04 : (QUANTITIESDONE_G5 === 2 ? 0.02 : 0)) / QUANTITIESDONE_L5;



        var SfColumnReinforcement_ESTD = Math.ceil(materlID.SF_Column_Reinforcement_QTD * SFColumnReinforcement_Factor);
        var SfRCCColumn_ESTD = Math.ceil(materlID.SF_RCC_Column_QTD * SFRCCColumn_Factor);
        var SfBrickWork_ESTD = Math.ceil(materlID.SF_Brick_Work_QTD * SFBrickWork_Factor);
        var SfSlabShuttering_ESTD = Math.ceil(materlID.SF_Slab_Shuttering_QTD * SFSlabShuttering_Factor);
        var SfSlabReinforcement_ESTD = Math.ceil(materlID.SF_Slab_Reinforcement_QTD * SFSlabReinforcement_Factor);
        // var SfSlabElectricalConducting_ESTD = materlID.SF_Slab_Electrical_Conducting_QTD > 0 ? 1 : 0;
        var SfRCCSlab_ESTD = Math.ceil(materlID.SF_RCC_Slab_QTD * SFRCCSlab_Factor);





        // Third Floor 



        var TFColumnReinforcement_Factor = 0.002 / QUANTITIESDONE_L5;
        var TFRCCColumn_Factor = 0.04 / QUANTITIESDONE_L5;
        var TFBrickWork_Factor = 0.333 / QUANTITIESDONE_L5;
        var TFSlabShuttering_Factor = 0.037 / QUANTITIESDONE_L5;
        var TFSlabReinforcement_Factor = 0.002 / QUANTITIESDONE_L5;
        var TFSlabElectricalConducting_Factor = 1;
        var TFRCCSlab_Factor = (QUANTITIESDONE_G5 === 1 ? 0.04 : (QUANTITIESDONE_G5 === 2 ? 0.02 : 0)) / QUANTITIESDONE_L5;



        var TfColumnReinforcement_ESTD = Math.ceil(materlID.TF_Column_Reinforcement_QTD * TFColumnReinforcement_Factor);
        var TfRCCColumn_ESTD = Math.ceil(materlID.TF_RCC_Column_QTD * TFRCCColumn_Factor);
        var TfBrickWork_ESTD = Math.ceil(materlID.TF_Brick_Work_QTD * TFBrickWork_Factor);
        var TfSlabShuttering_ESTD = Math.ceil(materlID.TF_Slab_Shuttering_QTD * TFSlabShuttering_Factor);
        var TfSlabReinforcement_ESTD = Math.ceil(materlID.TF_Slab_Reinforcement_QTD * TFSlabReinforcement_Factor);
        // var TfSlabElectricalConducting_ESTD = materlID.TF_Slab_Electrical_Conducting_QTD > 0 ? 1 : 0;
        var TfRCCSlab_ESTD = Math.ceil(materlID.TF_RCC_Slab_QTD * TFRCCSlab_Factor);





        // Fourth Floor



        var FoFColumnReinforcement_Factor = 0.002 / QUANTITIESDONE_L5;
        var FoFRCCColumn_Factor = 0.04 / QUANTITIESDONE_L5;
        var FoFBrickWork_Factor = 0.333 / QUANTITIESDONE_L5;
        var FoFSlabShuttering_Factor = 0.037 / QUANTITIESDONE_L5;
        var FoFSlabReinforcement_Factor = 0.002 / QUANTITIESDONE_L5;
        var FoFSlabElectricalConducting_Factor = 1;
        var FoFRCCSlab_Factor = (QUANTITIESDONE_G5 === 1 ? 0.04 : (QUANTITIESDONE_G5 === 2 ? 0.02 : 0)) / QUANTITIESDONE_L5;



        var FofColumnReinforcement_ESTD = Math.ceil(materlID.FoF_Column_Reinforcement_QTD * FoFColumnReinforcement_Factor);
        var FofRCCColumn_ESTD = Math.ceil(materlID.FoF_RCC_Column_QTD * FoFRCCColumn_Factor);
        var FofBrickWork_ESTD = Math.ceil(materlID.FoF_Brick_Work_QTD * FoFBrickWork_Factor);
        var FofSlabShuttering_ESTD = Math.ceil(materlID.FoF_Slab_Shuttering_QTD * FoFSlabShuttering_Factor);
        var FofSlabReinforcement_ESTD = Math.ceil(materlID.FoF_Slab_Reinforcement_QTD * FoFSlabReinforcement_Factor);
        // var FofSlabElectricalConducting_ESTD = materlID.FoF_Slab_Electrical_Conducting_QTD > 0 ? 1 : 0;
        var FofRCCSlab_ESTD = Math.ceil(materlID.FoF_RCC_Slab_QTD * FoFRCCSlab_Factor);








        // Tower Floor 



        var TowerColumnReinforcement_Factor = 0.002 / QUANTITIESDONE_L5;
        var TowerRCCColumn_Factor = 0.04 / QUANTITIESDONE_L5;
        var TowerBrickWork_Factor = 0.333 / QUANTITIESDONE_L5;
        var TowerSlabShuttering_Factor = 0.037 / QUANTITIESDONE_L5;
        var TowerSlabReinforcement_Factor = 0.002 / QUANTITIESDONE_L5;
        var TowerSlabElectricalConducting_Factor = 1;
        var TowerRCCSlab_Factor = (QUANTITIESDONE_G5 === 1 ? 0.04 : (QUANTITIESDONE_G5 === 2 ? 0.02 : 0)) / QUANTITIESDONE_L5;



        var TowerColumnReinforcement_ESTD = Math.ceil(materlID.Tower_Column_Reinforcement_QTD * TowerColumnReinforcement_Factor);
        var TowerRCCColumn_ESTD = Math.ceil(materlID.Tower_RCC_Column_QTD * TowerRCCColumn_Factor);
        var TowerBrickWork_ESTD = Math.ceil(materlID.Tower_Brick_Work_QTD * TowerBrickWork_Factor);
        var TowerSlabShuttering_ESTD = Math.ceil(materlID.Tower_Slab_Shuttering_QTD * TowerSlabShuttering_Factor);
        var TowerSlabReinforcement_ESTD = Math.ceil(materlID.Tower_Slab_Reinforcement_QTD * TowerSlabReinforcement_Factor);
        // var TowerSlabElectricalConducting_ESTD = materlID.Tower_Slab_Electrical_Conducting_QTD > 0 ? 1 : 0;
        var TowerRCCSlab_ESTD = Math.ceil(materlID.Tower_RCC_Slab_QTD * TowerRCCSlab_Factor);






        // Brick Work


        var DoorWindowWoodenMSFrame_Factor = 0.667 / QUANTITIESDONE_L5;
        var B1BrickWork_Factor = 0.467 / QUANTITIESDONE_L5;
        var B2BrickWork_Factor = 0.467 / QUANTITIESDONE_L5;
        var B3BrickWork_Factor = 0.467 / QUANTITIESDONE_L5;
        var B4BrickWork_Factor = 0.467 / QUANTITIESDONE_L5;
        var GFBrickWork_Factor = 0.467 / QUANTITIESDONE_L5;
        var FFBrickWork_Factor = 0.467 / QUANTITIESDONE_L5;
        var SFBrickWork_Factor = 0.467 / QUANTITIESDONE_L5;
        var TFBrickWork_Factor = 0.467 / QUANTITIESDONE_L5;
        var FoFBrickWork_Factor = 0.467 / QUANTITIESDONE_L5;
        var TowerBrickWork_Factor = 0.467 / QUANTITIESDONE_L5;



        // var doorAndWindowWoodenMSFrame_ESTD = Math.ceil(Door_and_Window_Frame_QTD * DoorWindowWoodenMSFrame_Factor);
        var b1BrickWork_ESTD = Math.ceil(materlID.B1_Brick_Work_QTD * B1BrickWork_Factor);
        var b2BrickWork_ESTD = Math.ceil(materlID.B2_Brick_Work_QTD * B2BrickWork_Factor);
        var b3BrickWork_ESTD = Math.ceil(materlID.B3_Brick_Work_QTD * B3BrickWork_Factor);
        var b4BrickWork_ESTD = Math.ceil(materlID.B4_Brick_Work_QTD * B4BrickWork_Factor);
        var Real_gfBrickWork_ESTD = Math.ceil(materlID.GF_Brick_Work_QTD * GFBrickWork_Factor);
        var ffBrickWork_ESTD = Math.ceil(materlID.FF_Brick_Work_QTD * FFBrickWork_Factor);
        var sfBrickWork_ESTD = Math.ceil(materlID.SF_Brick_Work_QTD * SFBrickWork_Factor);
        var tfBrickWork_ESTD = Math.ceil(materlID.TF_Brick_Work_QTD * TFBrickWork_Factor);
        var fofBrickWork_ESTD = Math.ceil(materlID.FoF_Brick_Work_QTD * FoFBrickWork_Factor);
        var towerBrickWork_ESTD = Math.ceil(materlID.Tower_Brick_Work_QTD * TowerBrickWork_Factor);







        // Electrical Wall Conditing


        var B1ElectricalConducting_Factor = 0.049 / QUANTITIESDONE_L5;
        var B2ElectricalConducting_Factor = 0.049 / QUANTITIESDONE_L5;
        var B3ElectricalConducting_Factor = 0.049 / QUANTITIESDONE_L5;
        var B4ElectricalConducting_Factor = 0.049 / QUANTITIESDONE_L5;
        var GFElectricalConducting_Factor = 0.049 / QUANTITIESDONE_L5;
        var FFElectricalConducting_Factor = 0.049 / QUANTITIESDONE_L5;
        var SFElectricalConducting_Factor = 0.049 / QUANTITIESDONE_L5;
        var TFElectricalConducting_Factor = 0.049 / QUANTITIESDONE_L5;
        var FoFElectricalConducting_Factor = 0.049 / QUANTITIESDONE_L5;
        var TowerElectricalConducting_Factor = 0.049 / QUANTITIESDONE_L5;


        var b1ElectricalConduiting_ESTD = Math.ceil(materlID.B1_Electrical_Conducting_QTD * B1ElectricalConducting_Factor);
        var b2ElectricalConduiting_ESTD = Math.ceil(materlID.B2_Electrical_Conducting_QTD * B2ElectricalConducting_Factor);
        var b3ElectricalConduiting_ESTD = Math.ceil(materlID.B3_Electrical_Conducting_QTD * B3ElectricalConducting_Factor);
        var b4ElectricalConduiting_ESTD = Math.ceil(materlID.B4_Electrical_Conducting_QTD * B4ElectricalConducting_Factor);
        var gfElectricalConduiting_ESTD = Math.ceil(materlID.GF_Electrical_Conducting_QTD * GFElectricalConducting_Factor);
        var ffElectricalConduiting_ESTD = Math.ceil(materlID.FF_Electrical_Conducting_QTD * FFElectricalConducting_Factor);
        var sfElectricalConduiting_ESTD = Math.ceil(materlID.SF_Electrical_Conducting_QTD * SFElectricalConducting_Factor);
        var tfElectricalConduiting_ESTD = Math.ceil(materlID.TF_Electrical_Conducting_QTD * TFElectricalConducting_Factor);
        var fofElectricalConduiting_ESTD = Math.ceil(materlID.FoF_Electrical_Conducting_QTD * FoFElectricalConducting_Factor);
        var towerElectricalConduiting_ESTD = Math.ceil(materlID.Tower_Electrical_Conducting_QTD * TowerElectricalConducting_Factor);








        // Plumbing 




        // var B1PipeWorkBelowFloorLevel_Factor = 0.019 / QUANTITIESDONE_L5;
        // var B1SunkenFillingCOBAWaste_Factor = 0.058 / QUANTITIESDONE_L5;
        // var B1WallConductingInternalFittings_Factor = 0.022 / QUANTITIESDONE_L5;
        // var B1Waterproofing_Factor = 0.044 / QUANTITIESDONE_L5;



        // var b1PipeWorkBelowFloorLevel_ESTD = Math.ceil(B1_Pipe_Work_Below_Floor_Level_QTD * B1PipeWorkBelowFloorLevel_Factor);
        // var b1SunkenFillingCOBAWaste_ESTD = Math.ceil(B1_Sunken_Filling_COBA_Waste_QTD * B1SunkenFillingCOBAWaste_Factor);
        // var b1WallConduitingInternalFittings_ESTD = Math.ceil(B1_Wall_Conducting_Internal_Fittings_QTD * B1WallConductingInternalFittings_Factor);
        // var b1Waterproofing_ESTD = Math.ceil(B1_Waterproofing_QTD * B1Waterproofing_Factor);




        // var B2PipeWorkBelowFloorLevel_Factor = 0.019 / QUANTITIESDONE_L5;
        // var B2SunkenFillingCOBAWaste_Factor = 0.058 / QUANTITIESDONE_L5;
        // var B2WallConductingInternalFittings_Factor = 0.022 / QUANTITIESDONE_L5;
        // var B2Waterproofing_Factor = 0.044 / QUANTITIESDONE_L5;



        // var b2PipeWorkBelowFloorLevel_ESTD = Math.ceil(B2_Pipe_Work_Below_Floor_Level_QTD * B2PipeWorkBelowFloorLevel_Factor);
        // var b2SunkenFillingCOBAWaste_ESTD = Math.ceil(B2_Sunken_Filling_COBA_Waste_QTD * B2SunkenFillingCOBAWaste_Factor);
        // var b2WallConduitingInternalFittings_ESTD = Math.ceil(B2_Wall_Conducting_Internal_Fittings_QTD * B2WallConductingInternalFittings_Factor);
        // var b2Waterproofing_ESTD = Math.ceil(B2_Waterproofing_QTD * B2Waterproofing_Factor);




        // var B3PipeWorkBelowFloorLevel_Factor = 0.019 / QUANTITIESDONE_L5;
        // var B3SunkenFillingCOBAWaste_Factor = 0.058 / QUANTITIESDONE_L5;
        // var B3WallConductingInternalFittings_Factor = 0.022 / QUANTITIESDONE_L5;
        // var B3Waterproofing_Factor = 0.044 / QUANTITIESDONE_L5;



        // var b3PipeWorkBelowFloorLevel_ESTD = Math.ceil(B3_Pipe_Work_Below_Floor_Level_QTD * B3PipeWorkBelowFloorLevel_Factor);
        // var b3SunkenFillingCOBAWaste_ESTD = Math.ceil(B3_Sunken_Filling_COBA_Waste_QTD * B3SunkenFillingCOBAWaste_Factor);
        // var b3WallConduitingInternalFittings_ESTD = Math.ceil(B3_Wall_Conducting_Internal_Fittings_QTD * B3WallConductingInternalFittings_Factor);
        // var b3Waterproofing_ESTD = Math.ceil(B3_Waterproofing_QTD * B3Waterproofing_Factor);





        // var B4PipeWorkBelowFloorLevel_Factor = 0.019 / QUANTITIESDONE_L5;
        // var B4SunkenFillingCOBAWaste_Factor = 0.058 / QUANTITIESDONE_L5;
        // var B4WallConductingInternalFittings_Factor = 0.022 / QUANTITIESDONE_L5;
        // var B4Waterproofing_Factor = 0.044 / QUANTITIESDONE_L5;



        // var b4PipeWorkBelowFloorLevel_ESTD = Math.ceil(B4_Pipe_Work_Below_Floor_Level_QTD * B4PipeWorkBelowFloorLevel_Factor);
        // var b4SunkenFillingCOBAWaste_ESTD = Math.ceil(B4_Sunken_Filling_COBA_Waste_QTD * B4SunkenFillingCOBAWaste_Factor);
        // var b4WallConduitingInternalFittings_ESTD = Math.ceil(B4_Wall_Conducting_Internal_Fittings_QTD * B4WallConductingInternalFittings_Factor);
        // var b4Waterproofing_ESTD = Math.ceil(B4_Waterproofing_QTD * B4Waterproofing_Factor);







        var GFPipeWorkBelowFloorLevel_Factor = 0.019 / QUANTITIESDONE_L5;
        var GFSunkenFillingCOBAWaste_Factor = 0.058 / QUANTITIESDONE_L5;
        var GFWallConductingInternalFittings_Factor = 0.022 / QUANTITIESDONE_L5;
        var GFWaterproofing_Factor = 0.044 / QUANTITIESDONE_L5;



        var GFPipeWorkBelowFloorLevel_ESTD = Math.ceil(materlID.GF_Pipe_Work_Below_Floor_Level_QTD * GFPipeWorkBelowFloorLevel_Factor);
        var GFSunkenFillingCOBAWaste_ESTD = Math.ceil(materlID.GF_Sunken_Filling_COBA_Waste_QTD * GFSunkenFillingCOBAWaste_Factor);
        // var GFWallConduitingInternalFittings_ESTD = Math.ceil(materlID.GF_Wall_Conducting_Internal_Fittings_QTD * GFWallConductingInternalFittings_Factor);
        var GFWaterproofing_ESTD = Math.ceil(materlID.GF_Waterproofing_QTD * GFWaterproofing_Factor);








        var FFPipeWorkBelowFloorLevel_Factor = 0.019 / QUANTITIESDONE_L5;
        var FFSunkenFillingCOBAWaste_Factor = 0.058 / QUANTITIESDONE_L5;
        var FFWallConductingInternalFittings_Factor = 0.022 / QUANTITIESDONE_L5;
        var FFWaterproofing_Factor = 0.044 / QUANTITIESDONE_L5;



        var FFPipeWorkBelowFloorLevel_ESTD = Math.ceil(materlID.FF_Pipe_Work_Below_Floor_Level_QTD * FFPipeWorkBelowFloorLevel_Factor);
        var FFSunkenFillingCOBAWaste_ESTD = Math.ceil(materlID.FF_Sunken_Filling_COBA_Waste_QTD * FFSunkenFillingCOBAWaste_Factor);
        // var FFWallConduitingInternalFittings_ESTD = Math.ceil(materlID.FF_Wall_Conducting_Internal_Fittings_QTD * FFWallConductingInternalFittings_Factor);
        var FFWaterproofing_ESTD = Math.ceil(materlID.FF_Waterproofing_QTD * FFWaterproofing_Factor);







        var SFPipeWorkBelowFloorLevel_Factor = 0.019 / QUANTITIESDONE_L5;
        var SFSunkenFillingCOBAWaste_Factor = 0.058 / QUANTITIESDONE_L5;
        var SFWallConductingInternalFittings_Factor = 0.022 / QUANTITIESDONE_L5;
        var SFWaterproofing_Factor = 0.044 / QUANTITIESDONE_L5;



        var SFPipeWorkBelowFloorLevel_ESTD = Math.ceil(materlID.SF_Pipe_Work_Below_Floor_Level_QTD * SFPipeWorkBelowFloorLevel_Factor);
        var SFSunkenFillingCOBAWaste_ESTD = Math.ceil(materlID.SF_Sunken_Filling_COBA_Waste_QTD * SFSunkenFillingCOBAWaste_Factor);
        // var SFWallConduitingInternalFittings_ESTD = Math.ceil(materlID.SF_Wall_Conducting_Internal_Fittings_QTD * SFWallConductingInternalFittings_Factor);
        var SFWaterproofing_ESTD = Math.ceil(materlID.SF_Waterproofing_QTD * SFWaterproofing_Factor);





        var TFPipeWorkBelowFloorLevel_Factor = 0.019 / QUANTITIESDONE_L5;
        var TFSunkenFillingCOBAWaste_Factor = 0.058 / QUANTITIESDONE_L5;
        var TFWallConductingInternalFittings_Factor = 0.022 / QUANTITIESDONE_L5;
        var TFWaterproofing_Factor = 0.044 / QUANTITIESDONE_L5;



        var TFPipeWorkBelowFloorLevel_ESTD = Math.ceil(materlID.TF_Pipe_Work_Below_Floor_Level_QTD * TFPipeWorkBelowFloorLevel_Factor);
        var TFSunkenFillingCOBAWaste_ESTD = Math.ceil(materlID.TF_Sunken_Filling_COBA_Waste_QTD * TFSunkenFillingCOBAWaste_Factor);
        // var TFWallConduitingInternalFittings_ESTD = Math.ceil(materlID.TF_Wall_Conducting_Internal_Fittings_QTD * TFWallConductingInternalFittings_Factor);
        var TFWaterproofing_ESTD = Math.ceil(materlID.TF_Waterproofing_QTD * TFWaterproofing_Factor);






        var FoFPipeWorkBelowFloorLevel_Factor = 0.019 / QUANTITIESDONE_L5;
        var FoFSunkenFillingCOBAWaste_Factor = 0.058 / QUANTITIESDONE_L5;
        var FoFWallConductingInternalFittings_Factor = 0.022 / QUANTITIESDONE_L5;
        var FoFWaterproofing_Factor = 0.044 / QUANTITIESDONE_L5;



        var FoFPipeWorkBelowFloorLevel_ESTD = Math.ceil(materlID.FoF_Pipe_Work_Below_Floor_Level_QTD * FoFPipeWorkBelowFloorLevel_Factor);
        var FoFSunkenFillingCOBAWaste_ESTD = Math.ceil(materlID.FoF_Sunken_Filling_COBA_Waste_QTD * FoFSunkenFillingCOBAWaste_Factor);
        // var FoFWallConduitingInternalFittings_ESTD = Math.ceil(materlID.FoF_Wall_Conducting_Internal_Fittings_QTD * FoFWallConductingInternalFittings_Factor);
        var FoFWaterproofing_ESTD = Math.ceil(materlID.FoF_Waterproofing_QTD * FoFWaterproofing_Factor);






        var TowerPipeWorkBelowFloorLevel_Factor = 0.019 / QUANTITIESDONE_L5;
        var TowerSunkenFillingCOBAWaste_Factor = 0.058 / QUANTITIESDONE_L5;
        var TowerWallConductingInternalFittings_Factor = 0.022 / QUANTITIESDONE_L5;
        var TowerWaterproofing_Factor = 0.044 / QUANTITIESDONE_L5;



        var TowerPipeWorkBelowFloorLevel_ESTD = Math.ceil(materlID.Tower_Pipe_Work_Below_Floor_Level_QTD * TowerPipeWorkBelowFloorLevel_Factor);
        var TowerSunkenFillingCOBAWaste_ESTD = Math.ceil(materlID.Tower_Sunken_Filling_COBA_Waste_QTD * TowerSunkenFillingCOBAWaste_Factor);
        // var TowerWallConduitingInternalFittings_ESTD = Math.ceil(materlID.Tower_Wall_Conducting_Internal_Fittings_QTD * TowerWallConductingInternalFittings_Factor);
        var TowerWaterproofing_ESTD = Math.ceil(materlID.Tower_Waterproofing_QTD * TowerWaterproofing_Factor);





        var RainWaterHarvesting_Factor = 0.032 / QUANTITIESDONE_L5;
        var AC_Factor = 0.022 / QUANTITIESDONE_L5;
        var ReverseLine_Factor = 0.022 / QUANTITIESDONE_L5;
        var SeparateIndividualLinePerFloor_Factor = 0.022 / QUANTITIESDONE_L5;
        var WaterTank_Factor = 1 / QUANTITIESDONE_L5;
        var SolarHeaterGeyserLine_Factor = 0.022 / QUANTITIESDONE_L5;


        // var rainWaterHarvesting_ESTD = Math.ceil(Rain_Water_Harvesting_QTD * RainWaterHarvesting_Factor);
        var ac_ESTD = Math.ceil(materlID.AC_QTD * AC_Factor);
        // var reverseLine_ESTD = Math.ceil(Reverse_Line_QTD * ReverseLine_Factor);
        // var separateIndividualLinePerFloor_ESTD = Math.ceil(Separate_Individual_Line_Per_Floor_QTD * SeparateIndividualLinePerFloor_Factor);
        // var waterTank_ESTD = Math.ceil(Water_Tank_QTD * WaterTank_Factor);
        // var solarHeaterGeyserLine_ESTD = Math.ceil(Solar_Heater_Geyser_Line_QTD * SolarHeaterGeyserLine_Factor);





        // Plaster




        var B1PlasterWork_Factor = 0.011 / QUANTITIESDONE_L5;
        var B2PlasterWork_Factor = 0.011 / QUANTITIESDONE_L5;
        var B3PlasterWork_Factor = 0.011 / QUANTITIESDONE_L5;
        var B4PlasterWork_Factor = 0.011 / QUANTITIESDONE_L5;
        var GFPlasterWork_Factor = 0.011 / QUANTITIESDONE_L5;
        var FFPlasterWork_Factor = 0.011 / QUANTITIESDONE_L5;
        var SFPlasterWork_Factor = 0.011 / QUANTITIESDONE_L5;
        var TFPlasterWork_Factor = 0.011 / QUANTITIESDONE_L5;
        var FoFPlasterWork_Factor = 0.011 / QUANTITIESDONE_L5;
        var TowerPlasterWork_Factor = 0.011 / QUANTITIESDONE_L5;

        var ceilingPlaster_Factor = 0.011 / QUANTITIESDONE_L5;
        var nonElevationSide_Factor = 0.015 / QUANTITIESDONE_L5;
        var weatherBoard_Factor = 0.105 / QUANTITIESDONE_L5;
        var elevationSide_Factor = 0.02 / QUANTITIESDONE_L5;
        var punning_Factor = 0.04 / QUANTITIESDONE_L5;



        var b1PlasterWork_ESTD = Math.ceil(materlID.B1_Plaster_Work_QTD * B1PlasterWork_Factor);
        var b2PlasterWork_ESTD = Math.ceil(materlID.B2_Plaster_Work_QTD * B2PlasterWork_Factor);
        var b3PlasterWork_ESTD = Math.ceil(materlID.B3_Plaster_Work_QTD * B3PlasterWork_Factor);
        var b4PlasterWork_ESTD = Math.ceil(materlID.B4_Plaster_Work_QTD * B4PlasterWork_Factor);
        var gfPlasterWork_ESTD = Math.ceil(materlID.GF_Plaster_Work_QTD * GFPlasterWork_Factor);
        var ffPlasterWork_ESTD = Math.ceil(materlID.FF_Plaster_Work_QTD * FFPlasterWork_Factor);
        var sfPlasterWork_ESTD = Math.ceil(materlID.SF_Plaster_Work_QTD * SFPlasterWork_Factor);
        var tfPlasterWork_ESTD = Math.ceil(materlID.TF_Plaster_Work_QTD * TFPlasterWork_Factor);
        var fofPlasterWork_ESTD = Math.ceil(materlID.FoF_Plaster_Work_QTD * FoFPlasterWork_Factor);
        var towerPlasterWork_ESTD = Math.ceil(materlID.Tower_Plaster_Work_QTD * TowerPlasterWork_Factor);


        var ceilingPlaster_ESTD = materlID.Ceiling_Plaster_QTD === 0 ? 0 : b1PlasterWork_ESTD + b2PlasterWork_ESTD + b3PlasterWork_ESTD + b4PlasterWork_ESTD + gfPlasterWork_ESTD + ffPlasterWork_ESTD + sfPlasterWork_ESTD + tfPlasterWork_ESTD + fofPlasterWork_ESTD + towerPlasterWork_ESTD;
        var nonElevationSide_ESTD = Math.ceil(materlID.Non_Elevation_Side_QTD * nonElevationSide_Factor);
        var weatherBoard_ESTD = Math.ceil(materlID.Weather_Board_QTD * weatherBoard_Factor);
        var elevationSide_ESTD = Math.ceil(materlID.Elevation_Side_QTD * elevationSide_Factor);
        var punning_ESTD = Math.ceil(materlID.Punning_QTD * punning_Factor);







        // Chowkat Work - Wooden | Granite



        var B1ChowkatStone_Factor = 0.067 / QUANTITIESDONE_L5;
        //Anuj
        var B2ChowkatStone_Factor = 0.067 / QUANTITIESDONE_L5;
        var B3ChowkatStone_Factor = 0.067 / QUANTITIESDONE_L5;
        var B4ChowkatStone_Factor = 0.067 / QUANTITIESDONE_L5;
        var GFChowkatStone_Factor = 0.067 / QUANTITIESDONE_L5;
        var FFChowkatStone_Factor = 0.067 / QUANTITIESDONE_L5;
        var SFChowkatStone_Factor = 0.067 / QUANTITIESDONE_L5;
        var TFChowkatStone_Factor = 0.067 / QUANTITIESDONE_L5;
        var FoFChowkatStone_Factor = 0.067 / QUANTITIESDONE_L5;
        var TowerChowkatStone_Factor = 0.067 / QUANTITIESDONE_L5;
        //Anuj
        var ParapetWorkRailingBoundaryWall_Factor = B1ChowkatStone_Factor;
        var GrillMSWork_Factor = 0.01 / QUANTITIESDONE_L5;
        var MainGate_Factor = 0.01 / QUANTITIESDONE_L5;
        var BackSideCover_Factor = 0.01 / QUANTITIESDONE_L5;
        var BackDuctCover_Factor = 0.01 / QUANTITIESDONE_L5;
        var CutOutCover_Factor = 0.01 / QUANTITIESDONE_L5;
        var Elevation_Factor = 0.01 / QUANTITIESDONE_L5;
        var Gazeebo_Factor = 0.01 / QUANTITIESDONE_L5;





        var b1ChowkatStone_ESTD = Math.ceil(materlID.B1_Chowkat_Stone_QTD * B1ChowkatStone_Factor);
        //Anuj
        var b2ChowkatStone_ESTD = Math.ceil(materlID.B2_Chowkat_Stone_QTD * B2ChowkatStone_Factor);
        var b3ChowkatStone_ESTD = Math.ceil(materlID.B3_Chowkat_Stone_QTD * B3ChowkatStone_Factor);
        var b4ChowkatStone_ESTD = Math.ceil(materlID.B4_Chowkat_Stone_QTD * B4ChowkatStone_Factor);
        var gfChowkatStone_ESTD = Math.ceil(materlID.GF_Chowkat_Stone_QTD * GFChowkatStone_Factor);
        var ffChowkatStone_ESTD = Math.ceil(materlID.FF_Chowkat_Stone_QTD * FFChowkatStone_Factor);
        var sfChowkatStone_ESTD = Math.ceil(materlID.SF_Chowkat_Stone_QTD * SFChowkatStone_Factor);
        var tfChowkatStone_ESTD = Math.ceil(materlID.TF_Chowkat_Stone_QTD * TFChowkatStone_Factor);
        var fofChowkatStone_ESTD = Math.ceil(materlID.FoF_Chowkat_Stone_QTD * FoFChowkatStone_Factor);
        var towerChowkatStone_ESTD = Math.ceil(materlID.Tower_Chowkat_Stone_QTD * TowerChowkatStone_Factor);
        //Anuj
        var parapetWorkRailingBoundaryWall_ESTD = Math.ceil(materlID.Parapet_Work_Railing_Boundary_Wall_QTD * ParapetWorkRailingBoundaryWall_Factor);
        var grillMSWork_ESTD = Math.ceil(materlID.Grill_MS_Work_QTD * GrillMSWork_Factor);
        var mainGate_ESTD = Math.ceil(materlID.Main_Gate_QTD * MainGate_Factor);
        var backSideCover_ESTD = Math.ceil(materlID.Back_Side_Cover_QTD * BackSideCover_Factor);
        var backDuctCover_ESTD = Math.ceil(materlID.Back_Duct_Cover_QTD * BackDuctCover_Factor);
        var cutOutCover_ESTD = Math.ceil(materlID.Cut_Out_Cover_QTD * CutOutCover_Factor);
        var elevation_ESTD = Math.ceil(materlID.Elevation_QTD * Elevation_Factor);
        var gazeebo_ESTD = Math.ceil(materlID.Gazeebo_QTD * Gazeebo_Factor);





        //Anuj
        //POP Framing 
        var b1PopFraming_Factor = 0.05 / QUANTITIESDONE_L5;
        var b2PopFraming_Factor = 0.05 / QUANTITIESDONE_L5;
        var b3PopFraming_Factor = 0.05 / QUANTITIESDONE_L5;
        var b4PopFraming_Factor = 0.05 / QUANTITIESDONE_L5;
        var gfPopFraming_Factor = 0.05 / QUANTITIESDONE_L5;
        var ffPopFraming_Factor = 0.05 / QUANTITIESDONE_L5;
        var sfPopFraming_Factor = 0.05 / QUANTITIESDONE_L5;
        var tfPopFraming_Factor = 0.05 / QUANTITIESDONE_L5;
        var fofPopFraming_Factor = 0.05 / QUANTITIESDONE_L5;
        var towerPopFraming_Factor = 0.05 / QUANTITIESDONE_L5;


        var balconyPVC_Factor = 0.05 / QUANTITIESDONE_L5;
        var parkingPVC_Factor = 0.05 / QUANTITIESDONE_L5;
        var washroomPVC_Factor = 0.05 / QUANTITIESDONE_L5;



        var b1PopFraming_ESTD = Math.ceil(materlID.B1_POP_Framing_QTD * b1PopFraming_Factor);
        var b2PopFraming_ESTD = Math.ceil(materlID.B2_POP_Framing_QTD * b2PopFraming_Factor);
        var b3PopFraming_ESTD = Math.ceil(materlID.B3_POP_Framing_QTD * b3PopFraming_Factor);
        var b4PopFraming_ESTD = Math.ceil(materlID.B4_POP_Framing_QTD * b4PopFraming_Factor);
        var gfPopFraming_ESTD = Math.ceil(materlID.GF_POP_Framing_QTD * gfPopFraming_Factor);
        var ffPopFraming_ESTD = Math.ceil(materlID.FF_POP_Framing_QTD * ffPopFraming_Factor);
        var sfPopFraming_ESTD = Math.ceil(materlID.SF_POP_Framing_QTD * sfPopFraming_Factor);
        var tfPopFraming_ESTD = Math.ceil(materlID.TF_POP_Framing_QTD * tfPopFraming_Factor);
        var fofPopFraming_ESTD = Math.ceil(materlID.FoF_POP_Framing_QTD * fofPopFraming_Factor);
        var towerPopFraming_ESTD = Math.ceil(materlID.Tower_POP_Framing_QTD * towerPopFraming_Factor);

        var OnebalconyPVC_ESTD = Math.ceil(materlID.Balcony_PVC_QTD * balconyPVC_Factor);
        var OneparkingPVC_ESTD = Math.ceil(materlID.Parking_PVC_QTD * parkingPVC_Factor);
        var OnewashroomPVC_ESTD = Math.ceil(materlID.Washroom_PVC_QTD * washroomPVC_Factor);




        // //Anuj
        // //Wiring 

        // var b1Wiring_Factor = 0.76 / QUANTITIESDONE_L5;
        // var b2Wiring_Factor = 0.76 / QUANTITIESDONE_L5;
        // var b3Wiring_Factor = 0.76 / QUANTITIESDONE_L5;
        // var b4Wiring_Factor = 0.76 / QUANTITIESDONE_L5;
        // var gfWiring_Factor = 0.76 / QUANTITIESDONE_L5;
        // var ffWiring_Factor = 0.76 / QUANTITIESDONE_L5;
        // var sfWiring_Factor = 0.76 / QUANTITIESDONE_L5;
        // var tfWiring_Factor = 0.76 / QUANTITIESDONE_L5;
        // var fofWiring_Factor = 0.76 / QUANTITIESDONE_L5;
        // var towerWiring_Factor = 0.76 / QUANTITIESDONE_L5;


        // //Anuj
        // var b1Wiring_ESTD = Math.ceil(B1_Wiring_QTD * b1Wiring_Factor);
        // var b2Wiring_ESTD = Math.ceil(B2_Wiring_QTD * b2Wiring_Factor);
        // var b3Wiring_ESTD = Math.ceil(B3_Wiring_QTD * b3Wiring_Factor);
        // var b4Wiring_ESTD = Math.ceil(B4_Wiring_QTD * b4Wiring_Factor);
        // var gfWiring_ESTD = Math.ceil(GF_Wiring_QTD * gfWiring_Factor);
        // var ffWiring_ESTD = Math.ceil(FF_Wiring_QTD * ffWiring_Factor);
        // var sfWiring_ESTD = Math.ceil(SF_Wiring_QTD * sfWiring_Factor);
        // var tfWiring_ESTD = Math.ceil(TF_Wiring_QTD * tfWiring_Factor);
        // var fofWiring_ESTD = Math.ceil(FoF_Wiring_QTD * fofWiring_Factor);
        // var towerWiring_ESTD = Math.ceil(Tower_Wiring_QTD * towerWiring_Factor);


        // //Anuj
        // //Flase Ceiling Covering Work

        // var b1BoardingPOP_Factor = 0.061 / QUANTITIESDONE_L5;
        // var b2BoardingPOP_Factor = 0.061 / QUANTITIESDONE_L5;
        // var b3BoardingPOP_Factor = 0.061 / QUANTITIESDONE_L5;
        // var b4BoardingPOP_Factor = 0.061 / QUANTITIESDONE_L5;
        // var gfBoardingPOP_Factor = 0.061 / QUANTITIESDONE_L5;
        // var ffBoardingPOP_Factor = 0.061 / QUANTITIESDONE_L5;
        // var sfBoardingPOP_Factor = 0.061 / QUANTITIESDONE_L5;
        // var tfBoardingPOP_Factor = 0.061 / QUANTITIESDONE_L5;
        // var fofBoardingPOP_Factor = 0.061 / QUANTITIESDONE_L5;
        // var towerBoardingPOP_Factor = 0.061 / QUANTITIESDONE_L5;


        // //Anuj

        // var b1BoardingPOP_ESTD = Math.ceil(B1_Boarding_POP_QTD * b1BoardingPOP_Factor);
        // var b2BoardingPOP_ESTD = Math.ceil(B2_Boarding_POP_QTD * b2BoardingPOP_Factor);
        // var b3BoardingPOP_ESTD = Math.ceil(B3_Boarding_POP_QTD * b3BoardingPOP_Factor);
        // var b4BoardingPOP_ESTD = Math.ceil(B4_Boarding_POP_QTD * b4BoardingPOP_Factor);
        // var gfBoardingPOP_ESTD = Math.ceil(GF_Boarding_POP_QTD * gfBoardingPOP_Factor);
        // var ffBoardingPOP_ESTD = Math.ceil(FF_Boarding_POP_QTD * ffBoardingPOP_Factor);
        // var sfBoardingPOP_ESTD = Math.ceil(SF_Boarding_POP_QTD * sfBoardingPOP_Factor);
        // var tfBoardingPOP_ESTD = Math.ceil(TF_Boarding_POP_QTD * tfBoardingPOP_Factor);
        // var fofBoardingPOP_ESTD = Math.ceil(FoF_Boarding_POP_QTD * fofBoardingPOP_Factor);
        // var towerBoardingPOP_ESTD = Math.ceil(Tower_Boarding_POP_QTD * towerBoardingPOP_Factor);



        //Anuj
        //Internal White Wash Work
        var FINALINPUTSDONE_I90 = quotationSelectedDetails.NumberofPuttyCoat;
        var ALGORITHUMDONE_H373 = FINALINPUTSDONE_I90;

        var b1PuttyWorkPrimerWork_Factor = 0.01 * ALGORITHUMDONE_H373 / QUANTITIESDONE_L5;
        var b2PuttyWorkPrimerWork_Factor = 0.01 * ALGORITHUMDONE_H373 / QUANTITIESDONE_L5;
        var b3PuttyWorkPrimerWork_Factor = 0.01 * ALGORITHUMDONE_H373 / QUANTITIESDONE_L5;
        var b4PuttyWorkPrimerWork_Factor = 0.01 * ALGORITHUMDONE_H373 / QUANTITIESDONE_L5;
        var gfPuttyWorkPrimerWork_Factor = 0.01 * ALGORITHUMDONE_H373 / QUANTITIESDONE_L5;
        var ffPuttyWorkPrimerWork_Factor = 0.01 * ALGORITHUMDONE_H373 / QUANTITIESDONE_L5;
        var sfPuttyWorkPrimerWork_Factor = 0.01 * ALGORITHUMDONE_H373 / QUANTITIESDONE_L5;
        var tfPuttyWorkPrimerWork_Factor = 0.01 * ALGORITHUMDONE_H373 / QUANTITIESDONE_L5;
        var fofPuttyWorkPrimerWork_Factor = 0.01 * ALGORITHUMDONE_H373 / QUANTITIESDONE_L5;
        var towerPuttyWorkPrimerWork_Factor = 0.01 * ALGORITHUMDONE_H373 / QUANTITIESDONE_L5;

        var balconyPVC_Factor = 0.01 * ALGORITHUMDONE_H373 / QUANTITIESDONE_L5;
        var parkingPVC_Factor = 0.01 * ALGORITHUMDONE_H373 / QUANTITIESDONE_L5;
        var washroomPVC_Factor = 0.01 * ALGORITHUMDONE_H373 / QUANTITIESDONE_L5;

        //Anuj
        var b1PuttyWorkPrimerWork_ESTD = Math.ceil(materlID.B1_Putty_Primer_Work_QTD * b1PuttyWorkPrimerWork_Factor);
        var b2PuttyWorkPrimerWork_ESTD = Math.ceil(materlID.B2_Putty_Primer_Work_QTD * b2PuttyWorkPrimerWork_Factor);
        var b3PuttyWorkPrimerWork_ESTD = Math.ceil(materlID.B3_Putty_Primer_Work_QTD * b3PuttyWorkPrimerWork_Factor);
        var b4PuttyWorkPrimerWork_ESTD = Math.ceil(materlID.B4_Putty_Primer_Work_QTD * b4PuttyWorkPrimerWork_Factor);
        var gfPuttyWorkPrimerWork_ESTD = Math.ceil(materlID.GF_Putty_Primer_Work_QTD * gfPuttyWorkPrimerWork_Factor);
        var ffPuttyWorkPrimerWork_ESTD = Math.ceil(materlID.FF_Putty_Primer_Work_QTD * ffPuttyWorkPrimerWork_Factor);
        var sfPuttyWorkPrimerWork_ESTD = Math.ceil(materlID.SF_Putty_Primer_Work_QTD * sfPuttyWorkPrimerWork_Factor);
        var tfPuttyWorkPrimerWork_ESTD = Math.ceil(materlID.TF_Putty_Primer_Work_QTD * tfPuttyWorkPrimerWork_Factor);
        var fofPuttyWorkPrimerWork_ESTD = Math.ceil(materlID.FoF_Putty_Primer_Work_QTD * fofPuttyWorkPrimerWork_Factor);
        var towerPuttyWorkPrimerWork_ESTD = Math.ceil(materlID.Tower_Putty_Primer_Work_QTD * towerPuttyWorkPrimerWork_Factor);


        var balconyPVC_ESTD = Math.ceil(materlID.Balcony_PVC_QTD * balconyPVC_Factor);
        var parkingPVC_ESTD = Math.ceil(materlID.Parking_PVC_QTD * parkingPVC_Factor);
        var washroomPVC_ESTD = Math.ceil(materlID.Washroom_PVC_QTD * washroomPVC_Factor);




        //Anuj
        // Tiling Work

        var b1FloorTiling_Factor = 0.047 / QUANTITIESDONE_L5;
        var b2FloorTiling_Factor = 0.047 / QUANTITIESDONE_L5;
        var b3FloorTiling_Factor = 0.047 / QUANTITIESDONE_L5;
        var b4FloorTiling_Factor = 0.047 / QUANTITIESDONE_L5;
        var gfFloorTiling_Factor = 0.047 / QUANTITIESDONE_L5;
        var ffFloorTiling_Factor = 0.047 / QUANTITIESDONE_L5;
        var sfFloorTiling_Factor = 0.047 / QUANTITIESDONE_L5;
        var tfFloorTiling_Factor = 0.047 / QUANTITIESDONE_L5;
        var sfFloorTiling_Factor = 0.047 / QUANTITIESDONE_L5;
        var towerFloorTiling_Factor = 0.047 / QUANTITIESDONE_L5;

        var otherAreaVerticalWall_Factor = 0.167 / QUANTITIESDONE_L5;
        var platform_Factor = 0.047 / QUANTITIESDONE_L5;
        var graniteRunning_Factor = 0.047 / QUANTITIESDONE_L5;
        var terraceAreaFlooring_Factor = 0.047 / QUANTITIESDONE_L5;
        var towerAreaFlooring_Factor = 0.047 / QUANTITIESDONE_L5;
        var staircase_Factor = 0.047 / QUANTITIESDONE_L5;
        var anyTankOrOtherArea_Factor = 0.047 / QUANTITIESDONE_L5;
        var rampEntranceLevel_Factor = 0.047 / QUANTITIESDONE_L5;

        // Anuj
        var b1FloorTiling_ESTD = Math.ceil(materlID.B1_Floor_Tiling_QTD * b1FloorTiling_Factor);
        var b2FloorTiling_ESTD = Math.ceil(materlID.B2_Floor_Tiling_QTD * b2FloorTiling_Factor);
        var b3FloorTiling_ESTD = Math.ceil(materlID.B3_Floor_Tiling_QTD * b3FloorTiling_Factor);
        var b4FloorTiling_ESTD = Math.ceil(materlID.B4_Floor_Tiling_QTD * b4FloorTiling_Factor);
        var gfFloorTiling_ESTD = Math.ceil(materlID.GF_Floor_Tiling_QTD * gfFloorTiling_Factor);
        var ffFloorTiling_ESTD = Math.ceil(materlID.FF_Floor_Tiling_QTD * ffFloorTiling_Factor);
        var sfFloorTiling_ESTD = Math.ceil(materlID.SF_Floor_Tiling_QTD * sfFloorTiling_Factor);
        var tfFloorTiling_ESTD = Math.ceil(materlID.TF_Floor_Tiling_QTD * tfFloorTiling_Factor);
        var fofFloorTiling_ESTD = Math.ceil(materlID.FoF_Floor_Tiling_QTD * sfFloorTiling_Factor);
        var towerFloorTiling_ESTD = Math.ceil(materlID.Tower_Floor_Tiling_QTD * towerFloorTiling_Factor);

        var otherAreaVerticalWall_ESTD = Math.ceil(materlID.Other_Area_Vertical_Wall_QTD * otherAreaVerticalWall_Factor);
        var platform_ESTD = Math.ceil(materlID.Platform_QTD * platform_Factor);
        var graniteRunning_ESTD = Math.ceil(materlID.Granite_Running_QTD * graniteRunning_Factor);
        var terraceAreaFlooring_ESTD = Math.ceil(materlID.Terrace_Area_Flooring_QTD * terraceAreaFlooring_Factor);
        var towerAreaFlooring_ESTD = Math.ceil(materlID.Tower_Area_Flooring_QTD * towerAreaFlooring_Factor);
        var staircase_ESTD = Math.ceil(materlID.Staircase_QTD * staircase_Factor);
        var anyTankOrOtherArea_ESTD = Math.ceil(materlID.Any_Tank_or_Other_Area_QTD * anyTankOrOtherArea_Factor);
        var rampEntranceLevel_ESTD = Math.ceil(materlID.Ramp_Entrance_Level_QTD * rampEntranceLevel_Factor);





        // // Anuj 
        // // Door & Window

        // var b1DoorPanelling_Factor = 0.067 / QUANTITIESDONE_L5;
        // var b2DoorPanelling_Factor = 0.067 / QUANTITIESDONE_L5;
        // var b3DoorPanelling_Factor = 0.067 / QUANTITIESDONE_L5;
        // var b4DoorPanelling_Factor = 0.067 / QUANTITIESDONE_L5;
        // var gfDoorPanelling_Factor = 0.067 / QUANTITIESDONE_L5;
        // var ffDoorPanelling_Factor = 0.067 / QUANTITIESDONE_L5;
        // var sfDoorPanelling_Factor = 0.067 / QUANTITIESDONE_L5;
        // var tfDoorPanelling_Factor = 0.067 / QUANTITIESDONE_L5;
        // var fofDoorPanelling_Factor = 0.067 / QUANTITIESDONE_L5;
        // var towerDoorPanelling_Factor = 0.067 / QUANTITIESDONE_L5;

        // Anuj

        var b1WindowPanelling_Factor = 0.047 / QUANTITIESDONE_L5;
        var b2WindowPanelling_Factor = 0.047 / QUANTITIESDONE_L5;
        var b3WindowPanelling_Factor = 0.047 / QUANTITIESDONE_L5;
        var b4WindowPanelling_Factor = 0.047 / QUANTITIESDONE_L5;
        var gfWindowPanelling_Factor = 0.047 / QUANTITIESDONE_L5;
        var ffWindowPanelling_Factor = 0.047 / QUANTITIESDONE_L5;
        var sfWindowPanelling_Factor = 0.047 / QUANTITIESDONE_L5;
        var tfWindowPanelling_Factor = 0.047 / QUANTITIESDONE_L5;
        var fofWindowPanelling_Factor = 0.047 / QUANTITIESDONE_L5;
        var towerWindowPanelling_Factor = 0.047 / QUANTITIESDONE_L5;



        // // Anuj
        // var b1DoorPanelling_ESTD = Math.ceil(B1_Door_Panelling_QTD * b1DoorPanelling_Factor);
        // var b2DoorPanelling_ESTD = Math.ceil(B2_Door_Panelling_QTD * b2DoorPanelling_Factor);
        // var b3DoorPanelling_ESTD = Math.ceil(B3_Door_Panelling_QTD * b3DoorPanelling_Factor);
        // var b4DoorPanelling_ESTD = Math.ceil(B4_Door_Panelling_QTD * b4DoorPanelling_Factor);
        // var gfDoorPanelling_ESTD = Math.ceil(GF_Door_Panelling_QTD * gfDoorPanelling_Factor);
        // var ffDoorPanelling_ESTD = Math.ceil(FF_Door_Panelling_QTD * ffDoorPanelling_Factor);
        // var sfDoorPanelling_ESTD = Math.ceil(SF_Door_Panelling_QTD * sfDoorPanelling_Factor);
        // var tfDoorPanelling_ESTD = Math.ceil(TF_Door_Panelling_QTD * tfDoorPanelling_Factor);
        // var fofDoorPanelling_ESTD = Math.ceil(FoF_Door_Panelling_QTD * fofDoorPanelling_Factor);
        // var towerDoorPanelling_ESTD = Math.ceil(Tower_Door_Panelling_QTD * towerDoorPanelling_Factor);


        // Anuj
        var b1WindowPanelling_ESTD = Math.ceil(materlID.B1_Window_Panelling_QTD * b1WindowPanelling_Factor);
        var b2WindowPanelling_ESTD = Math.ceil(materlID.B2_Window_Panelling_QTD * b2WindowPanelling_Factor);
        var b3WindowPanelling_ESTD = Math.ceil(materlID.B3_Window_Panelling_QTD * b3WindowPanelling_Factor);
        var b4WindowPanelling_ESTD = Math.ceil(materlID.B4_Window_Panelling_QTD * b4WindowPanelling_Factor);
        var gfWindowPanelling_ESTD = Math.ceil(materlID.GF_Window_Panelling_QTD * gfWindowPanelling_Factor);
        var ffWindowPanelling_ESTD = Math.ceil(materlID.FF_Window_Panelling_QTD * ffWindowPanelling_Factor);
        var sfWindowPanelling_ESTD = Math.ceil(materlID.SF_Window_Panelling_QTD * sfWindowPanelling_Factor);
        var tfWindowPanelling_ESTD = Math.ceil(materlID.TF_Window_Panelling_QTD * tfWindowPanelling_Factor);
        var fofWindowPanelling_ESTD = Math.ceil(materlID.FoF_Window_Panelling_QTD * fofWindowPanelling_Factor);
        var towerWindowPanelling_ESTD = Math.ceil(materlID.Tower_Window_Panelling_QTD * towerWindowPanelling_Factor);



        // Anuj
        // Paint Work

        var b1Paint_Factor = 0.015 / QUANTITIESDONE_L5;
        var b2Paint_Factor = 0.015 / QUANTITIESDONE_L5;
        var b3Paint_Factor = 0.015 / QUANTITIESDONE_L5;
        var b4Paint_Factor = 0.015 / QUANTITIESDONE_L5;
        var gfPaint_Factor = 0.015 / QUANTITIESDONE_L5;
        var ffPaint_Factor = 0.015 / QUANTITIESDONE_L5;
        var sfPaint_Factor = 0.015 / QUANTITIESDONE_L5;
        var tfPaint_Factor = 0.015 / QUANTITIESDONE_L5;
        var fofPaint_Factor = 0.015 / QUANTITIESDONE_L5;
        var towerPaint_Factor = 0.015 / QUANTITIESDONE_L5;


        var side01_Factor = 0.020 / QUANTITIESDONE_L5;
        var side02_Factor = 0.020 / QUANTITIESDONE_L5;
        var side03_Factor = 0.020 / QUANTITIESDONE_L5;
        var side04_Factor = 0.020 / QUANTITIESDONE_L5;


        // Anuj
        var b1Paint_ESTD = Math.ceil(materlID.B1_Paint_QTD * b1Paint_Factor);
        var b2Paint_ESTD = Math.ceil(materlID.B2_Paint_QTD * b2Paint_Factor);
        var b3Paint_ESTD = Math.ceil(materlID.B3_Paint_QTD * b3Paint_Factor);
        var b4Paint_ESTD = Math.ceil(materlID.B4_Paint_QTD * b4Paint_Factor);
        var gfPaint_ESTD = Math.ceil(materlID.GF_Paint_QTD * gfPaint_Factor);
        var ffPaint_ESTD = Math.ceil(materlID.FF_Paint_QTD * ffPaint_Factor);
        var sfPaint_ESTD = Math.ceil(materlID.SF_Paint_QTD * sfPaint_Factor);
        var tfPaint_ESTD = Math.ceil(materlID.TF_Paint_QTD * tfPaint_Factor);
        var fofPaint_ESTD = Math.ceil(materlID.FoF_Paint_QTD * fofPaint_Factor);
        var towerPaint_ESTD = Math.ceil(materlID.Tower_Paint_QTD * towerPaint_Factor);



        var side01_ESTD = Math.ceil(materlID.Side_01_QTD * side01_Factor);
        var side02_ESTD = Math.ceil(materlID.Side_02_QTD * side02_Factor);
        var side03_ESTD = Math.ceil(materlID.Side_03_QTD * side03_Factor);
        var side04_ESTD = Math.ceil(materlID.Side_04_QTD * side04_Factor);




        // Anuj
        // Sanitary, Door Handels & Final Finishes

        var b1Sanitary_Factor = 1;
        var b2Sanitary_Factor = 1;
        var b3Sanitary_Factor = 1;
        var b4Sanitary_Factor = 1;
        var gfSanitary_Factor = 1;
        var ffSanitary_Factor = 1;
        var sfSanitary_Factor = 1;
        var tfSanitary_Factor = 1;
        var fofSanitary_Factor = 1;
        var towerSanitary_Factor = 1;


        var b1DoorAccessoriesSwitchBoard_Factor = 0.250;
        var b2DoorAccessoriesSwitchBoard_Factor = 0.250;
        var b3DoorAccessoriesSwitchBoard_Factor = 0.250;
        var b4DoorAccessoriesSwitchBoard_Factor = 0.250;
        var gfDoorAccessoriesSwitchBoard_Factor = 0.250;
        var ffDoorAccessoriesSwitchBoard_Factor = 0.250;
        var sfDoorAccessoriesSwitchBoard_Factor = 0.250;
        var tfDoorAccessoriesSwitchBoard_Factor = 0.250;
        var fofDoorAccessoriesSwitchBoard_Factor = 0.250;
        var towerDoorAccessoriesSwitchBoard_Factor = 0.250;


        var staircaseRailing_Factor = 0.018 / QUANTITIESDONE_L5;
        var lightFixingAndFan_Factor = 0.250;
        var balconyRailing_Factor = 0.018 / QUANTITIESDONE_L5;




        // Anuj

        var b1Sanitary_ESTD = Math.ceil(materlID.B1_Sanitary_QTD * b1Sanitary_Factor);
        var b2Sanitary_ESTD = Math.ceil(materlID.B2_Sanitary_QTD * b2Sanitary_Factor);
        var b3Sanitary_ESTD = Math.ceil(materlID.B3_Sanitary_QTD * b3Sanitary_Factor);
        var b4Sanitary_ESTD = Math.ceil(materlID.B4_Sanitary_QTD * b4Sanitary_Factor);
        var gfSanitary_ESTD = Math.ceil(materlID.GF_Sanitary_QTD * gfSanitary_Factor);
        var ffSanitary_ESTD = Math.ceil(materlID.FF_Sanitary_QTD * ffSanitary_Factor);
        var sfSanitary_ESTD = Math.ceil(materlID.SF_Sanitary_QTD * sfSanitary_Factor);
        var tfSanitary_ESTD = Math.ceil(materlID.TF_Sanitary_QTD * tfSanitary_Factor);
        var fofSanitary_ESTD = Math.ceil(materlID.FoF_Sanitary_QTD * fofSanitary_Factor);
        var towerSanitary_ESTD = Math.ceil(materlID.Tower_Sanitary_QTD * towerSanitary_Factor);


        var b1DoorAccessoriesSwitchBoard_ESTD = Math.ceil(materlID.B1_Door_Accessories_Switch_Board_QTD * b1DoorAccessoriesSwitchBoard_Factor);
        var b2DoorAccessoriesSwitchBoard_ESTD = Math.ceil(materlID.B2_Door_Accessories_Switch_Board_QTD * b2DoorAccessoriesSwitchBoard_Factor);
        var b3DoorAccessoriesSwitchBoard_ESTD = Math.ceil(materlID.B3_Door_Accessories_Switch_Board_QTD * b3DoorAccessoriesSwitchBoard_Factor);
        var b4DoorAccessoriesSwitchBoard_ESTD = Math.ceil(materlID.B4_Door_Accessories_Switch_Board_QTD * b4DoorAccessoriesSwitchBoard_Factor);
        var gfDoorAccessoriesSwitchBoard_ESTD = Math.ceil(materlID.GF_Door_Accessories_Switch_Board_QTD * gfDoorAccessoriesSwitchBoard_Factor);
        var ffDoorAccessoriesSwitchBoard_ESTD = Math.ceil(materlID.FF_Door_Accessories_Switch_Board_QTD * ffDoorAccessoriesSwitchBoard_Factor);
        var sfDoorAccessoriesSwitchBoard_ESTD = Math.ceil(materlID.SF_Door_Accessories_Switch_Board_QTD * sfDoorAccessoriesSwitchBoard_Factor);
        var tfDoorAccessoriesSwitchBoard_ESTD = Math.ceil(materlID.TF_Door_Accessories_Switch_Board_QTD * tfDoorAccessoriesSwitchBoard_Factor);
        var fofDoorAccessoriesSwitchBoard_ESTD = Math.ceil(materlID.FoF_Door_Accessories_Switch_Board_QTD * fofDoorAccessoriesSwitchBoard_Factor);
        var towerDoorAccessoriesSwitchBoard_ESTD = Math.ceil(materlID.Tower_Door_Accessories_Switch_Board_QTD * towerDoorAccessoriesSwitchBoard_Factor);


        var staircaseRailing_ESTD = Math.ceil(materlID.Staircase_Railing_QTD * staircaseRailing_Factor);
        // var lightFixingAndFan_ESTD = Math.ceil(Light_Fixing_and_Fan_QTD * lightFixingAndFan_Factor);
        var balconyRailing_ESTD = Math.ceil(materlID.Balcony_Railing_QTD * balconyRailing_Factor);























        // estimated days calculation Start End 

        // // console.log(quotationSelectedDetails.Footing[0].materialsName)
        var dataArrytocheck = [
            // { categoryname: 'Basement Footing', leadID: req.body.leadID },
            // { categoryname: 'RCC Column & Slab Work', leadID: req.body.leadID },
            { categoryname: 'Footing Work', leadID: req.body.leadID },
            { categoryname: 'Plinth Beam and Grade Slab Work', leadID: req.body.leadID },
            { categoryname: 'Column, Beam & Slab RCC Work', leadID: req.body.leadID },
            { categoryname: 'Brick Work', leadID: req.body.leadID },
            { categoryname: 'Electrical Wall Conditing', leadID: req.body.leadID },
            { categoryname: 'Plumbing', leadID: req.body.leadID },
            { categoryname: 'Plaster', leadID: req.body.leadID },
            { categoryname: 'Chowkat Work - Wooden | Granite', leadID: req.body.leadID },
            { categoryname: 'POP Framing', leadID: req.body.leadID },
            { categoryname: 'Wiring', leadID: req.body.leadID },
            { categoryname: 'Flase Ceiling Covering Work', leadID: req.body.leadID },
            { categoryname: 'Internal White Wash Work', leadID: req.body.leadID },
            { categoryname: 'Tiling Work', leadID: req.body.leadID },
            { categoryname: 'Door & Window', leadID: req.body.leadID },
            { categoryname: 'Paint Work', leadID: req.body.leadID },
            { categoryname: 'Sanitary, Door Handels & Final Finishes', leadID: req.body.leadID },
        ];



        async function saveDataSequentially() {
            for (let i = 0; i < dataArrytocheck.length; i++) {
                if (dataArrytocheck[i].categoryname === "Flase Ceiling Covering Work" && FlaseCeilingTyHNR === "NO FALSE CEILING") {
                    continue; // Skip this iteration
                }
                try {
                    const newData = new Activities(dataArrytocheck[i]);
                    const savedData = await newData.save();
                    let objID = new mongoose.Types.ObjectId(newData.id)
                    let newss = new mongoose.Types.ObjectId(req.body.leadID)


                    // if (newData.categoryname === "Basement Footing") {

                    //     // Isolater Footing Below the Raft Level - Case 1.1
                    //     if (fottingtypecheck === "Isolated") {
                    //         var dataArrayFooting = [
                    //             { subactivityname: 'Site Visit', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'Site Clearance', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'Road Level Layout & Levelling', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'BS Excavation', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'Shoring | Protection', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'BS Layout & Levelling', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'BS Excavation - IRDL', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'BS PCC - IRDL', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'BS Footing Reinforcement - IRDL', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'BS Footing RCC - IRDL', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'BS Pedestal RCC - IRDL', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'BS - Waterpprofing - IRDL', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'BS Backfilling - IRDL', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'BS Hard Filling - IRDL', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'BS Sewage Line - IRDL', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'BS Raft Reinforcement - IRDL', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'BS Raft RCC  - IRDL', activityID: newData._id, projectID: objectproID, estimateDays: 4 }
                    //         ];
                    //     }
                    //     // Isolater Footing with Raft at same level & Brick Work - Case 1.2
                    //     if (fottingtypecheck === "Isolater Footing with Raft at same level & Brick Work - Case 1.2") {
                    //         var dataArrayFooting = [
                    //             { subactivityname: 'Site Visit', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'Site Clearance', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'Road Level Layout & Levelling', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'BS Excavation', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'Shoring | Protection', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'BS Layout & Levelling', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'BS Excavation - IRSLB', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'BS PCC Below - IRSLB', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'BS Brick Work around Footing & Beam - IRSLB', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'BS Hard Filling - IRSLB', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'BS Sewage Line - IRSLB', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'BS PCC Above - IRSLB', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'BS Reinforcement - IRSLB', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'BS Footing RCC - IRSLB', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'BS - Waterpprofing - IRSLB', activityID: newData._id, projectID: objectproID, estimateDays: 4 }
                    //         ];
                    //     }

                    //     // Isolater Footing with Raft at same level & Shuttering - Case 1.3
                    //     if (fottingtypecheck === "Isolater Footing with Raft at same level & Shuttering - Case 1.3") {
                    //         var dataArrayFooting = [
                    //             { subactivityname: 'Site Visit', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'Site Clearance', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'Road Level Layout & Levelling', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'BS Excavation', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'Shoring | Protection', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'BS Layout & Levelling', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'BS Excavation - IRSLS', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'BS PCC Below - IRSLS', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'BS Shuttering - IRSLS', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'BS Raft Reinforcement - IRSLS', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'BS Raft Footing RCC - IRSLS', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'BS - Waterpprofing - IRSLS', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'BS Hard Filling - IRSLS', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'BS Sewage Line - IRSLS', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'BS PCC Above - IRSLS', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //         ];
                    //     }
                    //     // Pile Footing with Raft at the Same Level & Brick Work - Case 2.1

                    //     if (fottingtypecheck === "Pile Footing with Raft at the Same Level & Brick Work - Case 2.1") {
                    //         var dataArrayFooting = [
                    //             { subactivityname: 'Site Visit', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'Site Clearance', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'Road Level Layout & Levelling', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'BS Excavation', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'Shoring | Protection', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'BS Layout & Levelling', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'BS Pile Reinforcement - PRSLB', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'BS Pile Excavation - PRSLB', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'BS Pile RCC - PRSLB', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'BS PCC Below - PRSLB', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'BS Brick Work around Footing & Beam - PRSLB', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'BS Hard Filling - PRSLB', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'BS Sewage Line - PRSLB', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'BS PCC Above - PRSLB', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'BS Raft Reinforcement - PRSLB', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'BS Raft RCC - PRSLB', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'BS - Waterpprofing - PRSLB', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //         ];
                    //     }
                    //     // Pile Footing with Raft at the Same Level & Shuttering Work  - Case 2.2

                    //     if (fottingtypecheck === "Pile Footing with Raft at the Same Level & Shuttering Work  - Case 2.2") {
                    //         var dataArrayFooting = [
                    //             { subactivityname: 'Site Visit', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'Site Clearance', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'Road Level Layout & Levelling', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'BS Excavation', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'Shoring | Protection', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'BS Layout & Levelling', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'BS Pile Reinforcement - PRSLS', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'BS Pile Excavation - PRSLS', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'BS Pile RCC - PRSLS', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'BS Sewage Line - PRSLS', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'BS Shuttering - PRSLS', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'BS Raft Reinforcement - PRSLS', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'BS Raft Footing RCC - PRSLS', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'BS - Waterpprofing - PRSLS', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'BS Hard Filling - PRSLS', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'BS PCC Above  - PRSLS', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //         ];
                    //     }

                    //     // Raft Footing - Case - 3.0
                    //     if (fottingtypecheck === "Raft Footing - Case - 3.0") {
                    //         var dataArrayFooting = [
                    //             { subactivityname: 'Site Visit', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'Site Clearance', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'Road Level Layout & Levelling', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'BS Excavation', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'Shoring | Protection', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'BS Layout & Levelling', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'BS Hard Filling Work - RSL', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'BS Sewage Line - RSL', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'BS PCC under Raft  - RSL', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'BS Reinforcement - RSL', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'BS Raft RCC - RSL', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //             { subactivityname: 'BS - Waterpprofing - RSL', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //         ];
                    //     }







                    //     async function saveDatanew() {
                    //         for (let i = 0; i < dataArrayFooting.length; i++) {
                    //             try {
                    //                 const newDatanew = new SubActivities(dataArrayFooting[i]);
                    //                 const savedData = await newDatanew.save();

                    //                 let objID = new mongoose.Types.ObjectId(newDatanew.id)
                    //                 let newss = new mongoose.Types.ObjectId(newData._id)

                    //                 if (newDatanew.subactivityname === "Site Visit") {
                    //                     const dataArranew = [
                    //                         { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Get the site Locaation and Address' },
                    //                         { subtaskdescription: 'Get the Clients Contacto no and Name' },
                    //                         { subtaskdescription: 'Take the measuring tape, Notepad and a labour with you' },
                    //                         { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Take the measurements at the site and note down' },
                    //                         { subtaskdescription: 'Measure the level of site with respect to the road level' },
                    //                         { subtaskdescription: 'Click the photos of Site for the references Front side,Back side and sideways' },
                    //                         { subtaskdescription: 'Mark the details of all four adjacent sides of the plot' },
                    //                         { subtaskdescription: 'Inform the society about the commencment of work,if any issues then inform the client' },
                    //                         { subtaskdescription: 'Finalise the place for the material procurement' },
                    //                         { subtaskdescription: 'Ask Client for water and Electricity Arrangements' },
                    //                         { subtaskdescription: 'If society water supply then check the timings and storage area for the water' },
                    //                         { subtaskdescription: 'Ask the labour to dig a sample pit to confirm the soil type in above surface' },
                    //                         { subtaskdescription: 'Ask the neighbours footing type if required' },
                    //                         { subtaskdescription: 'Finalise the excavation means' },
                    //                         { subtaskdescription: 'Give the Site handover form to the Client and Get it filled and Signed' },
                    //                         { subtaskdescription: 'If there is anything (Electrical Wires, Septic tank, Sewer line or others) Informed to client that they should ask the society for the information.' },
                    //                         { subtaskdescription: 'Ask client to show the Sewer Line + Main Hole near plot, whereas if not available then construction of septic tank is to be considered' },
                    //                         { subtaskdescription: 'Phase 3', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Inform the details to the project manager and Discuss the details' },
                    //                         { subtaskdescription: 'If electrical from our end then finalise the date and Pursuing person' },
                    //                         { subtaskdescription: 'In case if tubewell from our side then finalise the party and the date' },
                    //                         { subtaskdescription: 'If any issue from the Client then discuss with the project manager' },
                    //                         { subtaskdescription: 'In case of tree if permission required ,finalise the pursuing person' },
                    //                         { subtaskdescription: 'Provision that, no cable should be harmed for that particular precaution are taken, Please check the Rule Book for It.' }


                    //                     ];

                    //                     async function sitevisitcallnow() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Subtask(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             subtaskID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     sitevisitcallnow();
                    //                 }










                    //                 if (newDatanew.subactivityname === "Site Visit") {

                    //                     const dataArranew = [
                    //                         { floorsequence: 'Bas 1' },
                    //                         { floorsequence: 'Bas 2' },
                    //                         { floorsequence: 'Bas 3' },
                    //                         { floorsequence: 'Bas 4' },
                    //                         { floorsequence: 'Ground' },
                    //                         { floorsequence: 'First' },
                    //                         { floorsequence: 'Second' },
                    //                         { floorsequence: 'Third' },
                    //                         { floorsequence: 'Fourth' },
                    //                         { floorsequence: 'Tower' },

                    //                     ];

                    //                     const startpoint = 4;


                    //                     async function floorCreateFunction() {
                    //                         for (let i = startpoint; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Projectspace(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)

                    //                                 // console.log(objID);
                    //                                 await Project.updateOne(
                    //                                     { _id: objectproID },
                    //                                     {
                    //                                         $push: {
                    //                                             projectspaceID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     floorCreateFunction();
                    //                 }



















                    //                 if (newDatanew.subactivityname === "Site Visit") {

                    //                     const dataArranew = [
                    //                         { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Boundary Check', checksdescription: 'Is there any existing structure/Boundary' },
                    //                         { checksHeading: 'Dewatering Check', checksdescription: 'Is dewatering required' },
                    //                         { checksHeading: 'Tree check', checksdescription: 'Is there a tree inside the site boundary or away from the site boundary but it can interrupt the working' },
                    //                         { checksHeading: 'Vehicle movement check', checksdescription: 'Can the vehicles easily move along the site for material supply' },
                    //                         { checksHeading: 'Demolition Check', checksdescription: 'Does this structure/boundary needs to be demolished' },
                    //                         { checksHeading: 'Free space check', checksdescription: 'Is there a proper place form the placement of the material' },
                    //                         { checksHeading: 'Security Space check', checksdescription: 'Is there a place for the security person' },
                    //                         { checksHeading: 'Toilet check', checksdescription: 'Is there a public toilet nearby for the security person' },
                    //                         { checksHeading: 'Road Check', checksdescription: 'Does the site has connected roads' },
                    //                         { checksHeading: 'Electric Pole check', checksdescription: 'Is the electric pole nearby the site' },
                    //                         { checksHeading: 'Electric connection check', checksdescription: 'Has the electrictity connection been taken' },
                    //                         { checksHeading: 'Meter Placement Check', checksdescription: 'Temporary Placement position for providing the meter on Site, is informed & structure needed to put it. Do we inform the client ' },

                    //                     ];

                    //                     async function sitevisitcallnowChacks() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Checks(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             checksID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     sitevisitcallnowChacks();
                    //                 }












                    //                 if (newDatanew.subactivityname === "BS Sewage Line - IRDL") {

                    //                     const dataArranew = [
                    //                         { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Assign the plumber for the sewage line work' },
                    //                         { subtaskdescription: 'Estimate the material as per the drawing and give it to the purchase manager' },
                    //                         { subtaskdescription: 'Ask the purchase manager to arrange the materials' },
                    //                         { subtaskdescription: 'Ask the plumber to check the quanity of the delivered materials.If any material is less then it should be informed that day only' },
                    //                         { subtaskdescription: 'Ask the plumber to make the arrangements for the leakage and pressure test' },
                    //                         { subtaskdescription: 'Check if the concrete material is available. If not then inform the purchase manager' },
                    //                         { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Mark the path for the sewage without beam cutting' },
                    //                         { subtaskdescription: 'Inform the contractor about the location of the chambers' },
                    //                         { subtaskdescription: 'Ask the contractor to do the leak and Pressure test' },
                    //                         { subtaskdescription: 'Ask the contractor to do proper concreting over the pipe so that it does not get damaged' }
                    //                     ];

                    //                     async function SewageLinefunCall() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Subtask(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             subtaskID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     SewageLinefunCall();
                    //                 }




                    //                 if (newDatanew.subactivityname === "BS Sewage Line - IRDL") {

                    //                     const dataArranew = [
                    //                         { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Material check', checksdescription: 'Approved materials has been visually checked for quantity and condition' },
                    //                         { checksHeading: 'Material check', checksdescription: 'Pipe checked for damages, flaws and cracks before lowering' },
                    //                         { checksHeading: 'Material check', checksdescription: 'Enough quantity of pipe and fitting material is at site and stored as per manufacturers instructions' },
                    //                         { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Handling Check', checksdescription: 'All pipes & fitting materials are properly handled by skilled plumbers as per standard procedure without any damage to pipes' },
                    //                         { checksHeading: 'Alignment Check', checksdescription: 'Alignment of sewerline is properly set out as per construction drawing and to suit site conditions' },
                    //                         { checksHeading: 'Level Check', checksdescription: 'All invert levels are checked & confirmed by qualified surveyor and their setting out approved' },
                    //                         { checksHeading: 'Cleaning check', checksdescription: 'Interior of each pipe is cleaned and free of sand, dirt, etc.' },
                    //                         { checksHeading: 'Cleaning check', checksdescription: 'Exterior of joints carefully cleaned before jointing' },
                    //                         { checksHeading: 'Leak test check', checksdescription: 'All the necessary leak tests and light tests done and witnessed by PWD Sewerage Section' },
                    //                         { checksHeading: 'Concrete work check', checksdescription: 'All associated concrete works done as per construction drawing' },
                    //                     ];

                    //                     async function SewageLineChacks() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Checks(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             checksID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     SewageLineChacks();
                    //                 }











                    //                 if (newDatanew.subactivityname === "BS Sewage Line - IRSLB") {

                    //                     const dataArranew = [
                    //                         { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Assign the plumber for the sewage line work' },
                    //                         { subtaskdescription: 'Estimate the material as per the drawing and give it to the purchase manager' },
                    //                         { subtaskdescription: 'Ask the purchase manager to arrange the materials' },
                    //                         { subtaskdescription: 'Ask the plumber to check the quanity of the delivered materials.If any material is less then it should be informed that day only' },
                    //                         { subtaskdescription: 'Ask the plumber to make the arrangements for the leakage and pressure test' },
                    //                         { subtaskdescription: 'Check if the concrete material is available. If not then inform the purchase manager' },
                    //                         { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Mark the path for the sewage without beam cutting' },
                    //                         { subtaskdescription: 'Inform the contractor about the location of the chambers' },
                    //                         { subtaskdescription: 'Ask the contractor to do the leak and Pressure test' },
                    //                         { subtaskdescription: 'Ask the contractor to do proper concreting over the pipe so that it does not get damaged' }
                    //                     ];

                    //                     async function SewageLinefunCall() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Subtask(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             subtaskID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     SewageLinefunCall();
                    //                 }




                    //                 if (newDatanew.subactivityname === "BS Sewage Line - IRSLB") {

                    //                     const dataArranew = [
                    //                         { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Material check', checksdescription: 'Approved materials has been visually checked for quantity and condition' },
                    //                         { checksHeading: 'Material check', checksdescription: 'Pipe checked for damages, flaws and cracks before lowering' },
                    //                         { checksHeading: 'Material check', checksdescription: 'Enough quantity of pipe and fitting material is at site and stored as per manufacturers instructions' },
                    //                         { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Handling Check', checksdescription: 'All pipes & fitting materials are properly handled by skilled plumbers as per standard procedure without any damage to pipes' },
                    //                         { checksHeading: 'Alignment Check', checksdescription: 'Alignment of sewerline is properly set out as per construction drawing and to suit site conditions' },
                    //                         { checksHeading: 'Level Check', checksdescription: 'All invert levels are checked & confirmed by qualified surveyor and their setting out approved' },
                    //                         { checksHeading: 'Cleaning check', checksdescription: 'Interior of each pipe is cleaned and free of sand, dirt, etc.' },
                    //                         { checksHeading: 'Cleaning check', checksdescription: 'Exterior of joints carefully cleaned before jointing' },
                    //                         { checksHeading: 'Leak test check', checksdescription: 'All the necessary leak tests and light tests done and witnessed by PWD Sewerage Section' },
                    //                         { checksHeading: 'Concrete work check', checksdescription: 'All associated concrete works done as per construction drawing' },
                    //                     ];

                    //                     async function SewageLineChacks() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Checks(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             checksID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     SewageLineChacks();
                    //                 }







                    //                 if (newDatanew.subactivityname === "BS Sewage Line - IRSLS") {

                    //                     const dataArranew = [
                    //                         { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Assign the plumber for the sewage line work' },
                    //                         { subtaskdescription: 'Estimate the material as per the drawing and give it to the purchase manager' },
                    //                         { subtaskdescription: 'Ask the purchase manager to arrange the materials' },
                    //                         { subtaskdescription: 'Ask the plumber to check the quanity of the delivered materials.If any material is less then it should be informed that day only' },
                    //                         { subtaskdescription: 'Ask the plumber to make the arrangements for the leakage and pressure test' },
                    //                         { subtaskdescription: 'Check if the concrete material is available. If not then inform the purchase manager' },
                    //                         { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Mark the path for the sewage without beam cutting' },
                    //                         { subtaskdescription: 'Inform the contractor about the location of the chambers' },
                    //                         { subtaskdescription: 'Ask the contractor to do the leak and Pressure test' },
                    //                         { subtaskdescription: 'Ask the contractor to do proper concreting over the pipe so that it does not get damaged' }
                    //                     ];

                    //                     async function SewageLinefunCall() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Subtask(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             subtaskID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     SewageLinefunCall();
                    //                 }




                    //                 if (newDatanew.subactivityname === "BS Sewage Line - IRSLS") {

                    //                     const dataArranew = [
                    //                         { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Material check', checksdescription: 'Approved materials has been visually checked for quantity and condition' },
                    //                         { checksHeading: 'Material check', checksdescription: 'Pipe checked for damages, flaws and cracks before lowering' },
                    //                         { checksHeading: 'Material check', checksdescription: 'Enough quantity of pipe and fitting material is at site and stored as per manufacturers instructions' },
                    //                         { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Handling Check', checksdescription: 'All pipes & fitting materials are properly handled by skilled plumbers as per standard procedure without any damage to pipes' },
                    //                         { checksHeading: 'Alignment Check', checksdescription: 'Alignment of sewerline is properly set out as per construction drawing and to suit site conditions' },
                    //                         { checksHeading: 'Level Check', checksdescription: 'All invert levels are checked & confirmed by qualified surveyor and their setting out approved' },
                    //                         { checksHeading: 'Cleaning check', checksdescription: 'Interior of each pipe is cleaned and free of sand, dirt, etc.' },
                    //                         { checksHeading: 'Cleaning check', checksdescription: 'Exterior of joints carefully cleaned before jointing' },
                    //                         { checksHeading: 'Leak test check', checksdescription: 'All the necessary leak tests and light tests done and witnessed by PWD Sewerage Section' },
                    //                         { checksHeading: 'Concrete work check', checksdescription: 'All associated concrete works done as per construction drawing' },
                    //                     ];

                    //                     async function SewageLineChacks() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Checks(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             checksID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     SewageLineChacks();
                    //                 }












                    //                 if (newDatanew.subactivityname === "BS Sewage Line - PRSLB") {

                    //                     const dataArranew = [
                    //                         { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Assign the plumber for the sewage line work' },
                    //                         { subtaskdescription: 'Estimate the material as per the drawing and give it to the purchase manager' },
                    //                         { subtaskdescription: 'Ask the purchase manager to arrange the materials' },
                    //                         { subtaskdescription: 'Ask the plumber to check the quanity of the delivered materials.If any material is less then it should be informed that day only' },
                    //                         { subtaskdescription: 'Ask the plumber to make the arrangements for the leakage and pressure test' },
                    //                         { subtaskdescription: 'Check if the concrete material is available. If not then inform the purchase manager' },
                    //                         { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Mark the path for the sewage without beam cutting' },
                    //                         { subtaskdescription: 'Inform the contractor about the location of the chambers' },
                    //                         { subtaskdescription: 'Ask the contractor to do the leak and Pressure test' },
                    //                         { subtaskdescription: 'Ask the contractor to do proper concreting over the pipe so that it does not get damaged' }
                    //                     ];

                    //                     async function SewageLinefunCall() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Subtask(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             subtaskID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     SewageLinefunCall();
                    //                 }




                    //                 if (newDatanew.subactivityname === "BS Sewage Line - PRSLB") {

                    //                     const dataArranew = [
                    //                         { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Material check', checksdescription: 'Approved materials has been visually checked for quantity and condition' },
                    //                         { checksHeading: 'Material check', checksdescription: 'Pipe checked for damages, flaws and cracks before lowering' },
                    //                         { checksHeading: 'Material check', checksdescription: 'Enough quantity of pipe and fitting material is at site and stored as per manufacturers instructions' },
                    //                         { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Handling Check', checksdescription: 'All pipes & fitting materials are properly handled by skilled plumbers as per standard procedure without any damage to pipes' },
                    //                         { checksHeading: 'Alignment Check', checksdescription: 'Alignment of sewerline is properly set out as per construction drawing and to suit site conditions' },
                    //                         { checksHeading: 'Level Check', checksdescription: 'All invert levels are checked & confirmed by qualified surveyor and their setting out approved' },
                    //                         { checksHeading: 'Cleaning check', checksdescription: 'Interior of each pipe is cleaned and free of sand, dirt, etc.' },
                    //                         { checksHeading: 'Cleaning check', checksdescription: 'Exterior of joints carefully cleaned before jointing' },
                    //                         { checksHeading: 'Leak test check', checksdescription: 'All the necessary leak tests and light tests done and witnessed by PWD Sewerage Section' },
                    //                         { checksHeading: 'Concrete work check', checksdescription: 'All associated concrete works done as per construction drawing' },
                    //                     ];

                    //                     async function SewageLineChacks() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Checks(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             checksID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     SewageLineChacks();
                    //                 }


















                    //                 if (newDatanew.subactivityname === "BS Sewage Line - PRSLS") {

                    //                     const dataArranew = [
                    //                         { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Assign the plumber for the sewage line work' },
                    //                         { subtaskdescription: 'Estimate the material as per the drawing and give it to the purchase manager' },
                    //                         { subtaskdescription: 'Ask the purchase manager to arrange the materials' },
                    //                         { subtaskdescription: 'Ask the plumber to check the quanity of the delivered materials.If any material is less then it should be informed that day only' },
                    //                         { subtaskdescription: 'Ask the plumber to make the arrangements for the leakage and pressure test' },
                    //                         { subtaskdescription: 'Check if the concrete material is available. If not then inform the purchase manager' },
                    //                         { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Mark the path for the sewage without beam cutting' },
                    //                         { subtaskdescription: 'Inform the contractor about the location of the chambers' },
                    //                         { subtaskdescription: 'Ask the contractor to do the leak and Pressure test' },
                    //                         { subtaskdescription: 'Ask the contractor to do proper concreting over the pipe so that it does not get damaged' }
                    //                     ];

                    //                     async function SewageLinefunCall() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Subtask(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             subtaskID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     SewageLinefunCall();
                    //                 }




                    //                 if (newDatanew.subactivityname === "BS Sewage Line - PRSLS") {

                    //                     const dataArranew = [
                    //                         { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Material check', checksdescription: 'Approved materials has been visually checked for quantity and condition' },
                    //                         { checksHeading: 'Material check', checksdescription: 'Pipe checked for damages, flaws and cracks before lowering' },
                    //                         { checksHeading: 'Material check', checksdescription: 'Enough quantity of pipe and fitting material is at site and stored as per manufacturers instructions' },
                    //                         { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Handling Check', checksdescription: 'All pipes & fitting materials are properly handled by skilled plumbers as per standard procedure without any damage to pipes' },
                    //                         { checksHeading: 'Alignment Check', checksdescription: 'Alignment of sewerline is properly set out as per construction drawing and to suit site conditions' },
                    //                         { checksHeading: 'Level Check', checksdescription: 'All invert levels are checked & confirmed by qualified surveyor and their setting out approved' },
                    //                         { checksHeading: 'Cleaning check', checksdescription: 'Interior of each pipe is cleaned and free of sand, dirt, etc.' },
                    //                         { checksHeading: 'Cleaning check', checksdescription: 'Exterior of joints carefully cleaned before jointing' },
                    //                         { checksHeading: 'Leak test check', checksdescription: 'All the necessary leak tests and light tests done and witnessed by PWD Sewerage Section' },
                    //                         { checksHeading: 'Concrete work check', checksdescription: 'All associated concrete works done as per construction drawing' },
                    //                     ];

                    //                     async function SewageLineChacks() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Checks(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             checksID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     SewageLineChacks();
                    //                 }













                    //                 if (newDatanew.subactivityname === "BS Sewage Line - RSL") {

                    //                     const dataArranew = [
                    //                         { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Assign the plumber for the sewage line work' },
                    //                         { subtaskdescription: 'Estimate the material as per the drawing and give it to the purchase manager' },
                    //                         { subtaskdescription: 'Ask the purchase manager to arrange the materials' },
                    //                         { subtaskdescription: 'Ask the plumber to check the quanity of the delivered materials.If any material is less then it should be informed that day only' },
                    //                         { subtaskdescription: 'Ask the plumber to make the arrangements for the leakage and pressure test' },
                    //                         { subtaskdescription: 'Check if the concrete material is available. If not then inform the purchase manager' },
                    //                         { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Mark the path for the sewage without beam cutting' },
                    //                         { subtaskdescription: 'Inform the contractor about the location of the chambers' },
                    //                         { subtaskdescription: 'Ask the contractor to do the leak and Pressure test' },
                    //                         { subtaskdescription: 'Ask the contractor to do proper concreting over the pipe so that it does not get damaged' }
                    //                     ];

                    //                     async function SewageLinefunCall() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Subtask(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             subtaskID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     SewageLinefunCall();
                    //                 }




                    //                 if (newDatanew.subactivityname === "BS Sewage Line - RSL") {

                    //                     const dataArranew = [
                    //                         { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Material check', checksdescription: 'Approved materials has been visually checked for quantity and condition' },
                    //                         { checksHeading: 'Material check', checksdescription: 'Pipe checked for damages, flaws and cracks before lowering' },
                    //                         { checksHeading: 'Material check', checksdescription: 'Enough quantity of pipe and fitting material is at site and stored as per manufacturers instructions' },
                    //                         { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Handling Check', checksdescription: 'All pipes & fitting materials are properly handled by skilled plumbers as per standard procedure without any damage to pipes' },
                    //                         { checksHeading: 'Alignment Check', checksdescription: 'Alignment of sewerline is properly set out as per construction drawing and to suit site conditions' },
                    //                         { checksHeading: 'Level Check', checksdescription: 'All invert levels are checked & confirmed by qualified surveyor and their setting out approved' },
                    //                         { checksHeading: 'Cleaning check', checksdescription: 'Interior of each pipe is cleaned and free of sand, dirt, etc.' },
                    //                         { checksHeading: 'Cleaning check', checksdescription: 'Exterior of joints carefully cleaned before jointing' },
                    //                         { checksHeading: 'Leak test check', checksdescription: 'All the necessary leak tests and light tests done and witnessed by PWD Sewerage Section' },
                    //                         { checksHeading: 'Concrete work check', checksdescription: 'All associated concrete works done as per construction drawing' },
                    //                     ];

                    //                     async function SewageLineChacks() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Checks(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             checksID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     SewageLineChacks();
                    //                 }





















                    //                 if (newDatanew.subactivityname === "BS Backfilling - IRDL") {

                    //                     const dataArranew = [
                    //                         { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Deshuttering check', checksdescription: 'All the concrete structures like footings, columns, plinth beams, etc. should be completed with de-shuttering of the formwork, removal of stagings, etc.' },
                    //                         { checksHeading: 'Honeycombing repair check', checksdescription: 'All the honeycomb in the structures should be repaired before doing the plinth filling.' },
                    //                         { checksHeading: 'Masonry and Plaster check', checksdescription: 'All the plinth masonry work should be completed with the internal plaster, or by filling the leftover joints in a proper way.' },
                    //                         { checksHeading: 'Curing check', checksdescription: 'Before doing filling, ensure that all the concrete structures and masonry works have completed their minimal curing period. It should be properly set, attaining its design ' },
                    //                         { checksHeading: 'Leftover formwork Check', checksdescription: 'The plinth area and footing pit should be checked for any leftover formwork materials and should be removed before filling. ' },
                    //                         { checksHeading: 'Cleaning check', checksdescription: 'Any organic matter, wooden logs, plant roots, etc. should be cleaned, as they form voids after decay, causing settlement in the filling, due to weak compaction. ' },
                    //                         { checksHeading: 'Water Check', checksdescription: 'If there is any water in the pit, trenches, and plinth areas, it should be drained out.' },
                    //                         { checksHeading: 'Material check', checksdescription: 'The construction soil (moorum) should be free from organic matter, plant roots, clay lumps, chemicals, etc. The soil should be granular in structure, with a reddish-brown' },
                    //                         { checksHeading: 'Soil Check', checksdescription: 'If the soil excavated from the footing pit is black cotton, it should be removed completely and strictly avoided from refilling.' },
                    //                         { checksHeading: 'Top level check', checksdescription: 'Top level of filling has been marked' },
                    //                         { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Filling Layers Check', checksdescription: 'Construction soil should be spread in layers of 15 to 20cm. thickness, if you are using manual rammers, and it can be filled up to 30cm in thickness for the mechanical ' },
                    //                         { checksHeading: 'Layer Check', checksdescription: 'In any case, you should not fill the soil layer above 30cm depth, to achieve good compaction of the soil.' },
                    //                         { checksHeading: 'Watering Check', checksdescription: 'After completing the first layer of spreading, sprinkled with water to attain optimum moisture content, so that we can achieve the maximum dry density of soil after ' },
                    //                         { checksHeading: 'Ramming check', checksdescription: 'The ramming should be done from one end, covering all the areas. It is always advisable to use mechanical compactors, as the work carried out will be more efficient.' },
                    //                     ];

                    //                     async function backfillingchChacks() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Checks(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             checksID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     backfillingchChacks();
                    //                 }



                    //                 if (newDatanew.subactivityname === "BS Backfilling - IRDL") {

                    //                     const dataArranew = [
                    //                         { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Calculate the quantity of backfilling material and ask the purchase manager to arrange it' },
                    //                         { subtaskdescription: 'Assign the labour and Contractor for the backfilling' },
                    //                         { subtaskdescription: 'Make the arrangements for water' },
                    //                         { subtaskdescription: 'Arrange the rammer at site ' },
                    //                         { subtaskdescription: 'Inform the contractor about the filling procedure' },
                    //                         { subtaskdescription: 'Ask the contractor to remove the debris if any from the filling material' },
                    //                         { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Ask the contractor to mark the top level of filling in each section i.e, which area will be down or up' },
                    //                         { subtaskdescription: 'Ask the contractor not to fill the layers more than 300mm' },
                    //                         { subtaskdescription: 'Ask the contractor for watering the filling material' },
                    //                         { subtaskdescription: 'Ask the contractor for proper compaction' },
                    //                         { subtaskdescription: 'Ask the contractor to give the final level in compaction and 6mm Aggreagte to be laid so that the grade slab work can be carried out directly' },
                    //                     ];

                    //                     async function BackFillingfunCall() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Subtask(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             subtaskID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     BackFillingfunCall();
                    //                 }













                    //                 if (newDatanew.subactivityname === "BS Hard Filling - IRDL") {

                    //                     const dataArranew = [
                    //                         { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Deshuttering check', checksdescription: 'All the concrete structures like footings, columns, plinth beams, etc. should be completed with de-shuttering of the formwork, removal of stagings, etc.' },
                    //                         { checksHeading: 'Honeycombing repair check', checksdescription: 'All the honeycomb in the structures should be repaired before doing the plinth filling.' },
                    //                         { checksHeading: 'Masonry and Plaster check', checksdescription: 'All the plinth masonry work should be completed with the internal plaster, or by filling the leftover joints in a proper way.' },
                    //                         { checksHeading: 'Curing check', checksdescription: 'Before doing filling, ensure that all the concrete structures and masonry works have completed their minimal curing period. It should be properly set, attaining its design ' },
                    //                         { checksHeading: 'Leftover formwork Check', checksdescription: 'The plinth area and footing pit should be checked for any leftover formwork materials and should be removed before filling. ' },
                    //                         { checksHeading: 'Cleaning check', checksdescription: 'Any organic matter, wooden logs, plant roots, etc. should be cleaned, as they form voids after decay, causing settlement in the filling, due to weak compaction. ' },
                    //                         { checksHeading: 'Water Check', checksdescription: 'If there is any water in the pit, trenches, and plinth areas, it should be drained out.' },
                    //                         { checksHeading: 'Material check', checksdescription: 'The construction soil (moorum) should be free from organic matter, plant roots, clay lumps, chemicals, etc. The soil should be granular in structure, with a reddish-brown' },
                    //                         { checksHeading: 'Soil Check', checksdescription: 'If the soil excavated from the footing pit is black cotton, it should be removed completely and strictly avoided from refilling.' },
                    //                         { checksHeading: 'Top level check', checksdescription: 'Top level of filling has been marked' },
                    //                         { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Filling Layers Check', checksdescription: 'Construction soil should be spread in layers of 15 to 20cm. thickness, if you are using manual rammers, and it can be filled up to 30cm in thickness for the mechanical ' },
                    //                         { checksHeading: 'Layer Check', checksdescription: 'In any case, you should not fill the soil layer above 30cm depth, to achieve good compaction of the soil.' },
                    //                         { checksHeading: 'Watering Check', checksdescription: 'After completing the first layer of spreading, sprinkled with water to attain optimum moisture content, so that we can achieve the maximum dry density of soil after ' },
                    //                         { checksHeading: 'Ramming check', checksdescription: 'The ramming should be done from one end, covering all the areas. It is always advisable to use mechanical compactors, as the work carried out will be more efficient.' },
                    //                     ];

                    //                     async function backfillingchChacks() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Checks(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             checksID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     backfillingchChacks();
                    //                 }



                    //                 if (newDatanew.subactivityname === "BS Hard Filling - IRDL") {

                    //                     const dataArranew = [
                    //                         { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Calculate the quantity of backfilling material and ask the purchase manager to arrange it' },
                    //                         { subtaskdescription: 'Assign the labour and Contractor for the backfilling' },
                    //                         { subtaskdescription: 'Make the arrangements for water' },
                    //                         { subtaskdescription: 'Arrange the rammer at site ' },
                    //                         { subtaskdescription: 'Inform the contractor about the filling procedure' },
                    //                         { subtaskdescription: 'Ask the contractor to remove the debris if any from the filling material' },
                    //                         { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Ask the contractor to mark the top level of filling in each section i.e, which area will be down or up' },
                    //                         { subtaskdescription: 'Ask the contractor not to fill the layers more than 300mm' },
                    //                         { subtaskdescription: 'Ask the contractor for watering the filling material' },
                    //                         { subtaskdescription: 'Ask the contractor for proper compaction' },
                    //                         { subtaskdescription: 'Ask the contractor to give the final level in compaction and 6mm Aggreagte to be laid so that the grade slab work can be carried out directly' },
                    //                     ];

                    //                     async function BackFillingfunCall() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Subtask(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             subtaskID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     BackFillingfunCall();
                    //                 }











                    //                 if (newDatanew.subactivityname === "BS Hard Filling - IRSLB") {

                    //                     const dataArranew = [
                    //                         { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Deshuttering check', checksdescription: 'All the concrete structures like footings, columns, plinth beams, etc. should be completed with de-shuttering of the formwork, removal of stagings, etc.' },
                    //                         { checksHeading: 'Honeycombing repair check', checksdescription: 'All the honeycomb in the structures should be repaired before doing the plinth filling.' },
                    //                         { checksHeading: 'Masonry and Plaster check', checksdescription: 'All the plinth masonry work should be completed with the internal plaster, or by filling the leftover joints in a proper way.' },
                    //                         { checksHeading: 'Curing check', checksdescription: 'Before doing filling, ensure that all the concrete structures and masonry works have completed their minimal curing period. It should be properly set, attaining its design ' },
                    //                         { checksHeading: 'Leftover formwork Check', checksdescription: 'The plinth area and footing pit should be checked for any leftover formwork materials and should be removed before filling. ' },
                    //                         { checksHeading: 'Cleaning check', checksdescription: 'Any organic matter, wooden logs, plant roots, etc. should be cleaned, as they form voids after decay, causing settlement in the filling, due to weak compaction. ' },
                    //                         { checksHeading: 'Water Check', checksdescription: 'If there is any water in the pit, trenches, and plinth areas, it should be drained out.' },
                    //                         { checksHeading: 'Material check', checksdescription: 'The construction soil (moorum) should be free from organic matter, plant roots, clay lumps, chemicals, etc. The soil should be granular in structure, with a reddish-brown' },
                    //                         { checksHeading: 'Soil Check', checksdescription: 'If the soil excavated from the footing pit is black cotton, it should be removed completely and strictly avoided from refilling.' },
                    //                         { checksHeading: 'Top level check', checksdescription: 'Top level of filling has been marked' },
                    //                         { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Filling Layers Check', checksdescription: 'Construction soil should be spread in layers of 15 to 20cm. thickness, if you are using manual rammers, and it can be filled up to 30cm in thickness for the mechanical ' },
                    //                         { checksHeading: 'Layer Check', checksdescription: 'In any case, you should not fill the soil layer above 30cm depth, to achieve good compaction of the soil.' },
                    //                         { checksHeading: 'Watering Check', checksdescription: 'After completing the first layer of spreading, sprinkled with water to attain optimum moisture content, so that we can achieve the maximum dry density of soil after ' },
                    //                         { checksHeading: 'Ramming check', checksdescription: 'The ramming should be done from one end, covering all the areas. It is always advisable to use mechanical compactors, as the work carried out will be more efficient.' },
                    //                     ];

                    //                     async function backfillingchChacks() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Checks(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             checksID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     backfillingchChacks();
                    //                 }



                    //                 if (newDatanew.subactivityname === "BS Hard Filling - IRSLB") {

                    //                     const dataArranew = [
                    //                         { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Calculate the quantity of backfilling material and ask the purchase manager to arrange it' },
                    //                         { subtaskdescription: 'Assign the labour and Contractor for the backfilling' },
                    //                         { subtaskdescription: 'Make the arrangements for water' },
                    //                         { subtaskdescription: 'Arrange the rammer at site ' },
                    //                         { subtaskdescription: 'Inform the contractor about the filling procedure' },
                    //                         { subtaskdescription: 'Ask the contractor to remove the debris if any from the filling material' },
                    //                         { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Ask the contractor to mark the top level of filling in each section i.e, which area will be down or up' },
                    //                         { subtaskdescription: 'Ask the contractor not to fill the layers more than 300mm' },
                    //                         { subtaskdescription: 'Ask the contractor for watering the filling material' },
                    //                         { subtaskdescription: 'Ask the contractor for proper compaction' },
                    //                         { subtaskdescription: 'Ask the contractor to give the final level in compaction and 6mm Aggreagte to be laid so that the grade slab work can be carried out directly' },
                    //                     ];

                    //                     async function BackFillingfunCall() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Subtask(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             subtaskID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     BackFillingfunCall();
                    //                 }








                    //                 if (newDatanew.subactivityname === "BS Hard Filling - IRSLS") {

                    //                     const dataArranew = [
                    //                         { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Deshuttering check', checksdescription: 'All the concrete structures like footings, columns, plinth beams, etc. should be completed with de-shuttering of the formwork, removal of stagings, etc.' },
                    //                         { checksHeading: 'Honeycombing repair check', checksdescription: 'All the honeycomb in the structures should be repaired before doing the plinth filling.' },
                    //                         { checksHeading: 'Masonry and Plaster check', checksdescription: 'All the plinth masonry work should be completed with the internal plaster, or by filling the leftover joints in a proper way.' },
                    //                         { checksHeading: 'Curing check', checksdescription: 'Before doing filling, ensure that all the concrete structures and masonry works have completed their minimal curing period. It should be properly set, attaining its design ' },
                    //                         { checksHeading: 'Leftover formwork Check', checksdescription: 'The plinth area and footing pit should be checked for any leftover formwork materials and should be removed before filling. ' },
                    //                         { checksHeading: 'Cleaning check', checksdescription: 'Any organic matter, wooden logs, plant roots, etc. should be cleaned, as they form voids after decay, causing settlement in the filling, due to weak compaction. ' },
                    //                         { checksHeading: 'Water Check', checksdescription: 'If there is any water in the pit, trenches, and plinth areas, it should be drained out.' },
                    //                         { checksHeading: 'Material check', checksdescription: 'The construction soil (moorum) should be free from organic matter, plant roots, clay lumps, chemicals, etc. The soil should be granular in structure, with a reddish-brown' },
                    //                         { checksHeading: 'Soil Check', checksdescription: 'If the soil excavated from the footing pit is black cotton, it should be removed completely and strictly avoided from refilling.' },
                    //                         { checksHeading: 'Top level check', checksdescription: 'Top level of filling has been marked' },
                    //                         { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Filling Layers Check', checksdescription: 'Construction soil should be spread in layers of 15 to 20cm. thickness, if you are using manual rammers, and it can be filled up to 30cm in thickness for the mechanical ' },
                    //                         { checksHeading: 'Layer Check', checksdescription: 'In any case, you should not fill the soil layer above 30cm depth, to achieve good compaction of the soil.' },
                    //                         { checksHeading: 'Watering Check', checksdescription: 'After completing the first layer of spreading, sprinkled with water to attain optimum moisture content, so that we can achieve the maximum dry density of soil after ' },
                    //                         { checksHeading: 'Ramming check', checksdescription: 'The ramming should be done from one end, covering all the areas. It is always advisable to use mechanical compactors, as the work carried out will be more efficient.' },
                    //                     ];

                    //                     async function backfillingchChacks() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Checks(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             checksID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     backfillingchChacks();
                    //                 }



                    //                 if (newDatanew.subactivityname === "BS Hard Filling - IRSLS") {

                    //                     const dataArranew = [
                    //                         { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Calculate the quantity of backfilling material and ask the purchase manager to arrange it' },
                    //                         { subtaskdescription: 'Assign the labour and Contractor for the backfilling' },
                    //                         { subtaskdescription: 'Make the arrangements for water' },
                    //                         { subtaskdescription: 'Arrange the rammer at site ' },
                    //                         { subtaskdescription: 'Inform the contractor about the filling procedure' },
                    //                         { subtaskdescription: 'Ask the contractor to remove the debris if any from the filling material' },
                    //                         { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Ask the contractor to mark the top level of filling in each section i.e, which area will be down or up' },
                    //                         { subtaskdescription: 'Ask the contractor not to fill the layers more than 300mm' },
                    //                         { subtaskdescription: 'Ask the contractor for watering the filling material' },
                    //                         { subtaskdescription: 'Ask the contractor for proper compaction' },
                    //                         { subtaskdescription: 'Ask the contractor to give the final level in compaction and 6mm Aggreagte to be laid so that the grade slab work can be carried out directly' },
                    //                     ];

                    //                     async function BackFillingfunCall() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Subtask(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             subtaskID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     BackFillingfunCall();
                    //                 }










                    //                 if (newDatanew.subactivityname === "BS Hard Filling - PRSLB") {

                    //                     const dataArranew = [
                    //                         { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Deshuttering check', checksdescription: 'All the concrete structures like footings, columns, plinth beams, etc. should be completed with de-shuttering of the formwork, removal of stagings, etc.' },
                    //                         { checksHeading: 'Honeycombing repair check', checksdescription: 'All the honeycomb in the structures should be repaired before doing the plinth filling.' },
                    //                         { checksHeading: 'Masonry and Plaster check', checksdescription: 'All the plinth masonry work should be completed with the internal plaster, or by filling the leftover joints in a proper way.' },
                    //                         { checksHeading: 'Curing check', checksdescription: 'Before doing filling, ensure that all the concrete structures and masonry works have completed their minimal curing period. It should be properly set, attaining its design ' },
                    //                         { checksHeading: 'Leftover formwork Check', checksdescription: 'The plinth area and footing pit should be checked for any leftover formwork materials and should be removed before filling. ' },
                    //                         { checksHeading: 'Cleaning check', checksdescription: 'Any organic matter, wooden logs, plant roots, etc. should be cleaned, as they form voids after decay, causing settlement in the filling, due to weak compaction. ' },
                    //                         { checksHeading: 'Water Check', checksdescription: 'If there is any water in the pit, trenches, and plinth areas, it should be drained out.' },
                    //                         { checksHeading: 'Material check', checksdescription: 'The construction soil (moorum) should be free from organic matter, plant roots, clay lumps, chemicals, etc. The soil should be granular in structure, with a reddish-brown' },
                    //                         { checksHeading: 'Soil Check', checksdescription: 'If the soil excavated from the footing pit is black cotton, it should be removed completely and strictly avoided from refilling.' },
                    //                         { checksHeading: 'Top level check', checksdescription: 'Top level of filling has been marked' },
                    //                         { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Filling Layers Check', checksdescription: 'Construction soil should be spread in layers of 15 to 20cm. thickness, if you are using manual rammers, and it can be filled up to 30cm in thickness for the mechanical ' },
                    //                         { checksHeading: 'Layer Check', checksdescription: 'In any case, you should not fill the soil layer above 30cm depth, to achieve good compaction of the soil.' },
                    //                         { checksHeading: 'Watering Check', checksdescription: 'After completing the first layer of spreading, sprinkled with water to attain optimum moisture content, so that we can achieve the maximum dry density of soil after ' },
                    //                         { checksHeading: 'Ramming check', checksdescription: 'The ramming should be done from one end, covering all the areas. It is always advisable to use mechanical compactors, as the work carried out will be more efficient.' },
                    //                     ];

                    //                     async function backfillingchChacks() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Checks(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             checksID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     backfillingchChacks();
                    //                 }



                    //                 if (newDatanew.subactivityname === "BS Hard Filling - PRSLB") {

                    //                     const dataArranew = [
                    //                         { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Calculate the quantity of backfilling material and ask the purchase manager to arrange it' },
                    //                         { subtaskdescription: 'Assign the labour and Contractor for the backfilling' },
                    //                         { subtaskdescription: 'Make the arrangements for water' },
                    //                         { subtaskdescription: 'Arrange the rammer at site ' },
                    //                         { subtaskdescription: 'Inform the contractor about the filling procedure' },
                    //                         { subtaskdescription: 'Ask the contractor to remove the debris if any from the filling material' },
                    //                         { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Ask the contractor to mark the top level of filling in each section i.e, which area will be down or up' },
                    //                         { subtaskdescription: 'Ask the contractor not to fill the layers more than 300mm' },
                    //                         { subtaskdescription: 'Ask the contractor for watering the filling material' },
                    //                         { subtaskdescription: 'Ask the contractor for proper compaction' },
                    //                         { subtaskdescription: 'Ask the contractor to give the final level in compaction and 6mm Aggreagte to be laid so that the grade slab work can be carried out directly' },
                    //                     ];

                    //                     async function BackFillingfunCall() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Subtask(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             subtaskID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     BackFillingfunCall();
                    //                 }











                    //                 if (newDatanew.subactivityname === "BS Hard Filling - PRSLS") {

                    //                     const dataArranew = [
                    //                         { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Deshuttering check', checksdescription: 'All the concrete structures like footings, columns, plinth beams, etc. should be completed with de-shuttering of the formwork, removal of stagings, etc.' },
                    //                         { checksHeading: 'Honeycombing repair check', checksdescription: 'All the honeycomb in the structures should be repaired before doing the plinth filling.' },
                    //                         { checksHeading: 'Masonry and Plaster check', checksdescription: 'All the plinth masonry work should be completed with the internal plaster, or by filling the leftover joints in a proper way.' },
                    //                         { checksHeading: 'Curing check', checksdescription: 'Before doing filling, ensure that all the concrete structures and masonry works have completed their minimal curing period. It should be properly set, attaining its design ' },
                    //                         { checksHeading: 'Leftover formwork Check', checksdescription: 'The plinth area and footing pit should be checked for any leftover formwork materials and should be removed before filling. ' },
                    //                         { checksHeading: 'Cleaning check', checksdescription: 'Any organic matter, wooden logs, plant roots, etc. should be cleaned, as they form voids after decay, causing settlement in the filling, due to weak compaction. ' },
                    //                         { checksHeading: 'Water Check', checksdescription: 'If there is any water in the pit, trenches, and plinth areas, it should be drained out.' },
                    //                         { checksHeading: 'Material check', checksdescription: 'The construction soil (moorum) should be free from organic matter, plant roots, clay lumps, chemicals, etc. The soil should be granular in structure, with a reddish-brown' },
                    //                         { checksHeading: 'Soil Check', checksdescription: 'If the soil excavated from the footing pit is black cotton, it should be removed completely and strictly avoided from refilling.' },
                    //                         { checksHeading: 'Top level check', checksdescription: 'Top level of filling has been marked' },
                    //                         { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Filling Layers Check', checksdescription: 'Construction soil should be spread in layers of 15 to 20cm. thickness, if you are using manual rammers, and it can be filled up to 30cm in thickness for the mechanical ' },
                    //                         { checksHeading: 'Layer Check', checksdescription: 'In any case, you should not fill the soil layer above 30cm depth, to achieve good compaction of the soil.' },
                    //                         { checksHeading: 'Watering Check', checksdescription: 'After completing the first layer of spreading, sprinkled with water to attain optimum moisture content, so that we can achieve the maximum dry density of soil after ' },
                    //                         { checksHeading: 'Ramming check', checksdescription: 'The ramming should be done from one end, covering all the areas. It is always advisable to use mechanical compactors, as the work carried out will be more efficient.' },
                    //                     ];

                    //                     async function backfillingchChacks() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Checks(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             checksID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     backfillingchChacks();
                    //                 }



                    //                 if (newDatanew.subactivityname === "BS Hard Filling - PRSLS") {

                    //                     const dataArranew = [
                    //                         { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Calculate the quantity of backfilling material and ask the purchase manager to arrange it' },
                    //                         { subtaskdescription: 'Assign the labour and Contractor for the backfilling' },
                    //                         { subtaskdescription: 'Make the arrangements for water' },
                    //                         { subtaskdescription: 'Arrange the rammer at site ' },
                    //                         { subtaskdescription: 'Inform the contractor about the filling procedure' },
                    //                         { subtaskdescription: 'Ask the contractor to remove the debris if any from the filling material' },
                    //                         { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Ask the contractor to mark the top level of filling in each section i.e, which area will be down or up' },
                    //                         { subtaskdescription: 'Ask the contractor not to fill the layers more than 300mm' },
                    //                         { subtaskdescription: 'Ask the contractor for watering the filling material' },
                    //                         { subtaskdescription: 'Ask the contractor for proper compaction' },
                    //                         { subtaskdescription: 'Ask the contractor to give the final level in compaction and 6mm Aggreagte to be laid so that the grade slab work can be carried out directly' },
                    //                     ];

                    //                     async function BackFillingfunCall() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Subtask(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             subtaskID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     BackFillingfunCall();
                    //                 }









                    //                 if (newDatanew.subactivityname === "BS Hard Filling Work - RSL") {

                    //                     const dataArranew = [
                    //                         { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Deshuttering check', checksdescription: 'All the concrete structures like footings, columns, plinth beams, etc. should be completed with de-shuttering of the formwork, removal of stagings, etc.' },
                    //                         { checksHeading: 'Honeycombing repair check', checksdescription: 'All the honeycomb in the structures should be repaired before doing the plinth filling.' },
                    //                         { checksHeading: 'Masonry and Plaster check', checksdescription: 'All the plinth masonry work should be completed with the internal plaster, or by filling the leftover joints in a proper way.' },
                    //                         { checksHeading: 'Curing check', checksdescription: 'Before doing filling, ensure that all the concrete structures and masonry works have completed their minimal curing period. It should be properly set, attaining its design ' },
                    //                         { checksHeading: 'Leftover formwork Check', checksdescription: 'The plinth area and footing pit should be checked for any leftover formwork materials and should be removed before filling. ' },
                    //                         { checksHeading: 'Cleaning check', checksdescription: 'Any organic matter, wooden logs, plant roots, etc. should be cleaned, as they form voids after decay, causing settlement in the filling, due to weak compaction. ' },
                    //                         { checksHeading: 'Water Check', checksdescription: 'If there is any water in the pit, trenches, and plinth areas, it should be drained out.' },
                    //                         { checksHeading: 'Material check', checksdescription: 'The construction soil (moorum) should be free from organic matter, plant roots, clay lumps, chemicals, etc. The soil should be granular in structure, with a reddish-brown' },
                    //                         { checksHeading: 'Soil Check', checksdescription: 'If the soil excavated from the footing pit is black cotton, it should be removed completely and strictly avoided from refilling.' },
                    //                         { checksHeading: 'Top level check', checksdescription: 'Top level of filling has been marked' },
                    //                         { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Filling Layers Check', checksdescription: 'Construction soil should be spread in layers of 15 to 20cm. thickness, if you are using manual rammers, and it can be filled up to 30cm in thickness for the mechanical ' },
                    //                         { checksHeading: 'Layer Check', checksdescription: 'In any case, you should not fill the soil layer above 30cm depth, to achieve good compaction of the soil.' },
                    //                         { checksHeading: 'Watering Check', checksdescription: 'After completing the first layer of spreading, sprinkled with water to attain optimum moisture content, so that we can achieve the maximum dry density of soil after ' },
                    //                         { checksHeading: 'Ramming check', checksdescription: 'The ramming should be done from one end, covering all the areas. It is always advisable to use mechanical compactors, as the work carried out will be more efficient.' },
                    //                     ];

                    //                     async function backfillingchChacks() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Checks(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             checksID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     backfillingchChacks();
                    //                 }



                    //                 if (newDatanew.subactivityname === "BS Hard Filling Work - RSL") {

                    //                     const dataArranew = [
                    //                         { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Calculate the quantity of backfilling material and ask the purchase manager to arrange it' },
                    //                         { subtaskdescription: 'Assign the labour and Contractor for the backfilling' },
                    //                         { subtaskdescription: 'Make the arrangements for water' },
                    //                         { subtaskdescription: 'Arrange the rammer at site ' },
                    //                         { subtaskdescription: 'Inform the contractor about the filling procedure' },
                    //                         { subtaskdescription: 'Ask the contractor to remove the debris if any from the filling material' },
                    //                         { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Ask the contractor to mark the top level of filling in each section i.e, which area will be down or up' },
                    //                         { subtaskdescription: 'Ask the contractor not to fill the layers more than 300mm' },
                    //                         { subtaskdescription: 'Ask the contractor for watering the filling material' },
                    //                         { subtaskdescription: 'Ask the contractor for proper compaction' },
                    //                         { subtaskdescription: 'Ask the contractor to give the final level in compaction and 6mm Aggreagte to be laid so that the grade slab work can be carried out directly' },
                    //                     ];

                    //                     async function BackFillingfunCall() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Subtask(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             subtaskID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     BackFillingfunCall();
                    //                 }













                    //                 if (newDatanew.subactivityname === "Site Clearance") {

                    //                     const dataArranew = [
                    //                         { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Finalize the assigning authotrity to do Site Clearance Work' },
                    //                         { subtaskdescription: 'Assiging Date for clearance as per the contract creation & PM approval' },
                    //                         { subtaskdescription: 'Search also for the near by dump yard or ask the JCB person to find it by their own' },
                    //                         { subtaskdescription: 'Finalize for the depth of clearance' },
                    //                         { subtaskdescription: 'Schedule Date for Clearing the Site & Dumping Nearby' },
                    //                         { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Make the arrangements for tree cutting/dewatering if required' },
                    //                         { subtaskdescription: 'JCB Start & End Reading Record, If Site clearance is done under the KONNBOT' },
                    //                         { subtaskdescription: 'Make assure that the Roots are taken out as deep as feasible for the JCB to cut off' },
                    //                         { subtaskdescription: 'Avalabiltiy of the motor for dewatering on site, with time calculation & other factors ' },
                    //                         { subtaskdescription: 'In case of continous water sources, diversion or internal team discussion coming up with possible solution' },
                    //                         { subtaskdescription: 'Phase 3', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'After clearing the site, the difference in the level from road to site ground level. (in inches)' },
                    //                     ];

                    //                     async function siteClearanceCallingnow() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Subtask(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             subtaskID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     siteClearanceCallingnow();
                    //                 }






                    //                 if (newDatanew.subactivityname === "Site Clearance") {

                    //                     const dataArranew = [
                    //                         { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Clearance check', checksdescription: 'Does the site need to be cleared' },
                    //                         { checksHeading: 'Method check', checksdescription: 'Does it require a JCB for cleaning or it can be done by the labour.' },
                    //                         { checksHeading: 'Tree Check', checksdescription: 'If by any chance we have tree or any other important things on site, than client will handel this issue by his own, KONNBOT wont interfere in any matter.' },
                    //                         { checksHeading: 'Phase 3', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Roots Check', checksdescription: 'Once the tree has been removed (if present) it should be ensured that the roots are damaged and taken out from the site' },
                    //                         { checksHeading: 'Cleaning Check', checksdescription: 'After the site clearance the adjacent roads to be cleaned so that there is no objection from the neighbours' },
                    //                     ];

                    //                     async function siteclearancesChacks() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Checks(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             checksID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     siteclearancesChacks();
                    //                 }













                    //                 if (newDatanew.subactivityname === "BS Pedestal RCC - IRDL") {

                    //                     const dataArranew = [
                    //                         { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Gridline check', checksdescription: 'Plotting of gridline for center of column above plinth / floor slab.' },
                    //                         { checksHeading: 'Lapping check', checksdescription: 'Binding & placing column reinforcement above upper floor slab as per required height, considering lap length of the bar.' },
                    //                         { checksHeading: 'Drawing check', checksdescription: 'Check if the column reinforcement is as per the lastest structural drawings' },
                    //                         { checksHeading: 'Shuttering Oil check', checksdescription: 'Check if the shuttering is properly cleaned and oiled' },
                    //                         { checksHeading: 'Packing check', checksdescription: 'Check if the gaps at joints are properly packed' },
                    //                         { checksHeading: 'Support check', checksdescription: 'Check if the props are resting on hard surface so as to prevent misalignment of columns' },
                    //                         { checksHeading: 'Concrete level check', checksdescription: 'Check if the top level of concrete has been marked' },
                    //                         { checksHeading: 'Material check', checksdescription: 'The material (cement,sand and aggregate) to be used for  concreting are of good quality' },
                    //                         { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Compaction check', checksdescription: 'Check if the concrete is properly compacted with the help of vibrators to reduce the air voids' },
                    //                         { checksHeading: 'Concrete Filling Check', checksdescription: 'Concrete filling should be continuous, for each column No Break in between or Mixer Break' },
                    //                         { checksHeading: 'W/C ratio check', checksdescription: 'Controlled water cement ratio.' },
                    //                         { checksHeading: 'Compaction check', checksdescription: 'Proper compaction of concrete' },
                    //                         { checksHeading: 'Phase 3', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Deshuttering check', checksdescription: 'Deshuttering of columns after 24 hrs-48 hrs.' },
                    //                         { checksHeading: '', checksdescription: 'Submission of the deshuttering report to higher authority.' },
                    //                         { checksHeading: 'Curing check', checksdescription: 'Curing of Columns minimum for 10 days' },
                    //                     ];

                    //                     async function pedastalrccChacks() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Checks(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             checksID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     pedastalrccChacks();
                    //                 }




                    //                 if (newDatanew.subactivityname === "BS Pedestal RCC - IRDL") {

                    //                     const dataArranew = [
                    //                         { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Assign the labour and Contractor for the work' },
                    //                         { subtaskdescription: 'Explain the contractor about the work' },
                    //                         { subtaskdescription: 'Arrange the rebars and Binding Wires at site' },
                    //                         { subtaskdescription: 'Ask the contractor to arrange the shuttering and supports at site' },
                    //                         { subtaskdescription: 'Ask the contractor to make the arrangements for concrete mixer ,vibrator and Diesel' },
                    //                         { subtaskdescription: 'Calculate the material required for RCC and infrom the purchase manager' },
                    //                         { subtaskdescription: 'Aks the contractor to use the workable shuttering only  and do proper oiling of shuttering' },
                    //                         { subtaskdescription: 'Arrange the cover blocks at site and ask the contractor to place them' },
                    //                         { subtaskdescription: 'Arrange the putty,thermocol and Tape' },
                    //                         { subtaskdescription: 'Ask the contractor to make the arrangements for pouring of concrete' },
                    //                         { subtaskdescription: 'Arrange the water for concreting' },
                    //                         { subtaskdescription: 'Ask the contractor to check the electricity connections' },
                    //                         { subtaskdescription: 'Ask the contractor to clean and oil the shuttering and fill the gaps' },
                    //                         { subtaskdescription: 'Ask the contractor to mark the top level of concreting' },
                    //                         { subtaskdescription: 'Ask the contractor to check the line and Level' },
                    //                         { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Inform the contractor about the concrete mix ratio' },
                    //                         { subtaskdescription: 'Ask the contractor to control the water cement ratio' },
                    //                         { subtaskdescription: 'Ask the contractor to do proper compaction' },
                    //                         { subtaskdescription: 'Inform the contractor about the date of deshuttering' },
                    //                         { subtaskdescription: 'Phase 3', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Check for honeycombing during deshuttering and ask the contractor to repair it properly' },
                    //                         { subtaskdescription: 'Ask the guard to paint the curing compound' },
                    //                         { subtaskdescription: 'Ask the Guard to do three times curing' },
                    //                     ];

                    //                     async function RCCPedestalfunCall() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Subtask(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             subtaskID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     RCCPedestalfunCall();
                    //                 }
















                    //                 if (newDatanew.subactivityname === "R.C.C Pedestal") {

                    //                     const dataArranew = [
                    //                         { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Gridline check', checksdescription: 'Plotting of gridline for center of column above plinth / floor slab.' },
                    //                         { checksHeading: 'Lapping check', checksdescription: 'Binding & placing column reinforcement above upper floor slab as per required height, considering lap length of the bar.' },
                    //                         { checksHeading: 'Drawing check', checksdescription: 'Check if the column reinforcement is as per the lastest structural drawings' },
                    //                         { checksHeading: 'Shuttering Oil check', checksdescription: 'Check if the shuttering is properly cleaned and oiled' },
                    //                         { checksHeading: 'Packing check', checksdescription: 'Check if the gaps at joints are properly packed' },
                    //                         { checksHeading: 'Support check', checksdescription: 'Check if the props are resting on hard surface so as to prevent misalignment of columns' },
                    //                         { checksHeading: 'Concrete level check', checksdescription: 'Check if the top level of concrete has been marked' },
                    //                         { checksHeading: 'Material check', checksdescription: 'The material (cement,sand and aggregate) to be used for  concreting are of good quality' },
                    //                         { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Compaction check', checksdescription: 'Check if the concrete is properly compacted with the help of vibrators to reduce the air voids' },
                    //                         { checksHeading: 'Concrete Filling Check', checksdescription: 'Concrete filling should be continuous, for each column No Break in between or Mixer Break' },
                    //                         { checksHeading: 'W/C ratio check', checksdescription: 'Controlled water cement ratio.' },
                    //                         { checksHeading: 'Compaction check', checksdescription: 'Proper compaction of concrete' },
                    //                         { checksHeading: 'Phase 3', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Deshuttering check', checksdescription: 'Deshuttering of columns after 24 hrs-48 hrs.' },
                    //                         { checksHeading: '', checksdescription: 'Submission of the deshuttering report to higher authority.' },
                    //                         { checksHeading: 'Curing check', checksdescription: 'Curing of Columns minimum for 10 days' },
                    //                     ];

                    //                     async function pedastalrccChacks() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Checks(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             checksID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     pedastalrccChacks();
                    //                 }




                    //                 if (newDatanew.subactivityname === "R.C.C Pedestal") {

                    //                     const dataArranew = [
                    //                         { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Assign the labour and Contractor for the work' },
                    //                         { subtaskdescription: 'Explain the contractor about the work' },
                    //                         { subtaskdescription: 'Arrange the rebars and Binding Wires at site' },
                    //                         { subtaskdescription: 'Ask the contractor to arrange the shuttering and supports at site' },
                    //                         { subtaskdescription: 'Ask the contractor to make the arrangements for concrete mixer ,vibrator and Diesel' },
                    //                         { subtaskdescription: 'Calculate the material required for RCC and infrom the purchase manager' },
                    //                         { subtaskdescription: 'Aks the contractor to use the workable shuttering only  and do proper oiling of shuttering' },
                    //                         { subtaskdescription: 'Arrange the cover blocks at site and ask the contractor to place them' },
                    //                         { subtaskdescription: 'Arrange the putty,thermocol and Tape' },
                    //                         { subtaskdescription: 'Ask the contractor to make the arrangements for pouring of concrete' },
                    //                         { subtaskdescription: 'Arrange the water for concreting' },
                    //                         { subtaskdescription: 'Ask the contractor to check the electricity connections' },
                    //                         { subtaskdescription: 'Ask the contractor to clean and oil the shuttering and fill the gaps' },
                    //                         { subtaskdescription: 'Ask the contractor to mark the top level of concreting' },
                    //                         { subtaskdescription: 'Ask the contractor to check the line and Level' },
                    //                         { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Inform the contractor about the concrete mix ratio' },
                    //                         { subtaskdescription: 'Ask the contractor to control the water cement ratio' },
                    //                         { subtaskdescription: 'Ask the contractor to do proper compaction' },
                    //                         { subtaskdescription: 'Inform the contractor about the date of deshuttering' },
                    //                         { subtaskdescription: 'Phase 3', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Check for honeycombing during deshuttering and ask the contractor to repair it properly' },
                    //                         { subtaskdescription: 'Ask the guard to paint the curing compound' },
                    //                         { subtaskdescription: 'Ask the Guard to do three times curing' },
                    //                     ];

                    //                     async function RCCPedestalfunCall() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Subtask(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             subtaskID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     RCCPedestalfunCall();
                    //                 }



































                    //                 if (newDatanew.subactivityname === "BS Footing RCC - IRDL") {

                    //                     const dataArranew = [
                    //                         { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Assign the labour and Contractor' },
                    //                         { subtaskdescription: 'Ask the contractor to make the arrangements for concrete mixer ,vibrator and Diesel' },
                    //                         { subtaskdescription: 'Calculate the material required for RCC and infrom the purchase manager' },
                    //                         { subtaskdescription: 'Ask the contractor to arrange the shuttering and Supports' },
                    //                         { subtaskdescription: 'Ask the contractor to use workable shuttering only and apply shuttering oil' },
                    //                         { subtaskdescription: 'Arrange the cover blocks and ask the contractor to place them properly' },
                    //                         { subtaskdescription: 'Arrange the putty,thermocol and tape' },
                    //                         { subtaskdescription: 'Ask the contractor to make the arrangments for concrete pouring' },
                    //                         { subtaskdescription: 'Ask the contractor to mark the top level of concrete' },
                    //                         { subtaskdescription: 'Ask the contractor to fill the gaps' },
                    //                         { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Ask the contractor for proper compaction of concrete' },
                    //                         { subtaskdescription: 'Ask the contractor to do the concreting continuously' },
                    //                         { subtaskdescription: 'Ask the contractor to do the proper levelling of concrete' },
                    //                         { subtaskdescription: 'Phase 3', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Check if any honeycombing occures and ask the contractor to repair it immediately' },
                    //                         { subtaskdescription: 'Make the arrangements for curing' },
                    //                         { subtaskdescription: 'Ask the guard to do proper Curing' },
                    //                     ];

                    //                     async function RCCFootingfunCall() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Subtask(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             subtaskID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     RCCFootingfunCall();
                    //                 }





                    //                 if (newDatanew.subactivityname === "BS Footing RCC - IRDL") {

                    //                     const dataArranew = [
                    //                         { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Shuttering oil check', checksdescription: 'Check if the shuttering is properly cleaned and oiled' },
                    //                         { checksHeading: 'Material Check', checksdescription: 'The material (cement,sand and aggregate) to be used for  concreting are of good quality' },
                    //                         { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Compaction Check', checksdescription: 'Check if the concrete is properly compacted with the help of vibrators to reduce the air voids' },
                    //                         { checksHeading: 'Concrete level Check', checksdescription: 'Concrete filled evenly upto required level' },
                    //                         { checksHeading: 'Height check', checksdescription: 'Concrete not dropped from height greater than 1.5 - 1.8 m and thrown at distance greater than 2m' },
                    //                         { checksHeading: 'Concrete Filling Check', checksdescription: 'Concrete filling should be continuous, for every footing, No Break in between or Mixer Break' },
                    //                         { checksHeading: 'Finishing check', checksdescription: 'Proper levelling of concrete has been done' },
                    //                         { checksHeading: 'Phase 3', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Deshuttering check', checksdescription: 'Check if the deshuttering has been done as per the standards' },
                    //                         { checksHeading: 'Curing Check', checksdescription: 'Check if proper curing has been done' },
                    //                     ];

                    //                     async function rccworkchChacks() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Checks(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             checksID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     rccworkchChacks();
                    //                 }













                    //                 if (newDatanew.subactivityname === "BS Raft RCC  - IRDL") {

                    //                     const dataArranew = [
                    //                         { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Shuttering oil check', checksdescription: 'Check if the shuttering is properly cleaned and oiled' },
                    //                         { checksHeading: 'Material Check', checksdescription: 'The material (cement,sand and aggregate) to be used for  concreting are of good quality' },
                    //                         { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Compaction Check', checksdescription: 'Check if the concrete is properly compacted with the help of vibrators to reduce the air voids' },
                    //                         { checksHeading: 'Concrete level Check', checksdescription: 'Concrete filled evenly upto required level' },
                    //                         { checksHeading: 'Height check', checksdescription: 'Concrete not dropped from height greater than 1.5 - 1.8 m and thrown at distance greater than 2m' },
                    //                         { checksHeading: 'Concrete Filling Check', checksdescription: 'Concrete filling should be continuous, for every footing, No Break in between or Mixer Break' },
                    //                         { checksHeading: 'Finishing check', checksdescription: 'Proper levelling of concrete has been done' },
                    //                         { checksHeading: 'Phase 3', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Deshuttering check', checksdescription: 'Check if the deshuttering has been done as per the standards' },
                    //                         { checksHeading: 'Curing Check', checksdescription: 'Check if proper curing has been done' },
                    //                     ];

                    //                     async function rccworkchChacks() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Checks(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             checksID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     rccworkchChacks();
                    //                 }






                    //                 if (newDatanew.subactivityname === "BS Raft RCC  - IRDL") {

                    //                     const dataArranew = [
                    //                         { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Assign the labour and Contractor' },
                    //                         { subtaskdescription: 'Ask the contractor to make the arrangements for concrete mixer ,vibrator and Diesel' },
                    //                         { subtaskdescription: 'Calculate the material required for RCC and infrom the purchase manager' },
                    //                         { subtaskdescription: 'Ask the contractor to arrange the shuttering and Supports' },
                    //                         { subtaskdescription: 'Ask the contractor to use workable shuttering only and apply shuttering oil' },
                    //                         { subtaskdescription: 'Arrange the cover blocks and ask the contractor to place them properly' },
                    //                         { subtaskdescription: 'Arrange the putty,thermocol and tape' },
                    //                         { subtaskdescription: 'Ask the contractor to make the arrangments for concrete pouring' },
                    //                         { subtaskdescription: 'Ask the contractor to mark the top level of concrete' },
                    //                         { subtaskdescription: 'Ask the contractor to fill the gaps' },
                    //                         { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Ask the contractor for proper compaction of concrete' },
                    //                         { subtaskdescription: 'Ask the contractor to do the concreting continuously' },
                    //                         { subtaskdescription: 'Ask the contractor to do the proper levelling of concrete' },
                    //                         { subtaskdescription: 'Phase 3', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Check if any honeycombing occures and ask the contractor to repair it immediately' },
                    //                         { subtaskdescription: 'Make the arrangements for curing' },
                    //                         { subtaskdescription: 'Ask the guard to do proper Curing' },
                    //                     ];

                    //                     async function RCCFootingfunCall() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Subtask(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             subtaskID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     RCCFootingfunCall();
                    //                 }

















                    //                 if (newDatanew.subactivityname === "BS Footing RCC - IRSLB") {

                    //                     const dataArranew = [
                    //                         { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Shuttering oil check', checksdescription: 'Check if the shuttering is properly cleaned and oiled' },
                    //                         { checksHeading: 'Material Check', checksdescription: 'The material (cement,sand and aggregate) to be used for  concreting are of good quality' },
                    //                         { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Compaction Check', checksdescription: 'Check if the concrete is properly compacted with the help of vibrators to reduce the air voids' },
                    //                         { checksHeading: 'Concrete level Check', checksdescription: 'Concrete filled evenly upto required level' },
                    //                         { checksHeading: 'Height check', checksdescription: 'Concrete not dropped from height greater than 1.5 - 1.8 m and thrown at distance greater than 2m' },
                    //                         { checksHeading: 'Concrete Filling Check', checksdescription: 'Concrete filling should be continuous, for every footing, No Break in between or Mixer Break' },
                    //                         { checksHeading: 'Finishing check', checksdescription: 'Proper levelling of concrete has been done' },
                    //                         { checksHeading: 'Phase 3', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Deshuttering check', checksdescription: 'Check if the deshuttering has been done as per the standards' },
                    //                         { checksHeading: 'Curing Check', checksdescription: 'Check if proper curing has been done' },
                    //                     ];

                    //                     async function rccworkchChacks() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Checks(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             checksID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     rccworkchChacks();
                    //                 }






                    //                 if (newDatanew.subactivityname === "BS Footing RCC - IRSLB") {

                    //                     const dataArranew = [
                    //                         { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Assign the labour and Contractor' },
                    //                         { subtaskdescription: 'Ask the contractor to make the arrangements for concrete mixer ,vibrator and Diesel' },
                    //                         { subtaskdescription: 'Calculate the material required for RCC and infrom the purchase manager' },
                    //                         { subtaskdescription: 'Ask the contractor to arrange the shuttering and Supports' },
                    //                         { subtaskdescription: 'Ask the contractor to use workable shuttering only and apply shuttering oil' },
                    //                         { subtaskdescription: 'Arrange the cover blocks and ask the contractor to place them properly' },
                    //                         { subtaskdescription: 'Arrange the putty,thermocol and tape' },
                    //                         { subtaskdescription: 'Ask the contractor to make the arrangments for concrete pouring' },
                    //                         { subtaskdescription: 'Ask the contractor to mark the top level of concrete' },
                    //                         { subtaskdescription: 'Ask the contractor to fill the gaps' },
                    //                         { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Ask the contractor for proper compaction of concrete' },
                    //                         { subtaskdescription: 'Ask the contractor to do the concreting continuously' },
                    //                         { subtaskdescription: 'Ask the contractor to do the proper levelling of concrete' },
                    //                         { subtaskdescription: 'Phase 3', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Check if any honeycombing occures and ask the contractor to repair it immediately' },
                    //                         { subtaskdescription: 'Make the arrangements for curing' },
                    //                         { subtaskdescription: 'Ask the guard to do proper Curing' },
                    //                     ];

                    //                     async function RCCFootingfunCall() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Subtask(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             subtaskID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     RCCFootingfunCall();
                    //                 }


























                    //                 if (newDatanew.subactivityname === "BS Raft Footing RCC - IRSLS") {

                    //                     const dataArranew = [
                    //                         { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Shuttering oil check', checksdescription: 'Check if the shuttering is properly cleaned and oiled' },
                    //                         { checksHeading: 'Material Check', checksdescription: 'The material (cement,sand and aggregate) to be used for  concreting are of good quality' },
                    //                         { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Compaction Check', checksdescription: 'Check if the concrete is properly compacted with the help of vibrators to reduce the air voids' },
                    //                         { checksHeading: 'Concrete level Check', checksdescription: 'Concrete filled evenly upto required level' },
                    //                         { checksHeading: 'Height check', checksdescription: 'Concrete not dropped from height greater than 1.5 - 1.8 m and thrown at distance greater than 2m' },
                    //                         { checksHeading: 'Concrete Filling Check', checksdescription: 'Concrete filling should be continuous, for every footing, No Break in between or Mixer Break' },
                    //                         { checksHeading: 'Finishing check', checksdescription: 'Proper levelling of concrete has been done' },
                    //                         { checksHeading: 'Phase 3', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Deshuttering check', checksdescription: 'Check if the deshuttering has been done as per the standards' },
                    //                         { checksHeading: 'Curing Check', checksdescription: 'Check if proper curing has been done' },
                    //                     ];

                    //                     async function rccworkchChacks() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Checks(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             checksID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     rccworkchChacks();
                    //                 }






                    //                 if (newDatanew.subactivityname === "BS Raft Footing RCC - IRSLS") {

                    //                     const dataArranew = [
                    //                         { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Assign the labour and Contractor' },
                    //                         { subtaskdescription: 'Ask the contractor to make the arrangements for concrete mixer ,vibrator and Diesel' },
                    //                         { subtaskdescription: 'Calculate the material required for RCC and infrom the purchase manager' },
                    //                         { subtaskdescription: 'Ask the contractor to arrange the shuttering and Supports' },
                    //                         { subtaskdescription: 'Ask the contractor to use workable shuttering only and apply shuttering oil' },
                    //                         { subtaskdescription: 'Arrange the cover blocks and ask the contractor to place them properly' },
                    //                         { subtaskdescription: 'Arrange the putty,thermocol and tape' },
                    //                         { subtaskdescription: 'Ask the contractor to make the arrangments for concrete pouring' },
                    //                         { subtaskdescription: 'Ask the contractor to mark the top level of concrete' },
                    //                         { subtaskdescription: 'Ask the contractor to fill the gaps' },
                    //                         { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Ask the contractor for proper compaction of concrete' },
                    //                         { subtaskdescription: 'Ask the contractor to do the concreting continuously' },
                    //                         { subtaskdescription: 'Ask the contractor to do the proper levelling of concrete' },
                    //                         { subtaskdescription: 'Phase 3', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Check if any honeycombing occures and ask the contractor to repair it immediately' },
                    //                         { subtaskdescription: 'Make the arrangements for curing' },
                    //                         { subtaskdescription: 'Ask the guard to do proper Curing' },
                    //                     ];

                    //                     async function RCCFootingfunCall() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Subtask(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             subtaskID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     RCCFootingfunCall();
                    //                 }














                    //                 if (newDatanew.subactivityname === "BS Pile RCC - PRSLB") {

                    //                     const dataArranew = [
                    //                         { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Shuttering oil check', checksdescription: 'Check if the shuttering is properly cleaned and oiled' },
                    //                         { checksHeading: 'Material Check', checksdescription: 'The material (cement,sand and aggregate) to be used for  concreting are of good quality' },
                    //                         { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Compaction Check', checksdescription: 'Check if the concrete is properly compacted with the help of vibrators to reduce the air voids' },
                    //                         { checksHeading: 'Concrete level Check', checksdescription: 'Concrete filled evenly upto required level' },
                    //                         { checksHeading: 'Height check', checksdescription: 'Concrete not dropped from height greater than 1.5 - 1.8 m and thrown at distance greater than 2m' },
                    //                         { checksHeading: 'Concrete Filling Check', checksdescription: 'Concrete filling should be continuous, for every footing, No Break in between or Mixer Break' },
                    //                         { checksHeading: 'Finishing check', checksdescription: 'Proper levelling of concrete has been done' },
                    //                         { checksHeading: 'Phase 3', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Deshuttering check', checksdescription: 'Check if the deshuttering has been done as per the standards' },
                    //                         { checksHeading: 'Curing Check', checksdescription: 'Check if proper curing has been done' },
                    //                     ];

                    //                     async function rccworkchChacks() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Checks(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             checksID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     rccworkchChacks();
                    //                 }






                    //                 if (newDatanew.subactivityname === "BS Pile RCC - PRSLB") {

                    //                     const dataArranew = [
                    //                         { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Assign the labour and Contractor' },
                    //                         { subtaskdescription: 'Ask the contractor to make the arrangements for concrete mixer ,vibrator and Diesel' },
                    //                         { subtaskdescription: 'Calculate the material required for RCC and infrom the purchase manager' },
                    //                         { subtaskdescription: 'Ask the contractor to arrange the shuttering and Supports' },
                    //                         { subtaskdescription: 'Ask the contractor to use workable shuttering only and apply shuttering oil' },
                    //                         { subtaskdescription: 'Arrange the cover blocks and ask the contractor to place them properly' },
                    //                         { subtaskdescription: 'Arrange the putty,thermocol and tape' },
                    //                         { subtaskdescription: 'Ask the contractor to make the arrangments for concrete pouring' },
                    //                         { subtaskdescription: 'Ask the contractor to mark the top level of concrete' },
                    //                         { subtaskdescription: 'Ask the contractor to fill the gaps' },
                    //                         { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Ask the contractor for proper compaction of concrete' },
                    //                         { subtaskdescription: 'Ask the contractor to do the concreting continuously' },
                    //                         { subtaskdescription: 'Ask the contractor to do the proper levelling of concrete' },
                    //                         { subtaskdescription: 'Phase 3', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Check if any honeycombing occures and ask the contractor to repair it immediately' },
                    //                         { subtaskdescription: 'Make the arrangements for curing' },
                    //                         { subtaskdescription: 'Ask the guard to do proper Curing' },
                    //                     ];

                    //                     async function RCCFootingfunCall() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Subtask(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             subtaskID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     RCCFootingfunCall();
                    //                 }






















                    //                 if (newDatanew.subactivityname === "BS Raft RCC - PRSLB") {

                    //                     const dataArranew = [
                    //                         { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Shuttering oil check', checksdescription: 'Check if the shuttering is properly cleaned and oiled' },
                    //                         { checksHeading: 'Material Check', checksdescription: 'The material (cement,sand and aggregate) to be used for  concreting are of good quality' },
                    //                         { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Compaction Check', checksdescription: 'Check if the concrete is properly compacted with the help of vibrators to reduce the air voids' },
                    //                         { checksHeading: 'Concrete level Check', checksdescription: 'Concrete filled evenly upto required level' },
                    //                         { checksHeading: 'Height check', checksdescription: 'Concrete not dropped from height greater than 1.5 - 1.8 m and thrown at distance greater than 2m' },
                    //                         { checksHeading: 'Concrete Filling Check', checksdescription: 'Concrete filling should be continuous, for every footing, No Break in between or Mixer Break' },
                    //                         { checksHeading: 'Finishing check', checksdescription: 'Proper levelling of concrete has been done' },
                    //                         { checksHeading: 'Phase 3', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Deshuttering check', checksdescription: 'Check if the deshuttering has been done as per the standards' },
                    //                         { checksHeading: 'Curing Check', checksdescription: 'Check if proper curing has been done' },
                    //                     ];

                    //                     async function rccworkchChacks() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Checks(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             checksID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     rccworkchChacks();
                    //                 }






                    //                 if (newDatanew.subactivityname === "BS Raft RCC - PRSLB") {

                    //                     const dataArranew = [
                    //                         { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Assign the labour and Contractor' },
                    //                         { subtaskdescription: 'Ask the contractor to make the arrangements for concrete mixer ,vibrator and Diesel' },
                    //                         { subtaskdescription: 'Calculate the material required for RCC and infrom the purchase manager' },
                    //                         { subtaskdescription: 'Ask the contractor to arrange the shuttering and Supports' },
                    //                         { subtaskdescription: 'Ask the contractor to use workable shuttering only and apply shuttering oil' },
                    //                         { subtaskdescription: 'Arrange the cover blocks and ask the contractor to place them properly' },
                    //                         { subtaskdescription: 'Arrange the putty,thermocol and tape' },
                    //                         { subtaskdescription: 'Ask the contractor to make the arrangments for concrete pouring' },
                    //                         { subtaskdescription: 'Ask the contractor to mark the top level of concrete' },
                    //                         { subtaskdescription: 'Ask the contractor to fill the gaps' },
                    //                         { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Ask the contractor for proper compaction of concrete' },
                    //                         { subtaskdescription: 'Ask the contractor to do the concreting continuously' },
                    //                         { subtaskdescription: 'Ask the contractor to do the proper levelling of concrete' },
                    //                         { subtaskdescription: 'Phase 3', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Check if any honeycombing occures and ask the contractor to repair it immediately' },
                    //                         { subtaskdescription: 'Make the arrangements for curing' },
                    //                         { subtaskdescription: 'Ask the guard to do proper Curing' },
                    //                     ];

                    //                     async function RCCFootingfunCall() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Subtask(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             subtaskID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     RCCFootingfunCall();
                    //                 }


























                    //                 if (newDatanew.subactivityname === "BS Pile RCC - PRSLS") {

                    //                     const dataArranew = [
                    //                         { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Shuttering oil check', checksdescription: 'Check if the shuttering is properly cleaned and oiled' },
                    //                         { checksHeading: 'Material Check', checksdescription: 'The material (cement,sand and aggregate) to be used for  concreting are of good quality' },
                    //                         { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Compaction Check', checksdescription: 'Check if the concrete is properly compacted with the help of vibrators to reduce the air voids' },
                    //                         { checksHeading: 'Concrete level Check', checksdescription: 'Concrete filled evenly upto required level' },
                    //                         { checksHeading: 'Height check', checksdescription: 'Concrete not dropped from height greater than 1.5 - 1.8 m and thrown at distance greater than 2m' },
                    //                         { checksHeading: 'Concrete Filling Check', checksdescription: 'Concrete filling should be continuous, for every footing, No Break in between or Mixer Break' },
                    //                         { checksHeading: 'Finishing check', checksdescription: 'Proper levelling of concrete has been done' },
                    //                         { checksHeading: 'Phase 3', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Deshuttering check', checksdescription: 'Check if the deshuttering has been done as per the standards' },
                    //                         { checksHeading: 'Curing Check', checksdescription: 'Check if proper curing has been done' },
                    //                     ];

                    //                     async function rccworkchChacks() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Checks(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             checksID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     rccworkchChacks();
                    //                 }






                    //                 if (newDatanew.subactivityname === "BS Pile RCC - PRSLS") {

                    //                     const dataArranew = [
                    //                         { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Assign the labour and Contractor' },
                    //                         { subtaskdescription: 'Ask the contractor to make the arrangements for concrete mixer ,vibrator and Diesel' },
                    //                         { subtaskdescription: 'Calculate the material required for RCC and infrom the purchase manager' },
                    //                         { subtaskdescription: 'Ask the contractor to arrange the shuttering and Supports' },
                    //                         { subtaskdescription: 'Ask the contractor to use workable shuttering only and apply shuttering oil' },
                    //                         { subtaskdescription: 'Arrange the cover blocks and ask the contractor to place them properly' },
                    //                         { subtaskdescription: 'Arrange the putty,thermocol and tape' },
                    //                         { subtaskdescription: 'Ask the contractor to make the arrangments for concrete pouring' },
                    //                         { subtaskdescription: 'Ask the contractor to mark the top level of concrete' },
                    //                         { subtaskdescription: 'Ask the contractor to fill the gaps' },
                    //                         { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Ask the contractor for proper compaction of concrete' },
                    //                         { subtaskdescription: 'Ask the contractor to do the concreting continuously' },
                    //                         { subtaskdescription: 'Ask the contractor to do the proper levelling of concrete' },
                    //                         { subtaskdescription: 'Phase 3', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Check if any honeycombing occures and ask the contractor to repair it immediately' },
                    //                         { subtaskdescription: 'Make the arrangements for curing' },
                    //                         { subtaskdescription: 'Ask the guard to do proper Curing' },
                    //                     ];

                    //                     async function RCCFootingfunCall() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Subtask(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             subtaskID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     RCCFootingfunCall();
                    //                 }













                    //                 if (newDatanew.subactivityname === "BS Raft Footing RCC - PRSLS") {

                    //                     const dataArranew = [
                    //                         { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Shuttering oil check', checksdescription: 'Check if the shuttering is properly cleaned and oiled' },
                    //                         { checksHeading: 'Material Check', checksdescription: 'The material (cement,sand and aggregate) to be used for  concreting are of good quality' },
                    //                         { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Compaction Check', checksdescription: 'Check if the concrete is properly compacted with the help of vibrators to reduce the air voids' },
                    //                         { checksHeading: 'Concrete level Check', checksdescription: 'Concrete filled evenly upto required level' },
                    //                         { checksHeading: 'Height check', checksdescription: 'Concrete not dropped from height greater than 1.5 - 1.8 m and thrown at distance greater than 2m' },
                    //                         { checksHeading: 'Concrete Filling Check', checksdescription: 'Concrete filling should be continuous, for every footing, No Break in between or Mixer Break' },
                    //                         { checksHeading: 'Finishing check', checksdescription: 'Proper levelling of concrete has been done' },
                    //                         { checksHeading: 'Phase 3', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Deshuttering check', checksdescription: 'Check if the deshuttering has been done as per the standards' },
                    //                         { checksHeading: 'Curing Check', checksdescription: 'Check if proper curing has been done' },
                    //                     ];

                    //                     async function rccworkchChacks() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Checks(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             checksID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     rccworkchChacks();
                    //                 }






                    //                 if (newDatanew.subactivityname === "BS Raft Footing RCC - PRSLS") {

                    //                     const dataArranew = [
                    //                         { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Assign the labour and Contractor' },
                    //                         { subtaskdescription: 'Ask the contractor to make the arrangements for concrete mixer ,vibrator and Diesel' },
                    //                         { subtaskdescription: 'Calculate the material required for RCC and infrom the purchase manager' },
                    //                         { subtaskdescription: 'Ask the contractor to arrange the shuttering and Supports' },
                    //                         { subtaskdescription: 'Ask the contractor to use workable shuttering only and apply shuttering oil' },
                    //                         { subtaskdescription: 'Arrange the cover blocks and ask the contractor to place them properly' },
                    //                         { subtaskdescription: 'Arrange the putty,thermocol and tape' },
                    //                         { subtaskdescription: 'Ask the contractor to make the arrangments for concrete pouring' },
                    //                         { subtaskdescription: 'Ask the contractor to mark the top level of concrete' },
                    //                         { subtaskdescription: 'Ask the contractor to fill the gaps' },
                    //                         { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Ask the contractor for proper compaction of concrete' },
                    //                         { subtaskdescription: 'Ask the contractor to do the concreting continuously' },
                    //                         { subtaskdescription: 'Ask the contractor to do the proper levelling of concrete' },
                    //                         { subtaskdescription: 'Phase 3', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Check if any honeycombing occures and ask the contractor to repair it immediately' },
                    //                         { subtaskdescription: 'Make the arrangements for curing' },
                    //                         { subtaskdescription: 'Ask the guard to do proper Curing' },
                    //                     ];

                    //                     async function RCCFootingfunCall() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Subtask(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             subtaskID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     RCCFootingfunCall();
                    //                 }











                    //                 if (newDatanew.subactivityname === "BS Raft RCC - RSL") {

                    //                     const dataArranew = [
                    //                         { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Shuttering oil check', checksdescription: 'Check if the shuttering is properly cleaned and oiled' },
                    //                         { checksHeading: 'Material Check', checksdescription: 'The material (cement,sand and aggregate) to be used for  concreting are of good quality' },
                    //                         { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Compaction Check', checksdescription: 'Check if the concrete is properly compacted with the help of vibrators to reduce the air voids' },
                    //                         { checksHeading: 'Concrete level Check', checksdescription: 'Concrete filled evenly upto required level' },
                    //                         { checksHeading: 'Height check', checksdescription: 'Concrete not dropped from height greater than 1.5 - 1.8 m and thrown at distance greater than 2m' },
                    //                         { checksHeading: 'Concrete Filling Check', checksdescription: 'Concrete filling should be continuous, for every footing, No Break in between or Mixer Break' },
                    //                         { checksHeading: 'Finishing check', checksdescription: 'Proper levelling of concrete has been done' },
                    //                         { checksHeading: 'Phase 3', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Deshuttering check', checksdescription: 'Check if the deshuttering has been done as per the standards' },
                    //                         { checksHeading: 'Curing Check', checksdescription: 'Check if proper curing has been done' },
                    //                     ];

                    //                     async function rccworkchChacks() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Checks(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             checksID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     rccworkchChacks();
                    //                 }






                    //                 if (newDatanew.subactivityname === "BS Raft RCC - RSL") {

                    //                     const dataArranew = [
                    //                         { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Assign the labour and Contractor' },
                    //                         { subtaskdescription: 'Ask the contractor to make the arrangements for concrete mixer ,vibrator and Diesel' },
                    //                         { subtaskdescription: 'Calculate the material required for RCC and infrom the purchase manager' },
                    //                         { subtaskdescription: 'Ask the contractor to arrange the shuttering and Supports' },
                    //                         { subtaskdescription: 'Ask the contractor to use workable shuttering only and apply shuttering oil' },
                    //                         { subtaskdescription: 'Arrange the cover blocks and ask the contractor to place them properly' },
                    //                         { subtaskdescription: 'Arrange the putty,thermocol and tape' },
                    //                         { subtaskdescription: 'Ask the contractor to make the arrangments for concrete pouring' },
                    //                         { subtaskdescription: 'Ask the contractor to mark the top level of concrete' },
                    //                         { subtaskdescription: 'Ask the contractor to fill the gaps' },
                    //                         { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Ask the contractor for proper compaction of concrete' },
                    //                         { subtaskdescription: 'Ask the contractor to do the concreting continuously' },
                    //                         { subtaskdescription: 'Ask the contractor to do the proper levelling of concrete' },
                    //                         { subtaskdescription: 'Phase 3', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Check if any honeycombing occures and ask the contractor to repair it immediately' },
                    //                         { subtaskdescription: 'Make the arrangements for curing' },
                    //                         { subtaskdescription: 'Ask the guard to do proper Curing' },
                    //                     ];

                    //                     async function RCCFootingfunCall() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Subtask(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             subtaskID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     RCCFootingfunCall();
                    //                 }
































                    //                 if (newDatanew.subactivityname === "Road Level Layout & Levelling") {

                    //                     const dataArranew = [
                    //                         { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Arrange structural drawing with printout & soft copy at Site before the execution day' },
                    //                         { subtaskdescription: 'Assign the contractor for the layout' },
                    //                         { subtaskdescription: 'Arrange the material (line dori, nails, paint box, marker on wall, lime powder etc) for layout' },
                    //                         { subtaskdescription: 'Call the Client' },
                    //                         { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Ask contractor to make burjis and the reference levels been decided' },
                    //                         { subtaskdescription: 'Ask the contractor to mark the permanent level' },
                    //                         { subtaskdescription: 'Ask the contractor  to match the diagonals first then proceed further' },
                    //                         { subtaskdescription: 'Contractor signed the KONNBOT contract (Understand the condition, payment & Installment as per work)' }
                    //                     ];

                    //                     async function layoutAndLevellingCall() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Subtask(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             subtaskID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     layoutAndLevellingCall();
                    //                 }



                    //                 if (newDatanew.subactivityname === "Road Level Layout & Levelling") {

                    //                     const dataArranew = [
                    //                         { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Cleaning Check', checksdescription: 'Is the site clean for the layout' },
                    //                         { checksHeading: 'Material Check', checksdescription: 'Are the instruments and materials required for the layout present in the site' },
                    //                         { checksHeading: 'Boundary Check', checksdescription: 'Are the boundaries of the plot fixed' },
                    //                         { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Drawings Check', checksdescription: 'Are the final Approved Architectural drawings are available at the site' },
                    //                         { checksHeading: 'Drawings Check', checksdescription: 'Are the final Approved Structural drawings are available at site.' },
                    //                         { checksHeading: 'Gridline Check', checksdescription: 'Are the Structural grid line and architectural grid lines checked properly.' },
                    //                         { checksHeading: 'Footing type Check', checksdescription: 'Identify the type of footing from the drawing' },
                    //                         { checksHeading: 'Burji Check', checksdescription: 'Are the burjis made at site' },
                    //                         { checksHeading: 'Level Check', checksdescription: 'Are the levels been marked at site with respect to which the further work will be carried out' },
                    //                         { checksHeading: 'Dimensions Check', checksdescription: 'Are the dimensions on drawing possible at site' },
                    //                         { checksHeading: 'Layout Final Check', checksdescription: 'Once the layout has been finalised do the final check and the Client should be informed about the site boundaries so that there is no issue with the neighbours plot' }
                    //                     ];

                    //                     async function layoutandlevelingsdChacks() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Checks(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             checksID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     layoutandlevelingsdChacks();
                    //                 }







                    //                 if (newDatanew.subactivityname === "BS Excavation") {

                    //                     const dataArranew = [
                    //                         { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Decide the RL for reference' },
                    //                         { subtaskdescription: 'Assign the labour /JCB  for the excavation purpose' },
                    //                         { subtaskdescription: 'Make Precaution plans to mitigate the risk of any failure of adjacent building/ structures due to excavation' },
                    //                         { subtaskdescription: 'Make the arrangement for dewatering  if required' },
                    //                         { subtaskdescription: 'Make the arrangement for blasting  if required' },
                    //                         { subtaskdescription: 'Ask the contractor to make  the arrangement  for checking the levels of the footing' },
                    //                         { subtaskdescription: 'Take the approval  for dumping of soil if required' },
                    //                         { subtaskdescription: 'Inform the client in case of any discrepancy in excavation' },
                    //                         { subtaskdescription: 'Arrange the pile driving machine in case of pile footing' },
                    //                         { subtaskdescription: 'Finalise and Check the depth of Pile' },
                    //                         { subtaskdescription: 'What action has been taken in case of any discrepancy' },
                    //                         { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Ask the contractor  to check the depth of footing' },
                    //                         { subtaskdescription: 'Ask the contractor  to check the depth of all the piles in case of pile footing' },
                    //                     ];

                    //                     async function layoutAndLevellingCall() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Subtask(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             subtaskID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     layoutAndLevellingCall();
                    //                 }






                    //                 if (newDatanew.subactivityname === "BS Excavation") {

                    //                     const dataArranew = [
                    //                         { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Layout Check', checksdescription: 'Whether the layout has been done and Checked by the Client' },
                    //                         { checksHeading: 'Plot level Check', checksdescription: 'Check the level of the plot with respect to the nearest road or the nearest drain' },
                    //                         { checksHeading: 'Depth Check', checksdescription: 'Depth of excavation to be finalised with respect to the road level' },
                    //                         { checksHeading: 'Dewatering Check', checksdescription: 'Check if dewatering is required during excavation' },
                    //                         { checksHeading: 'Blasting Requirement Check', checksdescription: 'Check if blasting is required for excavation' },
                    //                         { checksHeading: 'Phase 3', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Movement Check', checksdescription: 'Proper way for movement of the labours' },
                    //                         { checksHeading: 'Edge Column Check', checksdescription: ' It should be confirmed that Foundations of edge columns does not exceed the property line' },
                    //                         { checksHeading: 'Road Clearance check', checksdescription: 'The excavated soil is not spread on the roads which causes disturbance to the neighbours' },
                    //                     ];

                    //                     async function ExcavationnewChacks() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Checks(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             checksID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     ExcavationnewChacks();
                    //                 }

















                    //                 if (newDatanew.subactivityname === "BS Excavation - IRDL") {

                    //                     const dataArranew = [
                    //                         { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Decide the RL for reference' },
                    //                         { subtaskdescription: 'Assign the labour /JCB  for the excavation purpose' },
                    //                         { subtaskdescription: 'Make Precaution plans to mitigate the risk of any failure of adjacent building/ structures due to excavation' },
                    //                         { subtaskdescription: 'Make the arrangement for dewatering  if required' },
                    //                         { subtaskdescription: 'Make the arrangement for blasting  if required' },
                    //                         { subtaskdescription: 'Ask the contractor to make  the arrangement  for checking the levels of the footing' },
                    //                         { subtaskdescription: 'Take the approval  for dumping of soil if required' },
                    //                         { subtaskdescription: 'Inform the client in case of any discrepancy in excavation' },
                    //                         { subtaskdescription: 'Arrange the pile driving machine in case of pile footing' },
                    //                         { subtaskdescription: 'Finalise and Check the depth of Pile' },
                    //                         { subtaskdescription: 'What action has been taken in case of any discrepancy' },
                    //                         { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Ask the contractor  to check the depth of footing' },
                    //                         { subtaskdescription: 'Ask the contractor  to check the depth of all the piles in case of pile footing' },
                    //                     ];

                    //                     async function layoutAndLevellingCall() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Subtask(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             subtaskID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     layoutAndLevellingCall();
                    //                 }












                    //                 if (newDatanew.subactivityname === "BS Excavation - IRDL") {

                    //                     const dataArranew = [
                    //                         { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Layout Check', checksdescription: 'Whether the layout has been done and Checked by the Client' },
                    //                         { checksHeading: 'Plot level Check', checksdescription: 'Check the level of the plot with respect to the nearest road or the nearest drain' },
                    //                         { checksHeading: 'Depth Check', checksdescription: 'Depth of excavation to be finalised with respect to the road level' },
                    //                         { checksHeading: 'Dewatering Check', checksdescription: 'Check if dewatering is required during excavation' },
                    //                         { checksHeading: 'Blasting Requirement Check', checksdescription: 'Check if blasting is required for excavation' },
                    //                         { checksHeading: 'Phase 3', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Movement Check', checksdescription: 'Proper way for movement of the labours' },
                    //                         { checksHeading: 'Edge Column Check', checksdescription: ' It should be confirmed that Foundations of edge columns does not exceed the property line' },
                    //                         { checksHeading: 'Road Clearance check', checksdescription: 'The excavated soil is not spread on the roads which causes disturbance to the neighbours' },
                    //                     ];

                    //                     async function ExcavationnewChacks() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Checks(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             checksID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     ExcavationnewChacks();
                    //                 }









                    //                 if (newDatanew.subactivityname === "BS Excavation - IRSLB") {

                    //                     const dataArranew = [
                    //                         { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Decide the RL for reference' },
                    //                         { subtaskdescription: 'Assign the labour /JCB  for the excavation purpose' },
                    //                         { subtaskdescription: 'Make Precaution plans to mitigate the risk of any failure of adjacent building/ structures due to excavation' },
                    //                         { subtaskdescription: 'Make the arrangement for dewatering  if required' },
                    //                         { subtaskdescription: 'Make the arrangement for blasting  if required' },
                    //                         { subtaskdescription: 'Ask the contractor to make  the arrangement  for checking the levels of the footing' },
                    //                         { subtaskdescription: 'Take the approval  for dumping of soil if required' },
                    //                         { subtaskdescription: 'Inform the client in case of any discrepancy in excavation' },
                    //                         { subtaskdescription: 'Arrange the pile driving machine in case of pile footing' },
                    //                         { subtaskdescription: 'Finalise and Check the depth of Pile' },
                    //                         { subtaskdescription: 'What action has been taken in case of any discrepancy' },
                    //                         { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Ask the contractor  to check the depth of footing' },
                    //                         { subtaskdescription: 'Ask the contractor  to check the depth of all the piles in case of pile footing' },
                    //                     ];

                    //                     async function layoutAndLevellingCall() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Subtask(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             subtaskID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     layoutAndLevellingCall();
                    //                 }





                    //                 if (newDatanew.subactivityname === "BS Excavation - IRSLB") {

                    //                     const dataArranew = [
                    //                         { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Layout Check', checksdescription: 'Whether the layout has been done and Checked by the Client' },
                    //                         { checksHeading: 'Plot level Check', checksdescription: 'Check the level of the plot with respect to the nearest road or the nearest drain' },
                    //                         { checksHeading: 'Depth Check', checksdescription: 'Depth of excavation to be finalised with respect to the road level' },
                    //                         { checksHeading: 'Dewatering Check', checksdescription: 'Check if dewatering is required during excavation' },
                    //                         { checksHeading: 'Blasting Requirement Check', checksdescription: 'Check if blasting is required for excavation' },
                    //                         { checksHeading: 'Phase 3', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Movement Check', checksdescription: 'Proper way for movement of the labours' },
                    //                         { checksHeading: 'Edge Column Check', checksdescription: ' It should be confirmed that Foundations of edge columns does not exceed the property line' },
                    //                         { checksHeading: 'Road Clearance check', checksdescription: 'The excavated soil is not spread on the roads which causes disturbance to the neighbours' },
                    //                     ];

                    //                     async function ExcavationnewChacks() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Checks(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             checksID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     ExcavationnewChacks();
                    //                 }






                    //                 if (newDatanew.subactivityname === "BS Excavation - IRSLS") {

                    //                     const dataArranew = [
                    //                         { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Decide the RL for reference' },
                    //                         { subtaskdescription: 'Assign the labour /JCB  for the excavation purpose' },
                    //                         { subtaskdescription: 'Make Precaution plans to mitigate the risk of any failure of adjacent building/ structures due to excavation' },
                    //                         { subtaskdescription: 'Make the arrangement for dewatering  if required' },
                    //                         { subtaskdescription: 'Make the arrangement for blasting  if required' },
                    //                         { subtaskdescription: 'Ask the contractor to make  the arrangement  for checking the levels of the footing' },
                    //                         { subtaskdescription: 'Take the approval  for dumping of soil if required' },
                    //                         { subtaskdescription: 'Inform the client in case of any discrepancy in excavation' },
                    //                         { subtaskdescription: 'Arrange the pile driving machine in case of pile footing' },
                    //                         { subtaskdescription: 'Finalise and Check the depth of Pile' },
                    //                         { subtaskdescription: 'What action has been taken in case of any discrepancy' },
                    //                         { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Ask the contractor  to check the depth of footing' },
                    //                         { subtaskdescription: 'Ask the contractor  to check the depth of all the piles in case of pile footing' },
                    //                     ];

                    //                     async function layoutAndLevellingCall() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Subtask(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             subtaskID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     layoutAndLevellingCall();
                    //                 }






                    //                 if (newDatanew.subactivityname === "BS Excavation - IRSLS") {

                    //                     const dataArranew = [
                    //                         { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Layout Check', checksdescription: 'Whether the layout has been done and Checked by the Client' },
                    //                         { checksHeading: 'Plot level Check', checksdescription: 'Check the level of the plot with respect to the nearest road or the nearest drain' },
                    //                         { checksHeading: 'Depth Check', checksdescription: 'Depth of excavation to be finalised with respect to the road level' },
                    //                         { checksHeading: 'Dewatering Check', checksdescription: 'Check if dewatering is required during excavation' },
                    //                         { checksHeading: 'Blasting Requirement Check', checksdescription: 'Check if blasting is required for excavation' },
                    //                         { checksHeading: 'Phase 3', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Movement Check', checksdescription: 'Proper way for movement of the labours' },
                    //                         { checksHeading: 'Edge Column Check', checksdescription: ' It should be confirmed that Foundations of edge columns does not exceed the property line' },
                    //                         { checksHeading: 'Road Clearance check', checksdescription: 'The excavated soil is not spread on the roads which causes disturbance to the neighbours' },
                    //                     ];

                    //                     async function ExcavationnewChacks() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Checks(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             checksID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     ExcavationnewChacks();
                    //                 }






                    //                 if (newDatanew.subactivityname === "Shoring | Protection") {

                    //                     const dataArranew = [
                    //                         { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Layout Check', checksdescription: 'Shoring layout is on site and accessible for review.' },
                    //                         { checksHeading: 'Shoring material Check', checksdescription: 'Material Chek as per usage for the shoring purpose' },
                    //                         { checksHeading: 'Soil Check ', checksdescription: 'The soil that supports shoring/reshoring has been evaluated by a qualified person' },
                    //                         { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Levels', checksdescription: 'All beams have been installed level and plumb and are centered in U-heads.' },
                    //                         { checksHeading: 'Equipment Check', checksdescription: 'inspected the shoring equipment.' },
                    //                         { checksHeading: 'Spacing Check', checksdescription: 'Shoring Bay spacing does not exceed that shown on the drawings/specifications' },
                    //                         { checksHeading: 'Supports load Check', checksdescription: 'Shore heads are not eccentrically loaded, unless designed for such loading' },
                    //                     ];

                    //                     async function SiteMobilizationShoringProtection() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Checks(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             checksID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     SiteMobilizationShoringProtection();
                    //                 }






                    //                 if (newDatanew.subactivityname === "Shoring | Protection") {

                    //                     const dataArranew = [
                    //                         { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Personnel required to use Personal Protective Equipment (PPE) ' },
                    //                         { subtaskdescription: 'A project safety plan has been reviewed by employees who are intended to work on the project.' },
                    //                         { subtaskdescription: 'Design engineer has reviewed and approved field design changes.' },
                    //                         { subtaskdescription: 'Damaged equipment has been replaced or reinforced to adequately support intended loads prior to placing concrete.' },
                    //                         { subtaskdescription: 'Prior to shore removal, written confirmation has been received verifying that all structural loads are self-supporting' },
                    //                         { subtaskdescription: 'Forming/reshoring has not been removed until testing indicates that the concrete has reached the specified strength established by an engineer.' },
                    //                     ];

                    //                     async function siteMobilizationshoringfunCall() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Subtask(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             subtaskID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     siteMobilizationshoringfunCall();
                    //                 }











                    //                 if (newDatanew.subactivityname === "BS PCC - IRDL") {

                    //                     const dataArranew = [
                    //                         { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Compaction Check', checksdescription: 'Check if the loose material is properly compacted and ready for PCC' },
                    //                         { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Ratio Check', checksdescription: 'Check if the ratio of the concrete used in PCC as per the specifications' },
                    //                         { checksHeading: 'Height Check', checksdescription: 'Check for pouring height.' },
                    //                         { checksHeading: 'Finishing Check', checksdescription: 'Check if the top surface is properly finished and kept rough enough' },
                    //                         { checksHeading: 'Compaction Check', checksdescription: 'Check for ramming and compaction of PCC with proper tools.' },
                    //                     ];

                    //                     async function pccworkchChacks() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Checks(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             checksID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     pccworkchChacks();
                    //                 }





                    //                 if (newDatanew.subactivityname === "BS PCC - IRDL") {

                    //                     const dataArranew = [
                    //                         { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Material Calculation as per Task' },
                    //                         { subtaskdescription: 'Ask the procurement manager to arrange the materials required for PCC' },
                    //                         { subtaskdescription: 'Assign the contractor and labour for the pcc work' },
                    //                         { subtaskdescription: 'Ask the contractor to arrange to concrete mixer , vibrator and Diesel' },
                    //                         { subtaskdescription: 'Make the water arrangements' },
                    //                         { subtaskdescription: 'Ask the contractor to arrange the required shuttering' },
                    //                         { subtaskdescription: 'Aks the contractor to arrange the finishing tools and tools for centreline' },
                    //                         { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Inform the contractor about the concrete mix ratio which is to be used' },
                    //                         { subtaskdescription: 'Ask the contractor to mark proper centreline' },
                    //                     ];

                    //                     async function PCCWorkfuncall() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Subtask(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             subtaskID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     PCCWorkfuncall();
                    //                 }











                    //                 if (newDatanew.subactivityname === "BS PCC Below - IRSLB") {

                    //                     const dataArranew = [
                    //                         { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Compaction Check', checksdescription: 'Check if the loose material is properly compacted and ready for PCC' },
                    //                         { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Ratio Check', checksdescription: 'Check if the ratio of the concrete used in PCC as per the specifications' },
                    //                         { checksHeading: 'Height Check', checksdescription: 'Check for pouring height.' },
                    //                         { checksHeading: 'Finishing Check', checksdescription: 'Check if the top surface is properly finished and kept rough enough' },
                    //                         { checksHeading: 'Compaction Check', checksdescription: 'Check for ramming and compaction of PCC with proper tools.' },
                    //                     ];

                    //                     async function pccworkchChacks() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Checks(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             checksID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     pccworkchChacks();
                    //                 }





                    //                 if (newDatanew.subactivityname === "BS PCC Below - IRSLB") {

                    //                     const dataArranew = [
                    //                         { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Material Calculation as per Task' },
                    //                         { subtaskdescription: 'Ask the procurement manager to arrange the materials required for PCC' },
                    //                         { subtaskdescription: 'Assign the contractor and labour for the pcc work' },
                    //                         { subtaskdescription: 'Ask the contractor to arrange to concrete mixer , vibrator and Diesel' },
                    //                         { subtaskdescription: 'Make the water arrangements' },
                    //                         { subtaskdescription: 'Ask the contractor to arrange the required shuttering' },
                    //                         { subtaskdescription: 'Aks the contractor to arrange the finishing tools and tools for centreline' },
                    //                         { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Inform the contractor about the concrete mix ratio which is to be used' },
                    //                         { subtaskdescription: 'Ask the contractor to mark proper centreline' },
                    //                     ];

                    //                     async function PCCWorkfuncall() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Subtask(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             subtaskID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     PCCWorkfuncall();
                    //                 }












                    //                 if (newDatanew.subactivityname === "BS PCC Above - IRSLB") {

                    //                     const dataArranew = [
                    //                         { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Compaction Check', checksdescription: 'Check if the loose material is properly compacted and ready for PCC' },
                    //                         { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Ratio Check', checksdescription: 'Check if the ratio of the concrete used in PCC as per the specifications' },
                    //                         { checksHeading: 'Height Check', checksdescription: 'Check for pouring height.' },
                    //                         { checksHeading: 'Finishing Check', checksdescription: 'Check if the top surface is properly finished and kept rough enough' },
                    //                         { checksHeading: 'Compaction Check', checksdescription: 'Check for ramming and compaction of PCC with proper tools.' },
                    //                     ];

                    //                     async function pccworkchChacks() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Checks(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             checksID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     pccworkchChacks();
                    //                 }





                    //                 if (newDatanew.subactivityname === "BS PCC Above - IRSLB") {

                    //                     const dataArranew = [
                    //                         { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Material Calculation as per Task' },
                    //                         { subtaskdescription: 'Ask the procurement manager to arrange the materials required for PCC' },
                    //                         { subtaskdescription: 'Assign the contractor and labour for the pcc work' },
                    //                         { subtaskdescription: 'Ask the contractor to arrange to concrete mixer , vibrator and Diesel' },
                    //                         { subtaskdescription: 'Make the water arrangements' },
                    //                         { subtaskdescription: 'Ask the contractor to arrange the required shuttering' },
                    //                         { subtaskdescription: 'Aks the contractor to arrange the finishing tools and tools for centreline' },
                    //                         { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Inform the contractor about the concrete mix ratio which is to be used' },
                    //                         { subtaskdescription: 'Ask the contractor to mark proper centreline' },
                    //                     ];

                    //                     async function PCCWorkfuncall() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Subtask(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             subtaskID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     PCCWorkfuncall();
                    //                 }














                    //                 if (newDatanew.subactivityname === "BS PCC Below - IRSLS") {

                    //                     const dataArranew = [
                    //                         { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Compaction Check', checksdescription: 'Check if the loose material is properly compacted and ready for PCC' },
                    //                         { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Ratio Check', checksdescription: 'Check if the ratio of the concrete used in PCC as per the specifications' },
                    //                         { checksHeading: 'Height Check', checksdescription: 'Check for pouring height.' },
                    //                         { checksHeading: 'Finishing Check', checksdescription: 'Check if the top surface is properly finished and kept rough enough' },
                    //                         { checksHeading: 'Compaction Check', checksdescription: 'Check for ramming and compaction of PCC with proper tools.' },
                    //                     ];

                    //                     async function pccworkchChacks() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Checks(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             checksID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     pccworkchChacks();
                    //                 }





                    //                 if (newDatanew.subactivityname === "BS PCC Below - IRSLS") {

                    //                     const dataArranew = [
                    //                         { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Material Calculation as per Task' },
                    //                         { subtaskdescription: 'Ask the procurement manager to arrange the materials required for PCC' },
                    //                         { subtaskdescription: 'Assign the contractor and labour for the pcc work' },
                    //                         { subtaskdescription: 'Ask the contractor to arrange to concrete mixer , vibrator and Diesel' },
                    //                         { subtaskdescription: 'Make the water arrangements' },
                    //                         { subtaskdescription: 'Ask the contractor to arrange the required shuttering' },
                    //                         { subtaskdescription: 'Aks the contractor to arrange the finishing tools and tools for centreline' },
                    //                         { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Inform the contractor about the concrete mix ratio which is to be used' },
                    //                         { subtaskdescription: 'Ask the contractor to mark proper centreline' },
                    //                     ];

                    //                     async function PCCWorkfuncall() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Subtask(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             subtaskID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     PCCWorkfuncall();
                    //                 }








                    //                 if (newDatanew.subactivityname === "BS PCC Above - IRSLS") {

                    //                     const dataArranew = [
                    //                         { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Compaction Check', checksdescription: 'Check if the loose material is properly compacted and ready for PCC' },
                    //                         { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Ratio Check', checksdescription: 'Check if the ratio of the concrete used in PCC as per the specifications' },
                    //                         { checksHeading: 'Height Check', checksdescription: 'Check for pouring height.' },
                    //                         { checksHeading: 'Finishing Check', checksdescription: 'Check if the top surface is properly finished and kept rough enough' },
                    //                         { checksHeading: 'Compaction Check', checksdescription: 'Check for ramming and compaction of PCC with proper tools.' },
                    //                     ];

                    //                     async function pccworkchChacks() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Checks(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             checksID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     pccworkchChacks();
                    //                 }





                    //                 if (newDatanew.subactivityname === "BS PCC Above - IRSLS") {

                    //                     const dataArranew = [
                    //                         { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Material Calculation as per Task' },
                    //                         { subtaskdescription: 'Ask the procurement manager to arrange the materials required for PCC' },
                    //                         { subtaskdescription: 'Assign the contractor and labour for the pcc work' },
                    //                         { subtaskdescription: 'Ask the contractor to arrange to concrete mixer , vibrator and Diesel' },
                    //                         { subtaskdescription: 'Make the water arrangements' },
                    //                         { subtaskdescription: 'Ask the contractor to arrange the required shuttering' },
                    //                         { subtaskdescription: 'Aks the contractor to arrange the finishing tools and tools for centreline' },
                    //                         { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Inform the contractor about the concrete mix ratio which is to be used' },
                    //                         { subtaskdescription: 'Ask the contractor to mark proper centreline' },
                    //                     ];

                    //                     async function PCCWorkfuncall() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Subtask(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             subtaskID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     PCCWorkfuncall();
                    //                 }












                    //                 if (newDatanew.subactivityname === "BS PCC Below - PRSLB") {

                    //                     const dataArranew = [
                    //                         { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Compaction Check', checksdescription: 'Check if the loose material is properly compacted and ready for PCC' },
                    //                         { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Ratio Check', checksdescription: 'Check if the ratio of the concrete used in PCC as per the specifications' },
                    //                         { checksHeading: 'Height Check', checksdescription: 'Check for pouring height.' },
                    //                         { checksHeading: 'Finishing Check', checksdescription: 'Check if the top surface is properly finished and kept rough enough' },
                    //                         { checksHeading: 'Compaction Check', checksdescription: 'Check for ramming and compaction of PCC with proper tools.' },
                    //                     ];

                    //                     async function pccworkchChacks() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Checks(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             checksID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     pccworkchChacks();
                    //                 }





                    //                 if (newDatanew.subactivityname === "BS PCC Below - PRSLB") {

                    //                     const dataArranew = [
                    //                         { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Material Calculation as per Task' },
                    //                         { subtaskdescription: 'Ask the procurement manager to arrange the materials required for PCC' },
                    //                         { subtaskdescription: 'Assign the contractor and labour for the pcc work' },
                    //                         { subtaskdescription: 'Ask the contractor to arrange to concrete mixer , vibrator and Diesel' },
                    //                         { subtaskdescription: 'Make the water arrangements' },
                    //                         { subtaskdescription: 'Ask the contractor to arrange the required shuttering' },
                    //                         { subtaskdescription: 'Aks the contractor to arrange the finishing tools and tools for centreline' },
                    //                         { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Inform the contractor about the concrete mix ratio which is to be used' },
                    //                         { subtaskdescription: 'Ask the contractor to mark proper centreline' },
                    //                     ];

                    //                     async function PCCWorkfuncall() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Subtask(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             subtaskID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     PCCWorkfuncall();
                    //                 }







                    //                 if (newDatanew.subactivityname === "BS PCC Above - PRSLB") {

                    //                     const dataArranew = [
                    //                         { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Compaction Check', checksdescription: 'Check if the loose material is properly compacted and ready for PCC' },
                    //                         { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Ratio Check', checksdescription: 'Check if the ratio of the concrete used in PCC as per the specifications' },
                    //                         { checksHeading: 'Height Check', checksdescription: 'Check for pouring height.' },
                    //                         { checksHeading: 'Finishing Check', checksdescription: 'Check if the top surface is properly finished and kept rough enough' },
                    //                         { checksHeading: 'Compaction Check', checksdescription: 'Check for ramming and compaction of PCC with proper tools.' },
                    //                     ];

                    //                     async function pccworkchChacks() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Checks(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             checksID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     pccworkchChacks();
                    //                 }





                    //                 if (newDatanew.subactivityname === "BS PCC Above - PRSLB") {

                    //                     const dataArranew = [
                    //                         { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Material Calculation as per Task' },
                    //                         { subtaskdescription: 'Ask the procurement manager to arrange the materials required for PCC' },
                    //                         { subtaskdescription: 'Assign the contractor and labour for the pcc work' },
                    //                         { subtaskdescription: 'Ask the contractor to arrange to concrete mixer , vibrator and Diesel' },
                    //                         { subtaskdescription: 'Make the water arrangements' },
                    //                         { subtaskdescription: 'Ask the contractor to arrange the required shuttering' },
                    //                         { subtaskdescription: 'Aks the contractor to arrange the finishing tools and tools for centreline' },
                    //                         { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Inform the contractor about the concrete mix ratio which is to be used' },
                    //                         { subtaskdescription: 'Ask the contractor to mark proper centreline' },
                    //                     ];

                    //                     async function PCCWorkfuncall() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Subtask(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             subtaskID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     PCCWorkfuncall();
                    //                 }









                    //                 if (newDatanew.subactivityname === "BS PCC Above  - PRSLS") {

                    //                     const dataArranew = [
                    //                         { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Compaction Check', checksdescription: 'Check if the loose material is properly compacted and ready for PCC' },
                    //                         { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Ratio Check', checksdescription: 'Check if the ratio of the concrete used in PCC as per the specifications' },
                    //                         { checksHeading: 'Height Check', checksdescription: 'Check for pouring height.' },
                    //                         { checksHeading: 'Finishing Check', checksdescription: 'Check if the top surface is properly finished and kept rough enough' },
                    //                         { checksHeading: 'Compaction Check', checksdescription: 'Check for ramming and compaction of PCC with proper tools.' },
                    //                     ];

                    //                     async function pccworkchChacks() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Checks(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             checksID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     pccworkchChacks();
                    //                 }





                    //                 if (newDatanew.subactivityname === "BS PCC Above  - PRSLS") {

                    //                     const dataArranew = [
                    //                         { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Material Calculation as per Task' },
                    //                         { subtaskdescription: 'Ask the procurement manager to arrange the materials required for PCC' },
                    //                         { subtaskdescription: 'Assign the contractor and labour for the pcc work' },
                    //                         { subtaskdescription: 'Ask the contractor to arrange to concrete mixer , vibrator and Diesel' },
                    //                         { subtaskdescription: 'Make the water arrangements' },
                    //                         { subtaskdescription: 'Ask the contractor to arrange the required shuttering' },
                    //                         { subtaskdescription: 'Aks the contractor to arrange the finishing tools and tools for centreline' },
                    //                         { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Inform the contractor about the concrete mix ratio which is to be used' },
                    //                         { subtaskdescription: 'Ask the contractor to mark proper centreline' },
                    //                     ];

                    //                     async function PCCWorkfuncall() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Subtask(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             subtaskID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     PCCWorkfuncall();
                    //                 }







                    //                 if (newDatanew.subactivityname === "BS PCC under Raft  - RSL") {

                    //                     const dataArranew = [
                    //                         { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Compaction Check', checksdescription: 'Check if the loose material is properly compacted and ready for PCC' },
                    //                         { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Ratio Check', checksdescription: 'Check if the ratio of the concrete used in PCC as per the specifications' },
                    //                         { checksHeading: 'Height Check', checksdescription: 'Check for pouring height.' },
                    //                         { checksHeading: 'Finishing Check', checksdescription: 'Check if the top surface is properly finished and kept rough enough' },
                    //                         { checksHeading: 'Compaction Check', checksdescription: 'Check for ramming and compaction of PCC with proper tools.' },
                    //                     ];

                    //                     async function pccworkchChacks() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Checks(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             checksID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     pccworkchChacks();
                    //                 }





                    //                 if (newDatanew.subactivityname === "BS PCC under Raft  - RSL") {

                    //                     const dataArranew = [
                    //                         { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Material Calculation as per Task' },
                    //                         { subtaskdescription: 'Ask the procurement manager to arrange the materials required for PCC' },
                    //                         { subtaskdescription: 'Assign the contractor and labour for the pcc work' },
                    //                         { subtaskdescription: 'Ask the contractor to arrange to concrete mixer , vibrator and Diesel' },
                    //                         { subtaskdescription: 'Make the water arrangements' },
                    //                         { subtaskdescription: 'Ask the contractor to arrange the required shuttering' },
                    //                         { subtaskdescription: 'Aks the contractor to arrange the finishing tools and tools for centreline' },
                    //                         { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Inform the contractor about the concrete mix ratio which is to be used' },
                    //                         { subtaskdescription: 'Ask the contractor to mark proper centreline' },
                    //                     ];

                    //                     async function PCCWorkfuncall() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Subtask(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             subtaskID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     PCCWorkfuncall();
                    //                 }











                    //                 if (newDatanew.subactivityname === "BS Footing Reinforcement - IRDL") {

                    //                     const dataArranew = [
                    //                         { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Arrange  the rebars and binding wire at site' },
                    //                         { subtaskdescription: 'Assignt the labour and Contractor for the work' },
                    //                         { subtaskdescription: 'Ask the contractor to arrange the supports and Shuttering' },
                    //                         { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Explain the contractor about the dimension and steel detailing of the footing' },
                    //                         { subtaskdescription: 'Check the excavated pits for steel placement' },
                    //                         { subtaskdescription: 'Ask to contractor to properly place the cover blocks' },
                    //                         { subtaskdescription: 'Ask the contractor  to tie the rebars properly as per the specifications' },
                    //                         { subtaskdescription: 'Ask the contractor  to check the column for verticality' },
                    //                         { subtaskdescription: 'Ask the contractor to place supports in the column' },
                    //                     ];

                    //                     async function SteelReinforcementfunCall() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Subtask(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             subtaskID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     SteelReinforcementfunCall();
                    //                 }





                    //                 if (newDatanew.subactivityname === "BS Footing Reinforcement - IRDL") {

                    //                     const dataArranew = [
                    //                         { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Centreline Check', checksdescription: 'Check whether the centreline is properly marked' },
                    //                         { checksHeading: 'Curing Check', checksdescription: 'PCC should be properly cured' },
                    //                         { checksHeading: 'Drawings Check', checksdescription: 'Check if the contractor is working with the relevant drawings' },
                    //                         { checksHeading: 'Column marking check', checksdescription: 'Check if the the column marking has been done before placing the steel of the footing ' },
                    //                         { checksHeading: 'Cleaning Check', checksdescription: 'Check if the pcc surface is clean and free from soil' },
                    //                         { checksHeading: 'Steel Clean Check', checksdescription: 'Check if the steel is free from dust , oil and any other contamination' }
                    //                     ];

                    //                     async function stellorkchChacks() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Checks(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             checksID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     stellorkchChacks();
                    //                 }












                    //                 if (newDatanew.subactivityname === "BS Raft Reinforcement - IRDL") {

                    //                     const dataArranew = [
                    //                         { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Arrange  the rebars and binding wire at site' },
                    //                         { subtaskdescription: 'Assignt the labour and Contractor for the work' },
                    //                         { subtaskdescription: 'Ask the contractor to arrange the supports and Shuttering' },
                    //                         { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Explain the contractor about the dimension and steel detailing of the footing' },
                    //                         { subtaskdescription: 'Check the excavated pits for steel placement' },
                    //                         { subtaskdescription: 'Ask to contractor to properly place the cover blocks' },
                    //                         { subtaskdescription: 'Ask the contractor  to tie the rebars properly as per the specifications' },
                    //                         { subtaskdescription: 'Ask the contractor  to check the column for verticality' },
                    //                         { subtaskdescription: 'Ask the contractor to place supports in the column' },
                    //                     ];

                    //                     async function SteelReinforcementfunCall() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Subtask(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             subtaskID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     SteelReinforcementfunCall();
                    //                 }





                    //                 if (newDatanew.subactivityname === "BS Raft Reinforcement - IRDL") {

                    //                     const dataArranew = [
                    //                         { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Centreline Check', checksdescription: 'Check whether the centreline is properly marked' },
                    //                         { checksHeading: 'Curing Check', checksdescription: 'PCC should be properly cured' },
                    //                         { checksHeading: 'Drawings Check', checksdescription: 'Check if the contractor is working with the relevant drawings' },
                    //                         { checksHeading: 'Column marking check', checksdescription: 'Check if the the column marking has been done before placing the steel of the footing ' },
                    //                         { checksHeading: 'Cleaning Check', checksdescription: 'Check if the pcc surface is clean and free from soil' },
                    //                         { checksHeading: 'Steel Clean Check', checksdescription: 'Check if the steel is free from dust , oil and any other contamination' }
                    //                     ];

                    //                     async function stellorkchChacks() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Checks(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             checksID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     stellorkchChacks();
                    //                 }















                    //                 if (newDatanew.subactivityname === "BS Reinforcement - IRSLB") {

                    //                     const dataArranew = [
                    //                         { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Arrange  the rebars and binding wire at site' },
                    //                         { subtaskdescription: 'Assignt the labour and Contractor for the work' },
                    //                         { subtaskdescription: 'Ask the contractor to arrange the supports and Shuttering' },
                    //                         { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Explain the contractor about the dimension and steel detailing of the footing' },
                    //                         { subtaskdescription: 'Check the excavated pits for steel placement' },
                    //                         { subtaskdescription: 'Ask to contractor to properly place the cover blocks' },
                    //                         { subtaskdescription: 'Ask the contractor  to tie the rebars properly as per the specifications' },
                    //                         { subtaskdescription: 'Ask the contractor  to check the column for verticality' },
                    //                         { subtaskdescription: 'Ask the contractor to place supports in the column' },
                    //                     ];

                    //                     async function SteelReinforcementfunCall() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Subtask(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             subtaskID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     SteelReinforcementfunCall();
                    //                 }





                    //                 if (newDatanew.subactivityname === "BS Reinforcement - IRSLB") {

                    //                     const dataArranew = [
                    //                         { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Centreline Check', checksdescription: 'Check whether the centreline is properly marked' },
                    //                         { checksHeading: 'Curing Check', checksdescription: 'PCC should be properly cured' },
                    //                         { checksHeading: 'Drawings Check', checksdescription: 'Check if the contractor is working with the relevant drawings' },
                    //                         { checksHeading: 'Column marking check', checksdescription: 'Check if the the column marking has been done before placing the steel of the footing ' },
                    //                         { checksHeading: 'Cleaning Check', checksdescription: 'Check if the pcc surface is clean and free from soil' },
                    //                         { checksHeading: 'Steel Clean Check', checksdescription: 'Check if the steel is free from dust , oil and any other contamination' }
                    //                     ];

                    //                     async function stellorkchChacks() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Checks(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             checksID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     stellorkchChacks();
                    //                 }









                    //                 if (newDatanew.subactivityname === "BS Raft Reinforcement - IRSLS") {

                    //                     const dataArranew = [
                    //                         { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Arrange  the rebars and binding wire at site' },
                    //                         { subtaskdescription: 'Assignt the labour and Contractor for the work' },
                    //                         { subtaskdescription: 'Ask the contractor to arrange the supports and Shuttering' },
                    //                         { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Explain the contractor about the dimension and steel detailing of the footing' },
                    //                         { subtaskdescription: 'Check the excavated pits for steel placement' },
                    //                         { subtaskdescription: 'Ask to contractor to properly place the cover blocks' },
                    //                         { subtaskdescription: 'Ask the contractor  to tie the rebars properly as per the specifications' },
                    //                         { subtaskdescription: 'Ask the contractor  to check the column for verticality' },
                    //                         { subtaskdescription: 'Ask the contractor to place supports in the column' },
                    //                     ];

                    //                     async function SteelReinforcementfunCall() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Subtask(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             subtaskID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     SteelReinforcementfunCall();
                    //                 }





                    //                 if (newDatanew.subactivityname === "BS Raft Reinforcement - IRSLS") {

                    //                     const dataArranew = [
                    //                         { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Centreline Check', checksdescription: 'Check whether the centreline is properly marked' },
                    //                         { checksHeading: 'Curing Check', checksdescription: 'PCC should be properly cured' },
                    //                         { checksHeading: 'Drawings Check', checksdescription: 'Check if the contractor is working with the relevant drawings' },
                    //                         { checksHeading: 'Column marking check', checksdescription: 'Check if the the column marking has been done before placing the steel of the footing ' },
                    //                         { checksHeading: 'Cleaning Check', checksdescription: 'Check if the pcc surface is clean and free from soil' },
                    //                         { checksHeading: 'Steel Clean Check', checksdescription: 'Check if the steel is free from dust , oil and any other contamination' }
                    //                     ];

                    //                     async function stellorkchChacks() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Checks(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             checksID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     stellorkchChacks();
                    //                 }









                    //                 if (newDatanew.subactivityname === "BS Pile Reinforcement - PRSLB") {

                    //                     const dataArranew = [
                    //                         { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Arrange  the rebars and binding wire at site' },
                    //                         { subtaskdescription: 'Assignt the labour and Contractor for the work' },
                    //                         { subtaskdescription: 'Ask the contractor to arrange the supports and Shuttering' },
                    //                         { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Explain the contractor about the dimension and steel detailing of the footing' },
                    //                         { subtaskdescription: 'Check the excavated pits for steel placement' },
                    //                         { subtaskdescription: 'Ask to contractor to properly place the cover blocks' },
                    //                         { subtaskdescription: 'Ask the contractor  to tie the rebars properly as per the specifications' },
                    //                         { subtaskdescription: 'Ask the contractor  to check the column for verticality' },
                    //                         { subtaskdescription: 'Ask the contractor to place supports in the column' },
                    //                     ];

                    //                     async function SteelReinforcementfunCall() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Subtask(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             subtaskID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     SteelReinforcementfunCall();
                    //                 }





                    //                 if (newDatanew.subactivityname === "BS Pile Reinforcement - PRSLB") {

                    //                     const dataArranew = [
                    //                         { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Centreline Check', checksdescription: 'Check whether the centreline is properly marked' },
                    //                         { checksHeading: 'Curing Check', checksdescription: 'PCC should be properly cured' },
                    //                         { checksHeading: 'Drawings Check', checksdescription: 'Check if the contractor is working with the relevant drawings' },
                    //                         { checksHeading: 'Column marking check', checksdescription: 'Check if the the column marking has been done before placing the steel of the footing ' },
                    //                         { checksHeading: 'Cleaning Check', checksdescription: 'Check if the pcc surface is clean and free from soil' },
                    //                         { checksHeading: 'Steel Clean Check', checksdescription: 'Check if the steel is free from dust , oil and any other contamination' }
                    //                     ];

                    //                     async function stellorkchChacks() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Checks(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             checksID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     stellorkchChacks();
                    //                 }















                    //                 if (newDatanew.subactivityname === "BS Raft Reinforcement - PRSLB") {

                    //                     const dataArranew = [
                    //                         { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Arrange  the rebars and binding wire at site' },
                    //                         { subtaskdescription: 'Assignt the labour and Contractor for the work' },
                    //                         { subtaskdescription: 'Ask the contractor to arrange the supports and Shuttering' },
                    //                         { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Explain the contractor about the dimension and steel detailing of the footing' },
                    //                         { subtaskdescription: 'Check the excavated pits for steel placement' },
                    //                         { subtaskdescription: 'Ask to contractor to properly place the cover blocks' },
                    //                         { subtaskdescription: 'Ask the contractor  to tie the rebars properly as per the specifications' },
                    //                         { subtaskdescription: 'Ask the contractor  to check the column for verticality' },
                    //                         { subtaskdescription: 'Ask the contractor to place supports in the column' },
                    //                     ];

                    //                     async function SteelReinforcementfunCall() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Subtask(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             subtaskID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     SteelReinforcementfunCall();
                    //                 }





                    //                 if (newDatanew.subactivityname === "BS Raft Reinforcement - PRSLB") {

                    //                     const dataArranew = [
                    //                         { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Centreline Check', checksdescription: 'Check whether the centreline is properly marked' },
                    //                         { checksHeading: 'Curing Check', checksdescription: 'PCC should be properly cured' },
                    //                         { checksHeading: 'Drawings Check', checksdescription: 'Check if the contractor is working with the relevant drawings' },
                    //                         { checksHeading: 'Column marking check', checksdescription: 'Check if the the column marking has been done before placing the steel of the footing ' },
                    //                         { checksHeading: 'Cleaning Check', checksdescription: 'Check if the pcc surface is clean and free from soil' },
                    //                         { checksHeading: 'Steel Clean Check', checksdescription: 'Check if the steel is free from dust , oil and any other contamination' }
                    //                     ];

                    //                     async function stellorkchChacks() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Checks(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             checksID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     stellorkchChacks();
                    //                 }










                    //                 if (newDatanew.subactivityname === "BS Pile Reinforcement - PRSLS") {

                    //                     const dataArranew = [
                    //                         { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Arrange  the rebars and binding wire at site' },
                    //                         { subtaskdescription: 'Assignt the labour and Contractor for the work' },
                    //                         { subtaskdescription: 'Ask the contractor to arrange the supports and Shuttering' },
                    //                         { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Explain the contractor about the dimension and steel detailing of the footing' },
                    //                         { subtaskdescription: 'Check the excavated pits for steel placement' },
                    //                         { subtaskdescription: 'Ask to contractor to properly place the cover blocks' },
                    //                         { subtaskdescription: 'Ask the contractor  to tie the rebars properly as per the specifications' },
                    //                         { subtaskdescription: 'Ask the contractor  to check the column for verticality' },
                    //                         { subtaskdescription: 'Ask the contractor to place supports in the column' },
                    //                     ];

                    //                     async function SteelReinforcementfunCall() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Subtask(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             subtaskID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     SteelReinforcementfunCall();
                    //                 }





                    //                 if (newDatanew.subactivityname === "BS Pile Reinforcement - PRSLS") {

                    //                     const dataArranew = [
                    //                         { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Centreline Check', checksdescription: 'Check whether the centreline is properly marked' },
                    //                         { checksHeading: 'Curing Check', checksdescription: 'PCC should be properly cured' },
                    //                         { checksHeading: 'Drawings Check', checksdescription: 'Check if the contractor is working with the relevant drawings' },
                    //                         { checksHeading: 'Column marking check', checksdescription: 'Check if the the column marking has been done before placing the steel of the footing ' },
                    //                         { checksHeading: 'Cleaning Check', checksdescription: 'Check if the pcc surface is clean and free from soil' },
                    //                         { checksHeading: 'Steel Clean Check', checksdescription: 'Check if the steel is free from dust , oil and any other contamination' }
                    //                     ];

                    //                     async function stellorkchChacks() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Checks(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             checksID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     stellorkchChacks();
                    //                 }









                    //                 if (newDatanew.subactivityname === "BS Raft Reinforcement - PRSLS") {

                    //                     const dataArranew = [
                    //                         { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Arrange  the rebars and binding wire at site' },
                    //                         { subtaskdescription: 'Assignt the labour and Contractor for the work' },
                    //                         { subtaskdescription: 'Ask the contractor to arrange the supports and Shuttering' },
                    //                         { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Explain the contractor about the dimension and steel detailing of the footing' },
                    //                         { subtaskdescription: 'Check the excavated pits for steel placement' },
                    //                         { subtaskdescription: 'Ask to contractor to properly place the cover blocks' },
                    //                         { subtaskdescription: 'Ask the contractor  to tie the rebars properly as per the specifications' },
                    //                         { subtaskdescription: 'Ask the contractor  to check the column for verticality' },
                    //                         { subtaskdescription: 'Ask the contractor to place supports in the column' },
                    //                     ];

                    //                     async function SteelReinforcementfunCall() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Subtask(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             subtaskID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     SteelReinforcementfunCall();
                    //                 }





                    //                 if (newDatanew.subactivityname === "BS Raft Reinforcement - PRSLS") {

                    //                     const dataArranew = [
                    //                         { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Centreline Check', checksdescription: 'Check whether the centreline is properly marked' },
                    //                         { checksHeading: 'Curing Check', checksdescription: 'PCC should be properly cured' },
                    //                         { checksHeading: 'Drawings Check', checksdescription: 'Check if the contractor is working with the relevant drawings' },
                    //                         { checksHeading: 'Column marking check', checksdescription: 'Check if the the column marking has been done before placing the steel of the footing ' },
                    //                         { checksHeading: 'Cleaning Check', checksdescription: 'Check if the pcc surface is clean and free from soil' },
                    //                         { checksHeading: 'Steel Clean Check', checksdescription: 'Check if the steel is free from dust , oil and any other contamination' }
                    //                     ];

                    //                     async function stellorkchChacks() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Checks(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             checksID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     stellorkchChacks();
                    //                 }












                    //                 if (newDatanew.subactivityname === "BS Reinforcement - RSL") {

                    //                     const dataArranew = [
                    //                         { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Arrange  the rebars and binding wire at site' },
                    //                         { subtaskdescription: 'Assignt the labour and Contractor for the work' },
                    //                         { subtaskdescription: 'Ask the contractor to arrange the supports and Shuttering' },
                    //                         { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Explain the contractor about the dimension and steel detailing of the footing' },
                    //                         { subtaskdescription: 'Check the excavated pits for steel placement' },
                    //                         { subtaskdescription: 'Ask to contractor to properly place the cover blocks' },
                    //                         { subtaskdescription: 'Ask the contractor  to tie the rebars properly as per the specifications' },
                    //                         { subtaskdescription: 'Ask the contractor  to check the column for verticality' },
                    //                         { subtaskdescription: 'Ask the contractor to place supports in the column' },
                    //                     ];

                    //                     async function SteelReinforcementfunCall() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Subtask(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             subtaskID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     SteelReinforcementfunCall();
                    //                 }





                    //                 if (newDatanew.subactivityname === "BS Reinforcement - RSL") {

                    //                     const dataArranew = [
                    //                         { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Centreline Check', checksdescription: 'Check whether the centreline is properly marked' },
                    //                         { checksHeading: 'Curing Check', checksdescription: 'PCC should be properly cured' },
                    //                         { checksHeading: 'Drawings Check', checksdescription: 'Check if the contractor is working with the relevant drawings' },
                    //                         { checksHeading: 'Column marking check', checksdescription: 'Check if the the column marking has been done before placing the steel of the footing ' },
                    //                         { checksHeading: 'Cleaning Check', checksdescription: 'Check if the pcc surface is clean and free from soil' },
                    //                         { checksHeading: 'Steel Clean Check', checksdescription: 'Check if the steel is free from dust , oil and any other contamination' }
                    //                     ];

                    //                     async function stellorkchChacks() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Checks(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             checksID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     stellorkchChacks();
                    //                 }













































                    //                 if (newDatanew.subactivityname === "R.C.C Footing") {

                    //                     const dataArranew = [
                    //                         { maintitle: 'F1', headingforshorting: 'Rein', firstcheck: 'No', secondcheck: 'No', thirdcheck: 'No' },
                    //                         { maintitle: 'F2', headingforshorting: 'Rein', firstcheck: 'No', secondcheck: 'No', thirdcheck: 'No' },
                    //                         { maintitle: 'F3', headingforshorting: 'Rein', firstcheck: 'No', secondcheck: 'No', thirdcheck: 'No' },
                    //                         { maintitle: 'F4', headingforshorting: 'Rein', firstcheck: 'No', secondcheck: 'No', thirdcheck: 'No' },
                    //                         { maintitle: 'F5', headingforshorting: 'Rein', firstcheck: 'No', secondcheck: 'No', thirdcheck: 'No' },
                    //                         { maintitle: 'F6', headingforshorting: 'Rein', firstcheck: 'No', secondcheck: 'No', thirdcheck: 'No' },
                    //                         { maintitle: 'F7', headingforshorting: 'Rein', firstcheck: 'No', secondcheck: 'No', thirdcheck: 'No' },
                    //                         { maintitle: 'F1', headingforshorting: 'Shuttering', firstcheck: 'No', secondcheck: 'No', thirdcheck: 'No' },
                    //                         { maintitle: 'F2', headingforshorting: 'Shuttering', firstcheck: 'No', secondcheck: 'No', thirdcheck: 'No' },
                    //                         { maintitle: 'F3', headingforshorting: 'Shuttering', firstcheck: 'No', secondcheck: 'No', thirdcheck: 'No' },
                    //                         { maintitle: 'F4', headingforshorting: 'Shuttering', firstcheck: 'No', secondcheck: 'No', thirdcheck: 'No' },
                    //                         { maintitle: 'F5', headingforshorting: 'Shuttering', firstcheck: 'No', secondcheck: 'No', thirdcheck: 'No' },
                    //                         { maintitle: 'F6', headingforshorting: 'Shuttering', firstcheck: 'No', secondcheck: 'No', thirdcheck: 'No' },
                    //                         { maintitle: 'F7', headingforshorting: 'Shuttering', firstcheck: 'No', secondcheck: 'No', thirdcheck: 'No' },
                    //                         { maintitle: 'F1', headingforshorting: 'R.C.C', firstcheck: 'No', secondcheck: 'No', thirdcheck: 'No' },
                    //                         { maintitle: 'F2', headingforshorting: 'R.C.C', firstcheck: 'No', secondcheck: 'No', thirdcheck: 'No' },
                    //                         { maintitle: 'F3', headingforshorting: 'R.C.C', firstcheck: 'No', secondcheck: 'No', thirdcheck: 'No' },
                    //                         { maintitle: 'F4', headingforshorting: 'R.C.C', firstcheck: 'No', secondcheck: 'No', thirdcheck: 'No' },
                    //                         { maintitle: 'F5', headingforshorting: 'R.C.C', firstcheck: 'No', secondcheck: 'No', thirdcheck: 'No' },
                    //                         { maintitle: 'F6', headingforshorting: 'R.C.C', firstcheck: 'No', secondcheck: 'No', thirdcheck: 'No' },
                    //                         { maintitle: 'F7', headingforshorting: 'R.C.C', firstcheck: 'No', secondcheck: 'No', thirdcheck: 'No' },
                    //                     ];

                    //                     async function RccsnagsSnags() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Snags(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             snagsID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     RccsnagsSnags();
                    //                 }













                    //                 await Activities.updateOne(
                    //                     { _id: newss },
                    //                     {
                    //                         $push: {
                    //                             subactivitiesID: objID
                    //                         }
                    //                     }
                    //                 )
                    //                 // console.log('Data saved:', savedData);
                    //             } catch (error) {
                    //                 // console.error('Error saving data:', error);
                    //             }
                    //         }
                    //     }
                    //     saveDatanew();
                    // }










                    // if (newData.categoryname === "RCC Column & Slab Work") {

                    //     var dataArrayplinthwok = [
                    //         { subactivityname: 'B1 Column Reinforcement', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //         { subactivityname: 'B1 Curtain Wall Shuttering', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //         { subactivityname: 'B1 RCC Column + Curtain Wall', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //         { subactivityname: 'B1 - Waterproofing', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //         { subactivityname: 'B1 Brick Work', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //         { subactivityname: 'B1 Slab Shuttering', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //         { subactivityname: 'B1 Slab Reinforcement', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //         { subactivityname: 'B1 Slab Electrical Conduting', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //         { subactivityname: 'B1 Slab RCC', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //         { subactivityname: 'B2 Column Reinforcement', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //         { subactivityname: 'B2 Curtain Wall Shuttering', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //         { subactivityname: 'B2 RCC Column + Curtain Wall', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //         { subactivityname: 'B2 - Waterproofing', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //         { subactivityname: 'B2 Brick Work', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //         { subactivityname: 'B2 Slab Shuttering', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //         { subactivityname: 'B2 Slab Reinforcement', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //         { subactivityname: 'B2 Slab Electrical Conduting', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //         { subactivityname: 'B2 Slab RCC', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //         { subactivityname: 'B3 Column Reinforcement', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //         { subactivityname: 'B3 Curtain Wall Shuttering', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //         { subactivityname: 'B3 RCC Column + Curtain Wall', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //         { subactivityname: 'B3 - Waterproofing', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //         { subactivityname: 'B3 Brick Work', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //         { subactivityname: 'B3 Slab Shuttering', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //         { subactivityname: 'B3 Slab Reinforcement', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //         { subactivityname: 'B3 Slab Electrical Conduting', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //         { subactivityname: 'B3 Slab RCC', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //         { subactivityname: 'B4 Column Reinforcement', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //         { subactivityname: 'B4 Curtain Wall Shuttering', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //         { subactivityname: 'B4 RCC Column + Curtain Wall', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //         { subactivityname: 'B4 - Waterproofing', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //         { subactivityname: 'B4 Brick Work', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //         { subactivityname: 'B4 Slab Shuttering', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //         { subactivityname: 'B4 Slab Reinforcement', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //         { subactivityname: 'B4 Slab Electrical Conduting', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                    //         { subactivityname: 'B4 Slab RCC', activityID: newData._id, projectID: objectproID, estimateDays: 4 }
                    //     ];




                    //     async function plinthCalling() {
                    //         for (let i = 0; i < dataArrayplinthwok.length; i++) {
                    //             try {
                    //                 const newDatanew = new SubActivities(dataArrayplinthwok[i]);
                    //                 const savedData = await newDatanew.save();

                    //                 let objID = new mongoose.Types.ObjectId(newDatanew.id)
                    //                 let newss = new mongoose.Types.ObjectId(newData._id)









                    //                 //Anuj//
                    //                 if (newDatanew.subactivityname === 'B1 Slab Electrical Conduting') {

                    //                     const dataArranew = [
                    //                         { subtaskdescription: 'Phase 1  Slab Conduting', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Assign the electrician been for the work' },
                    //                         { subtaskdescription: 'Explain the electrician  all the work with the  drawings' },
                    //                         { subtaskdescription: 'Ask the electrician to have a initial review and check if any interdepencies occur' },
                    //                         { subtaskdescription: 'Take the quantity of materials from the electrician and give to purchase manager' },
                    //                         { subtaskdescription: 'Ask the purchase manager to arrange the materials on site' },
                    //                         { subtaskdescription: 'Indicate for the electrical lines, locations of DB,Fan box ,etc to the electrician' },
                    //                         { subtaskdescription: 'Ask the electrician to check the centre of the fan hook' },
                    //                         { subtaskdescription: 'Ask the RCC contractor not to damage the electrical conduits while concreting' },
                    //                     ];

                    //                     async function ElectricalfunCall() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Subtask(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             subtaskID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     ElectricalfunCall();
                    //                 }

                    //                 //Anuj//
                    //                 if (newDatanew.subactivityname === 'B1 Slab Electrical Conduting') {

                    //                     const dataArranew = [
                    //                         { checksHeading: 'Drawing Check', checksdescription: 'Check the electrical conduting layout as per the drawing' },
                    //                         { checksHeading: 'Layout check', checksdescription: 'Check the actual layout of the conduting in the slab for bill preparation and record purposes.' },
                    //                         { checksHeading: 'Location Check', checksdescription: 'Check the center of the fan hook box diagonally for center alignment, considering the loft position in the room.' },
                    //                         { checksHeading: 'Fixing Check', checksdescription: 'A bonding solution should be applied to all the pipes and accessories, to avoid the loose fixing of pipes with accessories.' },
                    //                         { checksHeading: 'Tieing check', checksdescription: 'Tie the conduits, using binding wire, to each other, and to the slab steel.' },
                    //                         { checksHeading: 'Conduit safety check', checksdescription: 'Ensure that conduits do not get damaged with the movement of the laborers on the slab.' },
                    //                         { checksHeading: 'Fan box check', checksdescription: 'Ensure that the fan box entries/holes are intact to prevent the cement slurry from entering.' },
                    //                     ];

                    //                     async function ElectricalChacks() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Checks(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             checksID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     ElectricalChacks();
                    //                 }
                    //                 //Anuj//
                    //                 if (newDatanew.subactivityname === 'B2 Slab Electrical Conduting') {

                    //                     const dataArranew = [
                    //                         { subtaskdescription: 'Phase 1  Slab Conduting', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Assign the electrician been for the work' },
                    //                         { subtaskdescription: 'Explain the electrician  all the work with the  drawings' },
                    //                         { subtaskdescription: 'Ask the electrician to have a initial review and check if any interdepencies occur' },
                    //                         { subtaskdescription: 'Take the quantity of materials from the electrician and give to purchase manager' },
                    //                         { subtaskdescription: 'Ask the purchase manager to arrange the materials on site' },
                    //                         { subtaskdescription: 'Indicate for the electrical lines, locations of DB,Fan box ,etc to the electrician' },
                    //                         { subtaskdescription: 'Ask the electrician to check the centre of the fan hook' },
                    //                         { subtaskdescription: 'Ask the RCC contractor not to damage the electrical conduits while concreting' },
                    //                     ];

                    //                     async function ElectricalfunCall() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Subtask(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             subtaskID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     ElectricalfunCall();
                    //                 }

                    //                 //Anuj//
                    //                 if (newDatanew.subactivityname === 'B2 Slab Electrical Conduting') {

                    //                     const dataArranew = [
                    //                         { checksHeading: 'Drawing Check', checksdescription: 'Check the electrical conduting layout as per the drawing' },
                    //                         { checksHeading: 'Layout check', checksdescription: 'Check the actual layout of the conduting in the slab for bill preparation and record purposes.' },
                    //                         { checksHeading: 'Location Check', checksdescription: 'Check the center of the fan hook box diagonally for center alignment, considering the loft position in the room.' },
                    //                         { checksHeading: 'Fixing Check', checksdescription: 'A bonding solution should be applied to all the pipes and accessories, to avoid the loose fixing of pipes with accessories.' },
                    //                         { checksHeading: 'Tieing check', checksdescription: 'Tie the conduits, using binding wire, to each other, and to the slab steel.' },
                    //                         { checksHeading: 'Conduit safety check', checksdescription: 'Ensure that conduits do not get damaged with the movement of the laborers on the slab.' },
                    //                         { checksHeading: 'Fan box check', checksdescription: 'Ensure that the fan box entries/holes are intact to prevent the cement slurry from entering.' },
                    //                     ];

                    //                     async function ElectricalChacks() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Checks(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             checksID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     ElectricalChacks();
                    //                 }
                    //                 //Anuj//
                    //                 if (newDatanew.subactivityname === 'B3 Slab Electrical Conduting') {

                    //                     const dataArranew = [
                    //                         { subtaskdescription: 'Phase 1  Slab Conduting', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Assign the electrician been for the work' },
                    //                         { subtaskdescription: 'Explain the electrician  all the work with the  drawings' },
                    //                         { subtaskdescription: 'Ask the electrician to have a initial review and check if any interdepencies occur' },
                    //                         { subtaskdescription: 'Take the quantity of materials from the electrician and give to purchase manager' },
                    //                         { subtaskdescription: 'Ask the purchase manager to arrange the materials on site' },
                    //                         { subtaskdescription: 'Indicate for the electrical lines, locations of DB,Fan box ,etc to the electrician' },
                    //                         { subtaskdescription: 'Ask the electrician to check the centre of the fan hook' },
                    //                         { subtaskdescription: 'Ask the RCC contractor not to damage the electrical conduits while concreting' },
                    //                     ];

                    //                     async function ElectricalfunCall() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Subtask(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             subtaskID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     ElectricalfunCall();
                    //                 }

                    //                 //Anuj//
                    //                 if (newDatanew.subactivityname === 'B3 Slab Electrical Conduting') {

                    //                     const dataArranew = [
                    //                         { checksHeading: 'Drawing Check', checksdescription: 'Check the electrical conduting layout as per the drawing' },
                    //                         { checksHeading: 'Layout check', checksdescription: 'Check the actual layout of the conduting in the slab for bill preparation and record purposes.' },
                    //                         { checksHeading: 'Location Check', checksdescription: 'Check the center of the fan hook box diagonally for center alignment, considering the loft position in the room.' },
                    //                         { checksHeading: 'Fixing Check', checksdescription: 'A bonding solution should be applied to all the pipes and accessories, to avoid the loose fixing of pipes with accessories.' },
                    //                         { checksHeading: 'Tieing check', checksdescription: 'Tie the conduits, using binding wire, to each other, and to the slab steel.' },
                    //                         { checksHeading: 'Conduit safety check', checksdescription: 'Ensure that conduits do not get damaged with the movement of the laborers on the slab.' },
                    //                         { checksHeading: 'Fan box check', checksdescription: 'Ensure that the fan box entries/holes are intact to prevent the cement slurry from entering.' },
                    //                     ];

                    //                     async function ElectricalChacks() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Checks(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             checksID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     ElectricalChacks();
                    //                 }

                    //                 if (newDatanew.subactivityname === 'B4 Slab Electrical Conduting') {

                    //                     const dataArranew = [
                    //                         { subtaskdescription: 'Phase 1  Slab Conduting', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Assign the electrician been for the work' },
                    //                         { subtaskdescription: 'Explain the electrician  all the work with the  drawings' },
                    //                         { subtaskdescription: 'Ask the electrician to have a initial review and check if any interdepencies occur' },
                    //                         { subtaskdescription: 'Take the quantity of materials from the electrician and give to purchase manager' },
                    //                         { subtaskdescription: 'Ask the purchase manager to arrange the materials on site' },
                    //                         { subtaskdescription: 'Indicate for the electrical lines, locations of DB,Fan box ,etc to the electrician' },
                    //                         { subtaskdescription: 'Ask the electrician to check the centre of the fan hook' },
                    //                         { subtaskdescription: 'Ask the RCC contractor not to damage the electrical conduits while concreting' },
                    //                     ];

                    //                     async function ElectricalfunCall() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Subtask(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             subtaskID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     ElectricalfunCall();
                    //                 }

                    //                 //Anuj//
                    //                 if (newDatanew.subactivityname === 'B4 Slab Electrical Conduting') {

                    //                     const dataArranew = [
                    //                         { checksHeading: 'Drawing Check', checksdescription: 'Check the electrical conduting layout as per the drawing' },
                    //                         { checksHeading: 'Layout check', checksdescription: 'Check the actual layout of the conduting in the slab for bill preparation and record purposes.' },
                    //                         { checksHeading: 'Location Check', checksdescription: 'Check the center of the fan hook box diagonally for center alignment, considering the loft position in the room.' },
                    //                         { checksHeading: 'Fixing Check', checksdescription: 'A bonding solution should be applied to all the pipes and accessories, to avoid the loose fixing of pipes with accessories.' },
                    //                         { checksHeading: 'Tieing check', checksdescription: 'Tie the conduits, using binding wire, to each other, and to the slab steel.' },
                    //                         { checksHeading: 'Conduit safety check', checksdescription: 'Ensure that conduits do not get damaged with the movement of the laborers on the slab.' },
                    //                         { checksHeading: 'Fan box check', checksdescription: 'Ensure that the fan box entries/holes are intact to prevent the cement slurry from entering.' },
                    //                     ];

                    //                     async function ElectricalChacks() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Checks(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             checksID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     ElectricalChacks();
                    //                 }





                    //                 if (bricktype === "Normal") {

                    //                     if (newDatanew.subactivityname === "B1 Brick Work") {

                    //                         const dataArranew = [
                    //                             { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                             { checksHeading: 'Cleaning check', checksdescription: 'Cleaning the entire floor, before starting the line out of masonry.' },
                    //                             { checksHeading: 'Screening check', checksdescription: 'Screening of sand,mortar proportion & soaking of bricks.' },
                    //                             { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                             { checksHeading: 'Door window check', checksdescription: 'Erection of door & window frames with fixing the  necessary number of holdfast.' },
                    //                             { checksHeading: 'Mortar thickness check', checksdescription: 'Thickness of joints not more than 12mm and Racking of joints & surface cleaning after completion of day-to-day work.' },
                    //                             { checksHeading: 'Height check', checksdescription: 'Brickwork should be taken up in layers not exceeding one meter height at a time.' },
                    //                             { checksHeading: 'Scaffholding check', checksdescription: 'Check type of scaffolding and whether tied and braced properly.' },
                    //                             { checksHeading: 'Rebars check', checksdescription: 'Check wheather  reinforcement is provided in lintel in brick wall' },
                    //                             { checksHeading: 'Lintel check', checksdescription: 'Above Lintel work till Roof | Beam Bottom' },
                    //                             { checksHeading: 'Filling check', checksdescription: 'Filling of alll the Joints' },
                    //                             { checksHeading: 'Phase 3', phaseHeadingShow: 'Yes' },
                    //                             { checksHeading: 'Curing check', checksdescription: 'Curing should be done for 7 days' },
                    //                         ];

                    //                         async function BrickWorkChacks() {
                    //                             for (let i = 0; i < dataArranew.length; i++) {
                    //                                 try {
                    //                                     const newDatanewtask = new Checks(dataArranew[i]);
                    //                                     const savedData = await newDatanewtask.save();

                    //                                     let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                     let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                     // console.log(objID);
                    //                                     await SubActivities.updateOne(
                    //                                         { _id: newss },
                    //                                         {
                    //                                             $push: {
                    //                                                 checksID: objID
                    //                                             }
                    //                                         }
                    //                                     )
                    //                                     // console.log('Data saved:', savedData);
                    //                                 } catch (error) {
                    //                                     // console.error('Error saving data:', error);
                    //                                 }
                    //                             }
                    //                         }
                    //                         BrickWorkChacks();
                    //                     }




                    //                     if (newDatanew.subactivityname === "B1 Brick Work") {

                    //                         const dataArranew = [
                    //                             { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                             { subtaskdescription: 'Arrange the bricks/blocks ,sand and cement at site' },
                    //                             { subtaskdescription: 'Assign the  contractor for the work' },
                    //                             { subtaskdescription: 'Arrange the doors and window frames and hold fasts at site' },
                    //                             { subtaskdescription: 'Make the water and electricity arrangements at site' },
                    //                             { subtaskdescription: 'Ask the contractor to deliver the scaffholding material at site' },
                    //                             { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                             { subtaskdescription: 'Ask the contractor to soak the bricks in water before laying' },
                    //                             { subtaskdescription: 'Explain the brick layout to the contractor' },
                    //                             { subtaskdescription: 'Finalise the bond of brickwork' },
                    //                             { subtaskdescription: 'Ask the contractor to lay the brickwork in line and in plumb with the beam bottom' },
                    //                             { subtaskdescription: 'Calculate the quantity of door and Window frames and arrange them' },
                    //                             { subtaskdescription: 'Ask the contractor to do proper raking of joints' },
                    //                             { subtaskdescription: 'Ask the contractor not to do brickwork more than 1.5m in height in one day' },
                    //                             { subtaskdescription: 'Ask the contractor to do brickwork in proper line and level' },
                    //                             { subtaskdescription: 'Phase 3', phaseHeadingShow: 'Yes' },
                    //                             { subtaskdescription: 'Assign the guard for the curing ' },
                    //                             { subtaskdescription: 'Ask the contractor for daily cleaning of site after the work' },
                    //                         ];

                    //                         async function BrickWorkfunCall() {
                    //                             for (let i = 0; i < dataArranew.length; i++) {
                    //                                 try {
                    //                                     const newDatanewtask = new Subtask(dataArranew[i]);
                    //                                     const savedData = await newDatanewtask.save();

                    //                                     let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                     let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                     // console.log(objID);
                    //                                     await SubActivities.updateOne(
                    //                                         { _id: newss },
                    //                                         {
                    //                                             $push: {
                    //                                                 subtaskID: objID
                    //                                             }
                    //                                         }
                    //                                     )
                    //                                     // console.log('Data saved:', savedData);
                    //                                 } catch (error) {
                    //                                     // console.error('Error saving data:', error);
                    //                                 }
                    //                             }
                    //                         }
                    //                         BrickWorkfunCall();
                    //                     }





                    //                     if (newDatanew.subactivityname === "B2 Brick Work") {

                    //                         const dataArranew = [
                    //                             { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                             { checksHeading: 'Cleaning check', checksdescription: 'Cleaning the entire floor, before starting the line out of masonry.' },
                    //                             { checksHeading: 'Screening check', checksdescription: 'Screening of sand,mortar proportion & soaking of bricks.' },
                    //                             { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                             { checksHeading: 'Door window check', checksdescription: 'Erection of door & window frames with fixing the  necessary number of holdfast.' },
                    //                             { checksHeading: 'Mortar thickness check', checksdescription: 'Thickness of joints not more than 12mm and Racking of joints & surface cleaning after completion of day-to-day work.' },
                    //                             { checksHeading: 'Height check', checksdescription: 'Brickwork should be taken up in layers not exceeding one meter height at a time.' },
                    //                             { checksHeading: 'Scaffholding check', checksdescription: 'Check type of scaffolding and whether tied and braced properly.' },
                    //                             { checksHeading: 'Rebars check', checksdescription: 'Check wheather  reinforcement is provided in lintel in brick wall' },
                    //                             { checksHeading: 'Lintel check', checksdescription: 'Above Lintel work till Roof | Beam Bottom' },
                    //                             { checksHeading: 'Filling check', checksdescription: 'Filling of alll the Joints' },
                    //                             { checksHeading: 'Phase 3', phaseHeadingShow: 'Yes' },
                    //                             { checksHeading: 'Curing check', checksdescription: 'Curing should be done for 7 days' },
                    //                         ];

                    //                         async function BrickWorkChacks() {
                    //                             for (let i = 0; i < dataArranew.length; i++) {
                    //                                 try {
                    //                                     const newDatanewtask = new Checks(dataArranew[i]);
                    //                                     const savedData = await newDatanewtask.save();

                    //                                     let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                     let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                     // console.log(objID);
                    //                                     await SubActivities.updateOne(
                    //                                         { _id: newss },
                    //                                         {
                    //                                             $push: {
                    //                                                 checksID: objID
                    //                                             }
                    //                                         }
                    //                                     )
                    //                                     // console.log('Data saved:', savedData);
                    //                                 } catch (error) {
                    //                                     // console.error('Error saving data:', error);
                    //                                 }
                    //                             }
                    //                         }
                    //                         BrickWorkChacks();
                    //                     }



                    //                     if (newDatanew.subactivityname === "B2 Brick Work") {

                    //                         const dataArranew = [
                    //                             { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                             { subtaskdescription: 'Arrange the bricks/blocks ,sand and cement at site' },
                    //                             { subtaskdescription: 'Assign the  contractor for the work' },
                    //                             { subtaskdescription: 'Arrange the doors and window frames and hold fasts at site' },
                    //                             { subtaskdescription: 'Make the water and electricity arrangements at site' },
                    //                             { subtaskdescription: 'Ask the contractor to deliver the scaffholding material at site' },
                    //                             { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                             { subtaskdescription: 'Ask the contractor to soak the bricks in water before laying' },
                    //                             { subtaskdescription: 'Explain the brick layout to the contractor' },
                    //                             { subtaskdescription: 'Finalise the bond of brickwork' },
                    //                             { subtaskdescription: 'Ask the contractor to lay the brickwork in line and in plumb with the beam bottom' },
                    //                             { subtaskdescription: 'Calculate the quantity of door and Window frames and arrange them' },
                    //                             { subtaskdescription: 'Ask the contractor to do proper raking of joints' },
                    //                             { subtaskdescription: 'Ask the contractor not to do brickwork more than 1.5m in height in one day' },
                    //                             { subtaskdescription: 'Ask the contractor to do brickwork in proper line and level' },
                    //                             { subtaskdescription: 'Phase 3', phaseHeadingShow: 'Yes' },
                    //                             { subtaskdescription: 'Assign the guard for the curing ' },
                    //                             { subtaskdescription: 'Ask the contractor for daily cleaning of site after the work' },
                    //                         ];

                    //                         async function BrickWorkfunCall() {
                    //                             for (let i = 0; i < dataArranew.length; i++) {
                    //                                 try {
                    //                                     const newDatanewtask = new Subtask(dataArranew[i]);
                    //                                     const savedData = await newDatanewtask.save();

                    //                                     let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                     let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                     // console.log(objID);
                    //                                     await SubActivities.updateOne(
                    //                                         { _id: newss },
                    //                                         {
                    //                                             $push: {
                    //                                                 subtaskID: objID
                    //                                             }
                    //                                         }
                    //                                     )
                    //                                     // console.log('Data saved:', savedData);
                    //                                 } catch (error) {
                    //                                     // console.error('Error saving data:', error);
                    //                                 }
                    //                             }
                    //                         }
                    //                         BrickWorkfunCall();
                    //                     }






                    //                     if (newDatanew.subactivityname === "B3 Brick Work") {

                    //                         const dataArranew = [
                    //                             { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                             { checksHeading: 'Cleaning check', checksdescription: 'Cleaning the entire floor, before starting the line out of masonry.' },
                    //                             { checksHeading: 'Screening check', checksdescription: 'Screening of sand,mortar proportion & soaking of bricks.' },
                    //                             { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                             { checksHeading: 'Door window check', checksdescription: 'Erection of door & window frames with fixing the  necessary number of holdfast.' },
                    //                             { checksHeading: 'Mortar thickness check', checksdescription: 'Thickness of joints not more than 12mm and Racking of joints & surface cleaning after completion of day-to-day work.' },
                    //                             { checksHeading: 'Height check', checksdescription: 'Brickwork should be taken up in layers not exceeding one meter height at a time.' },
                    //                             { checksHeading: 'Scaffholding check', checksdescription: 'Check type of scaffolding and whether tied and braced properly.' },
                    //                             { checksHeading: 'Rebars check', checksdescription: 'Check wheather  reinforcement is provided in lintel in brick wall' },
                    //                             { checksHeading: 'Lintel check', checksdescription: 'Above Lintel work till Roof | Beam Bottom' },
                    //                             { checksHeading: 'Filling check', checksdescription: 'Filling of alll the Joints' },
                    //                             { checksHeading: 'Phase 3', phaseHeadingShow: 'Yes' },
                    //                             { checksHeading: 'Curing check', checksdescription: 'Curing should be done for 7 days' },
                    //                         ];

                    //                         async function BrickWorkChacks() {
                    //                             for (let i = 0; i < dataArranew.length; i++) {
                    //                                 try {
                    //                                     const newDatanewtask = new Checks(dataArranew[i]);
                    //                                     const savedData = await newDatanewtask.save();

                    //                                     let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                     let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                     // console.log(objID);
                    //                                     await SubActivities.updateOne(
                    //                                         { _id: newss },
                    //                                         {
                    //                                             $push: {
                    //                                                 checksID: objID
                    //                                             }
                    //                                         }
                    //                                     )
                    //                                     // console.log('Data saved:', savedData);
                    //                                 } catch (error) {
                    //                                     // console.error('Error saving data:', error);
                    //                                 }
                    //                             }
                    //                         }
                    //                         BrickWorkChacks();
                    //                     }



                    //                     if (newDatanew.subactivityname === "B3 Brick Work") {

                    //                         const dataArranew = [
                    //                             { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                             { subtaskdescription: 'Arrange the bricks/blocks ,sand and cement at site' },
                    //                             { subtaskdescription: 'Assign the  contractor for the work' },
                    //                             { subtaskdescription: 'Arrange the doors and window frames and hold fasts at site' },
                    //                             { subtaskdescription: 'Make the water and electricity arrangements at site' },
                    //                             { subtaskdescription: 'Ask the contractor to deliver the scaffholding material at site' },
                    //                             { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                             { subtaskdescription: 'Ask the contractor to soak the bricks in water before laying' },
                    //                             { subtaskdescription: 'Explain the brick layout to the contractor' },
                    //                             { subtaskdescription: 'Finalise the bond of brickwork' },
                    //                             { subtaskdescription: 'Ask the contractor to lay the brickwork in line and in plumb with the beam bottom' },
                    //                             { subtaskdescription: 'Calculate the quantity of door and Window frames and arrange them' },
                    //                             { subtaskdescription: 'Ask the contractor to do proper raking of joints' },
                    //                             { subtaskdescription: 'Ask the contractor not to do brickwork more than 1.5m in height in one day' },
                    //                             { subtaskdescription: 'Ask the contractor to do brickwork in proper line and level' },
                    //                             { subtaskdescription: 'Phase 3', phaseHeadingShow: 'Yes' },
                    //                             { subtaskdescription: 'Assign the guard for the curing ' },
                    //                             { subtaskdescription: 'Ask the contractor for daily cleaning of site after the work' },
                    //                         ];

                    //                         async function BrickWorkfunCall() {
                    //                             for (let i = 0; i < dataArranew.length; i++) {
                    //                                 try {
                    //                                     const newDatanewtask = new Subtask(dataArranew[i]);
                    //                                     const savedData = await newDatanewtask.save();

                    //                                     let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                     let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                     // console.log(objID);
                    //                                     await SubActivities.updateOne(
                    //                                         { _id: newss },
                    //                                         {
                    //                                             $push: {
                    //                                                 subtaskID: objID
                    //                                             }
                    //                                         }
                    //                                     )
                    //                                     // console.log('Data saved:', savedData);
                    //                                 } catch (error) {
                    //                                     // console.error('Error saving data:', error);
                    //                                 }
                    //                             }
                    //                         }
                    //                         BrickWorkfunCall();
                    //                     }






                    //                     if (newDatanew.subactivityname === "B4 Brick Work") {

                    //                         const dataArranew = [
                    //                             { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                             { checksHeading: 'Cleaning check', checksdescription: 'Cleaning the entire floor, before starting the line out of masonry.' },
                    //                             { checksHeading: 'Screening check', checksdescription: 'Screening of sand,mortar proportion & soaking of bricks.' },
                    //                             { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                             { checksHeading: 'Door window check', checksdescription: 'Erection of door & window frames with fixing the  necessary number of holdfast.' },
                    //                             { checksHeading: 'Mortar thickness check', checksdescription: 'Thickness of joints not more than 12mm and Racking of joints & surface cleaning after completion of day-to-day work.' },
                    //                             { checksHeading: 'Height check', checksdescription: 'Brickwork should be taken up in layers not exceeding one meter height at a time.' },
                    //                             { checksHeading: 'Scaffholding check', checksdescription: 'Check type of scaffolding and whether tied and braced properly.' },
                    //                             { checksHeading: 'Rebars check', checksdescription: 'Check wheather  reinforcement is provided in lintel in brick wall' },
                    //                             { checksHeading: 'Lintel check', checksdescription: 'Above Lintel work till Roof | Beam Bottom' },
                    //                             { checksHeading: 'Filling check', checksdescription: 'Filling of alll the Joints' },
                    //                             { checksHeading: 'Phase 3', phaseHeadingShow: 'Yes' },
                    //                             { checksHeading: 'Curing check', checksdescription: 'Curing should be done for 7 days' },
                    //                         ];

                    //                         async function BrickWorkChacks() {
                    //                             for (let i = 0; i < dataArranew.length; i++) {
                    //                                 try {
                    //                                     const newDatanewtask = new Checks(dataArranew[i]);
                    //                                     const savedData = await newDatanewtask.save();

                    //                                     let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                     let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                     // console.log(objID);
                    //                                     await SubActivities.updateOne(
                    //                                         { _id: newss },
                    //                                         {
                    //                                             $push: {
                    //                                                 checksID: objID
                    //                                             }
                    //                                         }
                    //                                     )
                    //                                     // console.log('Data saved:', savedData);
                    //                                 } catch (error) {
                    //                                     // console.error('Error saving data:', error);
                    //                                 }
                    //                             }
                    //                         }
                    //                         BrickWorkChacks();
                    //                     }



                    //                     if (newDatanew.subactivityname === "B4 Brick Work") {

                    //                         const dataArranew = [
                    //                             { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                             { subtaskdescription: 'Arrange the bricks/blocks ,sand and cement at site' },
                    //                             { subtaskdescription: 'Assign the  contractor for the work' },
                    //                             { subtaskdescription: 'Arrange the doors and window frames and hold fasts at site' },
                    //                             { subtaskdescription: 'Make the water and electricity arrangements at site' },
                    //                             { subtaskdescription: 'Ask the contractor to deliver the scaffholding material at site' },
                    //                             { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                             { subtaskdescription: 'Ask the contractor to soak the bricks in water before laying' },
                    //                             { subtaskdescription: 'Explain the brick layout to the contractor' },
                    //                             { subtaskdescription: 'Finalise the bond of brickwork' },
                    //                             { subtaskdescription: 'Ask the contractor to lay the brickwork in line and in plumb with the beam bottom' },
                    //                             { subtaskdescription: 'Calculate the quantity of door and Window frames and arrange them' },
                    //                             { subtaskdescription: 'Ask the contractor to do proper raking of joints' },
                    //                             { subtaskdescription: 'Ask the contractor not to do brickwork more than 1.5m in height in one day' },
                    //                             { subtaskdescription: 'Ask the contractor to do brickwork in proper line and level' },
                    //                             { subtaskdescription: 'Phase 3', phaseHeadingShow: 'Yes' },
                    //                             { subtaskdescription: 'Assign the guard for the curing ' },
                    //                             { subtaskdescription: 'Ask the contractor for daily cleaning of site after the work' },
                    //                         ];

                    //                         async function BrickWorkfunCall() {
                    //                             for (let i = 0; i < dataArranew.length; i++) {
                    //                                 try {
                    //                                     const newDatanewtask = new Subtask(dataArranew[i]);
                    //                                     const savedData = await newDatanewtask.save();

                    //                                     let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                     let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                     // console.log(objID);
                    //                                     await SubActivities.updateOne(
                    //                                         { _id: newss },
                    //                                         {
                    //                                             $push: {
                    //                                                 subtaskID: objID
                    //                                             }
                    //                                         }
                    //                                     )
                    //                                     // console.log('Data saved:', savedData);
                    //                                 } catch (error) {
                    //                                     // console.error('Error saving data:', error);
                    //                                 }
                    //                             }
                    //                         }
                    //                         BrickWorkfunCall();
                    //                     }
                    //                 }












                    //                 if (newDatanew.subactivityname === "B1 RCC Column") {

                    //                     const dataArranew = [
                    //                         { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Gridline check', checksdescription: 'Plotting of gridline for center of column above plinth / floor slab.' },
                    //                         { checksHeading: 'Lapping check', checksdescription: 'Binding & placing column reinforcement above upper floor slab as per required height, considering lap length of the bar.' },
                    //                         { checksHeading: 'Drawing check', checksdescription: 'Check if the column reinforcement is as per the lastest structural drawings' },
                    //                         { checksHeading: 'Shuttering Oil check', checksdescription: 'Check if the shuttering is properly cleaned and oiled' },
                    //                         { checksHeading: 'Packing check', checksdescription: 'Check if the gaps at joints are properly packed' },
                    //                         { checksHeading: 'Support check', checksdescription: 'Check if the props are resting on hard surface so as to prevent misalignment of columns' },
                    //                         { checksHeading: 'Concrete level check', checksdescription: 'Check if the top level of concrete has been marked' },
                    //                         { checksHeading: 'Material check', checksdescription: 'The material (cement,sand and aggregate) to be used for  concreting are of good quality' },
                    //                         { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Compaction check', checksdescription: 'Check if the concrete is properly compacted with the help of vibrators to reduce the air voids' },
                    //                         { checksHeading: 'Concrete Filling Check', checksdescription: 'Concrete filling should be continuous, for each column No Break in between or Mixer Break' },
                    //                         { checksHeading: 'W/C ratio check', checksdescription: 'Controlled water cement ratio.' },
                    //                         { checksHeading: 'Compaction check', checksdescription: 'Proper compaction of concrete' },
                    //                         { checksHeading: 'Phase 3', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Deshuttering check', checksdescription: 'Deshuttering of columns after 24 hrs-48 hrs.' },
                    //                         { checksHeading: '', checksdescription: 'Submission of the deshuttering report to higher authority.' },
                    //                         { checksHeading: 'Curing check', checksdescription: 'Curing of Columns minimum for 10 days' },
                    //                     ];

                    //                     async function pedastalrccChacks() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Checks(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             checksID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     pedastalrccChacks();
                    //                 }




                    //                 if (newDatanew.subactivityname === "B1 RCC Column") {

                    //                     const dataArranew = [
                    //                         { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Assign the labour and Contractor for the work' },
                    //                         { subtaskdescription: 'Explain the contractor about the work' },
                    //                         { subtaskdescription: 'Arrange the rebars and Binding Wires at site' },
                    //                         { subtaskdescription: 'Ask the contractor to arrange the shuttering and supports at site' },
                    //                         { subtaskdescription: 'Ask the contractor to make the arrangements for concrete mixer ,vibrator and Diesel' },
                    //                         { subtaskdescription: 'Calculate the material required for RCC and infrom the purchase manager' },
                    //                         { subtaskdescription: 'Aks the contractor to use the workable shuttering only  and do proper oiling of shuttering' },
                    //                         { subtaskdescription: 'Arrange the cover blocks at site and ask the contractor to place them' },
                    //                         { subtaskdescription: 'Arrange the putty,thermocol and Tape' },
                    //                         { subtaskdescription: 'Ask the contractor to make the arrangements for pouring of concrete' },
                    //                         { subtaskdescription: 'Arrange the water for concreting' },
                    //                         { subtaskdescription: 'Ask the contractor to check the electricity connections' },
                    //                         { subtaskdescription: 'Ask the contractor to clean and oil the shuttering and fill the gaps' },
                    //                         { subtaskdescription: 'Ask the contractor to mark the top level of concreting' },
                    //                         { subtaskdescription: 'Ask the contractor to check the line and Level' },
                    //                         { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Inform the contractor about the concrete mix ratio' },
                    //                         { subtaskdescription: 'Ask the contractor to control the water cement ratio' },
                    //                         { subtaskdescription: 'Ask the contractor to do proper compaction' },
                    //                         { subtaskdescription: 'Inform the contractor about the date of deshuttering' },
                    //                         { subtaskdescription: 'Phase 3', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Check for honeycombing during deshuttering and ask the contractor to repair it properly' },
                    //                         { subtaskdescription: 'Ask the guard to paint the curing compound' },
                    //                         { subtaskdescription: 'Ask the Guard to do three times curing' },
                    //                     ];

                    //                     async function RCCPedestalfunCall() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Subtask(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             subtaskID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     RCCPedestalfunCall();
                    //                 }











                    //                 if (newDatanew.subactivityname === "B2 RCC Column") {

                    //                     const dataArranew = [
                    //                         { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Gridline check', checksdescription: 'Plotting of gridline for center of column above plinth / floor slab.' },
                    //                         { checksHeading: 'Lapping check', checksdescription: 'Binding & placing column reinforcement above upper floor slab as per required height, considering lap length of the bar.' },
                    //                         { checksHeading: 'Drawing check', checksdescription: 'Check if the column reinforcement is as per the lastest structural drawings' },
                    //                         { checksHeading: 'Shuttering Oil check', checksdescription: 'Check if the shuttering is properly cleaned and oiled' },
                    //                         { checksHeading: 'Packing check', checksdescription: 'Check if the gaps at joints are properly packed' },
                    //                         { checksHeading: 'Support check', checksdescription: 'Check if the props are resting on hard surface so as to prevent misalignment of columns' },
                    //                         { checksHeading: 'Concrete level check', checksdescription: 'Check if the top level of concrete has been marked' },
                    //                         { checksHeading: 'Material check', checksdescription: 'The material (cement,sand and aggregate) to be used for  concreting are of good quality' },
                    //                         { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Compaction check', checksdescription: 'Check if the concrete is properly compacted with the help of vibrators to reduce the air voids' },
                    //                         { checksHeading: 'Concrete Filling Check', checksdescription: 'Concrete filling should be continuous, for each column No Break in between or Mixer Break' },
                    //                         { checksHeading: 'W/C ratio check', checksdescription: 'Controlled water cement ratio.' },
                    //                         { checksHeading: 'Compaction check', checksdescription: 'Proper compaction of concrete' },
                    //                         { checksHeading: 'Phase 3', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Deshuttering check', checksdescription: 'Deshuttering of columns after 24 hrs-48 hrs.' },
                    //                         { checksHeading: '', checksdescription: 'Submission of the deshuttering report to higher authority.' },
                    //                         { checksHeading: 'Curing check', checksdescription: 'Curing of Columns minimum for 10 days' },
                    //                     ];

                    //                     async function pedastalrccChacks() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Checks(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             checksID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     pedastalrccChacks();
                    //                 }




                    //                 if (newDatanew.subactivityname === "B2 RCC Column") {

                    //                     const dataArranew = [
                    //                         { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Assign the labour and Contractor for the work' },
                    //                         { subtaskdescription: 'Explain the contractor about the work' },
                    //                         { subtaskdescription: 'Arrange the rebars and Binding Wires at site' },
                    //                         { subtaskdescription: 'Ask the contractor to arrange the shuttering and supports at site' },
                    //                         { subtaskdescription: 'Ask the contractor to make the arrangements for concrete mixer ,vibrator and Diesel' },
                    //                         { subtaskdescription: 'Calculate the material required for RCC and infrom the purchase manager' },
                    //                         { subtaskdescription: 'Aks the contractor to use the workable shuttering only  and do proper oiling of shuttering' },
                    //                         { subtaskdescription: 'Arrange the cover blocks at site and ask the contractor to place them' },
                    //                         { subtaskdescription: 'Arrange the putty,thermocol and Tape' },
                    //                         { subtaskdescription: 'Ask the contractor to make the arrangements for pouring of concrete' },
                    //                         { subtaskdescription: 'Arrange the water for concreting' },
                    //                         { subtaskdescription: 'Ask the contractor to check the electricity connections' },
                    //                         { subtaskdescription: 'Ask the contractor to clean and oil the shuttering and fill the gaps' },
                    //                         { subtaskdescription: 'Ask the contractor to mark the top level of concreting' },
                    //                         { subtaskdescription: 'Ask the contractor to check the line and Level' },
                    //                         { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Inform the contractor about the concrete mix ratio' },
                    //                         { subtaskdescription: 'Ask the contractor to control the water cement ratio' },
                    //                         { subtaskdescription: 'Ask the contractor to do proper compaction' },
                    //                         { subtaskdescription: 'Inform the contractor about the date of deshuttering' },
                    //                         { subtaskdescription: 'Phase 3', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Check for honeycombing during deshuttering and ask the contractor to repair it properly' },
                    //                         { subtaskdescription: 'Ask the guard to paint the curing compound' },
                    //                         { subtaskdescription: 'Ask the Guard to do three times curing' },
                    //                     ];

                    //                     async function RCCPedestalfunCall() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Subtask(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             subtaskID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     RCCPedestalfunCall();
                    //                 }









                    //                 if (newDatanew.subactivityname === "B3 RCC Column") {

                    //                     const dataArranew = [
                    //                         { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Gridline check', checksdescription: 'Plotting of gridline for center of column above plinth / floor slab.' },
                    //                         { checksHeading: 'Lapping check', checksdescription: 'Binding & placing column reinforcement above upper floor slab as per required height, considering lap length of the bar.' },
                    //                         { checksHeading: 'Drawing check', checksdescription: 'Check if the column reinforcement is as per the lastest structural drawings' },
                    //                         { checksHeading: 'Shuttering Oil check', checksdescription: 'Check if the shuttering is properly cleaned and oiled' },
                    //                         { checksHeading: 'Packing check', checksdescription: 'Check if the gaps at joints are properly packed' },
                    //                         { checksHeading: 'Support check', checksdescription: 'Check if the props are resting on hard surface so as to prevent misalignment of columns' },
                    //                         { checksHeading: 'Concrete level check', checksdescription: 'Check if the top level of concrete has been marked' },
                    //                         { checksHeading: 'Material check', checksdescription: 'The material (cement,sand and aggregate) to be used for  concreting are of good quality' },
                    //                         { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Compaction check', checksdescription: 'Check if the concrete is properly compacted with the help of vibrators to reduce the air voids' },
                    //                         { checksHeading: 'Concrete Filling Check', checksdescription: 'Concrete filling should be continuous, for each column No Break in between or Mixer Break' },
                    //                         { checksHeading: 'W/C ratio check', checksdescription: 'Controlled water cement ratio.' },
                    //                         { checksHeading: 'Compaction check', checksdescription: 'Proper compaction of concrete' },
                    //                         { checksHeading: 'Phase 3', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Deshuttering check', checksdescription: 'Deshuttering of columns after 24 hrs-48 hrs.' },
                    //                         { checksHeading: '', checksdescription: 'Submission of the deshuttering report to higher authority.' },
                    //                         { checksHeading: 'Curing check', checksdescription: 'Curing of Columns minimum for 10 days' },
                    //                     ];

                    //                     async function pedastalrccChacks() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Checks(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             checksID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     pedastalrccChacks();
                    //                 }




                    //                 if (newDatanew.subactivityname === "B3 RCC Column") {

                    //                     const dataArranew = [
                    //                         { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Assign the labour and Contractor for the work' },
                    //                         { subtaskdescription: 'Explain the contractor about the work' },
                    //                         { subtaskdescription: 'Arrange the rebars and Binding Wires at site' },
                    //                         { subtaskdescription: 'Ask the contractor to arrange the shuttering and supports at site' },
                    //                         { subtaskdescription: 'Ask the contractor to make the arrangements for concrete mixer ,vibrator and Diesel' },
                    //                         { subtaskdescription: 'Calculate the material required for RCC and infrom the purchase manager' },
                    //                         { subtaskdescription: 'Aks the contractor to use the workable shuttering only  and do proper oiling of shuttering' },
                    //                         { subtaskdescription: 'Arrange the cover blocks at site and ask the contractor to place them' },
                    //                         { subtaskdescription: 'Arrange the putty,thermocol and Tape' },
                    //                         { subtaskdescription: 'Ask the contractor to make the arrangements for pouring of concrete' },
                    //                         { subtaskdescription: 'Arrange the water for concreting' },
                    //                         { subtaskdescription: 'Ask the contractor to check the electricity connections' },
                    //                         { subtaskdescription: 'Ask the contractor to clean and oil the shuttering and fill the gaps' },
                    //                         { subtaskdescription: 'Ask the contractor to mark the top level of concreting' },
                    //                         { subtaskdescription: 'Ask the contractor to check the line and Level' },
                    //                         { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Inform the contractor about the concrete mix ratio' },
                    //                         { subtaskdescription: 'Ask the contractor to control the water cement ratio' },
                    //                         { subtaskdescription: 'Ask the contractor to do proper compaction' },
                    //                         { subtaskdescription: 'Inform the contractor about the date of deshuttering' },
                    //                         { subtaskdescription: 'Phase 3', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Check for honeycombing during deshuttering and ask the contractor to repair it properly' },
                    //                         { subtaskdescription: 'Ask the guard to paint the curing compound' },
                    //                         { subtaskdescription: 'Ask the Guard to do three times curing' },
                    //                     ];

                    //                     async function RCCPedestalfunCall() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Subtask(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             subtaskID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     RCCPedestalfunCall();
                    //                 }













                    //                 if (newDatanew.subactivityname === "B4 RCC Column") {

                    //                     const dataArranew = [
                    //                         { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Gridline check', checksdescription: 'Plotting of gridline for center of column above plinth / floor slab.' },
                    //                         { checksHeading: 'Lapping check', checksdescription: 'Binding & placing column reinforcement above upper floor slab as per required height, considering lap length of the bar.' },
                    //                         { checksHeading: 'Drawing check', checksdescription: 'Check if the column reinforcement is as per the lastest structural drawings' },
                    //                         { checksHeading: 'Shuttering Oil check', checksdescription: 'Check if the shuttering is properly cleaned and oiled' },
                    //                         { checksHeading: 'Packing check', checksdescription: 'Check if the gaps at joints are properly packed' },
                    //                         { checksHeading: 'Support check', checksdescription: 'Check if the props are resting on hard surface so as to prevent misalignment of columns' },
                    //                         { checksHeading: 'Concrete level check', checksdescription: 'Check if the top level of concrete has been marked' },
                    //                         { checksHeading: 'Material check', checksdescription: 'The material (cement,sand and aggregate) to be used for  concreting are of good quality' },
                    //                         { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Compaction check', checksdescription: 'Check if the concrete is properly compacted with the help of vibrators to reduce the air voids' },
                    //                         { checksHeading: 'Concrete Filling Check', checksdescription: 'Concrete filling should be continuous, for each column No Break in between or Mixer Break' },
                    //                         { checksHeading: 'W/C ratio check', checksdescription: 'Controlled water cement ratio.' },
                    //                         { checksHeading: 'Compaction check', checksdescription: 'Proper compaction of concrete' },
                    //                         { checksHeading: 'Phase 3', phaseHeadingShow: 'Yes' },
                    //                         { checksHeading: 'Deshuttering check', checksdescription: 'Deshuttering of columns after 24 hrs-48 hrs.' },
                    //                         { checksHeading: '', checksdescription: 'Submission of the deshuttering report to higher authority.' },
                    //                         { checksHeading: 'Curing check', checksdescription: 'Curing of Columns minimum for 10 days' },
                    //                     ];

                    //                     async function pedastalrccChacks() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Checks(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             checksID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     pedastalrccChacks();
                    //                 }




                    //                 if (newDatanew.subactivityname === "B4 RCC Column") {

                    //                     const dataArranew = [
                    //                         { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Assign the labour and Contractor for the work' },
                    //                         { subtaskdescription: 'Explain the contractor about the work' },
                    //                         { subtaskdescription: 'Arrange the rebars and Binding Wires at site' },
                    //                         { subtaskdescription: 'Ask the contractor to arrange the shuttering and supports at site' },
                    //                         { subtaskdescription: 'Ask the contractor to make the arrangements for concrete mixer ,vibrator and Diesel' },
                    //                         { subtaskdescription: 'Calculate the material required for RCC and infrom the purchase manager' },
                    //                         { subtaskdescription: 'Aks the contractor to use the workable shuttering only  and do proper oiling of shuttering' },
                    //                         { subtaskdescription: 'Arrange the cover blocks at site and ask the contractor to place them' },
                    //                         { subtaskdescription: 'Arrange the putty,thermocol and Tape' },
                    //                         { subtaskdescription: 'Ask the contractor to make the arrangements for pouring of concrete' },
                    //                         { subtaskdescription: 'Arrange the water for concreting' },
                    //                         { subtaskdescription: 'Ask the contractor to check the electricity connections' },
                    //                         { subtaskdescription: 'Ask the contractor to clean and oil the shuttering and fill the gaps' },
                    //                         { subtaskdescription: 'Ask the contractor to mark the top level of concreting' },
                    //                         { subtaskdescription: 'Ask the contractor to check the line and Level' },
                    //                         { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Inform the contractor about the concrete mix ratio' },
                    //                         { subtaskdescription: 'Ask the contractor to control the water cement ratio' },
                    //                         { subtaskdescription: 'Ask the contractor to do proper compaction' },
                    //                         { subtaskdescription: 'Inform the contractor about the date of deshuttering' },
                    //                         { subtaskdescription: 'Phase 3', phaseHeadingShow: 'Yes' },
                    //                         { subtaskdescription: 'Check for honeycombing during deshuttering and ask the contractor to repair it properly' },
                    //                         { subtaskdescription: 'Ask the guard to paint the curing compound' },
                    //                         { subtaskdescription: 'Ask the Guard to do three times curing' },
                    //                     ];

                    //                     async function RCCPedestalfunCall() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Subtask(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             subtaskID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     RCCPedestalfunCall();
                    //                 }


























                    //                 if (newDatanew.subactivityname === "B1 Column Reinforcement") {

                    //                     const dataArranew = [
                    //                         { subtaskdescription: 'Ask the contractor  to tie the rebars properly as per the specifications' },
                    //                         { subtaskdescription: 'Ask the contractor  to check the column for verticality' },
                    //                         { subtaskdescription: 'Ask the contractor to place supports in the column' }
                    //                     ];

                    //                     async function BeamSlabShutteringReinforcementRCCfunCall() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Subtask(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             subtaskID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     BeamSlabShutteringReinforcementRCCfunCall();
                    //                 }







                    //                 if (newDatanew.subactivityname === "B2 Column Reinforcement") {

                    //                     const dataArranew = [
                    //                         { subtaskdescription: 'Ask the contractor  to tie the rebars properly as per the specifications' },
                    //                         { subtaskdescription: 'Ask the contractor  to check the column for verticality' },
                    //                         { subtaskdescription: 'Ask the contractor to place supports in the column' }
                    //                     ];

                    //                     async function BeamSlabShutteringReinforcementRCCfunCall() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Subtask(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             subtaskID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     BeamSlabShutteringReinforcementRCCfunCall();
                    //                 }








                    //                 if (newDatanew.subactivityname === "B3 Column Reinforcement") {

                    //                     const dataArranew = [
                    //                         { subtaskdescription: 'Ask the contractor  to tie the rebars properly as per the specifications' },
                    //                         { subtaskdescription: 'Ask the contractor  to check the column for verticality' },
                    //                         { subtaskdescription: 'Ask the contractor to place supports in the column' }
                    //                     ];

                    //                     async function BeamSlabShutteringReinforcementRCCfunCall() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Subtask(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             subtaskID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     BeamSlabShutteringReinforcementRCCfunCall();
                    //                 }













                    //                 if (newDatanew.subactivityname === "B4 Column Reinforcement") {

                    //                     const dataArranew = [
                    //                         { subtaskdescription: 'Ask the contractor  to tie the rebars properly as per the specifications' },
                    //                         { subtaskdescription: 'Ask the contractor  to check the column for verticality' },
                    //                         { subtaskdescription: 'Ask the contractor to place supports in the column' }
                    //                     ];

                    //                     async function BeamSlabShutteringReinforcementRCCfunCall() {
                    //                         for (let i = 0; i < dataArranew.length; i++) {
                    //                             try {
                    //                                 const newDatanewtask = new Subtask(dataArranew[i]);
                    //                                 const savedData = await newDatanewtask.save();

                    //                                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                    //                                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                    //                                 // console.log(objID);
                    //                                 await SubActivities.updateOne(
                    //                                     { _id: newss },
                    //                                     {
                    //                                         $push: {
                    //                                             subtaskID: objID
                    //                                         }
                    //                                     }
                    //                                 )
                    //                                 // console.log('Data saved:', savedData);
                    //                             } catch (error) {
                    //                                 // console.error('Error saving data:', error);
                    //                             }
                    //                         }
                    //                     }
                    //                     BeamSlabShutteringReinforcementRCCfunCall();
                    //                 }













































                    //                 await Activities.updateOne(
                    //                     { _id: newss },
                    //                     {
                    //                         $push: {
                    //                             subactivitiesID: objID
                    //                         }
                    //                     }
                    //                 )
                    //                 // console.log('Data saved:', savedData);
                    //             } catch (error) {
                    //                 // console.error('Error saving data:', error);
                    //             }
                    //         }
                    //     }
                    //     plinthCalling();
                    // }





                    if (newData.categoryname === "Footing Work") {

                        if (fottingtypecheck === "ISOLATED") {
                            var dataArrayBasicFooting = [
                                { subactivityname: 'ISO - Layout & Levelling', activityID: newData._id, projectID: objectproID, estimateDays: isoLayoutAndLevelling_ESTD },
                                { subactivityname: 'ISO - Excavation', activityID: newData._id, projectID: objectproID, estimateDays: isoExcavation_ESTD },
                                { subactivityname: 'ISO - Reinforcement', activityID: newData._id, projectID: objectproID, estimateDays: isoReinforcement_ESTD },
                                { subactivityname: 'ISO - PCC', activityID: newData._id, projectID: objectproID, estimateDays: isoPCC_ESTD },
                                { subactivityname: 'ISO - Footing RCC', activityID: newData._id, projectID: objectproID, estimateDays: isoFootingRCC_ESTD },
                                { subactivityname: 'ISO - Pedestal RCC', activityID: newData._id, projectID: objectproID, estimateDays: isoPedestalRCC_ESTD },
                                { subactivityname: 'ISO - Waterproofing', activityID: newData._id, projectID: objectproID, estimateDays: isoWaterproofing_ESTD },
                                { subactivityname: 'ISO - Backfilling Work', activityID: newData._id, projectID: objectproID, estimateDays: isoBackfillingWork_ESTD }
                            ];
                        }

                        if (fottingtypecheck === "PILE") {
                            var dataArrayBasicFooting = [
                                { subactivityname: 'PILE -  Layout & Levelling', activityID: newData._id, projectID: objectproID, estimateDays: pileLayoutAndLevelling_ESTD },
                                { subactivityname: 'PILE -  Reinforcement', activityID: newData._id, projectID: objectproID, estimateDays: pileReinforcement_ESTD },
                                { subactivityname: 'PILE -  Excavation', activityID: newData._id, projectID: objectproID, estimateDays: pileExcavation_ESTD },
                                { subactivityname: 'PILE -  RCC', activityID: newData._id, projectID: objectproID, estimateDays: pileRCC_ESTD }
                            ];
                        }

                        if (fottingtypecheck === "RAFT") {
                            var dataArrayBasicFooting = [
                                { subactivityname: 'RAFT - Layout & Levelling', activityID: newData._id, projectID: objectproID, estimateDays: raftLayoutAndLevelling_ESTD },
                                { subactivityname: 'RAFT - Excavation', activityID: newData._id, projectID: objectproID, estimateDays: raftExcavation_ESTD },
                                { subactivityname: 'RAFT - Filling', activityID: newData._id, projectID: objectproID, estimateDays: raftFilling_ESTD },
                                { subactivityname: 'RAFT - Sewage Line', activityID: newData._id, projectID: objectproID, estimateDays: raftSewageLine_ESTD },
                                { subactivityname: 'RAFT - PCC', activityID: newData._id, projectID: objectproID, estimateDays: raftPCC_ESTD },
                                { subactivityname: 'RAFT - Reinforcement', activityID: newData._id, projectID: objectproID, estimateDays: raftReinforcement_ESTD },
                                { subactivityname: 'RAFT - RCC', activityID: newData._id, projectID: objectproID, estimateDays: raftRCC_ESTD },
                                { subactivityname: 'RAFT - Waterproofing', activityID: newData._id, projectID: objectproID, estimateDays: raftWaterproofing_ESTD },


                            ];
                        }

                        async function miscellenousCalling() {
                            for (let i = 0; i < dataArrayBasicFooting.length; i++) {
                                try {
                                    const newDatanew = new SubActivities(dataArrayBasicFooting[i]);
                                    const savedData = await newDatanew.save();

                                    let objID = new mongoose.Types.ObjectId(newDatanew.id)
                                    let newss = new mongoose.Types.ObjectId(newData._id)



                                    if (newDatanew.subactivityname === "ISO - Layout & Levelling") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Arrange structural drawing with printout & soft copy at Site before the execution day' },
                                            { subtaskdescription: 'Assign the contractor for the layout' },
                                            { subtaskdescription: 'Arrange the material (line dori, nails, paint box, marker on wall, lime powder etc) for layout' },
                                            { subtaskdescription: 'Call the Client' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask contractor to make burjis and the reference levels been decided' },
                                            { subtaskdescription: 'Ask the contractor to mark the permanent level' },
                                            { subtaskdescription: 'Ask the contractor  to match the diagonals first then proceed further' },
                                            { subtaskdescription: 'Contractor signed the KONNBOT contract (Understand the condition, payment & Installment as per work)' }
                                        ];

                                        async function layoutAndLevellingCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        layoutAndLevellingCall();
                                    }



                                    if (newDatanew.subactivityname === "ISO - Layout & Levelling") {

                                        const dataArranew = [
                                            { materailname: 'Chuna', materailquantity: materlID.NFI_LayoutLevellingChunaQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Rope', materailquantity: materlID.NFI_LayoutLevellingRopeQuantity, materailUnit: 'FEET' },
                                        ];

                                        async function SteelRel() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelRel();
                                    }






                                    if (newDatanew.subactivityname === "ISO - Layout & Levelling") {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Cleaning Check', checksdescription: 'Is the site clean for the layout' },
                                            { checksHeading: 'Material Check', checksdescription: 'Are the instruments and materials required for the layout present in the site' },
                                            { checksHeading: 'Boundary Check', checksdescription: 'Are the boundaries of the plot fixed' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Drawings Check', checksdescription: 'Are the final Approved Architectural drawings are available at the site' },
                                            { checksHeading: 'Drawings Check', checksdescription: 'Are the final Approved Structural drawings are available at site.' },
                                            { checksHeading: 'Gridline Check', checksdescription: 'Are the Structural grid line and architectural grid lines checked properly.' },
                                            { checksHeading: 'Footing type Check', checksdescription: 'Identify the type of footing from the drawing' },
                                            { checksHeading: 'Burji Check', checksdescription: 'Are the burjis made at site' },
                                            { checksHeading: 'Level Check', checksdescription: 'Are the levels been marked at site with respect to which the further work will be carried out' },
                                            { checksHeading: 'Dimensions Check', checksdescription: 'Are the dimensions on drawing possible at site' },
                                            { checksHeading: 'Layout Final Check', checksdescription: 'Once the layout has been finalised do the final check and the Client should be informed about the site boundaries so that there is no issue with the neighbours plot' }
                                        ];

                                        async function layoutandlevelingsdChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        layoutandlevelingsdChacks();
                                    }




                                    if (newDatanew.subactivityname === "ISO - Layout & Levelling") {

                                        const dataArranew = [
                                            {},
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Marking', NormalHeadingThree: 'Distance', NormalHeadingfoure: 'Benchmar.' },
                                            {},
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }










                                    if (newDatanew.subactivityname === "ISO - Backfilling Work") {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Deshuttering check', checksdescription: 'All the concrete structures like footings, columns, plinth beams, etc. should be completed with de-shuttering of the formwork, removal of stagings, etc.' },
                                            { checksHeading: 'Honeycombing repair check', checksdescription: 'All the honeycomb in the structures should be repaired before doing the plinth filling.' },
                                            { checksHeading: 'Masonry and Plaster check', checksdescription: 'All the plinth masonry work should be completed with the internal plaster, or by filling the leftover joints in a proper way.' },
                                            { checksHeading: 'Curing check', checksdescription: 'Before doing filling, ensure that all the concrete structures and masonry works have completed their minimal curing period. It should be properly set, attaining its design ' },
                                            { checksHeading: 'Leftover formwork Check', checksdescription: 'The plinth area and footing pit should be checked for any leftover formwork materials and should be removed before filling. ' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Any organic matter, wooden logs, plant roots, etc. should be cleaned, as they form voids after decay, causing settlement in the filling, due to weak compaction. ' },
                                            { checksHeading: 'Water Check', checksdescription: 'If there is any water in the pit, trenches, and plinth areas, it should be drained out.' },
                                            { checksHeading: 'Material check', checksdescription: 'The construction soil (moorum) should be free from organic matter, plant roots, clay lumps, chemicals, etc. The soil should be granular in structure, with a reddish-brown' },
                                            { checksHeading: 'Soil Check', checksdescription: 'If the soil excavated from the footing pit is black cotton, it should be removed completely and strictly avoided from refilling.' },
                                            { checksHeading: 'Top level check', checksdescription: 'Top level of filling has been marked' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Filling Layers Check', checksdescription: 'Construction soil should be spread in layers of 15 to 20cm. thickness, if you are using manual rammers, and it can be filled up to 30cm in thickness for the mechanical ' },
                                            { checksHeading: 'Layer Check', checksdescription: 'In any case, you should not fill the soil layer above 30cm depth, to achieve good compaction of the soil.' },
                                            { checksHeading: 'Watering Check', checksdescription: 'After completing the first layer of spreading, sprinkled with water to attain optimum moisture content, so that we can achieve the maximum dry density of soil after ' },
                                            { checksHeading: 'Ramming check', checksdescription: 'The ramming should be done from one end, covering all the areas. It is always advisable to use mechanical compactors, as the work carried out will be more efficient.' },
                                        ];

                                        async function backfillingchChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        backfillingchChacks();
                                    }



                                    if (newDatanew.subactivityname === "ISO - Waterproofing") {

                                        const dataArranew = [
                                            { materailname: 'Portland Cement', materailquantity: materlID.NFI_WaterproofingPortlandCementQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Course Sand', materailquantity: materlID.NFI_WaterproofingCourseSandQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Blown Type Petroleum Bitumen', materailquantity: materlID.NFI_WaterproofingBlownTypePetroleumBitumenQuantity, materailUnit: 'KG' },
                                            { materailname: 'Polyvinyle Chloride Sheet - 400 Micron', materailquantity: materlID.NFI_WaterproofingPolyvinylChlorideSheet400MicronQuantity, materailUnit: 'SQM' },
                                            { materailname: 'Waterproofing Compound', materailquantity: materlID.NFI_WaterproofingWaterproofingCompoundQuantity, materailUnit: 'KG' },
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === "ISO - Waterproofing") {

                                        const dataArranew = [
                                            {},
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Finish Surf.', NormalHeadingThree: 'First Coat', NormalHeadingfoure: 'Final Coat' },
                                            {},
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }



                                    if (newDatanew.subactivityname === "ISO - Backfilling Work") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Calculate the quantity of backfilling material and ask the purchase manager to arrange it' },
                                            { subtaskdescription: 'Assign the labour and Contractor for the backfilling' },
                                            { subtaskdescription: 'Make the arrangements for water' },
                                            { subtaskdescription: 'Arrange the rammer at site ' },
                                            { subtaskdescription: 'Inform the contractor about the filling procedure' },
                                            { subtaskdescription: 'Ask the contractor to remove the debris if any from the filling material' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the contractor to mark the top level of filling in each section i.e, which area will be down or up' },
                                            { subtaskdescription: 'Ask the contractor not to fill the layers more than 300mm' },
                                            { subtaskdescription: 'Ask the contractor for watering the filling material' },
                                            { subtaskdescription: 'Ask the contractor for proper compaction' },
                                            { subtaskdescription: 'Ask the contractor to give the final level in compaction and 6mm Aggreagte to be laid so that the grade slab work can be carried out directly' },
                                        ];

                                        async function BackFillingfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BackFillingfunCall();
                                    }












                                    if (newDatanew.subactivityname === "RAFT - Filling") {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Deshuttering check', checksdescription: 'All the concrete structures like footings, columns, plinth beams, etc. should be completed with de-shuttering of the formwork, removal of stagings, etc.' },
                                            { checksHeading: 'Honeycombing repair check', checksdescription: 'All the honeycomb in the structures should be repaired before doing the plinth filling.' },
                                            { checksHeading: 'Masonry and Plaster check', checksdescription: 'All the plinth masonry work should be completed with the internal plaster, or by filling the leftover joints in a proper way.' },
                                            { checksHeading: 'Curing check', checksdescription: 'Before doing filling, ensure that all the concrete structures and masonry works have completed their minimal curing period. It should be properly set, attaining its design ' },
                                            { checksHeading: 'Leftover formwork Check', checksdescription: 'The plinth area and footing pit should be checked for any leftover formwork materials and should be removed before filling. ' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Any organic matter, wooden logs, plant roots, etc. should be cleaned, as they form voids after decay, causing settlement in the filling, due to weak compaction. ' },
                                            { checksHeading: 'Water Check', checksdescription: 'If there is any water in the pit, trenches, and plinth areas, it should be drained out.' },
                                            { checksHeading: 'Material check', checksdescription: 'The construction soil (moorum) should be free from organic matter, plant roots, clay lumps, chemicals, etc. The soil should be granular in structure, with a reddish-brown' },
                                            { checksHeading: 'Soil Check', checksdescription: 'If the soil excavated from the footing pit is black cotton, it should be removed completely and strictly avoided from refilling.' },
                                            { checksHeading: 'Top level check', checksdescription: 'Top level of filling has been marked' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Filling Layers Check', checksdescription: 'Construction soil should be spread in layers of 15 to 20cm. thickness, if you are using manual rammers, and it can be filled up to 30cm in thickness for the mechanical ' },
                                            { checksHeading: 'Layer Check', checksdescription: 'In any case, you should not fill the soil layer above 30cm depth, to achieve good compaction of the soil.' },
                                            { checksHeading: 'Watering Check', checksdescription: 'After completing the first layer of spreading, sprinkled with water to attain optimum moisture content, so that we can achieve the maximum dry density of soil after ' },
                                            { checksHeading: 'Ramming check', checksdescription: 'The ramming should be done from one end, covering all the areas. It is always advisable to use mechanical compactors, as the work carried out will be more efficient.' },
                                        ];

                                        async function backfillingchChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        backfillingchChacks();
                                    }


                                    if (newDatanew.subactivityname === "RAFT - Filling") {

                                        const dataArranew = [
                                            { materailname: 'Kopra | Gitti | Soil', materailquantity: materlID.NFR_HardBackfillingKopraGittiSoilQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'JCB', materailquantity: materlID.NFR_HardBackfillingJCBQuantity, materailUnit: 'PER HOUR' },
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }



                                    if (newDatanew.subactivityname === "RAFT - Sewage Line") {

                                        const dataArranew = [
                                            { materailname: '6" Pipe', materailquantity: materlID.NFR_SewageLineWorkPipe6InchQuantity, materailUnit: 'RUFT.' },
                                            { materailname: 'P - Trap', materailquantity: materlID.NFR_SewageLineWorkPTrapQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Solvent', materailquantity: materlID.NFR_SewageLineWorkSolventQuantity, materailUnit: 'CONTAINER' },
                                            { materailname: 'Nahani Trap', materailquantity: materlID.NFR_SewageLineWorkNahaniTrapQuantity, materailUnit: 'NOS.' },
                                            { materailname: '90 Degree', materailquantity: materlID.NFR_SewageLineWorkDegree90Quantity, materailUnit: 'NOS.' },
                                            { materailname: 'Junction', materailquantity: materlID.NFR_SewageLineWorkJunctionQuantity, materailUnit: 'NOS.' },
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }



                                    if (newDatanew.subactivityname === "RAFT - Sewage Line") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Washroom', headingforshortingTwo: 'Chamber' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Washbasin', NormalHeadingThree: 'W.C', NormalHeadingfoure: 'Shower' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Construct.', NormalHeadingThree: 'Pipeline', NormalHeadingfoure: 'Covering' },
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }



                                    if (newDatanew.subactivityname === "RAFT - Filling") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Calculate the quantity of backfilling material and ask the purchase manager to arrange it' },
                                            { subtaskdescription: 'Assign the labour and Contractor for the backfilling' },
                                            { subtaskdescription: 'Make the arrangements for water' },
                                            { subtaskdescription: 'Arrange the rammer at site ' },
                                            { subtaskdescription: 'Inform the contractor about the filling procedure' },
                                            { subtaskdescription: 'Ask the contractor to remove the debris if any from the filling material' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the contractor to mark the top level of filling in each section i.e, which area will be down or up' },
                                            { subtaskdescription: 'Ask the contractor not to fill the layers more than 300mm' },
                                            { subtaskdescription: 'Ask the contractor for watering the filling material' },
                                            { subtaskdescription: 'Ask the contractor for proper compaction' },
                                            { subtaskdescription: 'Ask the contractor to give the final level in compaction and 6mm Aggreagte to be laid so that the grade slab work can be carried out directly' },
                                        ];

                                        async function BackFillingfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BackFillingfunCall();
                                    }





























                                    if (newDatanew.subactivityname === "ISO - Footing RCC") {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Shuttering oil check', checksdescription: 'Check if the shuttering is properly cleaned and oiled' },
                                            { checksHeading: 'Material Check', checksdescription: 'The material (cement,sand and aggregate) to be used for  concreting are of good quality' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Compaction Check', checksdescription: 'Check if the concrete is properly compacted with the help of vibrators to reduce the air voids' },
                                            { checksHeading: 'Concrete level Check', checksdescription: 'Concrete filled evenly upto required level' },
                                            { checksHeading: 'Height check', checksdescription: 'Concrete not dropped from height greater than 1.5 - 1.8 m and thrown at distance greater than 2m' },
                                            { checksHeading: 'Concrete Filling Check', checksdescription: 'Concrete filling should be continuous, for every footing, No Break in between or Mixer Break' },
                                            { checksHeading: 'Finishing check', checksdescription: 'Proper levelling of concrete has been done' },
                                            { checksHeading: 'Phase 3', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Deshuttering check', checksdescription: 'Check if the deshuttering has been done as per the standards' },
                                            { checksHeading: 'Curing Check', checksdescription: 'Check if proper curing has been done' },
                                        ];

                                        async function rccworkchChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        rccworkchChacks();
                                    }






                                    if (newDatanew.subactivityname === "ISO - Footing RCC") {

                                        const dataArranew = [
                                            { materailname: 'Stone Aggregate (20 MM)', materailquantity: materlID.NFI_FootingRCCStoneAggregate20MMQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Portland Cement', materailquantity: materlID.NFI_FootingRCCPortlandCementQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Course Sand', materailquantity: materlID.NFI_FootingRCCCourseSandQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Admixture - Waterproof', materailquantity: materlID.NFI_FootingRCCAdmixtureWaterproofQuantity, materailUnit: 'Litre' },
                                            { materailname: 'RMC', materailquantity: materlID.NFI_FootingRCCRMCQuantity, materailUnit: 'CUM' },
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }



                                    if (newDatanew.subactivityname === "ISO - Footing RCC") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Assign the labour and Contractor' },
                                            { subtaskdescription: 'Ask the contractor to make the arrangements for concrete mixer ,vibrator and Diesel' },
                                            { subtaskdescription: 'Calculate the material required for RCC and infrom the purchase manager' },
                                            { subtaskdescription: 'Ask the contractor to arrange the shuttering and Supports' },
                                            { subtaskdescription: 'Ask the contractor to use workable shuttering only and apply shuttering oil' },
                                            { subtaskdescription: 'Arrange the cover blocks and ask the contractor to place them properly' },
                                            { subtaskdescription: 'Arrange the putty,thermocol and tape' },
                                            { subtaskdescription: 'Ask the contractor to make the arrangments for concrete pouring' },
                                            { subtaskdescription: 'Ask the contractor to mark the top level of concrete' },
                                            { subtaskdescription: 'Ask the contractor to fill the gaps' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the contractor for proper compaction of concrete' },
                                            { subtaskdescription: 'Ask the contractor to do the concreting continuously' },
                                            { subtaskdescription: 'Ask the contractor to do the proper levelling of concrete' },
                                            { subtaskdescription: 'Phase 3', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Check if any honeycombing occures and ask the contractor to repair it immediately' },
                                            { subtaskdescription: 'Make the arrangements for curing' },
                                            { subtaskdescription: 'Ask the guard to do proper Curing' },
                                        ];

                                        async function RCCFootingfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RCCFootingfunCall();
                                    }



                                    if (newDatanew.subactivityname === "ISO - Footing RCC") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Casting', headingforshortingTwo: 'Honey Comb' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Workability', NormalHeadingThree: 'Vibrator', NormalHeadingfoure: 'Depth' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Final Finish', NormalHeadingThree: 'Honey Co.', NormalHeadingfoure: 'Curing' },
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }










                                    if (newDatanew.subactivityname === "ISO - Pedestal RCC") {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Gridline check', checksdescription: 'Plotting of gridline for center of column above plinth / floor slab.' },
                                            { checksHeading: 'Lapping check', checksdescription: 'Binding & placing column reinforcement above upper floor slab as per required height, considering lap length of the bar.' },
                                            { checksHeading: 'Drawing check', checksdescription: 'Check if the column reinforcement is as per the lastest structural drawings' },
                                            { checksHeading: 'Shuttering Oil check', checksdescription: 'Check if the shuttering is properly cleaned and oiled' },
                                            { checksHeading: 'Packing check', checksdescription: 'Check if the gaps at joints are properly packed' },
                                            { checksHeading: 'Support check', checksdescription: 'Check if the props are resting on hard surface so as to prevent misalignment of columns' },
                                            { checksHeading: 'Concrete level check', checksdescription: 'Check if the top level of concrete has been marked' },
                                            { checksHeading: 'Material check', checksdescription: 'The material (cement,sand and aggregate) to be used for  concreting are of good quality' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Compaction check', checksdescription: 'Check if the concrete is properly compacted with the help of vibrators to reduce the air voids' },
                                            { checksHeading: 'Concrete Filling Check', checksdescription: 'Concrete filling should be continuous, for each column No Break in between or Mixer Break' },
                                            { checksHeading: 'W/C ratio check', checksdescription: 'Controlled water cement ratio.' },
                                            { checksHeading: 'Compaction check', checksdescription: 'Proper compaction of concrete' },
                                            { checksHeading: 'Phase 3', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Deshuttering check', checksdescription: 'Deshuttering of columns after 24 hrs-48 hrs.' },
                                            { checksHeading: '', checksdescription: 'Submission of the deshuttering report to higher authority.' },
                                            { checksHeading: 'Curing check', checksdescription: 'Curing of Columns minimum for 10 days' },
                                        ];

                                        async function pedastalrccChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        pedastalrccChacks();
                                    }






                                    if (newDatanew.subactivityname === "ISO - Pedestal RCC") {

                                        const dataArranew = [
                                            { materailname: 'Stone Aggregate (20 MM)', materailquantity: materlID.NFI_PedestalRCCStoneAggregate20MMQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Portland Cement', materailquantity: materlID.NFI_PedestalRCCPortlandCementQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Course Sand', materailquantity: materlID.NFI_PedestalRCCCourseSandQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Admixture - Waterproof', materailquantity: materlID.NFI_PedestalRCCAdmixtureWaterproofQuantity, materailUnit: 'Litre' },
                                            { materailname: 'RMC', materailquantity: materlID.NFI_PedestalRCCRMCQuantity, materailUnit: 'CUM' },
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }



                                    if (newDatanew.subactivityname === "ISO - Pedestal RCC") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Assign the labour and Contractor for the work' },
                                            { subtaskdescription: 'Explain the contractor about the work' },
                                            { subtaskdescription: 'Arrange the rebars and Binding Wires at site' },
                                            { subtaskdescription: 'Ask the contractor to arrange the shuttering and supports at site' },
                                            { subtaskdescription: 'Ask the contractor to make the arrangements for concrete mixer ,vibrator and Diesel' },
                                            { subtaskdescription: 'Calculate the material required for RCC and infrom the purchase manager' },
                                            { subtaskdescription: 'Aks the contractor to use the workable shuttering only  and do proper oiling of shuttering' },
                                            { subtaskdescription: 'Arrange the cover blocks at site and ask the contractor to place them' },
                                            { subtaskdescription: 'Arrange the putty,thermocol and Tape' },
                                            { subtaskdescription: 'Ask the contractor to make the arrangements for pouring of concrete' },
                                            { subtaskdescription: 'Arrange the water for concreting' },
                                            { subtaskdescription: 'Ask the contractor to check the electricity connections' },
                                            { subtaskdescription: 'Ask the contractor to clean and oil the shuttering and fill the gaps' },
                                            { subtaskdescription: 'Ask the contractor to mark the top level of concreting' },
                                            { subtaskdescription: 'Ask the contractor to check the line and Level' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Inform the contractor about the concrete mix ratio' },
                                            { subtaskdescription: 'Ask the contractor to control the water cement ratio' },
                                            { subtaskdescription: 'Ask the contractor to do proper compaction' },
                                            { subtaskdescription: 'Inform the contractor about the date of deshuttering' },
                                            { subtaskdescription: 'Phase 3', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Check for honeycombing during deshuttering and ask the contractor to repair it properly' },
                                            { subtaskdescription: 'Ask the guard to paint the curing compound' },
                                            { subtaskdescription: 'Ask the Guard to do three times curing' },
                                        ];

                                        async function RCCPedestalfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RCCPedestalfunCall();
                                    }


                                    if (newDatanew.subactivityname === "ISO - Pedestal RCC") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Starter', headingforshortingTwo: 'Casting' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Starter', NormalHeadingThree: 'Cover Blo.', NormalHeadingfoure: 'S - Vertical' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Casting', NormalHeadingThree: 'Honey Co.', NormalHeadingfoure: 'Curing' },
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }



                                    if (newDatanew.subactivityname === "ISO - Backfilling Work") {

                                        const dataArranew = [
                                            { materailname: 'JCB', materailquantity: materlID.NFI_BackFillingJCBQuantity, materailUnit: 'PER HOUR' },
                                            { materailname: 'Kopra | Gitti | Soil', materailquantity: materlID.NFI_BackFillingKopraGittiSoilQuantity, materailUnit: 'CUFT' },
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }































                                    if (newDatanew.subactivityname === "PILE -  RCC") {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Shuttering oil check', checksdescription: 'Check if the shuttering is properly cleaned and oiled' },
                                            { checksHeading: 'Material Check', checksdescription: 'The material (cement,sand and aggregate) to be used for  concreting are of good quality' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Compaction Check', checksdescription: 'Check if the concrete is properly compacted with the help of vibrators to reduce the air voids' },
                                            { checksHeading: 'Concrete level Check', checksdescription: 'Concrete filled evenly upto required level' },
                                            { checksHeading: 'Height check', checksdescription: 'Concrete not dropped from height greater than 1.5 - 1.8 m and thrown at distance greater than 2m' },
                                            { checksHeading: 'Concrete Filling Check', checksdescription: 'Concrete filling should be continuous, for every footing, No Break in between or Mixer Break' },
                                            { checksHeading: 'Finishing check', checksdescription: 'Proper levelling of concrete has been done' },
                                            { checksHeading: 'Phase 3', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Deshuttering check', checksdescription: 'Check if the deshuttering has been done as per the standards' },
                                            { checksHeading: 'Curing Check', checksdescription: 'Check if proper curing has been done' },
                                        ];

                                        async function rccworkchChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        rccworkchChacks();
                                    }


                                    if (newDatanew.subactivityname === "PILE -  RCC") {

                                        const dataArranew = [
                                            { materailname: 'Stone Aggregate (20 MM)', materailquantity: materlID.NFP_FootingRCCStoneAggregate20MMQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Portland Cement', materailquantity: materlID.NFP_FootingRCCPortlandCementQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Course Sand', materailquantity: materlID.NFP_FootingRCCCourseSandQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Admixture - Waterproof', materailquantity: materlID.NFP_FootingRCCAdmixtureWaterproofQuantity, materailUnit: 'Litre' },
                                            { materailname: 'RMC', materailquantity: materlID.NFP_FootingRCCRMCQuantity, materailUnit: 'CUM' },
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }



                                    if (newDatanew.subactivityname === "PILE -  RCC") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Assign the labour and Contractor' },
                                            { subtaskdescription: 'Ask the contractor to make the arrangements for concrete mixer ,vibrator and Diesel' },
                                            { subtaskdescription: 'Calculate the material required for RCC and infrom the purchase manager' },
                                            { subtaskdescription: 'Ask the contractor to arrange the shuttering and Supports' },
                                            { subtaskdescription: 'Ask the contractor to use workable shuttering only and apply shuttering oil' },
                                            { subtaskdescription: 'Arrange the cover blocks and ask the contractor to place them properly' },
                                            { subtaskdescription: 'Arrange the putty,thermocol and tape' },
                                            { subtaskdescription: 'Ask the contractor to make the arrangments for concrete pouring' },
                                            { subtaskdescription: 'Ask the contractor to mark the top level of concrete' },
                                            { subtaskdescription: 'Ask the contractor to fill the gaps' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the contractor for proper compaction of concrete' },
                                            { subtaskdescription: 'Ask the contractor to do the concreting continuously' },
                                            { subtaskdescription: 'Ask the contractor to do the proper levelling of concrete' },
                                            { subtaskdescription: 'Phase 3', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Check if any honeycombing occures and ask the contractor to repair it immediately' },
                                            { subtaskdescription: 'Make the arrangements for curing' },
                                            { subtaskdescription: 'Ask the guard to do proper Curing' },
                                        ];

                                        async function RCCFootingfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RCCFootingfunCall();
                                    }




                                    if (newDatanew.subactivityname === "PILE -  RCC") {

                                        const dataArranew = [
                                            {},
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Casting', NormalHeadingThree: 'Vibrator', NormalHeadingfoure: 'Dep. | Fini.' },
                                            {},
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }













                                    if (newDatanew.subactivityname === "RAFT - RCC") {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Shuttering oil check', checksdescription: 'Check if the shuttering is properly cleaned and oiled' },
                                            { checksHeading: 'Material Check', checksdescription: 'The material (cement,sand and aggregate) to be used for  concreting are of good quality' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Compaction Check', checksdescription: 'Check if the concrete is properly compacted with the help of vibrators to reduce the air voids' },
                                            { checksHeading: 'Concrete level Check', checksdescription: 'Concrete filled evenly upto required level' },
                                            { checksHeading: 'Height check', checksdescription: 'Concrete not dropped from height greater than 1.5 - 1.8 m and thrown at distance greater than 2m' },
                                            { checksHeading: 'Concrete Filling Check', checksdescription: 'Concrete filling should be continuous, for every footing, No Break in between or Mixer Break' },
                                            { checksHeading: 'Finishing check', checksdescription: 'Proper levelling of concrete has been done' },
                                            { checksHeading: 'Phase 3', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Deshuttering check', checksdescription: 'Check if the deshuttering has been done as per the standards' },
                                            { checksHeading: 'Curing Check', checksdescription: 'Check if proper curing has been done' },
                                        ];

                                        async function rccworkchChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        rccworkchChacks();
                                    }


                                    if (newDatanew.subactivityname === "RAFT - RCC") {

                                        const dataArranew = [
                                            { materailname: 'Stone Aggregate (20 MM)', materailquantity: materlID.NFR_FootingRCCStoneAggregate20MMQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Portland Cement', materailquantity: materlID.NFR_FootingRCCPortlandCementQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Course Sand', materailquantity: materlID.NFR_FootingRCCCourseSandQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Admixture - Waterproof', materailquantity: materlID.NFR_FootingRCCAdmixtureWaterproofQuantity, materailUnit: 'Litre' },
                                            { materailname: 'RMC', materailquantity: materlID.NFR_FootingRCCRMCQuantity, materailUnit: 'CUM' },
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === "RAFT - Waterproofing") {

                                        const dataArranew = [
                                            { materailname: 'Portland Cement', materailquantity: materlID.NFR_WaterproofingPortlandCementQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Course Sand', materailquantity: materlID.NFR_WaterproofingCourseSandQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Blown Type Petroleum Bitumen', materailquantity: materlID.NFR_WaterproofingBlownTypePetroleumBitumenQuantity, materailUnit: 'KG' },
                                            { materailname: 'Polyvinyle Chloride Sheet - 400 Micron', materailquantity: materlID.NFR_WaterproofingPolyvinylChlorideSheet400MicronQuantity, materailUnit: 'SQM' },
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }



                                    if (newDatanew.subactivityname === "RAFT - Waterproofing") {

                                        const dataArranew = [
                                            {},
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Finish Surf.', NormalHeadingThree: 'First Coat', NormalHeadingfoure: 'Final Coat' },
                                            {},
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }


                                    if (newDatanew.subactivityname === "RAFT - RCC") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Assign the labour and Contractor' },
                                            { subtaskdescription: 'Ask the contractor to make the arrangements for concrete mixer ,vibrator and Diesel' },
                                            { subtaskdescription: 'Calculate the material required for RCC and infrom the purchase manager' },
                                            { subtaskdescription: 'Ask the contractor to arrange the shuttering and Supports' },
                                            { subtaskdescription: 'Ask the contractor to use workable shuttering only and apply shuttering oil' },
                                            { subtaskdescription: 'Arrange the cover blocks and ask the contractor to place them properly' },
                                            { subtaskdescription: 'Arrange the putty,thermocol and tape' },
                                            { subtaskdescription: 'Ask the contractor to make the arrangments for concrete pouring' },
                                            { subtaskdescription: 'Ask the contractor to mark the top level of concrete' },
                                            { subtaskdescription: 'Ask the contractor to fill the gaps' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the contractor for proper compaction of concrete' },
                                            { subtaskdescription: 'Ask the contractor to do the concreting continuously' },
                                            { subtaskdescription: 'Ask the contractor to do the proper levelling of concrete' },
                                            { subtaskdescription: 'Phase 3', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Check if any honeycombing occures and ask the contractor to repair it immediately' },
                                            { subtaskdescription: 'Make the arrangements for curing' },
                                            { subtaskdescription: 'Ask the guard to do proper Curing' },
                                        ];

                                        async function RCCFootingfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RCCFootingfunCall();
                                    }




                                    if (newDatanew.subactivityname === "RAFT - RCC") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Casting', headingforshortingTwo: 'Honey Comb' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Workability', NormalHeadingThree: 'Vibrator', NormalHeadingfoure: 'Depth' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Final Finish', NormalHeadingThree: 'Honey Co.', NormalHeadingfoure: 'Curing' },
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }


                                    // ... existing code ...
                                    // if (newDatanew.subactivityname === "RAFT - RCC") {
                                    //     const RCC_SNAGS_DATA = [
                                    //         { headingforshortingOne: 'Casting', headingforshortingTwo: 'Honey Comb' },
                                    //         { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Workability', NormalHeadingThree: 'Vibrator', NormalHeadingfoure: 'Depth' },
                                    //         { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Final Finish', NormalHeadingThree: 'Honey Co.', NormalHeadingfoure: 'Curing' },
                                    //         {},
                                    //         {},
                                    //         {},
                                    //     ];

                                    //     const createRCCSnags = async () => {
                                    //         try {
                                    //             const snags = await Promise.all(
                                    //                 RCC_SNAGS_DATA.map(data => new Snags(data).save())
                                    //             );

                                    //             const snagsIds = snags.map(snag => new mongoose.Types.ObjectId(snag.id));
                                    //             await SubActivities.updateOne(
                                    //                 { _id: new mongoose.Types.ObjectId(newDatanew._id) },
                                    //                 { $push: { snagsID: { $each: snagsIds } } }
                                    //             );

                                    //             // console.log('RCC Snags created successfully');
                                    //         } catch (error) {
                                    //             // console.error('Error creating RCC snags:', error);
                                    //         }
                                    //     };

                                    //     createRCCSnags();
                                    // }
                                    // ... existing code ...



                                    // if (newDatanew.subactivityname === "RAFT - RCC") {
                                    //     const RCC_SNAGS_DATA = [
                                    //         { headingforshortingOne: 'Casting', headingforshortingTwo: 'Honey Comb' },
                                    //         { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Workability', NormalHeadingThree: 'Vibrator', NormalHeadingfoure: 'Depth' },
                                    //         { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Final Finish', NormalHeadingThree: 'Honey Co.', NormalHeadingfoure: 'Curing' },
                                    //         {},
                                    //         {},
                                    //         {},
                                    //     ];

                                    //     const createRCCSnags = async () => {
                                    //         try {
                                    //             const snags = await Promise.all(
                                    //                 RCC_SNAGS_DATA.map(data => new Snags(data).save())
                                    //             );

                                    //             const snagsIds = snags.map(snag => new mongoose.Types.ObjectId(snag.id));
                                    //             await SubActivities.updateOne(
                                    //                 { _id: new mongoose.Types.ObjectId(newDatanew._id) },
                                    //                 { $push: { snagsID: { $each: snagsIds } } }
                                    //             );
                                    //         } catch (error) {
                                    //             // console.error('Error creating RCC snags:', error);
                                    //         }
                                    //     };

                                    //     createRCCSnags();
                                    // }













                                    if (newDatanew.subactivityname === "ISO - PCC") {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Compaction Check', checksdescription: 'Check if the loose material is properly compacted and ready for PCC' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Ratio Check', checksdescription: 'Check if the ratio of the concrete used in PCC as per the specifications' },
                                            { checksHeading: 'Height Check', checksdescription: 'Check for pouring height.' },
                                            { checksHeading: 'Finishing Check', checksdescription: 'Check if the top surface is properly finished and kept rough enough' },
                                            { checksHeading: 'Compaction Check', checksdescription: 'Check for ramming and compaction of PCC with proper tools.' },
                                        ];

                                        async function pccworkchChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        pccworkchChacks();
                                    }


                                    if (newDatanew.subactivityname === "ISO - PCC") {

                                        const dataArranew = [
                                            { materailname: 'Stone Aggregate (20 MM)', materailquantity: materlID.NFI_PCCStoneAggregate20MMQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Portland Cement', materailquantity: materlID.NFI_PCCPortlandCementQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Course Sand', materailquantity: materlID.NFI_PCCCourseSandQuantity, materailUnit: 'CUFT' },
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }



                                    if (newDatanew.subactivityname === "ISO - PCC") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Material Calculation as per Task' },
                                            { subtaskdescription: 'Ask the procurement manager to arrange the materials required for PCC' },
                                            { subtaskdescription: 'Assign the contractor and labour for the pcc work' },
                                            { subtaskdescription: 'Ask the contractor to arrange to concrete mixer , vibrator and Diesel' },
                                            { subtaskdescription: 'Make the water arrangements' },
                                            { subtaskdescription: 'Ask the contractor to arrange the required shuttering' },
                                            { subtaskdescription: 'Aks the contractor to arrange the finishing tools and tools for centreline' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Inform the contractor about the concrete mix ratio which is to be used' },
                                            { subtaskdescription: 'Ask the contractor to mark proper centreline' },
                                        ];

                                        async function PCCWorkfuncall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PCCWorkfuncall();
                                    }


                                    if (newDatanew.subactivityname === "ISO - PCC") {

                                        const dataArranew = [
                                            {},
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Workability', NormalHeadingThree: 'Depth', NormalHeadingfoure: 'Dim./Finish' },
                                            {},
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }







                                    if (newDatanew.subactivityname === "ISO - Reinforcement") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Arrange  the rebars and binding wire at site' },
                                            { subtaskdescription: 'Assignt the labour and Contractor for the work' },
                                            { subtaskdescription: 'Ask the contractor to arrange the supports and Shuttering' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Explain the contractor about the dimension and steel detailing of the footing' },
                                            { subtaskdescription: 'Check the excavated pits for steel placement' },
                                            { subtaskdescription: 'Ask to contractor to properly place the cover blocks' },
                                            { subtaskdescription: 'Ask the contractor  to tie the rebars properly as per the specifications' },
                                            { subtaskdescription: 'Ask the contractor  to check the column for verticality' },
                                            { subtaskdescription: 'Ask the contractor to place supports in the column' },
                                        ];

                                        async function SteelReinforcementfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunCall();
                                    }




                                    if (newDatanew.subactivityname === "ISO - Reinforcement") {

                                        const dataArranew = [
                                            { materailname: 'Reinforcement', materailquantity: materlID.NFI_ReinforcementTMTReinforcementQuantity, materailUnit: 'KG' },
                                            { materailname: 'Binding Wire', materailquantity: materlID.NFI_ReinforcementTMTBindingWireQuantity, materailUnit: 'KG' },
                                            { materailname: 'Cover Block', materailquantity: materlID.NFI_ReinforcementTMTCoverBlockQuantity, materailUnit: 'NOS.' },

                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === "ISO - Reinforcement") {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Centreline Check', checksdescription: 'Check whether the centreline is properly marked' },
                                            { checksHeading: 'Curing Check', checksdescription: 'PCC should be properly cured' },
                                            { checksHeading: 'Drawings Check', checksdescription: 'Check if the contractor is working with the relevant drawings' },
                                            { checksHeading: 'Column marking check', checksdescription: 'Check if the the column marking has been done before placing the steel of the footing ' },
                                            { checksHeading: 'Cleaning Check', checksdescription: 'Check if the pcc surface is clean and free from soil' },
                                            { checksHeading: 'Steel Clean Check', checksdescription: 'Check if the steel is free from dust , oil and any other contamination' }
                                        ];

                                        async function stellorkchChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        stellorkchChacks();
                                    }


                                    if (newDatanew.subactivityname === "ISO - Reinforcement") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Layout', headingforshortingTwo: 'Footing', headingforshortingThree: 'Column', headingforshortingFour: 'Final Check' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Workability', NormalHeadingThree: 'Col. Center' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Explain', NormalHeadingThree: 'Binding', NormalHeadingfoure: 'Placement' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Explain', NormalHeadingThree: 'Binding', NormalHeadingfoure: 'Placement' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Cover Blo.', NormalHeadingThree: 'Verticality', NormalHeadingfoure: 'Grid Check' },
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }




                                    if (newDatanew.subactivityname === "PILE -  Reinforcement") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Arrange  the rebars and binding wire at site' },
                                            { subtaskdescription: 'Assignt the labour and Contractor for the work' },
                                            { subtaskdescription: 'Ask the contractor to arrange the supports and Shuttering' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Explain the contractor about the dimension and steel detailing of the footing' },
                                            { subtaskdescription: 'Check the excavated pits for steel placement' },
                                            { subtaskdescription: 'Ask to contractor to properly place the cover blocks' },
                                            { subtaskdescription: 'Ask the contractor  to tie the rebars properly as per the specifications' },
                                            { subtaskdescription: 'Ask the contractor  to check the column for verticality' },
                                            { subtaskdescription: 'Ask the contractor to place supports in the column' },
                                        ];

                                        async function SteelReinforcementfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunCall();
                                    }


                                    if (newDatanew.subactivityname === "PILE -  Reinforcement") {

                                        const dataArranew = [
                                            { materailname: 'Reinforcement', materailquantity: materlID.NFP_ReinforcementTMTReinforcementQuantity, materailUnit: 'KG' },
                                            { materailname: 'Binding Wire', materailquantity: materlID.NFP_ReinforcementTMTBindingWireQuantity, materailUnit: 'KG' },
                                            { materailname: 'Cover Block', materailquantity: materlID.NFP_ReinforcementTMTCoverBlockQuantity, materailUnit: 'NOS.' },

                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }

                                    if (newDatanew.subactivityname === "PILE -  Reinforcement") {

                                        const dataArranew = [
                                            {},
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Explain', NormalHeadingThree: 'Binding', NormalHeadingfoure: 'Placement' },
                                            {},
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }



                                    if (newDatanew.subactivityname === "PILE -  Excavation") {

                                        const dataArranew = [
                                            { materailname: 'Pile Hole', materailquantity: materlID.NFP_PIleExcavationJCBQuantity, materailUnit: 'NOS.' },
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }



                                    if (newDatanew.subactivityname === "PILE -  Excavation") {

                                        const dataArranew = [
                                            {},
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Pile Locate', NormalHeadingThree: 'Depth', NormalHeadingfoure: 'Underream' },
                                            {},
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }







                                    if (newDatanew.subactivityname === "PILE -  Reinforcement") {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Centreline Check', checksdescription: 'Check whether the centreline is properly marked' },
                                            { checksHeading: 'Curing Check', checksdescription: 'PCC should be properly cured' },
                                            { checksHeading: 'Drawings Check', checksdescription: 'Check if the contractor is working with the relevant drawings' },
                                            { checksHeading: 'Column marking check', checksdescription: 'Check if the the column marking has been done before placing the steel of the footing ' },
                                            { checksHeading: 'Cleaning Check', checksdescription: 'Check if the pcc surface is clean and free from soil' },
                                            { checksHeading: 'Steel Clean Check', checksdescription: 'Check if the steel is free from dust , oil and any other contamination' }
                                        ];

                                        async function stellorkchChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        stellorkchChacks();
                                    }











                                    if (newDatanew.subactivityname === "RAFT - Reinforcement") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Arrange  the rebars and binding wire at site' },
                                            { subtaskdescription: 'Assignt the labour and Contractor for the work' },
                                            { subtaskdescription: 'Ask the contractor to arrange the supports and Shuttering' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Explain the contractor about the dimension and steel detailing of the footing' },
                                            { subtaskdescription: 'Check the excavated pits for steel placement' },
                                            { subtaskdescription: 'Ask to contractor to properly place the cover blocks' },
                                            { subtaskdescription: 'Ask the contractor  to tie the rebars properly as per the specifications' },
                                            { subtaskdescription: 'Ask the contractor  to check the column for verticality' },
                                            { subtaskdescription: 'Ask the contractor to place supports in the column' },
                                        ];

                                        async function SteelReinforcementfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunCall();
                                    }


                                    if (newDatanew.subactivityname === "RAFT - Reinforcement") {

                                        const dataArranew = [
                                            { materailname: 'Reinforcement', materailquantity: materlID.NFR_ReinforcementTMTReinforcementQuantity, materailUnit: 'KG' },
                                            { materailname: 'Binding Wire', materailquantity: materlID.NFR_ReinforcementTMTBindingWireQuantity, materailUnit: 'KG' },
                                            { materailname: 'Cover Block', materailquantity: materlID.NFR_ReinforcementTMTCoverBlockQuantity, materailUnit: 'NOS.' },

                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === "RAFT - Reinforcement") {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Centreline Check', checksdescription: 'Check whether the centreline is properly marked' },
                                            { checksHeading: 'Curing Check', checksdescription: 'PCC should be properly cured' },
                                            { checksHeading: 'Drawings Check', checksdescription: 'Check if the contractor is working with the relevant drawings' },
                                            { checksHeading: 'Column marking check', checksdescription: 'Check if the the column marking has been done before placing the steel of the footing ' },
                                            { checksHeading: 'Cleaning Check', checksdescription: 'Check if the pcc surface is clean and free from soil' },
                                            { checksHeading: 'Steel Clean Check', checksdescription: 'Check if the steel is free from dust , oil and any other contamination' }
                                        ];

                                        async function stellorkchChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        stellorkchChacks();
                                    }




                                    if (newDatanew.subactivityname === "RAFT - Reinforcement") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Footing', headingforshortingTwo: 'Column', headingforshortingThree: 'Beam', headingforshortingFour: 'Slab', headingforshortingFive: 'Final Check' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Explain', NormalHeadingThree: 'Binding', NormalHeadingfoure: 'Placement' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Explain', NormalHeadingThree: 'Binding', NormalHeadingfoure: 'Placement' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Explain', NormalHeadingThree: 'Main/Extra', NormalHeadingfoure: 'Ring | Hook' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Explain', NormalHeadingThree: 'Spacing', NormalHeadingfoure: 'Chair/Bind' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Explain', NormalHeadingThree: 'Spacing', NormalHeadingfoure: 'Chair/Bind' },
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }















                                    if (newDatanew.subactivityname === "PILE -  Layout & Levelling") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Arrange structural drawing with printout & soft copy at Site before the execution day' },
                                            { subtaskdescription: 'Assign the contractor for the layout' },
                                            { subtaskdescription: 'Arrange the material (line dori, nails, paint box, marker on wall, lime powder etc) for layout' },
                                            { subtaskdescription: 'Call the Client' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask contractor to make burjis and the reference levels been decided' },
                                            { subtaskdescription: 'Ask the contractor to mark the permanent level' },
                                            { subtaskdescription: 'Ask the contractor  to match the diagonals first then proceed further' },
                                            { subtaskdescription: 'Contractor signed the KONNBOT contract (Understand the condition, payment & Installment as per work)' }
                                        ];

                                        async function layoutAndLevellingCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        layoutAndLevellingCall();
                                    }




                                    if (newDatanew.subactivityname === "RAFT - Layout & Levelling") {

                                        const dataArranew = [
                                            { materailname: 'Chuna', materailquantity: materlID.NFP_LayoutLevellingChunaQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Rope', materailquantity: materlID.NFP_LayoutLevellingRopeQuantity, materailUnit: 'FEET' },
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }



                                    if (newDatanew.subactivityname === "PILE -  Layout & Levelling") {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Cleaning Check', checksdescription: 'Is the site clean for the layout' },
                                            { checksHeading: 'Material Check', checksdescription: 'Are the instruments and materials required for the layout present in the site' },
                                            { checksHeading: 'Boundary Check', checksdescription: 'Are the boundaries of the plot fixed' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Drawings Check', checksdescription: 'Are the final Approved Architectural drawings are available at the site' },
                                            { checksHeading: 'Drawings Check', checksdescription: 'Are the final Approved Structural drawings are available at site.' },
                                            { checksHeading: 'Gridline Check', checksdescription: 'Are the Structural grid line and architectural grid lines checked properly.' },
                                            { checksHeading: 'Footing type Check', checksdescription: 'Identify the type of footing from the drawing' },
                                            { checksHeading: 'Burji Check', checksdescription: 'Are the burjis made at site' },
                                            { checksHeading: 'Level Check', checksdescription: 'Are the levels been marked at site with respect to which the further work will be carried out' },
                                            { checksHeading: 'Dimensions Check', checksdescription: 'Are the dimensions on drawing possible at site' },
                                            { checksHeading: 'Layout Final Check', checksdescription: 'Once the layout has been finalised do the final check and the Client should be informed about the site boundaries so that there is no issue with the neighbours plot' }
                                        ];

                                        async function layoutandlevelingsdChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        layoutandlevelingsdChacks();
                                    }



                                    if (newDatanew.subactivityname === "PILE -  Layout & Levelling") {

                                        const dataArranew = [
                                            {},
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Marking', NormalHeadingThree: 'Distance', NormalHeadingfoure: 'Benchmar.' },
                                            {},
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }






                                    if (newDatanew.subactivityname === "RAFT - Layout & Levelling") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Arrange structural drawing with printout & soft copy at Site before the execution day' },
                                            { subtaskdescription: 'Assign the contractor for the layout' },
                                            { subtaskdescription: 'Arrange the material (line dori, nails, paint box, marker on wall, lime powder etc) for layout' },
                                            { subtaskdescription: 'Call the Client' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask contractor to make burjis and the reference levels been decided' },
                                            { subtaskdescription: 'Ask the contractor to mark the permanent level' },
                                            { subtaskdescription: 'Ask the contractor  to match the diagonals first then proceed further' },
                                            { subtaskdescription: 'Contractor signed the KONNBOT contract (Understand the condition, payment & Installment as per work)' }
                                        ];

                                        async function layoutAndLevellingCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        layoutAndLevellingCall();
                                    }



                                    if (newDatanew.subactivityname === "RAFT - Layout & Levelling") {

                                        const dataArranew = [
                                            {},
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Marking', NormalHeadingThree: 'Distance', NormalHeadingfoure: 'Benchmar.' },
                                            {},
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }

                                    if (newDatanew.subactivityname === "PILE -  Layout & Levelling") {

                                        const dataArranew = [
                                            { materailname: 'Chuna', materailquantity: materlID.NFR_LayoutLevellingChunaQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Rope', materailquantity: materlID.NFR_LayoutLevellingRopeQuantity, materailUnit: 'FEET' },
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }



                                    if (newDatanew.subactivityname === "RAFT - Layout & Levelling") {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Cleaning Check', checksdescription: 'Is the site clean for the layout' },
                                            { checksHeading: 'Material Check', checksdescription: 'Are the instruments and materials required for the layout present in the site' },
                                            { checksHeading: 'Boundary Check', checksdescription: 'Are the boundaries of the plot fixed' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Drawings Check', checksdescription: 'Are the final Approved Architectural drawings are available at the site' },
                                            { checksHeading: 'Drawings Check', checksdescription: 'Are the final Approved Structural drawings are available at site.' },
                                            { checksHeading: 'Gridline Check', checksdescription: 'Are the Structural grid line and architectural grid lines checked properly.' },
                                            { checksHeading: 'Footing type Check', checksdescription: 'Identify the type of footing from the drawing' },
                                            { checksHeading: 'Burji Check', checksdescription: 'Are the burjis made at site' },
                                            { checksHeading: 'Level Check', checksdescription: 'Are the levels been marked at site with respect to which the further work will be carried out' },
                                            { checksHeading: 'Dimensions Check', checksdescription: 'Are the dimensions on drawing possible at site' },
                                            { checksHeading: 'Layout Final Check', checksdescription: 'Once the layout has been finalised do the final check and the Client should be informed about the site boundaries so that there is no issue with the neighbours plot' }
                                        ];

                                        async function layoutandlevelingsdChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        layoutandlevelingsdChacks();
                                    }









                                    if (newDatanew.subactivityname === "RAFT - PCC") {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Compaction Check', checksdescription: 'Check if the loose material is properly compacted and ready for PCC' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Ratio Check', checksdescription: 'Check if the ratio of the concrete used in PCC as per the specifications' },
                                            { checksHeading: 'Height Check', checksdescription: 'Check for pouring height.' },
                                            { checksHeading: 'Finishing Check', checksdescription: 'Check if the top surface is properly finished and kept rough enough' },
                                            { checksHeading: 'Compaction Check', checksdescription: 'Check for ramming and compaction of PCC with proper tools.' },
                                        ];

                                        async function pccworkchChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        pccworkchChacks();
                                    }


                                    if (newDatanew.subactivityname === "RAFT - PCC") {

                                        const dataArranew = [
                                            { materailname: 'Stone Aggregate (20 MM)', materailquantity: materlID.NFR_PCCStoneAggregate20MMQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Portland Cement', materailquantity: materlID.NFR_PCCPortlandCementQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Course Sand', materailquantity: materlID.NFR_PCCCourseSandQuantity, materailUnit: 'CUFT' },
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === "RAFT - PCC") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Material Calculation as per Task' },
                                            { subtaskdescription: 'Ask the procurement manager to arrange the materials required for PCC' },
                                            { subtaskdescription: 'Assign the contractor and labour for the pcc work' },
                                            { subtaskdescription: 'Ask the contractor to arrange to concrete mixer , vibrator and Diesel' },
                                            { subtaskdescription: 'Make the water arrangements' },
                                            { subtaskdescription: 'Ask the contractor to arrange the required shuttering' },
                                            { subtaskdescription: 'Aks the contractor to arrange the finishing tools and tools for centreline' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Inform the contractor about the concrete mix ratio which is to be used' },
                                            { subtaskdescription: 'Ask the contractor to mark proper centreline' },
                                        ];

                                        async function PCCWorkfuncall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PCCWorkfuncall();
                                    }





                                    if (newDatanew.subactivityname === "RAFT - PCC") {

                                        const dataArranew = [
                                            {},
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Workability', NormalHeadingThree: 'Depth', NormalHeadingfoure: 'Dim./Finish' },
                                            {},
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }















                                    if (newDatanew.subactivityname === "ISO - Excavation") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Decide the RL for reference' },
                                            { subtaskdescription: 'Assign the labour /JCB  for the excavation purpose' },
                                            { subtaskdescription: 'Make Precaution plans to mitigate the risk of any failure of adjacent building/ structures due to excavation' },
                                            { subtaskdescription: 'Make the arrangement for dewatering  if required' },
                                            { subtaskdescription: 'Make the arrangement for blasting  if required' },
                                            { subtaskdescription: 'Ask the contractor to make  the arrangement  for checking the levels of the footing' },
                                            { subtaskdescription: 'Take the approval  for dumping of soil if required' },
                                            { subtaskdescription: 'Inform the client in case of any discrepancy in excavation' },
                                            { subtaskdescription: 'Arrange the pile driving machine in case of pile footing' },
                                            { subtaskdescription: 'Finalise and Check the depth of Pile' },
                                            { subtaskdescription: 'What action has been taken in case of any discrepancy' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the contractor  to check the depth of footing' },
                                            { subtaskdescription: 'Ask the contractor  to check the depth of all the piles in case of pile footing' },
                                        ];

                                        async function layoutAndLevellingCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        layoutAndLevellingCall();
                                    }



                                    if (newDatanew.subactivityname === "ISO - Excavation") {

                                        const dataArranew = [
                                            { materailname: 'JCB', materailquantity: materlID.NFI_ExcavationJCBQuantity, materailUnit: 'PER HOUR' },
                                            { materailname: 'Trolley', materailquantity: materlID.NFI_ExcavationTrolleyQuantity, materailUnit: 'PER ROUND' },
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }




                                    if (newDatanew.subactivityname === "ISO - Excavation") {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Layout Check', checksdescription: 'Whether the layout has been done and Checked by the Client' },
                                            { checksHeading: 'Plot level Check', checksdescription: 'Check the level of the plot with respect to the nearest road or the nearest drain' },
                                            { checksHeading: 'Depth Check', checksdescription: 'Depth of excavation to be finalised with respect to the road level' },
                                            { checksHeading: 'Dewatering Check', checksdescription: 'Check if dewatering is required during excavation' },
                                            { checksHeading: 'Blasting Requirement Check', checksdescription: 'Check if blasting is required for excavation' },
                                            { checksHeading: 'Phase 3', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Movement Check', checksdescription: 'Proper way for movement of the labours' },
                                            { checksHeading: 'Edge Column Check', checksdescription: ' It should be confirmed that Foundations of edge columns does not exceed the property line' },
                                            { checksHeading: 'Road Clearance check', checksdescription: 'The excavated soil is not spread on the roads which causes disturbance to the neighbours' },
                                        ];

                                        async function ExcavationnewChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        ExcavationnewChacks();
                                    }




                                    if (newDatanew.subactivityname === "ISO - Excavation") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Marking', headingforshortingTwo: 'Ex. Dimension' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Colu. Cen.', NormalHeadingThree: 'Area', NormalHeadingfoure: 'Diagonal' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Excavation', NormalHeadingThree: 'Depth', NormalHeadingfoure: 'Clearance' },
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }













                                    if (newDatanew.subactivityname === "RAFT - Excavation") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Decide the RL for reference' },
                                            { subtaskdescription: 'Assign the labour /JCB  for the excavation purpose' },
                                            { subtaskdescription: 'Make Precaution plans to mitigate the risk of any failure of adjacent building/ structures due to excavation' },
                                            { subtaskdescription: 'Make the arrangement for dewatering  if required' },
                                            { subtaskdescription: 'Make the arrangement for blasting  if required' },
                                            { subtaskdescription: 'Ask the contractor to make  the arrangement  for checking the levels of the footing' },
                                            { subtaskdescription: 'Take the approval  for dumping of soil if required' },
                                            { subtaskdescription: 'Inform the client in case of any discrepancy in excavation' },
                                            { subtaskdescription: 'Arrange the pile driving machine in case of pile footing' },
                                            { subtaskdescription: 'Finalise and Check the depth of Pile' },
                                            { subtaskdescription: 'What action has been taken in case of any discrepancy' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the contractor  to check the depth of footing' },
                                            { subtaskdescription: 'Ask the contractor  to check the depth of all the piles in case of pile footing' },
                                        ];

                                        async function layoutAndLevellingCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        layoutAndLevellingCall();
                                    }


                                    if (newDatanew.subactivityname === "RAFT - Excavation") {

                                        const dataArranew = [
                                            { materailname: 'JCB', materailquantity: materlID.NFR_ExcavationJCBQuantity, materailUnit: 'PER HOUR' },
                                            { materailname: 'Trolley', materailquantity: materlID.NFR_ExcavationTrolleyQuantity, materailUnit: 'PER ROUND' },
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === "RAFT - Excavation") {

                                        const dataArranew = [
                                            {},
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Depth', NormalHeadingThree: 'Clearance', NormalHeadingfoure: 'Marking' },
                                            {},
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }

                                    if (newDatanew.subactivityname === "RAFT - Excavation") {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Layout Check', checksdescription: 'Whether the layout has been done and Checked by the Client' },
                                            { checksHeading: 'Plot level Check', checksdescription: 'Check the level of the plot with respect to the nearest road or the nearest drain' },
                                            { checksHeading: 'Depth Check', checksdescription: 'Depth of excavation to be finalised with respect to the road level' },
                                            { checksHeading: 'Dewatering Check', checksdescription: 'Check if dewatering is required during excavation' },
                                            { checksHeading: 'Blasting Requirement Check', checksdescription: 'Check if blasting is required for excavation' },
                                            { checksHeading: 'Phase 3', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Movement Check', checksdescription: 'Proper way for movement of the labours' },
                                            { checksHeading: 'Edge Column Check', checksdescription: ' It should be confirmed that Foundations of edge columns does not exceed the property line' },
                                            { checksHeading: 'Road Clearance check', checksdescription: 'The excavated soil is not spread on the roads which causes disturbance to the neighbours' },
                                        ];

                                        async function ExcavationnewChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        ExcavationnewChacks();
                                    }





























                                    await Activities.updateOne(
                                        { _id: newss },
                                        {
                                            $push: {
                                                subactivitiesID: objID
                                            }
                                        }
                                    )
                                    // console.log('Data saved:', savedData);
                                } catch (error) {
                                    // console.error('Error saving data:', error);
                                }
                            }
                        }
                        miscellenousCalling();
                    }






                    if (newData.categoryname === "Plinth Beam and Grade Slab Work") {
                        // Plinth Work - Case - 01
                        // var neHavl = "Plinth Work - Case - 02";
                        // if (neHavl === "ISOLATED") {
                        //     var dataArrayPlinthWork = [
                        //         { subactivityname: 'Filling up to Plinth Bottom', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                        //         { subactivityname: 'PCC Below Beam', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                        //         { subactivityname: 'Brick Work along the Plinth', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                        //         { subactivityname: 'Filling Work in Gaps', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                        //         { subactivityname: 'Reinforcement Work', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                        //         { subactivityname: 'Sewage Line Work', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                        //         { subactivityname: 'Anti Termite Work', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                        //         { subactivityname: 'PCC Above', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                        //         { subactivityname: 'Grade Slab Reinforcement ', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                        //         { subactivityname: 'Grade Slab + Plinth RCC Work', activityID: newData._id, projectID: objectproID, estimateDays: 4 }
                        //     ];
                        // }


                        var dataArrayPlinthWork = [
                            { subactivityname: 'Shuttering Bottom', activityID: newData._id, projectID: objectproID, estimateDays: 3 },
                            { subactivityname: 'Reinforcement Work', activityID: newData._id, projectID: objectproID, estimateDays: 2 },
                            { subactivityname: 'Shuttering Side', activityID: newData._id, projectID: objectproID, estimateDays: 3 },
                            { subactivityname: 'RCC', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                            { subactivityname: 'Filling Work', activityID: newData._id, projectID: objectproID, estimateDays: 2 },
                            { subactivityname: 'Sewage Line Work', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                            { subactivityname: 'Anti Termite Work', activityID: newData._id, projectID: objectproID, estimateDays: 1 },
                            { subactivityname: 'Grade Slab Reinforcement Work', activityID: newData._id, projectID: objectproID, estimateDays: 2 },
                            { subactivityname: 'Grade Slab RCC Work', activityID: newData._id, projectID: objectproID, estimateDays: 3 }
                        ];


                        async function miscellenousCalling() {
                            for (let i = 0; i < dataArrayPlinthWork.length; i++) {
                                try {
                                    const newDatanew = new SubActivities(dataArrayPlinthWork[i]);
                                    const savedData = await newDatanew.save();

                                    let objID = new mongoose.Types.ObjectId(newDatanew.id)
                                    let newss = new mongoose.Types.ObjectId(newData._id)
                                    // console.log(objID);










                                    if (newDatanew.subactivityname === "PCC Above") {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Compaction Check', checksdescription: 'Check if the loose material is properly compacted and ready for PCC' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Ratio Check', checksdescription: 'Check if the ratio of the concrete used in PCC as per the specifications' },
                                            { checksHeading: 'Height Check', checksdescription: 'Check for pouring height.' },
                                            { checksHeading: 'Finishing Check', checksdescription: 'Check if the top surface is properly finished and kept rough enough' },
                                            { checksHeading: 'Compaction Check', checksdescription: 'Check for ramming and compaction of PCC with proper tools.' },
                                        ];

                                        async function pccworkchChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        pccworkchChacks();
                                    }





                                    if (newDatanew.subactivityname === "PCC Above") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Material Calculation as per Task' },
                                            { subtaskdescription: 'Ask the procurement manager to arrange the materials required for PCC' },
                                            { subtaskdescription: 'Assign the contractor and labour for the pcc work' },
                                            { subtaskdescription: 'Ask the contractor to arrange to concrete mixer , vibrator and Diesel' },
                                            { subtaskdescription: 'Make the water arrangements' },
                                            { subtaskdescription: 'Ask the contractor to arrange the required shuttering' },
                                            { subtaskdescription: 'Aks the contractor to arrange the finishing tools and tools for centreline' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Inform the contractor about the concrete mix ratio which is to be used' },
                                            { subtaskdescription: 'Ask the contractor to mark proper centreline' },
                                        ];

                                        async function PCCWorkfuncall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PCCWorkfuncall();
                                    }



                                    if (newDatanew.subactivityname === "PCC Above") {

                                        const dataArranew = [
                                            {},
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Workability', NormalHeadingThree: 'Depth', NormalHeadingfoure: 'Dim./Finish' },
                                            {},
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }










                                    if (newDatanew.subactivityname === "Grade Slab RCC Work") {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Compaction check', checksdescription: 'Ensure that proper compaction of backfilled soil has been done' },
                                            { checksHeading: 'Antitermite check', checksdescription: 'Antitertermite treatment has been done' },
                                            { checksHeading: 'Seawage line check', checksdescription: 'Sewage plumbing work has been completed' },
                                            { checksHeading: 'Level check', checksdescription: 'The level of the grade slab has been finalised and marked on the site' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Remove all the debris e.g. dust, paper, leaves, chippings of woods, nails, reinforcement wastage, soil particles etc.' },
                                            { checksHeading: 'Rebars check', checksdescription: 'Reinforcement has been laid as per the drawing. The cover ,spacing and lapping of bars is as per the specifications' },
                                            { checksHeading: 'Binding check', checksdescription: 'Proper binding has been done and proper cover has been provided' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Supervision Check', checksdescription: 'See that concreting is done under skilled supervision. Never leave it to labour on site' },
                                            { checksHeading: 'Mix ratio check', checksdescription: 'The ratio of concrete and the water cement ratio should be as per the specifications or as directed by the engineer in charge' },
                                            { checksHeading: 'W/C Ratio check', checksdescription: 'Add water as per predetermined quantity only. Always measure the water with measuring container before adding in concrete.' },
                                            { checksHeading: 'Mix time check', checksdescription: 'Mix the wet concrete thoroughly for around 2 minutes to get the consistent concrete' },
                                            { checksHeading: 'Finishing check', checksdescription: 'Finish the surface and edges of concrete after placing of concrete using with trowels or wooden floats or metal floats.' },
                                            { checksHeading: 'Phase 3', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Curing check', checksdescription: 'Do proper curing when the concrete has hardened initially' },

                                        ];

                                        async function GradeSlabChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        GradeSlabChacks();
                                    }


                                    if (newDatanew.subactivityname === "Grade Slab RCC Work") {

                                        const dataArranew = [
                                            { materailname: 'Stone Aggregate (20 MM)', materailquantity: materlID.PWS_GradeSlabRCCStoneAggregate20MMQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Portland Cement', materailquantity: materlID.PWS_GradeSlabRCCPortlandCementQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Course Sand', materailquantity: materlID.PWS_GradeSlabRCCCourseSandQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Admixture - Waterproof', materailquantity: materlID.PWS_GradeSlabRCCAdmixtureWaterproofQuantity, materailUnit: 'Litre' },
                                            { materailname: 'RMC', materailquantity: materlID.PWS_GradeSlabRCCRMCQuantity, materailUnit: 'CUM' },
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === "Grade Slab RCC Work") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Assign the contractor and Labour for the work' },
                                            { subtaskdescription: 'Calculate the steel quantity required and Give it to the purchase manager' },
                                            { subtaskdescription: 'Explain the contractor about the dia and Spacing of rebars in grade slab' },
                                            { subtaskdescription: 'Ask the contractor to make the arrangements for concrete mixer ,vibrator and Diesel' },
                                            { subtaskdescription: 'Calculate the material required for RCC and infrom the purchase manager' },
                                            { subtaskdescription: 'Make the arrangements for water' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the contractor to make the arrangements for pouring of concrete' },
                                            { subtaskdescription: 'Ask the contractor to mark the level dots before concreting' },
                                            { subtaskdescription: 'Inform the concractor about the concrete mix ratio' },
                                            { subtaskdescription: 'Ask the contractor to control the water cement  ratio' },
                                            { subtaskdescription: 'Ask the contractor to pour the concrete evenly with proper finishing' },
                                            { subtaskdescription: 'Ask the contractor for compaction of  concrete' },
                                            { subtaskdescription: 'Phase 3', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Make the arrangements for the curing' },
                                            { subtaskdescription: 'Ask the guard to do three times curing' },
                                        ];

                                        async function GradeSlabfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        GradeSlabfunCall();
                                    }




                                    if (newDatanew.subactivityname === "Grade Slab RCC Work") {

                                        const dataArranew = [
                                            {},
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Casting', NormalHeadingThree: 'Thickness', NormalHeadingfoure: 'Final Finish' },
                                            {},
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }













                                    if (newDatanew.subactivityname === "Reinforcement Work") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Arrange the rebars and Binding wire at site' },
                                            { subtaskdescription: 'Assign the labor and Contractor for the work' },
                                            { subtaskdescription: 'Ask the contractor to arrange the supports and install proper supports to the plinth shuttering' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Explain the contractor about the dimensions and Steel detailing of the plinth' },
                                            { subtaskdescription: 'Arrange the cover blocks at site and ask the contractor to place them properly' },
                                            { subtaskdescription: 'Inform the contractor to maintain the proper spacing between the bars' },
                                            { subtaskdescription: 'Ask the cotractor to minimise the wastage during cutting and Binding' },
                                            { subtaskdescription: 'Ask the contractor to use the old rebars first if balance at site' }
                                        ];

                                        async function PlinthSteelReinforcementfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PlinthSteelReinforcementfunCall();
                                    }



                                    if (newDatanew.subactivityname === "Reinforcement Work") {

                                        const dataArranew = [
                                            { materailname: 'Reinforcement', materailquantity: materlID.PWS_ReinforcementTMTReinforcementQuantity, materailUnit: 'KG' },
                                            { materailname: 'Binding Wire', materailquantity: materlID.PWS_ReinforcementTMTBindingWireQuantity, materailUnit: 'KG' },
                                            { materailname: 'Cover Block', materailquantity: materlID.PWS_ReinforcementTMTCoverBlockQuantity, materailUnit: 'NOS.' },

                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }



                                    if (newDatanew.subactivityname === "Reinforcement Work") {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Rebar cleaning check', checksdescription: 'Reinforcement bars shall be free from rust, mud, oil, slurry, loose materials, etc.' },
                                            { checksHeading: 'Steel grade check', checksdescription: 'The grade of the steel Bar (Both for Main Reinforcement and Transverse Reinforcement) shall be checked as per Structural drawings.' },
                                            { checksHeading: 'Grid check', checksdescription: 'Before going to check the reinforcement, identify Grid Name such Along with Grid A, B, C,1, 2.3, etc, and Beam Name such as B1, B2, etc.' },
                                        ];

                                        async function PlinthSteelReinforcementChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PlinthSteelReinforcementChacks();
                                    }


                                    if (newDatanew.subactivityname === "Reinforcement Work") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Main Bar', headingforshortingTwo: 'Check' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Explain', NormalHeadingThree: 'Main/Extra', NormalHeadingfoure: 'L - Bend' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Ring | Hook', NormalHeadingThree: 'Cover Blo.', NormalHeadingfoure: 'Final Chk.' },
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }









                                    // if (newDatanew.subactivityname === "Grade Slab + Plinth RCC Work") {

                                    //     const dataArranew = [
                                    //         { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                    //         { subtaskdescription: 'Assign the contractor and Labour for the work' },
                                    //         { subtaskdescription: 'Ask the contractor to make the arrangements for concrete mixer ,vibrator and Diesel' },
                                    //         { subtaskdescription: 'Calculate the material required for RCC and infrom the purchase manager' },
                                    //         { subtaskdescription: 'Make the arrangements for water' },
                                    //         { subtaskdescription: 'Ask the contractor to make the arrangements for pouring of concrete' },
                                    //         { subtaskdescription: 'Ask the contractor to check the line and level of plinth' },
                                    //         { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                    //         { subtaskdescription: 'Inform the concractor about the concrete mix ratio' },
                                    //         { subtaskdescription: 'Ask the contractor to control the water cement  ratio' },
                                    //         { subtaskdescription: 'Ask the contractor to pour the concrete evenly with proper finishing and not from a greater height because it causes segregation' },
                                    //         { subtaskdescription: 'Ask the contractor for compaction of  concrete' },
                                    //         { subtaskdescription: 'Inform the contractor about the deshuttering time' },
                                    //         { subtaskdescription: 'Phase 3', phaseHeadingShow: 'Yes' },
                                    //         { subtaskdescription: 'Check the structure for honeycombing during the deshuttering and ask the contractor to repair it' },
                                    //         { subtaskdescription: 'Make the arrangements for the curing' },
                                    //         { subtaskdescription: 'Ask the guard to do three times curing' },
                                    //     ];

                                    //     async function RCCPlinthfunCall() {
                                    //         for (let i = 0; i < dataArranew.length; i++) {
                                    //             try {
                                    //                 const newDatanewtask = new Subtask(dataArranew[i]);
                                    //                 const savedData = await newDatanewtask.save();

                                    //                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                    //                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                    //                 // console.log(objID);
                                    //                 await SubActivities.updateOne(
                                    //                     { _id: newss },
                                    //                     {
                                    //                         $push: {
                                    //                             subtaskID: objID
                                    //                         }
                                    //                     }
                                    //                 )
                                    //                 // console.log('Data saved:', savedData);
                                    //             } catch (error) {
                                    //                 // console.error('Error saving data:', error);
                                    //             }
                                    //         }
                                    //     }
                                    //     RCCPlinthfunCall();
                                    // }






                                    // if (newDatanew.subactivityname === "Grade Slab + Plinth RCC Work") {

                                    //     const dataArranew = [
                                    //         { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                    //         { checksHeading: 'Supervision check', checksdescription: 'See that concreting is done under skilled supervision. Never leave it to labour on site' },
                                    //         { checksHeading: 'Manpower check', checksdescription: 'Start placement of concrete with adequate manpower, proper equipment and tools.' },
                                    //         { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                    //         { checksHeading: 'Mix check', checksdescription: 'Choose right concrete mix as per specifications' },
                                    //         { checksHeading: 'W/c ratio check', checksdescription: 'Add water as per predetermined quantity only. Always measure the water with measuring container before adding in concrete.' },
                                    //         { checksHeading: 'Mix Time Check', checksdescription: 'Mix the wet concrete thoroughly for around 2 minutes to get the consistent concrete' },
                                    //         { checksHeading: 'compaction check', checksdescription: 'Do the proper compaction to the concrete with a vibrator or wooden tamp to remove air from the concrete. If compaction is not well, it will create voids/honeycomb in concrete resulting in leakages from the concrete structure, thereby causing corrosion and reducing the strength.' },
                                    //         { checksHeading: 'Thickness check', checksdescription: 'Pour the concrete throughout in an even thickness' },
                                    //         { checksHeading: 'Support check', checksdescription: 'Always keep on checking the stability of props/ supports of formwork below.' },
                                    //         { checksHeading: 'Covers check', checksdescription: 'See that the covers insert doesn’t get displaced.' },
                                    //         { checksHeading: 'Finishing check', checksdescription: 'Finish the surface and edges of concrete after placing of concrete using with trowels or wooden floats or metal floats. Ensure that the concrete is finished in the same' },
                                    //         { checksHeading: 'Phase 3', phaseHeadingShow: 'Yes' },
                                    //         { checksHeading: 'Curing Check', checksdescription: 'Proper curing when the concrete has hardened initially' },
                                    //     ];

                                    //     async function RCCPlinthChacks() {
                                    //         for (let i = 0; i < dataArranew.length; i++) {
                                    //             try {
                                    //                 const newDatanewtask = new Checks(dataArranew[i]);
                                    //                 const savedData = await newDatanewtask.save();

                                    //                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                    //                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                    //                 // console.log(objID);
                                    //                 await SubActivities.updateOne(
                                    //                     { _id: newss },
                                    //                     {
                                    //                         $push: {
                                    //                             checksID: objID
                                    //                         }
                                    //                     }
                                    //                 )
                                    //                 // console.log('Data saved:', savedData);
                                    //             } catch (error) {
                                    //                 // console.error('Error saving data:', error);
                                    //             }
                                    //         }
                                    //     }
                                    //     RCCPlinthChacks();
                                    // }




                                    if (newDatanew.subactivityname === "Grade Slab + Plinth RCC Work") {

                                        const dataArranew = [
                                            {},
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Casting', NormalHeadingThree: 'Thickness', NormalHeadingfoure: 'Final Finish' },
                                            {},
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }









                                    if (newDatanew.subactivityname === "RCC") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Assign the contractor and Labour for the work' },
                                            { subtaskdescription: 'Ask the contractor to make the arrangements for concrete mixer ,vibrator and Diesel' },
                                            { subtaskdescription: 'Calculate the material required for RCC and infrom the purchase manager' },
                                            { subtaskdescription: 'Make the arrangements for water' },
                                            { subtaskdescription: 'Ask the contractor to make the arrangements for pouring of concrete' },
                                            { subtaskdescription: 'Ask the contractor to check the line and level of plinth' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Inform the concractor about the concrete mix ratio' },
                                            { subtaskdescription: 'Ask the contractor to control the water cement  ratio' },
                                            { subtaskdescription: 'Ask the contractor to pour the concrete evenly with proper finishing and not from a greater height because it causes segregation' },
                                            { subtaskdescription: 'Ask the contractor for compaction of  concrete' },
                                            { subtaskdescription: 'Inform the contractor about the deshuttering time' },
                                            { subtaskdescription: 'Phase 3', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Check the structure for honeycombing during the deshuttering and ask the contractor to repair it' },
                                            { subtaskdescription: 'Make the arrangements for the curing' },
                                            { subtaskdescription: 'Ask the guard to do three times curing' },
                                        ];

                                        async function RCCPlinthfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RCCPlinthfunCall();
                                    }






                                    if (newDatanew.subactivityname === "RCC") {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Supervision check', checksdescription: 'See that concreting is done under skilled supervision. Never leave it to labour on site' },
                                            { checksHeading: 'Manpower check', checksdescription: 'Start placement of concrete with adequate manpower, proper equipment and tools.' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Mix check', checksdescription: 'Choose right concrete mix as per specifications' },
                                            { checksHeading: 'W/c ratio check', checksdescription: 'Add water as per predetermined quantity only. Always measure the water with measuring container before adding in concrete.' },
                                            { checksHeading: 'Mix Time Check', checksdescription: 'Mix the wet concrete thoroughly for around 2 minutes to get the consistent concrete' },
                                            { checksHeading: 'compaction check', checksdescription: 'Do the proper compaction to the concrete with a vibrator or wooden tamp to remove air from the concrete. If compaction is not well, it will create voids/honeycomb in concrete resulting in leakages from the concrete structure, thereby causing corrosion and reducing the strength.' },
                                            { checksHeading: 'Thickness check', checksdescription: 'Pour the concrete throughout in an even thickness' },
                                            { checksHeading: 'Support check', checksdescription: 'Always keep on checking the stability of props/ supports of formwork below.' },
                                            { checksHeading: 'Covers check', checksdescription: 'See that the covers insert doesn’t get displaced.' },
                                            { checksHeading: 'Finishing check', checksdescription: 'Finish the surface and edges of concrete after placing of concrete using with trowels or wooden floats or metal floats. Ensure that the concrete is finished in the same' },
                                            { checksHeading: 'Phase 3', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Curing Check', checksdescription: 'Proper curing when the concrete has hardened initially' },
                                        ];

                                        async function RCCPlinthChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RCCPlinthChacks();
                                    }




                                    if (newDatanew.subactivityname === "RCC") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Casting', headingforshortingTwo: 'Honey Comb' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Vibrator', NormalHeadingThree: 'Casting', NormalHeadingfoure: 'Final Finish' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Honey Co.', NormalHeadingThree: 'Curing', NormalHeadingfoure: 'Protection' },
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }







                                    if (newDatanew.subactivityname === "Anti Termite Work") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Complete all  the prechecks' },
                                            { subtaskdescription: 'Assign the specialised party for the antitermite work' },
                                            { subtaskdescription: 'Ask the workers to take the necessary precautions' },
                                            { subtaskdescription: 'Ask the contractor to first drill the holes and then mix the chemical' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Define the ratio of the chemical with water' },
                                            { subtaskdescription: 'Check that chemical is filled in each and every hole' },
                                            { subtaskdescription: 'Check that the hole made is of appropriate depth' },
                                            { subtaskdescription: 'Ask the contractor to remove all the boxes once the treatment has been done' },
                                            { subtaskdescription: 'Inform the rcc contractor that the antitermite treatment has been done and now he can proceed with the grade slab work from the next day' },
                                            { subtaskdescription: 'Ask the antitermite party for the certificate' },
                                        ];

                                        async function AntiTermitefunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        AntiTermitefunCall();
                                    }


                                    if (newDatanew.subactivityname === "Anti Termite Work") {

                                        const dataArranew = [
                                            { materailname: 'Chemical Pheriphery', materailquantity: materlID.PWS_AntiTemriteChemicalPheripheryQuantity, materailUnit: 'LITRE' },
                                            { materailname: 'Chemical Spray', materailquantity: materlID.PWS_AntiTemriteChemicalSprayQuantity, materailUnit: 'LITRE' },
                                            { materailname: 'Piping Length', materailquantity: materlID.PWS_AntiTemritePipingLengthQuantity, materailUnit: 'RUM' },
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === "Anti Termite Work") {

                                        const dataArranew = [
                                            {},
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Surface Pr.', NormalHeadingThree: 'Holes', NormalHeadingfoure: 'Solution' },
                                            {},
                                            {},
                                            {},
                                            {},
                                            { maintitle: 'Footing', InformationOneString: 'No', InformationTwoString: '562', InformationThreeString: 'Rentokil PCI' },
                                            { maintitle: 'Plinth Beam', InformationOneString: 'No', InformationTwoString: '562', InformationThreeString: 'Rentokil PCI' },
                                            { maintitle: 'Periphery', InformationOneString: 'No', InformationTwoString: '562', InformationThreeString: 'Rentokil PCI' },
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }


                                    if (newDatanew.subactivityname === "Grade Slab Reinforcement Work") {

                                        const dataArranew = [
                                            { materailname: 'Reinforcement', materailquantity: materlID.PWS_ReinforcementTMTTwoReinforcementQuantity, materailUnit: 'KG' },
                                            { materailname: 'Binding Wire', materailquantity: materlID.PWS_ReinforcementTMTTwoBindingWireQuantity, materailUnit: 'KG' },
                                            { materailname: 'Cover Block', materailquantity: materlID.PWS_ReinforcementTMTTwoCoverBlockQuantity, materailUnit: 'NOS.' },

                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }

                                    if (newDatanew.subactivityname === "Grade Slab Reinforcement Work") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Main Bar', headingforshortingTwo: 'Check' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Explain', NormalHeadingThree: 'Main/Extra', NormalHeadingfoure: 'L - Bend' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Ring | Hook', NormalHeadingThree: 'Cover Blo.', NormalHeadingfoure: 'Final Chk.' },
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }






                                    if (newDatanew.subactivityname === "Anti Termite Work") {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Chemical check', checksdescription: 'If the chemical of the required concentration' },
                                            { checksHeading: 'Brand check', checksdescription: 'Check the brand of the chemical' },
                                            { checksHeading: 'Treatment Area Check', checksdescription: 'Treatment area is ready to receive the treatment' },
                                            { checksHeading: 'Cleaning Check', checksdescription: 'All debris and unwanted materials have been removed' },
                                            { checksHeading: 'Services Check', checksdescription: 'All underground M&E services completed and secured' },
                                            { checksHeading: 'Sand Compaction Check', checksdescription: 'Sand bedding properly compacted' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Hole Size Check', checksdescription: 'Drill holes with 2 cm diameter, 60 cm apart and 15cm around the premises area. If concreted floor, drill minimum 60 cm deep so as to reach the soil' },
                                            { checksHeading: 'Ratio Check', checksdescription: 'Correct mixing method and ratio as per manufacturers specification' },
                                            { checksHeading: 'Application Process', checksdescription: 'Footings: Soil treated before the concrete is poured, and in the backfill for every 600mm of depth for 300mm around the column to ground levels' },
                                            { checksHeading: 'Application Process', checksdescription: 'Ground beams : Both sides to a depth of 300mm treated at a rate of 18 litres per 3.0m run' },
                                            { checksHeading: 'Application Process', checksdescription: 'Floor slab : treated before the blinding is laid' },
                                            { checksHeading: 'Application Process', checksdescription: 'Services pipes : areas entering the building are treated' },
                                            { checksHeading: 'Holes filling Check', checksdescription: 'Holes will be filled with cement and sand mortar (1:3) mixed in putty consistency' },
                                            { checksHeading: 'Completion Check', checksdescription: 'Application of anti-termite treatment covers all areas' },
                                        ];

                                        async function AntiTermiteChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        AntiTermiteChacks();
                                    }






















                                    if (newDatanew.subactivityname === "Shuttering Bottom") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Assign the contractor and Labour for the work' },
                                            { subtaskdescription: 'Ask the contractor to deliver the shuttering and supports at site' },
                                            { subtaskdescription: 'Ask the contractor to use only the workable shuttering and do proper oiling' },
                                            { subtaskdescription: 'Ask the contractor to arrange the level pipe and mark the plinth level' },
                                            { subtaskdescription: 'Ask the contractor to make the pre arrangements for the plinth (pcc or brickwork)' },
                                            { subtaskdescription: 'Infrom the contractor about the line of the plinth' },
                                            { subtaskdescription: 'Ask the contractor  to check the pcc and brickwork below the plinth' },
                                            { subtaskdescription: 'Check the shuttering  for damage, if any shall be repaired or changed' },
                                            { subtaskdescription: 'Ask the contractor for proper oiling and packing of the gaps in the shuttering' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the contractor to check the line and Level of the shuttering' },
                                            { subtaskdescription: 'Ask the contractor to tighten the beam column joints' },
                                            { subtaskdescription: 'Ask the contractor to clean and Remove the waste in the plinth shuttering' },
                                            { subtaskdescription: 'Ask the contractor to call steel binders once shuttering has been done' },
                                        ];

                                        async function PlinthBeamShutteringShutteringBottomCase() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PlinthBeamShutteringShutteringBottomCase();
                                    }




                                    if (newDatanew.subactivityname === "Shuttering Bottom") {

                                        const dataArranew = [
                                            { materailname: 'Beam Shuttering Length', materailquantity: materlID.PWS_ShutteringWorkBeamShutteringLengthQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Shuttering Oil', materailquantity: materlID.PWS_ShutteringWorkShutteringOilQuantity, materailUnit: 'LITRE' },
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }

                                    if (newDatanew.subactivityname === "Shuttering Bottom") {

                                        const dataArranew = [
                                            {},
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Bottom', NormalHeadingThree: 'Straight C.' },
                                            {},
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }


                                    if (newDatanew.subactivityname === "Shuttering Side") {

                                        const dataArranew = [
                                            { materailname: 'Beam Shuttering Length', materailquantity: materlID.PWS_ShutteringWorkTwoBeamShutteringLengthQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Shuttering Oil', materailquantity: materlID.PWS_ShutteringWorkTwoShutteringOilQuantity, materailUnit: 'LITRE' },
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }

                                    if (newDatanew.subactivityname === "Shuttering Side") {

                                        const dataArranew = [
                                            {},
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Size Fix', NormalHeadingThree: 'Straight C.' },
                                            {},
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }

                                    if (newDatanew.subactivityname === "RCC") {

                                        const dataArranew = [
                                            { materailname: 'Stone Aggregate (20 MM)', materailquantity: materlID.PWS_PlinthRCCStoneAggregate20MMQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Portland Cement', materailquantity: materlID.PWS_PlinthRCCPortlandCementQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Course Sand', materailquantity: materlID.PWS_PlinthRCCCourseSandQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Admixture - Waterproof', materailquantity: materlID.PWS_PlinthRCCAdmixtureWaterproofQuantity, materailUnit: 'Litre' },
                                            { materailname: 'RMC', materailquantity: materlID.PWS_PlinthRCCRMCQuantity, materailUnit: 'CUM' },
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }



                                    if (newDatanew.subactivityname === "Filling Work") {

                                        const dataArranew = [
                                            { materailname: 'Kopra | Gitti | Soil', materailquantity: materlID.PWS_HardBackfillingKopraGittiSoilQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'JCB', materailquantity: materlID.PWS_HardBackfillingJCBQuantity, materailUnit: 'PER HOUR' },
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }

                                    if (newDatanew.subactivityname === "Filling Work") {

                                        const dataArranew = [
                                            {},
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Level', NormalHeadingThree: 'Ramming', NormalHeadingfoure: 'Gitti Layer' },
                                            {},
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }

                                    if (newDatanew.subactivityname === "Shuttering Bottom") {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'General Check', checksdescription: 'In case of pile cap check if the plinth beam is to be laid above the pile cap or along the pile cap' },
                                            { checksHeading: 'Plinth height check', checksdescription: 'It is recommended that the minimum plinth height of 150 mm is adopted from the top of the road in front of your plot.' },
                                            { checksHeading: 'Drain board check', checksdescription: 'Polythene/ Drain board shall be placed between the adjacent plot boundaries from the foundation level to avoid ingress of water in future.' },
                                            { checksHeading: 'PCC check', checksdescription: 'P.C.C. of appropriate grade and thickness (minimum 50 mm and M 5 or 1: 4:8 grade) should be done before starting shuttering for ground beam and it should be properly levelled and in perfect line. (Since we are not doing any PCC above Brickwork. Please do proper curing of brickwork before start of plinth beam concreting.' },
                                            { checksHeading: 'PCC check', checksdescription: 'The P.C.C. shall extended minimum 50 mm beyond the width of beam on both faces. Check all the level of ground beams. It should be min 150 mm in natural ground, so that the earth filled within walls or a beam doesn’t escape during plinth filling. Do it even, not mention in drawings. See that all Ground beams are on same level. (Not applicable in our case)' },
                                            { checksHeading: 'Brickwork check', checksdescription: 'See that all the Brick work on which beam is laid is properly aligned (particularly in case of freshly excavated foundation pits) to that the ground beam doesn’t sag during curing or watering because of settlement of loose soil.' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Formwork check', checksdescription: 'Carryout formwork for ground beams or plinth beams after filling as providing props may result in delay as removal props needs time and as filling work can be taken up during that period resulting in delay of slab.' },
                                            { checksHeading: 'Shuttering check', checksdescription: 'The shuttering should be dry and shall be cleaned carefully before applying mould release agent. The same type of release agent should be used throughout on similar shuttering materials.' },
                                            { checksHeading: 'Shuttering check', checksdescription: 'The surface of shuttering should be even and thinly coated with mould release agent (Shuttering Oil).' },
                                            { checksHeading: 'Shuttering check', checksdescription: 'Shuttering should be fixed in such a manner that the joints should be tight against leakage of cement slurry.' },
                                            { checksHeading: 'Beam column Junction check', checksdescription: 'Ensure that at junction of beam column is tight and it shouldn’t bulge during concreting.' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Remove all the debris e.g. dust, paper, leaves, chippings of woods, nails, reinforcement wastage, soil particles etc.' },
                                        ];

                                        async function PlinthBeamShutteringShutteringBottomCaseCheck() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PlinthBeamShutteringShutteringBottomCaseCheck();
                                    }































                                    if (newDatanew.subactivityname === "Sewage Line Work") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Assign the plumber for the sewage line work' },
                                            { subtaskdescription: 'Estimate the material as per the drawing and give it to the purchase manager' },
                                            { subtaskdescription: 'Ask the purchase manager to arrange the materials' },
                                            { subtaskdescription: 'Ask the plumber to check the quanity of the delivered materials.If any material is less then it should be informed that day only' },
                                            { subtaskdescription: 'Ask the plumber to make the arrangements for the leakage and pressure test' },
                                            { subtaskdescription: 'Check if the concrete material is available. If not then inform the purchase manager' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Mark the path for the sewage without beam cutting' },
                                            { subtaskdescription: 'Inform the contractor about the location of the chambers' },
                                            { subtaskdescription: 'Ask the contractor to do the leak and Pressure test' },
                                            { subtaskdescription: 'Ask the contractor to do proper concreting over the pipe so that it does not get damaged' }
                                        ];

                                        async function SewageLinefunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SewageLinefunCall();
                                    }


                                    if (newDatanew.subactivityname === "Sewage Line Work") {

                                        const dataArranew = [
                                            { materailname: '6" Pipe', materailquantity: materlID.PWS_SewageLineWorkPipe6InchQuantity, materailUnit: 'RUFT.' },
                                            { materailname: 'P - Trap', materailquantity: materlID.PWS_SewageLineWorkPTrapQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Solvent', materailquantity: materlID.PWS_SewageLineWorkSolventQuantity, materailUnit: 'CONTAINER' },
                                            { materailname: 'Nahani Trap', materailquantity: materlID.PWS_SewageLineWorkNahaniTrapQuantity, materailUnit: 'NOS.' },
                                            { materailname: '90 Degree', materailquantity: materlID.PWS_SewageLineWorkDegree90Quantity, materailUnit: 'NOS.' },
                                            { materailname: 'Junction', materailquantity: materlID.PWS_SewageLineWorkJunctionQuantity, materailUnit: 'NOS.' },
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }

                                    if (newDatanew.subactivityname === "Sewage Line Work") {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Material check', checksdescription: 'Approved materials has been visually checked for quantity and condition' },
                                            { checksHeading: 'Material check', checksdescription: 'Pipe checked for damages, flaws and cracks before lowering' },
                                            { checksHeading: 'Material check', checksdescription: 'Enough quantity of pipe and fitting material is at site and stored as per manufacturers instructions' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Handling Check', checksdescription: 'All pipes & fitting materials are properly handled by skilled plumbers as per standard procedure without any damage to pipes' },
                                            { checksHeading: 'Alignment Check', checksdescription: 'Alignment of sewerline is properly set out as per construction drawing and to suit site conditions' },
                                            { checksHeading: 'Level Check', checksdescription: 'All invert levels are checked & confirmed by qualified surveyor and their setting out approved' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Interior of each pipe is cleaned and free of sand, dirt, etc.' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Exterior of joints carefully cleaned before jointing' },
                                            { checksHeading: 'Leak test check', checksdescription: 'All the necessary leak tests and light tests done and witnessed by PWD Sewerage Section' },
                                            { checksHeading: 'Concrete work check', checksdescription: 'All associated concrete works done as per construction drawing' },
                                        ];

                                        async function SewageLineChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SewageLineChacks();
                                    }








                                    if (newDatanew.subactivityname === "Sewage Line Work") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Washroom', headingforshortingTwo: 'Chamber' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Washbasin', NormalHeadingThree: 'W.C', NormalHeadingfoure: 'Shower' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Construct.', NormalHeadingThree: 'Pipeline', NormalHeadingfoure: 'Covering' },
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }



























                                    // if (newDatanew.subactivityname === "Filling up to Plinth Bottom") {

                                    //     const dataArranew = [
                                    //         { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                    //         { checksHeading: 'Deshuttering check', checksdescription: 'All the concrete structures like footings, columns, plinth beams, etc. should be completed with de-shuttering of the formwork, removal of stagings, etc.' },
                                    //         { checksHeading: 'Honeycombing repair check', checksdescription: 'All the honeycomb in the structures should be repaired before doing the plinth filling.' },
                                    //         { checksHeading: 'Masonry and Plaster check', checksdescription: 'All the plinth masonry work should be completed with the internal plaster, or by filling the leftover joints in a proper way.' },
                                    //         { checksHeading: 'Curing check', checksdescription: 'Before doing filling, ensure that all the concrete structures and masonry works have completed their minimal curing period. It should be properly set, attaining its design ' },
                                    //         { checksHeading: 'Leftover formwork Check', checksdescription: 'The plinth area and footing pit should be checked for any leftover formwork materials and should be removed before filling. ' },
                                    //         { checksHeading: 'Cleaning check', checksdescription: 'Any organic matter, wooden logs, plant roots, etc. should be cleaned, as they form voids after decay, causing settlement in the filling, due to weak compaction. ' },
                                    //         { checksHeading: 'Water Check', checksdescription: 'If there is any water in the pit, trenches, and plinth areas, it should be drained out.' },
                                    //         { checksHeading: 'Material check', checksdescription: 'The construction soil (moorum) should be free from organic matter, plant roots, clay lumps, chemicals, etc. The soil should be granular in structure, with a reddish-brown' },
                                    //         { checksHeading: 'Soil Check', checksdescription: 'If the soil excavated from the footing pit is black cotton, it should be removed completely and strictly avoided from refilling.' },
                                    //         { checksHeading: 'Top level check', checksdescription: 'Top level of filling has been marked' },
                                    //         { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                    //         { checksHeading: 'Filling Layers Check', checksdescription: 'Construction soil should be spread in layers of 15 to 20cm. thickness, if you are using manual rammers, and it can be filled up to 30cm in thickness for the mechanical ' },
                                    //         { checksHeading: 'Layer Check', checksdescription: 'In any case, you should not fill the soil layer above 30cm depth, to achieve good compaction of the soil.' },
                                    //         { checksHeading: 'Watering Check', checksdescription: 'After completing the first layer of spreading, sprinkled with water to attain optimum moisture content, so that we can achieve the maximum dry density of soil after ' },
                                    //         { checksHeading: 'Ramming check', checksdescription: 'The ramming should be done from one end, covering all the areas. It is always advisable to use mechanical compactors, as the work carried out will be more efficient.' },
                                    //     ];

                                    //     async function backfillingchChacks() {
                                    //         for (let i = 0; i < dataArranew.length; i++) {
                                    //             try {
                                    //                 const newDatanewtask = new Checks(dataArranew[i]);
                                    //                 const savedData = await newDatanewtask.save();

                                    //                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                    //                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                    //                 // console.log(objID);
                                    //                 await SubActivities.updateOne(
                                    //                     { _id: newss },
                                    //                     {
                                    //                         $push: {
                                    //                             checksID: objID
                                    //                         }
                                    //                     }
                                    //                 )
                                    //                 // console.log('Data saved:', savedData);
                                    //             } catch (error) {
                                    //                 // console.error('Error saving data:', error);
                                    //             }
                                    //         }
                                    //     }
                                    //     backfillingchChacks();
                                    // }



                                    // if (newDatanew.subactivityname === "Filling up to Plinth Bottom") {

                                    //     const dataArranew = [
                                    //         { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                    //         { subtaskdescription: 'Calculate the quantity of backfilling material and ask the purchase manager to arrange it' },
                                    //         { subtaskdescription: 'Assign the labour and Contractor for the backfilling' },
                                    //         { subtaskdescription: 'Make the arrangements for water' },
                                    //         { subtaskdescription: 'Arrange the rammer at site ' },
                                    //         { subtaskdescription: 'Inform the contractor about the filling procedure' },
                                    //         { subtaskdescription: 'Ask the contractor to remove the debris if any from the filling material' },
                                    //         { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                    //         { subtaskdescription: 'Ask the contractor to mark the top level of filling in each section i.e, which area will be down or up' },
                                    //         { subtaskdescription: 'Ask the contractor not to fill the layers more than 300mm' },
                                    //         { subtaskdescription: 'Ask the contractor for watering the filling material' },
                                    //         { subtaskdescription: 'Ask the contractor for proper compaction' },
                                    //         { subtaskdescription: 'Ask the contractor to give the final level in compaction and 6mm Aggreagte to be laid so that the grade slab work can be carried out directly' },
                                    //     ];

                                    //     async function BackFillingfunCall() {
                                    //         for (let i = 0; i < dataArranew.length; i++) {
                                    //             try {
                                    //                 const newDatanewtask = new Subtask(dataArranew[i]);
                                    //                 const savedData = await newDatanewtask.save();

                                    //                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                    //                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                    //                 // console.log(objID);
                                    //                 await SubActivities.updateOne(
                                    //                     { _id: newss },
                                    //                     {
                                    //                         $push: {
                                    //                             subtaskID: objID
                                    //                         }
                                    //                     }
                                    //                 )
                                    //                 // console.log('Data saved:', savedData);
                                    //             } catch (error) {
                                    //                 // console.error('Error saving data:', error);
                                    //             }
                                    //         }
                                    //     }
                                    //     BackFillingfunCall();
                                    // }












                                    // if (newDatanew.subactivityname === "Filling Work in Gaps") {

                                    //     const dataArranew = [
                                    //         { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                    //         { checksHeading: 'Deshuttering check', checksdescription: 'All the concrete structures like footings, columns, plinth beams, etc. should be completed with de-shuttering of the formwork, removal of stagings, etc.' },
                                    //         { checksHeading: 'Honeycombing repair check', checksdescription: 'All the honeycomb in the structures should be repaired before doing the plinth filling.' },
                                    //         { checksHeading: 'Masonry and Plaster check', checksdescription: 'All the plinth masonry work should be completed with the internal plaster, or by filling the leftover joints in a proper way.' },
                                    //         { checksHeading: 'Curing check', checksdescription: 'Before doing filling, ensure that all the concrete structures and masonry works have completed their minimal curing period. It should be properly set, attaining its design ' },
                                    //         { checksHeading: 'Leftover formwork Check', checksdescription: 'The plinth area and footing pit should be checked for any leftover formwork materials and should be removed before filling. ' },
                                    //         { checksHeading: 'Cleaning check', checksdescription: 'Any organic matter, wooden logs, plant roots, etc. should be cleaned, as they form voids after decay, causing settlement in the filling, due to weak compaction. ' },
                                    //         { checksHeading: 'Water Check', checksdescription: 'If there is any water in the pit, trenches, and plinth areas, it should be drained out.' },
                                    //         { checksHeading: 'Material check', checksdescription: 'The construction soil (moorum) should be free from organic matter, plant roots, clay lumps, chemicals, etc. The soil should be granular in structure, with a reddish-brown' },
                                    //         { checksHeading: 'Soil Check', checksdescription: 'If the soil excavated from the footing pit is black cotton, it should be removed completely and strictly avoided from refilling.' },
                                    //         { checksHeading: 'Top level check', checksdescription: 'Top level of filling has been marked' },
                                    //         { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                    //         { checksHeading: 'Filling Layers Check', checksdescription: 'Construction soil should be spread in layers of 15 to 20cm. thickness, if you are using manual rammers, and it can be filled up to 30cm in thickness for the mechanical ' },
                                    //         { checksHeading: 'Layer Check', checksdescription: 'In any case, you should not fill the soil layer above 30cm depth, to achieve good compaction of the soil.' },
                                    //         { checksHeading: 'Watering Check', checksdescription: 'After completing the first layer of spreading, sprinkled with water to attain optimum moisture content, so that we can achieve the maximum dry density of soil after ' },
                                    //         { checksHeading: 'Ramming check', checksdescription: 'The ramming should be done from one end, covering all the areas. It is always advisable to use mechanical compactors, as the work carried out will be more efficient.' },
                                    //     ];

                                    //     async function backfillingchChacks() {
                                    //         for (let i = 0; i < dataArranew.length; i++) {
                                    //             try {
                                    //                 const newDatanewtask = new Checks(dataArranew[i]);
                                    //                 const savedData = await newDatanewtask.save();

                                    //                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                    //                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                    //                 // console.log(objID);
                                    //                 await SubActivities.updateOne(
                                    //                     { _id: newss },
                                    //                     {
                                    //                         $push: {
                                    //                             checksID: objID
                                    //                         }
                                    //                     }
                                    //                 )
                                    //                 // console.log('Data saved:', savedData);
                                    //             } catch (error) {
                                    //                 // console.error('Error saving data:', error);
                                    //             }
                                    //         }
                                    //     }
                                    //     backfillingchChacks();
                                    // }



                                    // if (newDatanew.subactivityname === "Filling Work in Gaps") {

                                    //     const dataArranew = [
                                    //         { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                    //         { subtaskdescription: 'Calculate the quantity of backfilling material and ask the purchase manager to arrange it' },
                                    //         { subtaskdescription: 'Assign the labour and Contractor for the backfilling' },
                                    //         { subtaskdescription: 'Make the arrangements for water' },
                                    //         { subtaskdescription: 'Arrange the rammer at site ' },
                                    //         { subtaskdescription: 'Inform the contractor about the filling procedure' },
                                    //         { subtaskdescription: 'Ask the contractor to remove the debris if any from the filling material' },
                                    //         { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                    //         { subtaskdescription: 'Ask the contractor to mark the top level of filling in each section i.e, which area will be down or up' },
                                    //         { subtaskdescription: 'Ask the contractor not to fill the layers more than 300mm' },
                                    //         { subtaskdescription: 'Ask the contractor for watering the filling material' },
                                    //         { subtaskdescription: 'Ask the contractor for proper compaction' },
                                    //         { subtaskdescription: 'Ask the contractor to give the final level in compaction and 6mm Aggreagte to be laid so that the grade slab work can be carried out directly' },
                                    //     ];

                                    //     async function BackFillingfunCall() {
                                    //         for (let i = 0; i < dataArranew.length; i++) {
                                    //             try {
                                    //                 const newDatanewtask = new Subtask(dataArranew[i]);
                                    //                 const savedData = await newDatanewtask.save();

                                    //                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                    //                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                    //                 // console.log(objID);
                                    //                 await SubActivities.updateOne(
                                    //                     { _id: newss },
                                    //                     {
                                    //                         $push: {
                                    //                             subtaskID: objID
                                    //                         }
                                    //                     }
                                    //                 )
                                    //                 // console.log('Data saved:', savedData);
                                    //             } catch (error) {
                                    //                 // console.error('Error saving data:', error);
                                    //             }
                                    //         }
                                    //     }
                                    //     BackFillingfunCall();
                                    // }







                                    if (newDatanew.subactivityname === "Filling Work") {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Deshuttering check', checksdescription: 'All the concrete structures like footings, columns, plinth beams, etc. should be completed with de-shuttering of the formwork, removal of stagings, etc.' },
                                            { checksHeading: 'Honeycombing repair check', checksdescription: 'All the honeycomb in the structures should be repaired before doing the plinth filling.' },
                                            { checksHeading: 'Masonry and Plaster check', checksdescription: 'All the plinth masonry work should be completed with the internal plaster, or by filling the leftover joints in a proper way.' },
                                            { checksHeading: 'Curing check', checksdescription: 'Before doing filling, ensure that all the concrete structures and masonry works have completed their minimal curing period. It should be properly set, attaining its design ' },
                                            { checksHeading: 'Leftover formwork Check', checksdescription: 'The plinth area and footing pit should be checked for any leftover formwork materials and should be removed before filling. ' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Any organic matter, wooden logs, plant roots, etc. should be cleaned, as they form voids after decay, causing settlement in the filling, due to weak compaction. ' },
                                            { checksHeading: 'Water Check', checksdescription: 'If there is any water in the pit, trenches, and plinth areas, it should be drained out.' },
                                            { checksHeading: 'Material check', checksdescription: 'The construction soil (moorum) should be free from organic matter, plant roots, clay lumps, chemicals, etc. The soil should be granular in structure, with a reddish-brown' },
                                            { checksHeading: 'Soil Check', checksdescription: 'If the soil excavated from the footing pit is black cotton, it should be removed completely and strictly avoided from refilling.' },
                                            { checksHeading: 'Top level check', checksdescription: 'Top level of filling has been marked' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Filling Layers Check', checksdescription: 'Construction soil should be spread in layers of 15 to 20cm. thickness, if you are using manual rammers, and it can be filled up to 30cm in thickness for the mechanical ' },
                                            { checksHeading: 'Layer Check', checksdescription: 'In any case, you should not fill the soil layer above 30cm depth, to achieve good compaction of the soil.' },
                                            { checksHeading: 'Watering Check', checksdescription: 'After completing the first layer of spreading, sprinkled with water to attain optimum moisture content, so that we can achieve the maximum dry density of soil after ' },
                                            { checksHeading: 'Ramming check', checksdescription: 'The ramming should be done from one end, covering all the areas. It is always advisable to use mechanical compactors, as the work carried out will be more efficient.' },
                                        ];

                                        async function backfillingchChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        backfillingchChacks();
                                    }



                                    if (newDatanew.subactivityname === "Filling Work") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Calculate the quantity of backfilling material and ask the purchase manager to arrange it' },
                                            { subtaskdescription: 'Assign the labour and Contractor for the backfilling' },
                                            { subtaskdescription: 'Make the arrangements for water' },
                                            { subtaskdescription: 'Arrange the rammer at site ' },
                                            { subtaskdescription: 'Inform the contractor about the filling procedure' },
                                            { subtaskdescription: 'Ask the contractor to remove the debris if any from the filling material' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the contractor to mark the top level of filling in each section i.e, which area will be down or up' },
                                            { subtaskdescription: 'Ask the contractor not to fill the layers more than 300mm' },
                                            { subtaskdescription: 'Ask the contractor for watering the filling material' },
                                            { subtaskdescription: 'Ask the contractor for proper compaction' },
                                            { subtaskdescription: 'Ask the contractor to give the final level in compaction and 6mm Aggreagte to be laid so that the grade slab work can be carried out directly' },
                                        ];

                                        async function BackFillingfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BackFillingfunCall();
                                    }



























                                    // if (newDatanew.subactivityname === "PCC Below Beam") {

                                    //     const dataArranew = [
                                    //         { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                    //         { checksHeading: 'Compaction Check', checksdescription: 'Check if the loose material is properly compacted and ready for PCC' },
                                    //         { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                    //         { checksHeading: 'Ratio Check', checksdescription: 'Check if the ratio of the concrete used in PCC as per the specifications' },
                                    //         { checksHeading: 'Height Check', checksdescription: 'Check for pouring height.' },
                                    //         { checksHeading: 'Finishing Check', checksdescription: 'Check if the top surface is properly finished and kept rough enough' },
                                    //         { checksHeading: 'Compaction Check', checksdescription: 'Check for ramming and compaction of PCC with proper tools.' },
                                    //     ];

                                    //     async function pccworkchChacks() {
                                    //         for (let i = 0; i < dataArranew.length; i++) {
                                    //             try {
                                    //                 const newDatanewtask = new Checks(dataArranew[i]);
                                    //                 const savedData = await newDatanewtask.save();

                                    //                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                    //                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                    //                 // console.log(objID);
                                    //                 await SubActivities.updateOne(
                                    //                     { _id: newss },
                                    //                     {
                                    //                         $push: {
                                    //                             checksID: objID
                                    //                         }
                                    //                     }
                                    //                 )
                                    //                 // console.log('Data saved:', savedData);
                                    //             } catch (error) {
                                    //                 // console.error('Error saving data:', error);
                                    //             }
                                    //         }
                                    //     }
                                    //     pccworkchChacks();
                                    // }

                                    // if (newDatanew.subactivityname === "PCC Below Beam") {

                                    //     const dataArranew = [
                                    //         {},
                                    //         { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Bottom Lvl.', NormalHeadingThree: 'Cast | Laid', NormalHeadingfoure: 'Final Chk.' },
                                    //         {},
                                    //         {},
                                    //         {},
                                    //         {},
                                    //     ];

                                    //     async function RccsnagsSnags() {
                                    //         for (let i = 0; i < dataArranew.length; i++) {
                                    //             try {
                                    //                 const newDatanewtask = new Snags(dataArranew[i]);
                                    //                 const savedData = await newDatanewtask.save();

                                    //                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                    //                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                    //                 // console.log(objID);
                                    //                 await SubActivities.updateOne(
                                    //                     { _id: newss },
                                    //                     {
                                    //                         $push: {
                                    //                             snagsID: objID
                                    //                         }
                                    //                     }
                                    //                 )
                                    //                 // console.log('Data saved:', savedData);
                                    //             } catch (error) {
                                    //                 // console.error('Error saving data:', error);
                                    //             }
                                    //         }
                                    //     }
                                    //     RccsnagsSnags();
                                    // }


                                    if (newDatanew.subactivityname === "Brick Work along the Plinth") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Brick Work', headingforshortingTwo: 'Bottom', headingforshortingThree: 'Sides' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Base Line', NormalHeadingThree: 'Brick Work', NormalHeadingfoure: 'PCC Finish' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Bottom', NormalHeadingThree: 'Straight C.' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Size Fix', NormalHeadingThree: 'Straight C.' },
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }

                                    // if (newDatanew.subactivityname === "PCC Below Beam") {

                                    //     const dataArranew = [
                                    //         { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                    //         { subtaskdescription: 'Material Calculation as per Task' },
                                    //         { subtaskdescription: 'Ask the procurement manager to arrange the materials required for PCC' },
                                    //         { subtaskdescription: 'Assign the contractor and labour for the pcc work' },
                                    //         { subtaskdescription: 'Ask the contractor to arrange to concrete mixer , vibrator and Diesel' },
                                    //         { subtaskdescription: 'Make the water arrangements' },
                                    //         { subtaskdescription: 'Ask the contractor to arrange the required shuttering' },
                                    //         { subtaskdescription: 'Aks the contractor to arrange the finishing tools and tools for centreline' },
                                    //         { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                    //         { subtaskdescription: 'Inform the contractor about the concrete mix ratio which is to be used' },
                                    //         { subtaskdescription: 'Ask the contractor to mark proper centreline' },
                                    //     ];

                                    //     async function PCCWorkfuncall() {
                                    //         for (let i = 0; i < dataArranew.length; i++) {
                                    //             try {
                                    //                 const newDatanewtask = new Subtask(dataArranew[i]);
                                    //                 const savedData = await newDatanewtask.save();

                                    //                 let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                    //                 let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                    //                 // console.log(objID);
                                    //                 await SubActivities.updateOne(
                                    //                     { _id: newss },
                                    //                     {
                                    //                         $push: {
                                    //                             subtaskID: objID
                                    //                         }
                                    //                     }
                                    //                 )
                                    //                 // console.log('Data saved:', savedData);
                                    //             } catch (error) {
                                    //                 // console.error('Error saving data:', error);
                                    //             }
                                    //         }
                                    //     }
                                    //     PCCWorkfuncall();
                                    // }



















                                    await Activities.updateOne(
                                        { _id: newss },
                                        {
                                            $push: {
                                                subactivitiesID: objID
                                            }
                                        }
                                    )
                                    // console.log('Data saved:', savedData);
                                } catch (error) {
                                    // console.error('Error saving data:', error);
                                }
                            }
                        }
                        miscellenousCalling();
                    }










                    if (newData.categoryname === "Column, Beam & Slab RCC Work") {
                        const dataArranew = [
                            { subactivityname: 'GF Column Reinforcement', activityID: newData._id, projectID: objectproID, estimateDays: gfColumnReinforcement_ESTD, TempID: 0 },
                            { subactivityname: 'GF RCC Column', activityID: newData._id, projectID: objectproID, estimateDays: gfRCCColumn_ESTD, TempID: 0 },
                            { subactivityname: 'GF Brick Work', activityID: newData._id, projectID: objectproID, estimateDays: gfBrickWork_ESTD, TempID: 0 },
                            { subactivityname: 'GF Slab Shuttering', activityID: newData._id, projectID: objectproID, estimateDays: gfSlabShuttering_ESTD, TempID: 0 },
                            { subactivityname: 'GF Slab Reinforcement', activityID: newData._id, projectID: objectproID, estimateDays: gfSlabReinforcement_ESTD, TempID: 0 },
                            { subactivityname: 'GF Slab Electrical Conducting', activityID: newData._id, projectID: objectproID, estimateDays: 1, TempID: 0 },
                            { subactivityname: 'GF RCC Slab', activityID: newData._id, projectID: objectproID, estimateDays: gfRCCSlab_ESTD, TempID: 0 },

                            { subactivityname: 'FF Column Reinforcement', activityID: newData._id, projectID: objectproID, estimateDays: FfColumnReinforcement_ESTD, TempID: 1 },
                            { subactivityname: 'FF RCC Column', activityID: newData._id, projectID: objectproID, estimateDays: FfRCCColumn_ESTD, TempID: 1 },
                            { subactivityname: 'FF Brick Work', activityID: newData._id, projectID: objectproID, estimateDays: FfBrickWork_ESTD, TempID: 1 },
                            { subactivityname: 'FF Slab Shuttering', activityID: newData._id, projectID: objectproID, estimateDays: FfSlabShuttering_ESTD, TempID: 1 },
                            { subactivityname: 'FF Slab Reinforcement', activityID: newData._id, projectID: objectproID, estimateDays: FfSlabReinforcement_ESTD, TempID: 1 },
                            { subactivityname: 'FF Slab Electrical Conducting', activityID: newData._id, projectID: objectproID, estimateDays: 1, TempID: 1 },
                            { subactivityname: 'FF RCC Slab', activityID: newData._id, projectID: objectproID, estimateDays: FfRCCSlab_ESTD, TempID: 1 },

                            { subactivityname: 'SF Column Reinforcement', activityID: newData._id, projectID: objectproID, estimateDays: SfColumnReinforcement_ESTD, TempID: 2 },
                            { subactivityname: 'SF RCC Column', activityID: newData._id, projectID: objectproID, estimateDays: SfRCCColumn_ESTD, TempID: 2 },
                            { subactivityname: 'SF Brick Work', activityID: newData._id, projectID: objectproID, estimateDays: SfBrickWork_ESTD, TempID: 2 },
                            { subactivityname: 'SF Slab Shuttering', activityID: newData._id, projectID: objectproID, estimateDays: SfSlabShuttering_ESTD, TempID: 2 },
                            { subactivityname: 'SF Slab Reinforcement', activityID: newData._id, projectID: objectproID, estimateDays: SfSlabReinforcement_ESTD, TempID: 2 },
                            { subactivityname: 'SF Slab Electrical Conducting', activityID: newData._id, projectID: objectproID, estimateDays: 1, TempID: 2 },
                            { subactivityname: 'SF RCC Slab', activityID: newData._id, projectID: objectproID, estimateDays: SfRCCSlab_ESTD, TempID: 2 },

                            { subactivityname: 'TF Column Reinforcement', activityID: newData._id, projectID: objectproID, estimateDays: TfColumnReinforcement_ESTD, TempID: 3 },
                            { subactivityname: 'TF RCC Column', activityID: newData._id, projectID: objectproID, estimateDays: TfRCCColumn_ESTD, TempID: 3 },
                            { subactivityname: 'TF Brick Work', activityID: newData._id, projectID: objectproID, estimateDays: TfBrickWork_ESTD, TempID: 3 },
                            { subactivityname: 'TF Slab Shuttering', activityID: newData._id, projectID: objectproID, estimateDays: TfSlabShuttering_ESTD, TempID: 3 },
                            { subactivityname: 'TF Slab Reinforcement', activityID: newData._id, projectID: objectproID, estimateDays: TfSlabReinforcement_ESTD, TempID: 3 },
                            { subactivityname: 'TF Slab Electrical Conducting', activityID: newData._id, projectID: objectproID, estimateDays: 1, TempID: 3 },
                            { subactivityname: 'TF RCC Slab', activityID: newData._id, projectID: objectproID, estimateDays: TfRCCSlab_ESTD, TempID: 3 },

                            { subactivityname: 'FoF Column Reinforcement', activityID: newData._id, projectID: objectproID, estimateDays: FofColumnReinforcement_ESTD, TempID: 4 },
                            { subactivityname: 'FoF RCC Column', activityID: newData._id, projectID: objectproID, estimateDays: FofRCCColumn_ESTD, TempID: 4 },
                            { subactivityname: 'FoF Brick Work', activityID: newData._id, projectID: objectproID, estimateDays: FofBrickWork_ESTD, TempID: 4 },
                            { subactivityname: 'FoF Slab Shuttering', activityID: newData._id, projectID: objectproID, estimateDays: FofSlabShuttering_ESTD, TempID: 4 },
                            { subactivityname: 'FoF Slab Reinforcement', activityID: newData._id, projectID: objectproID, estimateDays: FofSlabReinforcement_ESTD, TempID: 4 },
                            { subactivityname: 'FoF Slab Electrical Conducting', activityID: newData._id, projectID: objectproID, estimateDays: 1, TempID: 4 },
                            { subactivityname: 'FoF RCC Slab', activityID: newData._id, projectID: objectproID, estimateDays: FofRCCSlab_ESTD, TempID: 4 },

                            { subactivityname: 'Tower Column Reinforcement', activityID: newData._id, projectID: objectproID, estimateDays: TowerColumnReinforcement_ESTD },
                            { subactivityname: 'Tower RCC Column', activityID: newData._id, projectID: objectproID, estimateDays: TowerRCCColumn_ESTD },
                            { subactivityname: 'Tower Brick Work', activityID: newData._id, projectID: objectproID, estimateDays: TowerBrickWork_ESTD },
                            { subactivityname: 'Tower Slab Shuttering', activityID: newData._id, projectID: objectproID, estimateDays: TowerSlabShuttering_ESTD },
                            { subactivityname: 'Tower Slab Reinforcement', activityID: newData._id, projectID: objectproID, estimateDays: TowerSlabReinforcement_ESTD },
                            { subactivityname: 'Tower Slab Electrical Conducting', activityID: newData._id, projectID: objectproID, estimateDays: 1 },
                            { subactivityname: 'Tower RCC Slab', activityID: newData._id, projectID: objectproID, estimateDays: TowerRCCSlab_ESTD },

                        ];

                        async function miscellenousCalling() {
                            for (let i = 0; i < dataArranew.length; i++) {
                                if (dataArranew[i].TempID === 1 && NumbersOfFlorrs < 1 || dataArranew[i].TempID === 2 && NumbersOfFlorrs < 2 || dataArranew[i].TempID === 3 && NumbersOfFlorrs < 3 || dataArranew[i].TempID === 4 && NumbersOfFlorrs < 4) {
                                    continue; // Skip this iteration
                                }
                                try {
                                    const newDatanew = new SubActivities(dataArranew[i]);
                                    const savedData = await newDatanew.save();

                                    let objID = new mongoose.Types.ObjectId(newDatanew.id)
                                    let newss = new mongoose.Types.ObjectId(newData._id)
                                    // console.log(objID);



                                    if (newDatanew.subactivityname === 'GF Slab Electrical Conducting') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1  Slab Conduting', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Assign the electrician been for the work' },
                                            { subtaskdescription: 'Explain the electrician  all the work with the  drawings' },
                                            { subtaskdescription: 'Ask the electrician to have a initial review and check if any interdepencies occur' },
                                            { subtaskdescription: 'Take the quantity of materials from the electrician and give to purchase manager' },
                                            { subtaskdescription: 'Ask the purchase manager to arrange the materials on site' },
                                            { subtaskdescription: 'Indicate for the electrical lines, locations of DB,Fan box ,etc to the electrician' },
                                            { subtaskdescription: 'Ask the electrician to check the centre of the fan hook' },
                                            { subtaskdescription: 'Ask the RCC contractor not to damage the electrical conduits while concreting' },
                                        ];

                                        async function ElectricalfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        ElectricalfunCall();
                                    }

                                    //Anuj//
                                    if (newDatanew.subactivityname === 'GF Slab Electrical Conducting') {

                                        const dataArranew = [
                                            { checksHeading: 'Drawing Check', checksdescription: 'Check the electrical conduting layout as per the drawing' },
                                            { checksHeading: 'Layout check', checksdescription: 'Check the actual layout of the conduting in the slab for bill preparation and record purposes.' },
                                            { checksHeading: 'Location Check', checksdescription: 'Check the center of the fan hook box diagonally for center alignment, considering the loft position in the room.' },
                                            { checksHeading: 'Fixing Check', checksdescription: 'A bonding solution should be applied to all the pipes and accessories, to avoid the loose fixing of pipes with accessories.' },
                                            { checksHeading: 'Tieing check', checksdescription: 'Tie the conduits, using binding wire, to each other, and to the slab steel.' },
                                            { checksHeading: 'Conduit safety check', checksdescription: 'Ensure that conduits do not get damaged with the movement of the laborers on the slab.' },
                                            { checksHeading: 'Fan box check', checksdescription: 'Ensure that the fan box entries/holes are intact to prevent the cement slurry from entering.' },
                                        ];

                                        async function ElectricalChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        ElectricalChacks();
                                    }


                                    if (newDatanew.subactivityname === "GF Slab Electrical Conducting") {

                                        const dataArranew = [
                                            {},
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Fan', NormalHeadingThree: 'Light', NormalHeadingfoure: 'Connectio.' },
                                            {},
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }



                                    if (newDatanew.subactivityname === 'FF Slab Electrical Conducting') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1  Slab Conduting', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Assign the electrician been for the work' },
                                            { subtaskdescription: 'Explain the electrician  all the work with the  drawings' },
                                            { subtaskdescription: 'Ask the electrician to have a initial review and check if any interdepencies occur' },
                                            { subtaskdescription: 'Take the quantity of materials from the electrician and give to purchase manager' },
                                            { subtaskdescription: 'Ask the purchase manager to arrange the materials on site' },
                                            { subtaskdescription: 'Indicate for the electrical lines, locations of DB,Fan box ,etc to the electrician' },
                                            { subtaskdescription: 'Ask the electrician to check the centre of the fan hook' },
                                            { subtaskdescription: 'Ask the RCC contractor not to damage the electrical conduits while concreting' },
                                        ];

                                        async function ElectricalfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        ElectricalfunCall();
                                    }

                                    //Anuj//
                                    if (newDatanew.subactivityname === 'FF Slab Electrical Conducting') {

                                        const dataArranew = [
                                            { checksHeading: 'Drawing Check', checksdescription: 'Check the electrical conduting layout as per the drawing' },
                                            { checksHeading: 'Layout check', checksdescription: 'Check the actual layout of the conduting in the slab for bill preparation and record purposes.' },
                                            { checksHeading: 'Location Check', checksdescription: 'Check the center of the fan hook box diagonally for center alignment, considering the loft position in the room.' },
                                            { checksHeading: 'Fixing Check', checksdescription: 'A bonding solution should be applied to all the pipes and accessories, to avoid the loose fixing of pipes with accessories.' },
                                            { checksHeading: 'Tieing check', checksdescription: 'Tie the conduits, using binding wire, to each other, and to the slab steel.' },
                                            { checksHeading: 'Conduit safety check', checksdescription: 'Ensure that conduits do not get damaged with the movement of the laborers on the slab.' },
                                            { checksHeading: 'Fan box check', checksdescription: 'Ensure that the fan box entries/holes are intact to prevent the cement slurry from entering.' },
                                        ];

                                        async function ElectricalChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        ElectricalChacks();
                                    }


                                    if (newDatanew.subactivityname === "FF Slab Electrical Conducting") {

                                        const dataArranew = [
                                            {},
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Fan', NormalHeadingThree: 'Light', NormalHeadingfoure: 'Connectio.' },
                                            {},
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }




                                    if (newDatanew.subactivityname === 'SF Slab Electrical Conducting') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1  Slab Conduting', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Assign the electrician been for the work' },
                                            { subtaskdescription: 'Explain the electrician  all the work with the  drawings' },
                                            { subtaskdescription: 'Ask the electrician to have a initial review and check if any interdepencies occur' },
                                            { subtaskdescription: 'Take the quantity of materials from the electrician and give to purchase manager' },
                                            { subtaskdescription: 'Ask the purchase manager to arrange the materials on site' },
                                            { subtaskdescription: 'Indicate for the electrical lines, locations of DB,Fan box ,etc to the electrician' },
                                            { subtaskdescription: 'Ask the electrician to check the centre of the fan hook' },
                                            { subtaskdescription: 'Ask the RCC contractor not to damage the electrical conduits while concreting' },
                                        ];

                                        async function ElectricalfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        ElectricalfunCall();
                                    }

                                    //Anuj//
                                    if (newDatanew.subactivityname === 'SF Slab Electrical Conducting') {

                                        const dataArranew = [
                                            { checksHeading: 'Drawing Check', checksdescription: 'Check the electrical conduting layout as per the drawing' },
                                            { checksHeading: 'Layout check', checksdescription: 'Check the actual layout of the conduting in the slab for bill preparation and record purposes.' },
                                            { checksHeading: 'Location Check', checksdescription: 'Check the center of the fan hook box diagonally for center alignment, considering the loft position in the room.' },
                                            { checksHeading: 'Fixing Check', checksdescription: 'A bonding solution should be applied to all the pipes and accessories, to avoid the loose fixing of pipes with accessories.' },
                                            { checksHeading: 'Tieing check', checksdescription: 'Tie the conduits, using binding wire, to each other, and to the slab steel.' },
                                            { checksHeading: 'Conduit safety check', checksdescription: 'Ensure that conduits do not get damaged with the movement of the laborers on the slab.' },
                                            { checksHeading: 'Fan box check', checksdescription: 'Ensure that the fan box entries/holes are intact to prevent the cement slurry from entering.' },
                                        ];

                                        async function ElectricalChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        ElectricalChacks();
                                    }



                                    if (newDatanew.subactivityname === "SF Slab Electrical Conducting") {

                                        const dataArranew = [
                                            {},
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Fan', NormalHeadingThree: 'Light', NormalHeadingfoure: 'Connectio.' },
                                            {},
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }





                                    if (newDatanew.subactivityname === 'TF Slab Electrical Conducting') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1  Slab Conduting', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Assign the electrician been for the work' },
                                            { subtaskdescription: 'Explain the electrician  all the work with the  drawings' },
                                            { subtaskdescription: 'Ask the electrician to have a initial review and check if any interdepencies occur' },
                                            { subtaskdescription: 'Take the quantity of materials from the electrician and give to purchase manager' },
                                            { subtaskdescription: 'Ask the purchase manager to arrange the materials on site' },
                                            { subtaskdescription: 'Indicate for the electrical lines, locations of DB,Fan box ,etc to the electrician' },
                                            { subtaskdescription: 'Ask the electrician to check the centre of the fan hook' },
                                            { subtaskdescription: 'Ask the RCC contractor not to damage the electrical conduits while concreting' },
                                        ];

                                        async function ElectricalfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        ElectricalfunCall();
                                    }

                                    //Anuj//
                                    if (newDatanew.subactivityname === 'TF Slab Electrical Conducting') {

                                        const dataArranew = [
                                            { checksHeading: 'Drawing Check', checksdescription: 'Check the electrical conduting layout as per the drawing' },
                                            { checksHeading: 'Layout check', checksdescription: 'Check the actual layout of the conduting in the slab for bill preparation and record purposes.' },
                                            { checksHeading: 'Location Check', checksdescription: 'Check the center of the fan hook box diagonally for center alignment, considering the loft position in the room.' },
                                            { checksHeading: 'Fixing Check', checksdescription: 'A bonding solution should be applied to all the pipes and accessories, to avoid the loose fixing of pipes with accessories.' },
                                            { checksHeading: 'Tieing check', checksdescription: 'Tie the conduits, using binding wire, to each other, and to the slab steel.' },
                                            { checksHeading: 'Conduit safety check', checksdescription: 'Ensure that conduits do not get damaged with the movement of the laborers on the slab.' },
                                            { checksHeading: 'Fan box check', checksdescription: 'Ensure that the fan box entries/holes are intact to prevent the cement slurry from entering.' },
                                        ];

                                        async function ElectricalChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        ElectricalChacks();
                                    }



                                    if (newDatanew.subactivityname === "TF Slab Electrical Conducting") {

                                        const dataArranew = [
                                            {},
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Fan', NormalHeadingThree: 'Light', NormalHeadingfoure: 'Connectio.' },
                                            {},
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }




                                    if (newDatanew.subactivityname === 'FoF Slab Electrical Conducting') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1  Slab Conduting', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Assign the electrician been for the work' },
                                            { subtaskdescription: 'Explain the electrician  all the work with the  drawings' },
                                            { subtaskdescription: 'Ask the electrician to have a initial review and check if any interdepencies occur' },
                                            { subtaskdescription: 'Take the quantity of materials from the electrician and give to purchase manager' },
                                            { subtaskdescription: 'Ask the purchase manager to arrange the materials on site' },
                                            { subtaskdescription: 'Indicate for the electrical lines, locations of DB,Fan box ,etc to the electrician' },
                                            { subtaskdescription: 'Ask the electrician to check the centre of the fan hook' },
                                            { subtaskdescription: 'Ask the RCC contractor not to damage the electrical conduits while concreting' },
                                        ];

                                        async function ElectricalfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        ElectricalfunCall();
                                    }

                                    //Anuj//
                                    if (newDatanew.subactivityname === 'FoF Slab Electrical Conducting') {

                                        const dataArranew = [
                                            { checksHeading: 'Drawing Check', checksdescription: 'Check the electrical conduting layout as per the drawing' },
                                            { checksHeading: 'Layout check', checksdescription: 'Check the actual layout of the conduting in the slab for bill preparation and record purposes.' },
                                            { checksHeading: 'Location Check', checksdescription: 'Check the center of the fan hook box diagonally for center alignment, considering the loft position in the room.' },
                                            { checksHeading: 'Fixing Check', checksdescription: 'A bonding solution should be applied to all the pipes and accessories, to avoid the loose fixing of pipes with accessories.' },
                                            { checksHeading: 'Tieing check', checksdescription: 'Tie the conduits, using binding wire, to each other, and to the slab steel.' },
                                            { checksHeading: 'Conduit safety check', checksdescription: 'Ensure that conduits do not get damaged with the movement of the laborers on the slab.' },
                                            { checksHeading: 'Fan box check', checksdescription: 'Ensure that the fan box entries/holes are intact to prevent the cement slurry from entering.' },
                                        ];

                                        async function ElectricalChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        ElectricalChacks();
                                    }


                                    if (newDatanew.subactivityname === "FoF Slab Electrical Conducting") {

                                        const dataArranew = [
                                            {},
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Fan', NormalHeadingThree: 'Light', NormalHeadingfoure: 'Connectio.' },
                                            {},
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }


                                    if (newDatanew.subactivityname === 'Tower Slab Electrical Conducting') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1  Slab Conduting', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Assign the electrician been for the work' },
                                            { subtaskdescription: 'Explain the electrician  all the work with the  drawings' },
                                            { subtaskdescription: 'Ask the electrician to have a initial review and check if any interdepencies occur' },
                                            { subtaskdescription: 'Take the quantity of materials from the electrician and give to purchase manager' },
                                            { subtaskdescription: 'Ask the purchase manager to arrange the materials on site' },
                                            { subtaskdescription: 'Indicate for the electrical lines, locations of DB,Fan box ,etc to the electrician' },
                                            { subtaskdescription: 'Ask the electrician to check the centre of the fan hook' },
                                            { subtaskdescription: 'Ask the RCC contractor not to damage the electrical conduits while concreting' },
                                        ];

                                        async function ElectricalfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        ElectricalfunCall();
                                    }

                                    //Anuj//
                                    if (newDatanew.subactivityname === 'Tower Slab Electrical Conducting') {

                                        const dataArranew = [
                                            { checksHeading: 'Drawing Check', checksdescription: 'Check the electrical conduting layout as per the drawing' },
                                            { checksHeading: 'Layout check', checksdescription: 'Check the actual layout of the conduting in the slab for bill preparation and record purposes.' },
                                            { checksHeading: 'Location Check', checksdescription: 'Check the center of the fan hook box diagonally for center alignment, considering the loft position in the room.' },
                                            { checksHeading: 'Fixing Check', checksdescription: 'A bonding solution should be applied to all the pipes and accessories, to avoid the loose fixing of pipes with accessories.' },
                                            { checksHeading: 'Tieing check', checksdescription: 'Tie the conduits, using binding wire, to each other, and to the slab steel.' },
                                            { checksHeading: 'Conduit safety check', checksdescription: 'Ensure that conduits do not get damaged with the movement of the laborers on the slab.' },
                                            { checksHeading: 'Fan box check', checksdescription: 'Ensure that the fan box entries/holes are intact to prevent the cement slurry from entering.' },
                                        ];

                                        async function ElectricalChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        ElectricalChacks();
                                    }



                                    if (newDatanew.subactivityname === "Tower Slab Electrical Conducting") {

                                        const dataArranew = [
                                            {},
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Fan', NormalHeadingThree: 'Light', NormalHeadingfoure: 'Connectio.' },
                                            {},
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }

                                    if (newDatanew.subactivityname === "GF Column Reinforcement") {

                                        const dataArranew = [
                                            // { floorsequence: 'Bas 1' },
                                            // { floorsequence: 'Bas 2' },
                                            // { floorsequence: 'Bas 3' },
                                            // { floorsequence: 'Bas 4' },
                                            { floorsequence: 'Ground' },
                                            { floorsequence: '1st', TempID: 1 },
                                            { floorsequence: '2nd', TempID: 2 },
                                            { floorsequence: '3rd', TempID: 3 },
                                            { floorsequence: '4th', TempID: 4 },
                                            { floorsequence: 'Tower' },

                                        ];




                                        async function floorCreateFunction() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                if (dataArranew[i].TempID === 1 && NumbersOfFlorrs < 1 || dataArranew[i].TempID === 2 && NumbersOfFlorrs < 2 || dataArranew[i].TempID === 3 && NumbersOfFlorrs < 3 || dataArranew[i].TempID === 4 && NumbersOfFlorrs < 4) {
                                                    continue; // Skip this iteration
                                                }
                                                try {
                                                    const newDatanewtask = new Projectspace(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)

                                                    // console.log(objID);
                                                    await Project.updateOne(
                                                        { _id: objectproID },
                                                        {
                                                            $push: {
                                                                projectspaceID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        floorCreateFunction();
                                    }



                                    if (newDatanew.subactivityname === "GF Column Reinforcement") {

                                        const dataArranew = [
                                            { materailname: 'Reinforcement', materailquantity: materlID.SSRGF_ReinforcementTMTReinforcementQuantity, materailUnit: 'KG' },
                                            { materailname: 'Binding Wire', materailquantity: materlID.SSRGF_ReinforcementTMTBindingWireQuantity, materailUnit: 'KG' },
                                            { materailname: 'Cover Block', materailquantity: materlID.SSRGF_ReinforcementTMTCoverBlockQuantity, materailUnit: 'NOS.' },

                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === "GF Column Reinforcement") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Column', headingforshortingTwo: 'Final Check' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Explain', NormalHeadingThree: 'Binding', NormalHeadingfoure: 'Placement' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Verticality', NormalHeadingThree: 'Grid Check', NormalHeadingfoure: 'Starter' },
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }


                                    if (newDatanew.subactivityname === "GF RCC Column") {

                                        const dataArranew = [
                                            { materailname: 'Stone Aggregate (20 MM)', materailquantity: materlID.SSRGF_FootingRCCStoneAggregate20MMQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Portland Cement', materailquantity: materlID.SSRGF_FootingRCCPortlandCementQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Course Sand', materailquantity: materlID.SSRGF_FootingRCCCourseSandQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Admixture - Waterproof', materailquantity: materlID.SSRGF_FootingRCCAdmixtureWaterproofQuantity, materailUnit: 'Litre' },
                                            { materailname: 'RMC', materailquantity: materlID.SSRGF_FootingRCCRMCQuantity, materailUnit: 'CUM' },
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === "GF RCC Column") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Column', headingforshortingTwo: 'Honey Comb' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Starter', NormalHeadingThree: 'Shuttering', NormalHeadingfoure: 'Casting' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Verticality', NormalHeadingThree: 'Honey Co.', NormalHeadingfoure: 'Curing' },
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }

                                    if (newDatanew.subactivityname === "GF Brick Work") {

                                        const dataArranew = [
                                            { materailname: 'Common Burnt Clay (7.5 D)', materailquantity: materlID.SSRGF_BrickWorkCommonBurntClay75DQuantity, materailUnit: 'NOS' },
                                            { materailname: 'Portland Cement', materailquantity: materlID.SSRGF_BrickWorkPortlandCementQuantity, materailUnit: 'KG' },
                                            { materailname: 'Course Sand', materailquantity: materlID.SSRGF_BrickWorkCourseSandQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Stone Aggregate (20 MM)', materailquantity: materlID.SSRGF_BrickWorkStoneAggregate20MMQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Autoclaved aerated cement (AAC)', materailquantity: materlID.SSRGF_BrickWorkAutoclavedAeratedCementAACQuantity, materailUnit: 'CUM' },
                                            { materailname: 'Polymer modified adhesive mortar', materailquantity: materlID.SSRGF_BrickWorkPolymerModifiedAdhesiveMortarQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Reinforcement', materailquantity: materlID.SSRGF_BrickWorkReinforcementQuantity, materailUnit: 'KG' },
                                            { materailname: 'Door Frame', materailquantity: materlID.SSRGF_BrickWorkDoorFrameQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Window frame', materailquantity: materlID.SSRGF_SlabShutteringWorkBeamBottomShutteringQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'MS Door & Window Frame', materailquantity: materlID.SSRGF_SlabShutteringWorkBeamSideShutteringQuantity, materailUnit: 'KG' },
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }





                                    if (newDatanew.subactivityname === "GF Slab Shuttering") {

                                        const dataArranew = [
                                            { materailname: 'Beam Bottom Shuttering', materailquantity: materlID.SSRGF_SlabShutteringWorkBeamBottomShutteringQuantity, materailUnit: 'RUM' },
                                            { materailname: 'Beam Side Shuttering', materailquantity: materlID.SSRGF_SlabShutteringWorkBeamSideShutteringQuantity, materailUnit: 'RUM' },
                                            { materailname: 'Slab Shuttering', materailquantity: materlID.SSRGF_SlabShutteringWorkSlabShutteringQuantity, materailUnit: 'SQM' },
                                            { materailname: 'Balli for Support', materailquantity: materlID.SSRGF_SlabShutteringWorkBalliForSupportQuantity, materailUnit: 'PER BALLI' },
                                            { materailname: 'Shuttering Oil', materailquantity: materlID.SSRGF_SlabShutteringWorkShutteringOilQuantity, materailUnit: 'LITRE' },

                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === "GF Slab Shuttering") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Beam', headingforshortingTwo: 'Slab' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Explain Lvl.', NormalHeadingThree: 'Bottom', NormalHeadingfoure: 'Sides' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Plate : Gap', NormalHeadingThree: 'Support', NormalHeadingfoure: 'Cvr (O|T|P)' },
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }

                                    if (newDatanew.subactivityname === "GF Slab Reinforcement") {

                                        const dataArranew = [
                                            { materailname: 'Reinforcement', materailquantity: materlID.SSRGF_SlabBeamReinforcementReinforcementQuantity, materailUnit: 'KG' },
                                            { materailname: 'Binding Wire', materailquantity: materlID.SSRGF_SlabBeamReinforcementBindingWireQuantity, materailUnit: 'KG' },
                                            { materailname: 'Cover Block', materailquantity: materlID.SSRGF_SlabBeamReinforcementCoverBlockQuantity, materailUnit: 'NOS.' },

                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === "GF RCC Slab") {

                                        const dataArranew = [
                                            { materailname: 'Stone Aggregate (20 MM)', materailquantity: materlID.SSRGF_SlabBeamRCCStoneAggregate20MMQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Portland Cement', materailquantity: materlID.SSRGF_SlabBeamRCCPortlandCementQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Course Sand', materailquantity: materlID.SSRGF_SlabBeamRCCCourseSandQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Admixture - Waterproof', materailquantity: materlID.SSRGF_SlabBeamRCCAdmixtureWaterproofQuantity, materailUnit: 'Litre' },
                                            { materailname: 'RMC', materailquantity: materlID.SSRGF_SlabBeamRCCRMCQuantity, materailUnit: 'CUM' },
                                            { materailname: '25mm Conduit', materailquantity: materlID.SSRGF_SlabBeamRCCConduit25mmQuantity, materailUnit: 'RMT' },
                                            { materailname: '25 mm PVC couplers', materailquantity: materlID.SSRGF_SlabBeamRCCPVCcouplers25mmQuantity, materailUnit: 'NOS.' },
                                            { materailname: '25mm PVC bend', materailquantity: materlID.SSRGF_SlabBeamRCCPVCbend25mmQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Fan Box', materailquantity: materlID.SSRGF_SlabBeamRCCFanBoxQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Light Box', materailquantity: materlID.SSRGF_SlabBeamRCCLightBoxQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Tape', materailquantity: materlID.SSRGF_SlabBeamRCCTapeQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Connector', materailquantity: materlID.SSRGF_SlabBeamRCCConnectorQuantity, materailUnit: 'NOS.' },

                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }

                                    if (newDatanew.subactivityname === "GF RCC Slab") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Beam', headingforshortingTwo: 'Slab', headingforshortingThree: 'Details' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Casting', NormalHeadingThree: 'Straight', NormalHeadingfoure: 'Vibrator' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Casting', NormalHeadingThree: 'Vibrator', NormalHeadingfoure: 'Final Finish' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Honey Co.', NormalHeadingThree: 'Ponding', NormalHeadingfoure: 'Curing' },
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }


                                    if (newDatanew.subactivityname === "GF Column Reinforcement") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Ask the contractor  to tie the rebars properly as per the specifications' },
                                            { subtaskdescription: 'Ask the contractor  to check the column for verticality' },
                                            { subtaskdescription: 'Ask the contractor to place supports in the column' }
                                        ];

                                        async function BeamSlabShutteringReinforcementRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteringReinforcementRCCfunCall();
                                    }








                                    if (newDatanew.subactivityname === "FF Column Reinforcement") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Ask the contractor  to tie the rebars properly as per the specifications' },
                                            { subtaskdescription: 'Ask the contractor  to check the column for verticality' },
                                            { subtaskdescription: 'Ask the contractor to place supports in the column' }
                                        ];

                                        async function BeamSlabShutteringReinforcementRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteringReinforcementRCCfunCall();
                                    }






                                    if (newDatanew.subactivityname === "FF Column Reinforcement") {

                                        const dataArranew = [
                                            { materailname: 'Reinforcement', materailquantity: materlID.SSRFF_ReinforcementTMTReinforcementQuantity, materailUnit: 'KG' },
                                            { materailname: 'Binding Wire', materailquantity: materlID.SSRFF_ReinforcementTMTBindingWireQuantity, materailUnit: 'KG' },
                                            { materailname: 'Cover Block', materailquantity: materlID.SSRFF_ReinforcementTMTCoverBlockQuantity, materailUnit: 'NOS.' },

                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === "FF Column Reinforcement") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Column', headingforshortingTwo: 'Final Check' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Explain', NormalHeadingThree: 'Binding', NormalHeadingfoure: 'Placement' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Verticality', NormalHeadingThree: 'Grid Check', NormalHeadingfoure: 'Starter' },
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }


                                    if (newDatanew.subactivityname === "FF RCC Column") {

                                        const dataArranew = [
                                            { materailname: 'Stone Aggregate (20 MM)', materailquantity: materlID.SSRFF_FootingRCCStoneAggregate20MMQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Portland Cement', materailquantity: materlID.SSRFF_FootingRCCPortlandCementQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Course Sand', materailquantity: materlID.SSRFF_FootingRCCCourseSandQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Admixture - Waterproof', materailquantity: materlID.SSRFF_FootingRCCAdmixtureWaterproofQuantity, materailUnit: 'Litre' },
                                            { materailname: 'RMC', materailquantity: materlID.SSRFF_FootingRCCRMCQuantity, materailUnit: 'CUM' },
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === "FF RCC Column") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Column', headingforshortingTwo: 'Honey Comb' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Starter', NormalHeadingThree: 'Shuttering', NormalHeadingfoure: 'Casting' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Verticality', NormalHeadingThree: 'Honey Co.', NormalHeadingfoure: 'Curing' },
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }

                                    if (newDatanew.subactivityname === "FF Brick Work") {

                                        const dataArranew = [
                                            { materailname: 'Common Burnt Clay (7.5 D)', materailquantity: materlID.SSRFF_BrickWorkCommonBurntClay75DQuantity, materailUnit: 'NOS' },
                                            { materailname: 'Portland Cement', materailquantity: materlID.SSRFF_BrickWorkPortlandCementQuantity, materailUnit: 'KG' },
                                            { materailname: 'Course Sand', materailquantity: materlID.SSRFF_BrickWorkCourseSandQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Stone Aggregate (20 MM)', materailquantity: materlID.SSRFF_BrickWorkStoneAggregate20MMQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Autoclaved aerated cement (AAC)', materailquantity: materlID.SSRFF_BrickWorkAutoclavedAeratedCementAACQuantity, materailUnit: 'CUM' },
                                            { materailname: 'Polymer modified adhesive mortar', materailquantity: materlID.SSRFF_BrickWorkPolymerModifiedAdhesiveMortarQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Reinforcement', materailquantity: materlID.SSRFF_BrickWorkReinforcementQuantity, materailUnit: 'KG' },
                                            { materailname: 'Door Frame', materailquantity: materlID.SSRFF_BrickWorkDoorFrameQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Window frame', materailquantity: materlID.SSRFF_BrickWorkWindowFrameQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'MS Door & Window Frame', materailquantity: materlID.SSRFF_BrickWorkMSDoorWindowFrameQuantity, materailUnit: 'KG' },
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }






                                    if (newDatanew.subactivityname === "FF Slab Shuttering") {

                                        const dataArranew = [
                                            { materailname: 'Beam Bottom Shuttering', materailquantity: materlID.SSRFF_SlabShutteringWorkBeamBottomShutteringQuantity, materailUnit: 'RUM' },
                                            { materailname: 'Beam Side Shuttering', materailquantity: materlID.SSRFF_SlabShutteringWorkBeamSideShutteringQuantity, materailUnit: 'RUM' },
                                            { materailname: 'Slab Shuttering', materailquantity: materlID.SSRFF_SlabShutteringWorkSlabShutteringQuantity, materailUnit: 'SQM' },
                                            { materailname: 'Balli for Support', materailquantity: materlID.SSRFF_SlabShutteringWorkBalliForSupportQuantity, materailUnit: 'PER BALLI' },
                                            { materailname: 'Shuttering Oil', materailquantity: materlID.SSRFF_SlabShutteringWorkShutteringOilQuantity, materailUnit: 'LITRE' },

                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }



                                    if (newDatanew.subactivityname === "FF Slab Shuttering") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Beam', headingforshortingTwo: 'Slab' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Explain Lvl.', NormalHeadingThree: 'Bottom', NormalHeadingfoure: 'Sides' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Plate : Gap', NormalHeadingThree: 'Support', NormalHeadingfoure: 'Cvr (O|T|P)' },
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }


                                    if (newDatanew.subactivityname === "FF Slab Reinforcement") {

                                        const dataArranew = [
                                            { materailname: 'Reinforcement', materailquantity: materlID.SSRFF_SlabBeamReinforcementReinforcementQuantity, materailUnit: 'KG' },
                                            { materailname: 'Binding Wire', materailquantity: materlID.SSRFF_SlabBeamReinforcementBindingWireQuantity, materailUnit: 'KG' },
                                            { materailname: 'Cover Block', materailquantity: materlID.SSRFF_SlabBeamReinforcementCoverBlockQuantity, materailUnit: 'NOS.' },

                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }



                                    if (newDatanew.subactivityname === "FF Slab Reinforcement") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Beam', headingforshortingTwo: 'Slab', headingforshortingThree: 'Details' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Explain', NormalHeadingThree: 'Main/Extra', NormalHeadingfoure: 'Ring | Hook' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Explain', NormalHeadingThree: 'Spacing', NormalHeadingfoure: 'Chair/Bind' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'L - Bend', NormalHeadingThree: 'Lapping', NormalHeadingfoure: 'Develop. L' },
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }

                                    if (newDatanew.subactivityname === "FF RCC Slab") {

                                        const dataArranew = [
                                            { materailname: 'Stone Aggregate (20 MM)', materailquantity: materlID.SSRFF_SlabBeamRCCStoneAggregate20MMQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Portland Cement', materailquantity: materlID.SSRFF_SlabBeamRCCPortlandCementQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Course Sand', materailquantity: materlID.SSRFF_SlabBeamRCCCourseSandQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Admixture - Waterproof', materailquantity: materlID.SSRFF_SlabBeamRCCAdmixtureWaterproofQuantity, materailUnit: 'Litre' },
                                            { materailname: 'RMC', materailquantity: materlID.SSRFF_SlabBeamRCCRMCQuantity, materailUnit: 'CUM' },
                                            { materailname: '25mm Conduit', materailquantity: materlID.SSRFF_SlabBeamRCCConduit25mmQuantity, materailUnit: 'RMT' },
                                            { materailname: '25 mm PVC couplers', materailquantity: materlID.SSRFF_SlabBeamRCCPVCcouplers25mmQuantity, materailUnit: 'NOS.' },
                                            { materailname: '25mm PVC bend', materailquantity: materlID.SSRFF_SlabBeamRCCPVCbend25mmQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Fan Box', materailquantity: materlID.SSRFF_SlabBeamRCCFanBoxQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Light Box', materailquantity: materlID.SSRFF_SlabBeamRCCLightBoxQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Tape', materailquantity: materlID.SSRFF_SlabBeamRCCTapeQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Connector', materailquantity: materlID.SSRFF_SlabBeamRCCConnectorQuantity, materailUnit: 'NOS.' },

                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }







                                    if (newDatanew.subactivityname === "GF Slab Reinforcement") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Checking of reinforcement for Beams.', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the contractor to check the reinforcement  as per the drawing' },
                                            { subtaskdescription: 'Ask the contractor to do proper lapping,cover,bentup bar,pin bar and extra bars' },
                                            { subtaskdescription: 'Ask the contractor to provide the master ring and Dowel bars in slab' },
                                            { subtaskdescription: 'Decide the position of concrete joints in case of big slab after consulting & approval of R.C.C. Consultant.' },
                                            { subtaskdescription: 'Ask the contractor to make the arrangements for concrete mixer ,vibrator and Diesel' },
                                            { subtaskdescription: 'Calculate the material required for RCC and infrom the purchase manager' },
                                            { subtaskdescription: 'Ask the contractor to make the arrangments for concrete pouring' },
                                            { subtaskdescription: 'Ask the contractor to mark the top level of concrete' },
                                            { subtaskdescription: 'To be Checked Before Slab Casting - After Reinforcement Work is Done', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Contractor been assigned and informed that he would check all the reinforcement with the Engineer' },
                                            { subtaskdescription: 'Contractor been informed to minimise the wastage during cutting' },
                                        ];

                                        async function BeamSlabShutteringReinforcementRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteringReinforcementRCCfunCall();
                                    }











                                    if (newDatanew.subactivityname === "GF Slab Reinforcement") {

                                        const dataArranew = [
                                            { checksHeading: 'Checking of reinforcement for Beams.', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Rebars Check', checksdescription: 'Bottom bars, top bars, etra bars,bentup bars, stirrups, distance of bentup bars from face of supports, spacing of the stirrups as per R.C.C. drawing, proper tying of stirrups.etc' },
                                            { checksHeading: 'Dia of bar check', checksdescription: 'Diameter of bars, binding of stirrups in line.' },
                                            { checksHeading: 'Bentup Bar Check', checksdescription: 'Length of bentup bars projecting in the adjacent beams.' },
                                            { checksHeading: 'Bentup Bar Check', checksdescription: 'L for bentup at discontinuous end.' },
                                            { checksHeading: 'Cover check', checksdescription: 'Side covers & bottom covers for beams.' },
                                            { checksHeading: 'Pin bar Check', checksdescription: 'Pin is provided at required places between reinforcement.' },
                                            { checksHeading: 'Binding check', checksdescription: 'Proper binding of laps in beam if provided with required length.' },
                                            { checksHeading: 'Lapping check', checksdescription: 'Lapping of bars' },
                                            { checksHeading: 'Steel for slab', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Spacing check', checksdescription: 'Spacing, diameter of bent up bars & main bars.' },
                                            { checksHeading: 'Bentup bar check', checksdescription: 'Distance of bent ups from face of beamLength of bent up bars projecting in adjacent bays.Height of the bent up bars.' },
                                            { checksHeading: 'Chair bar check', checksdescription: 'Chair below  bent up bar.Covering for slab at bottom.' },
                                            { checksHeading: 'Binding check', checksdescription: 'Proper binding of laps of required length.Dowels of slab & beam.' },
                                            { checksHeading: 'Steel dia check', checksdescription: 'Distribution steel diameters, spacing & ties.' },
                                            { checksHeading: 'Stirrups check', checksdescription: 'Stirrups in column for upper floor column size.' },
                                            { checksHeading: 'Binding check', checksdescription: 'Proper binding of reinforcement in the beam column joints' },
                                            { checksHeading: 'Checklist for Top and Bottom Extra Bars', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Rebar dia check', checksdescription: 'The diameter of Top and Bottom Extra Reinforcement of the beam shall be checked.' },
                                            { checksHeading: 'Top Bar position check', checksdescription: 'The location of Top extra shall be checked.' },
                                            { checksHeading: 'Bottom Bar position check', checksdescription: 'Ensure proper position of Bottom extra reinforcement.' },
                                            { checksHeading: 'Extra bar check', checksdescription: 'The length of Top extra bars shall be checked as per drawings.' },
                                            { checksHeading: 'Extra bar check', checksdescription: 'Length of top extra bars beyond the column shall also be checked as per structural drawings.' },
                                            { checksHeading: 'Extra bar check', checksdescription: 'The length of the bottom extra reinforcement shall be measured.' },
                                            { checksHeading: 'Pin bar check', checksdescription: 'Check the vertical clear distance between the top Main bars and Top extra bar. To maintain the gap, the Pin bar is placed.' },
                                            { checksHeading: 'Pin bar check', checksdescription: 'Make sure that the diameter of the Pin bar or Spacer shall be greater than the size or aggregate that is used for concrete.' },
                                            { checksHeading: 'Checklist for Stirrups', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Dia check', checksdescription: 'The diameter of the stirrups shall be checked.' },
                                            { checksHeading: 'Spacing check', checksdescription: 'Check the spacing between the stirrups near the support as well as mid-span of the entire beam.' },
                                            { checksHeading: 'Bend check', checksdescription: 'The end of the stirrups or hook shall be at 135 degrees.' },
                                            { checksHeading: 'Stirrups check', checksdescription: 'Extra stirrups shall be provided at the junction of beams.' },
                                            { checksHeading: 'Checklist for Cover Block', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Cover check', checksdescription: 'Check the Thickness of the cover block as per drawings given by Structural Consultants.' },
                                            { checksHeading: 'Grade check', checksdescription: 'The grade of the concrete cover block shall be the same as of Grade of concrete.' },
                                            { checksHeading: 'Checklist for Lapping', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Lapping position check', checksdescription: 'The position of Lapping of the Top Main bar shall be checked as per structural drawings.' },
                                            { checksHeading: 'Lapping position check', checksdescription: 'The position of the Lapping of the Bottom Main bar shall also be checked as per structural drawings.' },
                                            { checksHeading: 'Binding check', checksdescription: 'Proper binding of Lapped bars shall be checked.' },
                                            { checksHeading: 'Lapping check', checksdescription: 'Bottom bars Lapping should not be placed at the middle span of the beam. It is because of the maximum bending moment.' },
                                            { checksHeading: 'Lapping check', checksdescription: 'Top Main lapping should not be placed near the support of the beam. It is because of the maximum shear force.' },
                                            { checksHeading: 'Lapping check', checksdescription: 'Make sure the lap should be placed in a staggered manner.' },
                                            { checksHeading: 'Checklist for development length', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Development length check', checksdescription: 'Measure the development length of Top Main reinforcement.' },
                                            { checksHeading: 'Development length check', checksdescription: ' Make sure that the Main bars shall be extending into the columns.' },
                                            { checksHeading: 'Development length check', checksdescription: 'Development length of Top Extra and Bottom Main bars (L shape reinforcement) shall be checked.' },
                                            { checksHeading: 'Checklist for Bar Binding', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Binding check', checksdescription: 'Ensure the proper binding of reinforcement at the junction of main bars and stirrups.' },
                                            { checksHeading: 'Binding check', checksdescription: 'Bottom extra and Top extra shall be bind properly using binding wire.' },
                                            { checksHeading: 'Binding check', checksdescription: 'The binding wire should not be loose or remove from steel bars while concreting.' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Check that oil should not come in contact with the surface of Reinforcement.' },
                                            { checksHeading: 'Ties check', checksdescription: 'Temporary ties in column reinforcement shall be provided.' },
                                            { checksHeading: 'Checklist for Dowel Bars', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Dowel bar check', checksdescription: 'Dowel bars shall be provided for a future extension for the upper story column.' },
                                            { checksHeading: 'Dowel bar check', checksdescription: 'Check the reinforcement shall be left for the upper floor staircase or not.' },
                                            { checksHeading: 'Dowel bar check', checksdescription: 'Ensure the reinforcement shall be left for balconies.' },
                                            { checksHeading: 'Dia of dowel check', checksdescription: 'Check the diameter of the dowels bars.' },
                                            { checksHeading: 'Length check', checksdescription: 'Check the length of dowel bars as per approved drawings.' },
                                            { checksHeading: 'Dowel check', checksdescription: 'Dowel bars of the beam shall be checked.' },
                                        ];

                                        async function beamAndSlabChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        beamAndSlabChacks();
                                    }


                                    if (newDatanew.subactivityname === "GF Slab Reinforcement") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Beam', headingforshortingTwo: 'Slab', headingforshortingThree: 'Details' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Explain', NormalHeadingThree: 'Main/Extra', NormalHeadingfoure: 'Ring | Hook' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Explain', NormalHeadingThree: 'Spacing', NormalHeadingfoure: 'Chair/Bind' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'L - Bend', NormalHeadingThree: 'Lapping', NormalHeadingfoure: 'Develop. L' },
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }








                                    if (newDatanew.subactivityname === "FF Slab Reinforcement") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Checking of reinforcement for Beams.', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the contractor to check the reinforcement  as per the drawing' },
                                            { subtaskdescription: 'Ask the contractor to do proper lapping,cover,bentup bar,pin bar and extra bars' },
                                            { subtaskdescription: 'Ask the contractor to provide the master ring and Dowel bars in slab' },
                                            { subtaskdescription: 'Decide the position of concrete joints in case of big slab after consulting & approval of R.C.C. Consultant.' },
                                            { subtaskdescription: 'Ask the contractor to make the arrangements for concrete mixer ,vibrator and Diesel' },
                                            { subtaskdescription: 'Calculate the material required for RCC and infrom the purchase manager' },
                                            { subtaskdescription: 'Ask the contractor to make the arrangments for concrete pouring' },
                                            { subtaskdescription: 'Ask the contractor to mark the top level of concrete' },
                                            { subtaskdescription: 'To be Checked Before Slab Casting - After Reinforcement Work is Done', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Contractor been assigned and informed that he would check all the reinforcement with the Engineer' },
                                            { subtaskdescription: 'Contractor been informed to minimise the wastage during cutting' },
                                        ];

                                        async function BeamSlabShutteringReinforcementRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteringReinforcementRCCfunCall();
                                    }











                                    if (newDatanew.subactivityname === "FF Slab Reinforcement") {

                                        const dataArranew = [
                                            { checksHeading: 'Checking of reinforcement for Beams.', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Rebars Check', checksdescription: 'Bottom bars, top bars, etra bars,bentup bars, stirrups, distance of bentup bars from face of supports, spacing of the stirrups as per R.C.C. drawing, proper tying of stirrups.etc' },
                                            { checksHeading: 'Dia of bar check', checksdescription: 'Diameter of bars, binding of stirrups in line.' },
                                            { checksHeading: 'Bentup Bar Check', checksdescription: 'Length of bentup bars projecting in the adjacent beams.' },
                                            { checksHeading: 'Bentup Bar Check', checksdescription: 'L for bentup at discontinuous end.' },
                                            { checksHeading: 'Cover check', checksdescription: 'Side covers & bottom covers for beams.' },
                                            { checksHeading: 'Pin bar Check', checksdescription: 'Pin is provided at required places between reinforcement.' },
                                            { checksHeading: 'Binding check', checksdescription: 'Proper binding of laps in beam if provided with required length.' },
                                            { checksHeading: 'Lapping check', checksdescription: 'Lapping of bars' },
                                            { checksHeading: 'Steel for slab', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Spacing check', checksdescription: 'Spacing, diameter of bent up bars & main bars.' },
                                            { checksHeading: 'Bentup bar check', checksdescription: 'Distance of bent ups from face of beamLength of bent up bars projecting in adjacent bays.Height of the bent up bars.' },
                                            { checksHeading: 'Chair bar check', checksdescription: 'Chair below  bent up bar.Covering for slab at bottom.' },
                                            { checksHeading: 'Binding check', checksdescription: 'Proper binding of laps of required length.Dowels of slab & beam.' },
                                            { checksHeading: 'Steel dia check', checksdescription: 'Distribution steel diameters, spacing & ties.' },
                                            { checksHeading: 'Stirrups check', checksdescription: 'Stirrups in column for upper floor column size.' },
                                            { checksHeading: 'Binding check', checksdescription: 'Proper binding of reinforcement in the beam column joints' },
                                            { checksHeading: 'Checklist for Top and Bottom Extra Bars', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Rebar dia check', checksdescription: 'The diameter of Top and Bottom Extra Reinforcement of the beam shall be checked.' },
                                            { checksHeading: 'Top Bar position check', checksdescription: 'The location of Top extra shall be checked.' },
                                            { checksHeading: 'Bottom Bar position check', checksdescription: 'Ensure proper position of Bottom extra reinforcement.' },
                                            { checksHeading: 'Extra bar check', checksdescription: 'The length of Top extra bars shall be checked as per drawings.' },
                                            { checksHeading: 'Extra bar check', checksdescription: 'Length of top extra bars beyond the column shall also be checked as per structural drawings.' },
                                            { checksHeading: 'Extra bar check', checksdescription: 'The length of the bottom extra reinforcement shall be measured.' },
                                            { checksHeading: 'Pin bar check', checksdescription: 'Check the vertical clear distance between the top Main bars and Top extra bar. To maintain the gap, the Pin bar is placed.' },
                                            { checksHeading: 'Pin bar check', checksdescription: 'Make sure that the diameter of the Pin bar or Spacer shall be greater than the size or aggregate that is used for concrete.' },
                                            { checksHeading: 'Checklist for Stirrups', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Dia check', checksdescription: 'The diameter of the stirrups shall be checked.' },
                                            { checksHeading: 'Spacing check', checksdescription: 'Check the spacing between the stirrups near the support as well as mid-span of the entire beam.' },
                                            { checksHeading: 'Bend check', checksdescription: 'The end of the stirrups or hook shall be at 135 degrees.' },
                                            { checksHeading: 'Stirrups check', checksdescription: 'Extra stirrups shall be provided at the junction of beams.' },
                                            { checksHeading: 'Checklist for Cover Block', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Cover check', checksdescription: 'Check the Thickness of the cover block as per drawings given by Structural Consultants.' },
                                            { checksHeading: 'Grade check', checksdescription: 'The grade of the concrete cover block shall be the same as of Grade of concrete.' },
                                            { checksHeading: 'Checklist for Lapping', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Lapping position check', checksdescription: 'The position of Lapping of the Top Main bar shall be checked as per structural drawings.' },
                                            { checksHeading: 'Lapping position check', checksdescription: 'The position of the Lapping of the Bottom Main bar shall also be checked as per structural drawings.' },
                                            { checksHeading: 'Binding check', checksdescription: 'Proper binding of Lapped bars shall be checked.' },
                                            { checksHeading: 'Lapping check', checksdescription: 'Bottom bars Lapping should not be placed at the middle span of the beam. It is because of the maximum bending moment.' },
                                            { checksHeading: 'Lapping check', checksdescription: 'Top Main lapping should not be placed near the support of the beam. It is because of the maximum shear force.' },
                                            { checksHeading: 'Lapping check', checksdescription: 'Make sure the lap should be placed in a staggered manner.' },
                                            { checksHeading: 'Checklist for development length', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Development length check', checksdescription: 'Measure the development length of Top Main reinforcement.' },
                                            { checksHeading: 'Development length check', checksdescription: ' Make sure that the Main bars shall be extending into the columns.' },
                                            { checksHeading: 'Development length check', checksdescription: 'Development length of Top Extra and Bottom Main bars (L shape reinforcement) shall be checked.' },
                                            { checksHeading: 'Checklist for Bar Binding', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Binding check', checksdescription: 'Ensure the proper binding of reinforcement at the junction of main bars and stirrups.' },
                                            { checksHeading: 'Binding check', checksdescription: 'Bottom extra and Top extra shall be bind properly using binding wire.' },
                                            { checksHeading: 'Binding check', checksdescription: 'The binding wire should not be loose or remove from steel bars while concreting.' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Check that oil should not come in contact with the surface of Reinforcement.' },
                                            { checksHeading: 'Ties check', checksdescription: 'Temporary ties in column reinforcement shall be provided.' },
                                            { checksHeading: 'Checklist for Dowel Bars', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Dowel bar check', checksdescription: 'Dowel bars shall be provided for a future extension for the upper story column.' },
                                            { checksHeading: 'Dowel bar check', checksdescription: 'Check the reinforcement shall be left for the upper floor staircase or not.' },
                                            { checksHeading: 'Dowel bar check', checksdescription: 'Ensure the reinforcement shall be left for balconies.' },
                                            { checksHeading: 'Dia of dowel check', checksdescription: 'Check the diameter of the dowels bars.' },
                                            { checksHeading: 'Length check', checksdescription: 'Check the length of dowel bars as per approved drawings.' },
                                            { checksHeading: 'Dowel check', checksdescription: 'Dowel bars of the beam shall be checked.' },
                                        ];

                                        async function beamAndSlabChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        beamAndSlabChacks();
                                    }













                                    if (newDatanew.subactivityname === "SF Slab Reinforcement") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Checking of reinforcement for Beams.', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the contractor to check the reinforcement  as per the drawing' },
                                            { subtaskdescription: 'Ask the contractor to do proper lapping,cover,bentup bar,pin bar and extra bars' },
                                            { subtaskdescription: 'Ask the contractor to provide the master ring and Dowel bars in slab' },
                                            { subtaskdescription: 'Decide the position of concrete joints in case of big slab after consulting & approval of R.C.C. Consultant.' },
                                            { subtaskdescription: 'Ask the contractor to make the arrangements for concrete mixer ,vibrator and Diesel' },
                                            { subtaskdescription: 'Calculate the material required for RCC and infrom the purchase manager' },
                                            { subtaskdescription: 'Ask the contractor to make the arrangments for concrete pouring' },
                                            { subtaskdescription: 'Ask the contractor to mark the top level of concrete' },
                                            { subtaskdescription: 'To be Checked Before Slab Casting - After Reinforcement Work is Done', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Contractor been assigned and informed that he would check all the reinforcement with the Engineer' },
                                            { subtaskdescription: 'Contractor been informed to minimise the wastage during cutting' },
                                        ];

                                        async function BeamSlabShutteringReinforcementRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteringReinforcementRCCfunCall();
                                    }











                                    if (newDatanew.subactivityname === "SF Slab Reinforcement") {

                                        const dataArranew = [
                                            { checksHeading: 'Checking of reinforcement for Beams.', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Rebars Check', checksdescription: 'Bottom bars, top bars, etra bars,bentup bars, stirrups, distance of bentup bars from face of supports, spacing of the stirrups as per R.C.C. drawing, proper tying of stirrups.etc' },
                                            { checksHeading: 'Dia of bar check', checksdescription: 'Diameter of bars, binding of stirrups in line.' },
                                            { checksHeading: 'Bentup Bar Check', checksdescription: 'Length of bentup bars projecting in the adjacent beams.' },
                                            { checksHeading: 'Bentup Bar Check', checksdescription: 'L for bentup at discontinuous end.' },
                                            { checksHeading: 'Cover check', checksdescription: 'Side covers & bottom covers for beams.' },
                                            { checksHeading: 'Pin bar Check', checksdescription: 'Pin is provided at required places between reinforcement.' },
                                            { checksHeading: 'Binding check', checksdescription: 'Proper binding of laps in beam if provided with required length.' },
                                            { checksHeading: 'Lapping check', checksdescription: 'Lapping of bars' },
                                            { checksHeading: 'Steel for slab', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Spacing check', checksdescription: 'Spacing, diameter of bent up bars & main bars.' },
                                            { checksHeading: 'Bentup bar check', checksdescription: 'Distance of bent ups from face of beamLength of bent up bars projecting in adjacent bays.Height of the bent up bars.' },
                                            { checksHeading: 'Chair bar check', checksdescription: 'Chair below  bent up bar.Covering for slab at bottom.' },
                                            { checksHeading: 'Binding check', checksdescription: 'Proper binding of laps of required length.Dowels of slab & beam.' },
                                            { checksHeading: 'Steel dia check', checksdescription: 'Distribution steel diameters, spacing & ties.' },
                                            { checksHeading: 'Stirrups check', checksdescription: 'Stirrups in column for upper floor column size.' },
                                            { checksHeading: 'Binding check', checksdescription: 'Proper binding of reinforcement in the beam column joints' },
                                            { checksHeading: 'Checklist for Top and Bottom Extra Bars', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Rebar dia check', checksdescription: 'The diameter of Top and Bottom Extra Reinforcement of the beam shall be checked.' },
                                            { checksHeading: 'Top Bar position check', checksdescription: 'The location of Top extra shall be checked.' },
                                            { checksHeading: 'Bottom Bar position check', checksdescription: 'Ensure proper position of Bottom extra reinforcement.' },
                                            { checksHeading: 'Extra bar check', checksdescription: 'The length of Top extra bars shall be checked as per drawings.' },
                                            { checksHeading: 'Extra bar check', checksdescription: 'Length of top extra bars beyond the column shall also be checked as per structural drawings.' },
                                            { checksHeading: 'Extra bar check', checksdescription: 'The length of the bottom extra reinforcement shall be measured.' },
                                            { checksHeading: 'Pin bar check', checksdescription: 'Check the vertical clear distance between the top Main bars and Top extra bar. To maintain the gap, the Pin bar is placed.' },
                                            { checksHeading: 'Pin bar check', checksdescription: 'Make sure that the diameter of the Pin bar or Spacer shall be greater than the size or aggregate that is used for concrete.' },
                                            { checksHeading: 'Checklist for Stirrups', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Dia check', checksdescription: 'The diameter of the stirrups shall be checked.' },
                                            { checksHeading: 'Spacing check', checksdescription: 'Check the spacing between the stirrups near the support as well as mid-span of the entire beam.' },
                                            { checksHeading: 'Bend check', checksdescription: 'The end of the stirrups or hook shall be at 135 degrees.' },
                                            { checksHeading: 'Stirrups check', checksdescription: 'Extra stirrups shall be provided at the junction of beams.' },
                                            { checksHeading: 'Checklist for Cover Block', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Cover check', checksdescription: 'Check the Thickness of the cover block as per drawings given by Structural Consultants.' },
                                            { checksHeading: 'Grade check', checksdescription: 'The grade of the concrete cover block shall be the same as of Grade of concrete.' },
                                            { checksHeading: 'Checklist for Lapping', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Lapping position check', checksdescription: 'The position of Lapping of the Top Main bar shall be checked as per structural drawings.' },
                                            { checksHeading: 'Lapping position check', checksdescription: 'The position of the Lapping of the Bottom Main bar shall also be checked as per structural drawings.' },
                                            { checksHeading: 'Binding check', checksdescription: 'Proper binding of Lapped bars shall be checked.' },
                                            { checksHeading: 'Lapping check', checksdescription: 'Bottom bars Lapping should not be placed at the middle span of the beam. It is because of the maximum bending moment.' },
                                            { checksHeading: 'Lapping check', checksdescription: 'Top Main lapping should not be placed near the support of the beam. It is because of the maximum shear force.' },
                                            { checksHeading: 'Lapping check', checksdescription: 'Make sure the lap should be placed in a staggered manner.' },
                                            { checksHeading: 'Checklist for development length', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Development length check', checksdescription: 'Measure the development length of Top Main reinforcement.' },
                                            { checksHeading: 'Development length check', checksdescription: ' Make sure that the Main bars shall be extending into the columns.' },
                                            { checksHeading: 'Development length check', checksdescription: 'Development length of Top Extra and Bottom Main bars (L shape reinforcement) shall be checked.' },
                                            { checksHeading: 'Checklist for Bar Binding', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Binding check', checksdescription: 'Ensure the proper binding of reinforcement at the junction of main bars and stirrups.' },
                                            { checksHeading: 'Binding check', checksdescription: 'Bottom extra and Top extra shall be bind properly using binding wire.' },
                                            { checksHeading: 'Binding check', checksdescription: 'The binding wire should not be loose or remove from steel bars while concreting.' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Check that oil should not come in contact with the surface of Reinforcement.' },
                                            { checksHeading: 'Ties check', checksdescription: 'Temporary ties in column reinforcement shall be provided.' },
                                            { checksHeading: 'Checklist for Dowel Bars', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Dowel bar check', checksdescription: 'Dowel bars shall be provided for a future extension for the upper story column.' },
                                            { checksHeading: 'Dowel bar check', checksdescription: 'Check the reinforcement shall be left for the upper floor staircase or not.' },
                                            { checksHeading: 'Dowel bar check', checksdescription: 'Ensure the reinforcement shall be left for balconies.' },
                                            { checksHeading: 'Dia of dowel check', checksdescription: 'Check the diameter of the dowels bars.' },
                                            { checksHeading: 'Length check', checksdescription: 'Check the length of dowel bars as per approved drawings.' },
                                            { checksHeading: 'Dowel check', checksdescription: 'Dowel bars of the beam shall be checked.' },
                                        ];

                                        async function beamAndSlabChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        beamAndSlabChacks();
                                    }



                                    if (newDatanew.subactivityname === "SF Slab Reinforcement") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Beam', headingforshortingTwo: 'Slab', headingforshortingThree: 'Details' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Explain', NormalHeadingThree: 'Main/Extra', NormalHeadingfoure: 'Ring | Hook' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Explain', NormalHeadingThree: 'Spacing', NormalHeadingfoure: 'Chair/Bind' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'L - Bend', NormalHeadingThree: 'Lapping', NormalHeadingfoure: 'Develop. L' },
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }







                                    if (newDatanew.subactivityname === "TF Slab Reinforcement") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Checking of reinforcement for Beams.', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the contractor to check the reinforcement  as per the drawing' },
                                            { subtaskdescription: 'Ask the contractor to do proper lapping,cover,bentup bar,pin bar and extra bars' },
                                            { subtaskdescription: 'Ask the contractor to provide the master ring and Dowel bars in slab' },
                                            { subtaskdescription: 'Decide the position of concrete joints in case of big slab after consulting & approval of R.C.C. Consultant.' },
                                            { subtaskdescription: 'Ask the contractor to make the arrangements for concrete mixer ,vibrator and Diesel' },
                                            { subtaskdescription: 'Calculate the material required for RCC and infrom the purchase manager' },
                                            { subtaskdescription: 'Ask the contractor to make the arrangments for concrete pouring' },
                                            { subtaskdescription: 'Ask the contractor to mark the top level of concrete' },
                                            { subtaskdescription: 'To be Checked Before Slab Casting - After Reinforcement Work is Done', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Contractor been assigned and informed that he would check all the reinforcement with the Engineer' },
                                            { subtaskdescription: 'Contractor been informed to minimise the wastage during cutting' },
                                        ];

                                        async function BeamSlabShutteringReinforcementRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteringReinforcementRCCfunCall();
                                    }











                                    if (newDatanew.subactivityname === "TF Slab Reinforcement") {

                                        const dataArranew = [
                                            { checksHeading: 'Checking of reinforcement for Beams.', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Rebars Check', checksdescription: 'Bottom bars, top bars, etra bars,bentup bars, stirrups, distance of bentup bars from face of supports, spacing of the stirrups as per R.C.C. drawing, proper tying of stirrups.etc' },
                                            { checksHeading: 'Dia of bar check', checksdescription: 'Diameter of bars, binding of stirrups in line.' },
                                            { checksHeading: 'Bentup Bar Check', checksdescription: 'Length of bentup bars projecting in the adjacent beams.' },
                                            { checksHeading: 'Bentup Bar Check', checksdescription: 'L for bentup at discontinuous end.' },
                                            { checksHeading: 'Cover check', checksdescription: 'Side covers & bottom covers for beams.' },
                                            { checksHeading: 'Pin bar Check', checksdescription: 'Pin is provided at required places between reinforcement.' },
                                            { checksHeading: 'Binding check', checksdescription: 'Proper binding of laps in beam if provided with required length.' },
                                            { checksHeading: 'Lapping check', checksdescription: 'Lapping of bars' },
                                            { checksHeading: 'Steel for slab', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Spacing check', checksdescription: 'Spacing, diameter of bent up bars & main bars.' },
                                            { checksHeading: 'Bentup bar check', checksdescription: 'Distance of bent ups from face of beamLength of bent up bars projecting in adjacent bays.Height of the bent up bars.' },
                                            { checksHeading: 'Chair bar check', checksdescription: 'Chair below  bent up bar.Covering for slab at bottom.' },
                                            { checksHeading: 'Binding check', checksdescription: 'Proper binding of laps of required length.Dowels of slab & beam.' },
                                            { checksHeading: 'Steel dia check', checksdescription: 'Distribution steel diameters, spacing & ties.' },
                                            { checksHeading: 'Stirrups check', checksdescription: 'Stirrups in column for upper floor column size.' },
                                            { checksHeading: 'Binding check', checksdescription: 'Proper binding of reinforcement in the beam column joints' },
                                            { checksHeading: 'Checklist for Top and Bottom Extra Bars', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Rebar dia check', checksdescription: 'The diameter of Top and Bottom Extra Reinforcement of the beam shall be checked.' },
                                            { checksHeading: 'Top Bar position check', checksdescription: 'The location of Top extra shall be checked.' },
                                            { checksHeading: 'Bottom Bar position check', checksdescription: 'Ensure proper position of Bottom extra reinforcement.' },
                                            { checksHeading: 'Extra bar check', checksdescription: 'The length of Top extra bars shall be checked as per drawings.' },
                                            { checksHeading: 'Extra bar check', checksdescription: 'Length of top extra bars beyond the column shall also be checked as per structural drawings.' },
                                            { checksHeading: 'Extra bar check', checksdescription: 'The length of the bottom extra reinforcement shall be measured.' },
                                            { checksHeading: 'Pin bar check', checksdescription: 'Check the vertical clear distance between the top Main bars and Top extra bar. To maintain the gap, the Pin bar is placed.' },
                                            { checksHeading: 'Pin bar check', checksdescription: 'Make sure that the diameter of the Pin bar or Spacer shall be greater than the size or aggregate that is used for concrete.' },
                                            { checksHeading: 'Checklist for Stirrups', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Dia check', checksdescription: 'The diameter of the stirrups shall be checked.' },
                                            { checksHeading: 'Spacing check', checksdescription: 'Check the spacing between the stirrups near the support as well as mid-span of the entire beam.' },
                                            { checksHeading: 'Bend check', checksdescription: 'The end of the stirrups or hook shall be at 135 degrees.' },
                                            { checksHeading: 'Stirrups check', checksdescription: 'Extra stirrups shall be provided at the junction of beams.' },
                                            { checksHeading: 'Checklist for Cover Block', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Cover check', checksdescription: 'Check the Thickness of the cover block as per drawings given by Structural Consultants.' },
                                            { checksHeading: 'Grade check', checksdescription: 'The grade of the concrete cover block shall be the same as of Grade of concrete.' },
                                            { checksHeading: 'Checklist for Lapping', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Lapping position check', checksdescription: 'The position of Lapping of the Top Main bar shall be checked as per structural drawings.' },
                                            { checksHeading: 'Lapping position check', checksdescription: 'The position of the Lapping of the Bottom Main bar shall also be checked as per structural drawings.' },
                                            { checksHeading: 'Binding check', checksdescription: 'Proper binding of Lapped bars shall be checked.' },
                                            { checksHeading: 'Lapping check', checksdescription: 'Bottom bars Lapping should not be placed at the middle span of the beam. It is because of the maximum bending moment.' },
                                            { checksHeading: 'Lapping check', checksdescription: 'Top Main lapping should not be placed near the support of the beam. It is because of the maximum shear force.' },
                                            { checksHeading: 'Lapping check', checksdescription: 'Make sure the lap should be placed in a staggered manner.' },
                                            { checksHeading: 'Checklist for development length', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Development length check', checksdescription: 'Measure the development length of Top Main reinforcement.' },
                                            { checksHeading: 'Development length check', checksdescription: ' Make sure that the Main bars shall be extending into the columns.' },
                                            { checksHeading: 'Development length check', checksdescription: 'Development length of Top Extra and Bottom Main bars (L shape reinforcement) shall be checked.' },
                                            { checksHeading: 'Checklist for Bar Binding', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Binding check', checksdescription: 'Ensure the proper binding of reinforcement at the junction of main bars and stirrups.' },
                                            { checksHeading: 'Binding check', checksdescription: 'Bottom extra and Top extra shall be bind properly using binding wire.' },
                                            { checksHeading: 'Binding check', checksdescription: 'The binding wire should not be loose or remove from steel bars while concreting.' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Check that oil should not come in contact with the surface of Reinforcement.' },
                                            { checksHeading: 'Ties check', checksdescription: 'Temporary ties in column reinforcement shall be provided.' },
                                            { checksHeading: 'Checklist for Dowel Bars', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Dowel bar check', checksdescription: 'Dowel bars shall be provided for a future extension for the upper story column.' },
                                            { checksHeading: 'Dowel bar check', checksdescription: 'Check the reinforcement shall be left for the upper floor staircase or not.' },
                                            { checksHeading: 'Dowel bar check', checksdescription: 'Ensure the reinforcement shall be left for balconies.' },
                                            { checksHeading: 'Dia of dowel check', checksdescription: 'Check the diameter of the dowels bars.' },
                                            { checksHeading: 'Length check', checksdescription: 'Check the length of dowel bars as per approved drawings.' },
                                            { checksHeading: 'Dowel check', checksdescription: 'Dowel bars of the beam shall be checked.' },
                                        ];

                                        async function beamAndSlabChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        beamAndSlabChacks();
                                    }


                                    if (newDatanew.subactivityname === "TF Slab Reinforcement") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Beam', headingforshortingTwo: 'Slab', headingforshortingThree: 'Details' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Explain', NormalHeadingThree: 'Main/Extra', NormalHeadingfoure: 'Ring | Hook' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Explain', NormalHeadingThree: 'Spacing', NormalHeadingfoure: 'Chair/Bind' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'L - Bend', NormalHeadingThree: 'Lapping', NormalHeadingfoure: 'Develop. L' },
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }





                                    if (newDatanew.subactivityname === "FoF Slab Reinforcement") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Checking of reinforcement for Beams.', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the contractor to check the reinforcement  as per the drawing' },
                                            { subtaskdescription: 'Ask the contractor to do proper lapping,cover,bentup bar,pin bar and extra bars' },
                                            { subtaskdescription: 'Ask the contractor to provide the master ring and Dowel bars in slab' },
                                            { subtaskdescription: 'Decide the position of concrete joints in case of big slab after consulting & approval of R.C.C. Consultant.' },
                                            { subtaskdescription: 'Ask the contractor to make the arrangements for concrete mixer ,vibrator and Diesel' },
                                            { subtaskdescription: 'Calculate the material required for RCC and infrom the purchase manager' },
                                            { subtaskdescription: 'Ask the contractor to make the arrangments for concrete pouring' },
                                            { subtaskdescription: 'Ask the contractor to mark the top level of concrete' },
                                            { subtaskdescription: 'To be Checked Before Slab Casting - After Reinforcement Work is Done', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Contractor been assigned and informed that he would check all the reinforcement with the Engineer' },
                                            { subtaskdescription: 'Contractor been informed to minimise the wastage during cutting' },
                                        ];

                                        async function BeamSlabShutteringReinforcementRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteringReinforcementRCCfunCall();
                                    }











                                    if (newDatanew.subactivityname === "FoF Slab Reinforcement") {

                                        const dataArranew = [
                                            { checksHeading: 'Checking of reinforcement for Beams.', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Rebars Check', checksdescription: 'Bottom bars, top bars, etra bars,bentup bars, stirrups, distance of bentup bars from face of supports, spacing of the stirrups as per R.C.C. drawing, proper tying of stirrups.etc' },
                                            { checksHeading: 'Dia of bar check', checksdescription: 'Diameter of bars, binding of stirrups in line.' },
                                            { checksHeading: 'Bentup Bar Check', checksdescription: 'Length of bentup bars projecting in the adjacent beams.' },
                                            { checksHeading: 'Bentup Bar Check', checksdescription: 'L for bentup at discontinuous end.' },
                                            { checksHeading: 'Cover check', checksdescription: 'Side covers & bottom covers for beams.' },
                                            { checksHeading: 'Pin bar Check', checksdescription: 'Pin is provided at required places between reinforcement.' },
                                            { checksHeading: 'Binding check', checksdescription: 'Proper binding of laps in beam if provided with required length.' },
                                            { checksHeading: 'Lapping check', checksdescription: 'Lapping of bars' },
                                            { checksHeading: 'Steel for slab', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Spacing check', checksdescription: 'Spacing, diameter of bent up bars & main bars.' },
                                            { checksHeading: 'Bentup bar check', checksdescription: 'Distance of bent ups from face of beamLength of bent up bars projecting in adjacent bays.Height of the bent up bars.' },
                                            { checksHeading: 'Chair bar check', checksdescription: 'Chair below  bent up bar.Covering for slab at bottom.' },
                                            { checksHeading: 'Binding check', checksdescription: 'Proper binding of laps of required length.Dowels of slab & beam.' },
                                            { checksHeading: 'Steel dia check', checksdescription: 'Distribution steel diameters, spacing & ties.' },
                                            { checksHeading: 'Stirrups check', checksdescription: 'Stirrups in column for upper floor column size.' },
                                            { checksHeading: 'Binding check', checksdescription: 'Proper binding of reinforcement in the beam column joints' },
                                            { checksHeading: 'Checklist for Top and Bottom Extra Bars', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Rebar dia check', checksdescription: 'The diameter of Top and Bottom Extra Reinforcement of the beam shall be checked.' },
                                            { checksHeading: 'Top Bar position check', checksdescription: 'The location of Top extra shall be checked.' },
                                            { checksHeading: 'Bottom Bar position check', checksdescription: 'Ensure proper position of Bottom extra reinforcement.' },
                                            { checksHeading: 'Extra bar check', checksdescription: 'The length of Top extra bars shall be checked as per drawings.' },
                                            { checksHeading: 'Extra bar check', checksdescription: 'Length of top extra bars beyond the column shall also be checked as per structural drawings.' },
                                            { checksHeading: 'Extra bar check', checksdescription: 'The length of the bottom extra reinforcement shall be measured.' },
                                            { checksHeading: 'Pin bar check', checksdescription: 'Check the vertical clear distance between the top Main bars and Top extra bar. To maintain the gap, the Pin bar is placed.' },
                                            { checksHeading: 'Pin bar check', checksdescription: 'Make sure that the diameter of the Pin bar or Spacer shall be greater than the size or aggregate that is used for concrete.' },
                                            { checksHeading: 'Checklist for Stirrups', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Dia check', checksdescription: 'The diameter of the stirrups shall be checked.' },
                                            { checksHeading: 'Spacing check', checksdescription: 'Check the spacing between the stirrups near the support as well as mid-span of the entire beam.' },
                                            { checksHeading: 'Bend check', checksdescription: 'The end of the stirrups or hook shall be at 135 degrees.' },
                                            { checksHeading: 'Stirrups check', checksdescription: 'Extra stirrups shall be provided at the junction of beams.' },
                                            { checksHeading: 'Checklist for Cover Block', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Cover check', checksdescription: 'Check the Thickness of the cover block as per drawings given by Structural Consultants.' },
                                            { checksHeading: 'Grade check', checksdescription: 'The grade of the concrete cover block shall be the same as of Grade of concrete.' },
                                            { checksHeading: 'Checklist for Lapping', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Lapping position check', checksdescription: 'The position of Lapping of the Top Main bar shall be checked as per structural drawings.' },
                                            { checksHeading: 'Lapping position check', checksdescription: 'The position of the Lapping of the Bottom Main bar shall also be checked as per structural drawings.' },
                                            { checksHeading: 'Binding check', checksdescription: 'Proper binding of Lapped bars shall be checked.' },
                                            { checksHeading: 'Lapping check', checksdescription: 'Bottom bars Lapping should not be placed at the middle span of the beam. It is because of the maximum bending moment.' },
                                            { checksHeading: 'Lapping check', checksdescription: 'Top Main lapping should not be placed near the support of the beam. It is because of the maximum shear force.' },
                                            { checksHeading: 'Lapping check', checksdescription: 'Make sure the lap should be placed in a staggered manner.' },
                                            { checksHeading: 'Checklist for development length', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Development length check', checksdescription: 'Measure the development length of Top Main reinforcement.' },
                                            { checksHeading: 'Development length check', checksdescription: ' Make sure that the Main bars shall be extending into the columns.' },
                                            { checksHeading: 'Development length check', checksdescription: 'Development length of Top Extra and Bottom Main bars (L shape reinforcement) shall be checked.' },
                                            { checksHeading: 'Checklist for Bar Binding', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Binding check', checksdescription: 'Ensure the proper binding of reinforcement at the junction of main bars and stirrups.' },
                                            { checksHeading: 'Binding check', checksdescription: 'Bottom extra and Top extra shall be bind properly using binding wire.' },
                                            { checksHeading: 'Binding check', checksdescription: 'The binding wire should not be loose or remove from steel bars while concreting.' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Check that oil should not come in contact with the surface of Reinforcement.' },
                                            { checksHeading: 'Ties check', checksdescription: 'Temporary ties in column reinforcement shall be provided.' },
                                            { checksHeading: 'Checklist for Dowel Bars', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Dowel bar check', checksdescription: 'Dowel bars shall be provided for a future extension for the upper story column.' },
                                            { checksHeading: 'Dowel bar check', checksdescription: 'Check the reinforcement shall be left for the upper floor staircase or not.' },
                                            { checksHeading: 'Dowel bar check', checksdescription: 'Ensure the reinforcement shall be left for balconies.' },
                                            { checksHeading: 'Dia of dowel check', checksdescription: 'Check the diameter of the dowels bars.' },
                                            { checksHeading: 'Length check', checksdescription: 'Check the length of dowel bars as per approved drawings.' },
                                            { checksHeading: 'Dowel check', checksdescription: 'Dowel bars of the beam shall be checked.' },
                                        ];

                                        async function beamAndSlabChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        beamAndSlabChacks();
                                    }






                                    if (newDatanew.subactivityname === "FoF Slab Reinforcement") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Beam', headingforshortingTwo: 'Slab', headingforshortingThree: 'Details' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Explain', NormalHeadingThree: 'Main/Extra', NormalHeadingfoure: 'Ring | Hook' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Explain', NormalHeadingThree: 'Spacing', NormalHeadingfoure: 'Chair/Bind' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'L - Bend', NormalHeadingThree: 'Lapping', NormalHeadingfoure: 'Develop. L' },
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }



                                    if (newDatanew.subactivityname === "Tower Slab Reinforcement") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Checking of reinforcement for Beams.', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the contractor to check the reinforcement  as per the drawing' },
                                            { subtaskdescription: 'Ask the contractor to do proper lapping,cover,bentup bar,pin bar and extra bars' },
                                            { subtaskdescription: 'Ask the contractor to provide the master ring and Dowel bars in slab' },
                                            { subtaskdescription: 'Decide the position of concrete joints in case of big slab after consulting & approval of R.C.C. Consultant.' },
                                            { subtaskdescription: 'Ask the contractor to make the arrangements for concrete mixer ,vibrator and Diesel' },
                                            { subtaskdescription: 'Calculate the material required for RCC and infrom the purchase manager' },
                                            { subtaskdescription: 'Ask the contractor to make the arrangments for concrete pouring' },
                                            { subtaskdescription: 'Ask the contractor to mark the top level of concrete' },
                                            { subtaskdescription: 'To be Checked Before Slab Casting - After Reinforcement Work is Done', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Contractor been assigned and informed that he would check all the reinforcement with the Engineer' },
                                            { subtaskdescription: 'Contractor been informed to minimise the wastage during cutting' },
                                        ];

                                        async function BeamSlabShutteringReinforcementRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteringReinforcementRCCfunCall();
                                    }











                                    if (newDatanew.subactivityname === "Tower Slab Reinforcement") {

                                        const dataArranew = [
                                            { checksHeading: 'Checking of reinforcement for Beams.', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Rebars Check', checksdescription: 'Bottom bars, top bars, etra bars,bentup bars, stirrups, distance of bentup bars from face of supports, spacing of the stirrups as per R.C.C. drawing, proper tying of stirrups.etc' },
                                            { checksHeading: 'Dia of bar check', checksdescription: 'Diameter of bars, binding of stirrups in line.' },
                                            { checksHeading: 'Bentup Bar Check', checksdescription: 'Length of bentup bars projecting in the adjacent beams.' },
                                            { checksHeading: 'Bentup Bar Check', checksdescription: 'L for bentup at discontinuous end.' },
                                            { checksHeading: 'Cover check', checksdescription: 'Side covers & bottom covers for beams.' },
                                            { checksHeading: 'Pin bar Check', checksdescription: 'Pin is provided at required places between reinforcement.' },
                                            { checksHeading: 'Binding check', checksdescription: 'Proper binding of laps in beam if provided with required length.' },
                                            { checksHeading: 'Lapping check', checksdescription: 'Lapping of bars' },
                                            { checksHeading: 'Steel for slab', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Spacing check', checksdescription: 'Spacing, diameter of bent up bars & main bars.' },
                                            { checksHeading: 'Bentup bar check', checksdescription: 'Distance of bent ups from face of beamLength of bent up bars projecting in adjacent bays.Height of the bent up bars.' },
                                            { checksHeading: 'Chair bar check', checksdescription: 'Chair below  bent up bar.Covering for slab at bottom.' },
                                            { checksHeading: 'Binding check', checksdescription: 'Proper binding of laps of required length.Dowels of slab & beam.' },
                                            { checksHeading: 'Steel dia check', checksdescription: 'Distribution steel diameters, spacing & ties.' },
                                            { checksHeading: 'Stirrups check', checksdescription: 'Stirrups in column for upper floor column size.' },
                                            { checksHeading: 'Binding check', checksdescription: 'Proper binding of reinforcement in the beam column joints' },
                                            { checksHeading: 'Checklist for Top and Bottom Extra Bars', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Rebar dia check', checksdescription: 'The diameter of Top and Bottom Extra Reinforcement of the beam shall be checked.' },
                                            { checksHeading: 'Top Bar position check', checksdescription: 'The location of Top extra shall be checked.' },
                                            { checksHeading: 'Bottom Bar position check', checksdescription: 'Ensure proper position of Bottom extra reinforcement.' },
                                            { checksHeading: 'Extra bar check', checksdescription: 'The length of Top extra bars shall be checked as per drawings.' },
                                            { checksHeading: 'Extra bar check', checksdescription: 'Length of top extra bars beyond the column shall also be checked as per structural drawings.' },
                                            { checksHeading: 'Extra bar check', checksdescription: 'The length of the bottom extra reinforcement shall be measured.' },
                                            { checksHeading: 'Pin bar check', checksdescription: 'Check the vertical clear distance between the top Main bars and Top extra bar. To maintain the gap, the Pin bar is placed.' },
                                            { checksHeading: 'Pin bar check', checksdescription: 'Make sure that the diameter of the Pin bar or Spacer shall be greater than the size or aggregate that is used for concrete.' },
                                            { checksHeading: 'Checklist for Stirrups', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Dia check', checksdescription: 'The diameter of the stirrups shall be checked.' },
                                            { checksHeading: 'Spacing check', checksdescription: 'Check the spacing between the stirrups near the support as well as mid-span of the entire beam.' },
                                            { checksHeading: 'Bend check', checksdescription: 'The end of the stirrups or hook shall be at 135 degrees.' },
                                            { checksHeading: 'Stirrups check', checksdescription: 'Extra stirrups shall be provided at the junction of beams.' },
                                            { checksHeading: 'Checklist for Cover Block', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Cover check', checksdescription: 'Check the Thickness of the cover block as per drawings given by Structural Consultants.' },
                                            { checksHeading: 'Grade check', checksdescription: 'The grade of the concrete cover block shall be the same as of Grade of concrete.' },
                                            { checksHeading: 'Checklist for Lapping', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Lapping position check', checksdescription: 'The position of Lapping of the Top Main bar shall be checked as per structural drawings.' },
                                            { checksHeading: 'Lapping position check', checksdescription: 'The position of the Lapping of the Bottom Main bar shall also be checked as per structural drawings.' },
                                            { checksHeading: 'Binding check', checksdescription: 'Proper binding of Lapped bars shall be checked.' },
                                            { checksHeading: 'Lapping check', checksdescription: 'Bottom bars Lapping should not be placed at the middle span of the beam. It is because of the maximum bending moment.' },
                                            { checksHeading: 'Lapping check', checksdescription: 'Top Main lapping should not be placed near the support of the beam. It is because of the maximum shear force.' },
                                            { checksHeading: 'Lapping check', checksdescription: 'Make sure the lap should be placed in a staggered manner.' },
                                            { checksHeading: 'Checklist for development length', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Development length check', checksdescription: 'Measure the development length of Top Main reinforcement.' },
                                            { checksHeading: 'Development length check', checksdescription: ' Make sure that the Main bars shall be extending into the columns.' },
                                            { checksHeading: 'Development length check', checksdescription: 'Development length of Top Extra and Bottom Main bars (L shape reinforcement) shall be checked.' },
                                            { checksHeading: 'Checklist for Bar Binding', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Binding check', checksdescription: 'Ensure the proper binding of reinforcement at the junction of main bars and stirrups.' },
                                            { checksHeading: 'Binding check', checksdescription: 'Bottom extra and Top extra shall be bind properly using binding wire.' },
                                            { checksHeading: 'Binding check', checksdescription: 'The binding wire should not be loose or remove from steel bars while concreting.' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Check that oil should not come in contact with the surface of Reinforcement.' },
                                            { checksHeading: 'Ties check', checksdescription: 'Temporary ties in column reinforcement shall be provided.' },
                                            { checksHeading: 'Checklist for Dowel Bars', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Dowel bar check', checksdescription: 'Dowel bars shall be provided for a future extension for the upper story column.' },
                                            { checksHeading: 'Dowel bar check', checksdescription: 'Check the reinforcement shall be left for the upper floor staircase or not.' },
                                            { checksHeading: 'Dowel bar check', checksdescription: 'Ensure the reinforcement shall be left for balconies.' },
                                            { checksHeading: 'Dia of dowel check', checksdescription: 'Check the diameter of the dowels bars.' },
                                            { checksHeading: 'Length check', checksdescription: 'Check the length of dowel bars as per approved drawings.' },
                                            { checksHeading: 'Dowel check', checksdescription: 'Dowel bars of the beam shall be checked.' },
                                        ];

                                        async function beamAndSlabChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        beamAndSlabChacks();
                                    }





                                    if (newDatanew.subactivityname === "Tower Slab Reinforcement") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Beam', headingforshortingTwo: 'Slab', headingforshortingThree: 'Details' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Explain', NormalHeadingThree: 'Main/Extra', NormalHeadingfoure: 'Ring | Hook' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Explain', NormalHeadingThree: 'Spacing', NormalHeadingfoure: 'Chair/Bind' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'L - Bend', NormalHeadingThree: 'Lapping', NormalHeadingfoure: 'Develop. L' },
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }





                                    if (newDatanew.subactivityname === "GF RCC Slab") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the contractor to make the arrangements for pouring of concrete' },
                                            { subtaskdescription: 'Ask the contractor to mark the level  before concreting' },
                                            { subtaskdescription: 'Inform the concractor about the concrete mix ratio' },
                                            { subtaskdescription: 'Ask the contractor to control the water cement  ratio and mix waterproof chemical' },
                                            { subtaskdescription: 'Ask the contractor to pour the concrete evenly with proper finishing' },
                                            { subtaskdescription: 'Ask the contractor for compaction of  concrete' },
                                            { subtaskdescription: 'Checklist after concreting', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Check if any honeycombing occures and ask the contractor to repair it immediately' },
                                            { subtaskdescription: 'Ask the contractor to make the bunds for the curing' },
                                            { subtaskdescription: 'Ask the guard to do proper Curing' },
                                        ];

                                        async function BeamAndSlabRCCChecksCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamAndSlabRCCChecksCall();
                                    }







                                    if (newDatanew.subactivityname === "GF RCC Slab") {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Supervision Check', checksdescription: 'See that concreting is done under skilled supervision. Never leave it to labour on site' },
                                            { checksHeading: 'Mix ratio check', checksdescription: 'The ratio of concrete and the water cement ratio should be as per the specifications or as directed by the engineer in charge' },
                                            { checksHeading: 'W/C Ratio check', checksdescription: 'Add water as per predetermined quantity only. Always measure the water with measuring container before adding in concrete.' },
                                            { checksHeading: 'Mix time check', checksdescription: 'Mix the wet concrete thoroughly for around 2 minutes to get the consistent concrete' },
                                            { checksHeading: 'Finishing check', checksdescription: 'Finish the surface and edges of concrete after placing of concrete using with trowels or wooden floats or metal floats.' },
                                            { checksHeading: 'Checklist after concreting', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'deshuttering check', checksdescription: 'Deshuttering of sides of outer beams after 48 hours.' },
                                            { checksHeading: 'curing check', checksdescription: 'Making small bunds in sand & cement mortar (1:10) for ponding method of curing for slab, with each bay having maximum size of 2.0 m x 2.0 m.' },
                                            { checksHeading: 'deshuttering check', checksdescription: 'Deshuttering of internal beam sides after 72 hours.' },
                                            { checksHeading: 'curing check', checksdescription: 'Curing of slab for 28 days.' },
                                            { checksHeading: 'deshuttering check', checksdescription: 'Deshuttering of slab after 7 days, 10 days or 15 days depending on spans.' },
                                            { checksHeading: 'Hacking check', checksdescription: 'Hacking of beam sides, beam bottom, slab bottom.' },
                                            { checksHeading: 'Honeycombing check', checksdescription: 'Minor honey combing surfaces, finished with rich mortar.' },
                                            { checksHeading: 'Honeycombing check', checksdescription: 'Major honeycombing shall be brought to the notice of R.C.C.Consultant.' },
                                        ];

                                        async function ReinforcementWorkChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        ReinforcementWorkChacks();
                                    }







                                    if (newDatanew.subactivityname === "FF RCC Slab") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the contractor to make the arrangements for pouring of concrete' },
                                            { subtaskdescription: 'Ask the contractor to mark the level  before concreting' },
                                            { subtaskdescription: 'Inform the concractor about the concrete mix ratio' },
                                            { subtaskdescription: 'Ask the contractor to control the water cement  ratio and mix waterproof chemical' },
                                            { subtaskdescription: 'Ask the contractor to pour the concrete evenly with proper finishing' },
                                            { subtaskdescription: 'Ask the contractor for compaction of  concrete' },
                                            { subtaskdescription: 'Checklist after concreting', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Check if any honeycombing occures and ask the contractor to repair it immediately' },
                                            { subtaskdescription: 'Ask the contractor to make the bunds for the curing' },
                                            { subtaskdescription: 'Ask the guard to do proper Curing' },
                                        ];

                                        async function BeamAndSlabRCCChecksCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamAndSlabRCCChecksCall();
                                    }







                                    if (newDatanew.subactivityname === "FF RCC Slab") {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Supervision Check', checksdescription: 'See that concreting is done under skilled supervision. Never leave it to labour on site' },
                                            { checksHeading: 'Mix ratio check', checksdescription: 'The ratio of concrete and the water cement ratio should be as per the specifications or as directed by the engineer in charge' },
                                            { checksHeading: 'W/C Ratio check', checksdescription: 'Add water as per predetermined quantity only. Always measure the water with measuring container before adding in concrete.' },
                                            { checksHeading: 'Mix time check', checksdescription: 'Mix the wet concrete thoroughly for around 2 minutes to get the consistent concrete' },
                                            { checksHeading: 'Finishing check', checksdescription: 'Finish the surface and edges of concrete after placing of concrete using with trowels or wooden floats or metal floats.' },
                                            { checksHeading: 'Checklist after concreting', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'deshuttering check', checksdescription: 'Deshuttering of sides of outer beams after 48 hours.' },
                                            { checksHeading: 'curing check', checksdescription: 'Making small bunds in sand & cement mortar (1:10) for ponding method of curing for slab, with each bay having maximum size of 2.0 m x 2.0 m.' },
                                            { checksHeading: 'deshuttering check', checksdescription: 'Deshuttering of internal beam sides after 72 hours.' },
                                            { checksHeading: 'curing check', checksdescription: 'Curing of slab for 28 days.' },
                                            { checksHeading: 'deshuttering check', checksdescription: 'Deshuttering of slab after 7 days, 10 days or 15 days depending on spans.' },
                                            { checksHeading: 'Hacking check', checksdescription: 'Hacking of beam sides, beam bottom, slab bottom.' },
                                            { checksHeading: 'Honeycombing check', checksdescription: 'Minor honey combing surfaces, finished with rich mortar.' },
                                            { checksHeading: 'Honeycombing check', checksdescription: 'Major honeycombing shall be brought to the notice of R.C.C.Consultant.' },
                                        ];

                                        async function ReinforcementWorkChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        ReinforcementWorkChacks();
                                    }

                                    if (newDatanew.subactivityname === "SF RCC Slab") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the contractor to make the arrangements for pouring of concrete' },
                                            { subtaskdescription: 'Ask the contractor to mark the level  before concreting' },
                                            { subtaskdescription: 'Inform the concractor about the concrete mix ratio' },
                                            { subtaskdescription: 'Ask the contractor to control the water cement  ratio and mix waterproof chemical' },
                                            { subtaskdescription: 'Ask the contractor to pour the concrete evenly with proper finishing' },
                                            { subtaskdescription: 'Ask the contractor for compaction of  concrete' },
                                            { subtaskdescription: 'Checklist after concreting', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Check if any honeycombing occures and ask the contractor to repair it immediately' },
                                            { subtaskdescription: 'Ask the contractor to make the bunds for the curing' },
                                            { subtaskdescription: 'Ask the guard to do proper Curing' },
                                        ];

                                        async function BeamAndSlabRCCChecksCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamAndSlabRCCChecksCall();
                                    }







                                    if (newDatanew.subactivityname === "SF RCC Slab") {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Supervision Check', checksdescription: 'See that concreting is done under skilled supervision. Never leave it to labour on site' },
                                            { checksHeading: 'Mix ratio check', checksdescription: 'The ratio of concrete and the water cement ratio should be as per the specifications or as directed by the engineer in charge' },
                                            { checksHeading: 'W/C Ratio check', checksdescription: 'Add water as per predetermined quantity only. Always measure the water with measuring container before adding in concrete.' },
                                            { checksHeading: 'Mix time check', checksdescription: 'Mix the wet concrete thoroughly for around 2 minutes to get the consistent concrete' },
                                            { checksHeading: 'Finishing check', checksdescription: 'Finish the surface and edges of concrete after placing of concrete using with trowels or wooden floats or metal floats.' },
                                            { checksHeading: 'Checklist after concreting', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'deshuttering check', checksdescription: 'Deshuttering of sides of outer beams after 48 hours.' },
                                            { checksHeading: 'curing check', checksdescription: 'Making small bunds in sand & cement mortar (1:10) for ponding method of curing for slab, with each bay having maximum size of 2.0 m x 2.0 m.' },
                                            { checksHeading: 'deshuttering check', checksdescription: 'Deshuttering of internal beam sides after 72 hours.' },
                                            { checksHeading: 'curing check', checksdescription: 'Curing of slab for 28 days.' },
                                            { checksHeading: 'deshuttering check', checksdescription: 'Deshuttering of slab after 7 days, 10 days or 15 days depending on spans.' },
                                            { checksHeading: 'Hacking check', checksdescription: 'Hacking of beam sides, beam bottom, slab bottom.' },
                                            { checksHeading: 'Honeycombing check', checksdescription: 'Minor honey combing surfaces, finished with rich mortar.' },
                                            { checksHeading: 'Honeycombing check', checksdescription: 'Major honeycombing shall be brought to the notice of R.C.C.Consultant.' },
                                        ];

                                        async function ReinforcementWorkChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        ReinforcementWorkChacks();
                                    }

                                    if (newDatanew.subactivityname === "TF RCC Slab") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the contractor to make the arrangements for pouring of concrete' },
                                            { subtaskdescription: 'Ask the contractor to mark the level  before concreting' },
                                            { subtaskdescription: 'Inform the concractor about the concrete mix ratio' },
                                            { subtaskdescription: 'Ask the contractor to control the water cement  ratio and mix waterproof chemical' },
                                            { subtaskdescription: 'Ask the contractor to pour the concrete evenly with proper finishing' },
                                            { subtaskdescription: 'Ask the contractor for compaction of  concrete' },
                                            { subtaskdescription: 'Checklist after concreting', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Check if any honeycombing occures and ask the contractor to repair it immediately' },
                                            { subtaskdescription: 'Ask the contractor to make the bunds for the curing' },
                                            { subtaskdescription: 'Ask the guard to do proper Curing' },
                                        ];

                                        async function BeamAndSlabRCCChecksCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamAndSlabRCCChecksCall();
                                    }







                                    if (newDatanew.subactivityname === "TF RCC Slab") {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Supervision Check', checksdescription: 'See that concreting is done under skilled supervision. Never leave it to labour on site' },
                                            { checksHeading: 'Mix ratio check', checksdescription: 'The ratio of concrete and the water cement ratio should be as per the specifications or as directed by the engineer in charge' },
                                            { checksHeading: 'W/C Ratio check', checksdescription: 'Add water as per predetermined quantity only. Always measure the water with measuring container before adding in concrete.' },
                                            { checksHeading: 'Mix time check', checksdescription: 'Mix the wet concrete thoroughly for around 2 minutes to get the consistent concrete' },
                                            { checksHeading: 'Finishing check', checksdescription: 'Finish the surface and edges of concrete after placing of concrete using with trowels or wooden floats or metal floats.' },
                                            { checksHeading: 'Checklist after concreting', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'deshuttering check', checksdescription: 'Deshuttering of sides of outer beams after 48 hours.' },
                                            { checksHeading: 'curing check', checksdescription: 'Making small bunds in sand & cement mortar (1:10) for ponding method of curing for slab, with each bay having maximum size of 2.0 m x 2.0 m.' },
                                            { checksHeading: 'deshuttering check', checksdescription: 'Deshuttering of internal beam sides after 72 hours.' },
                                            { checksHeading: 'curing check', checksdescription: 'Curing of slab for 28 days.' },
                                            { checksHeading: 'deshuttering check', checksdescription: 'Deshuttering of slab after 7 days, 10 days or 15 days depending on spans.' },
                                            { checksHeading: 'Hacking check', checksdescription: 'Hacking of beam sides, beam bottom, slab bottom.' },
                                            { checksHeading: 'Honeycombing check', checksdescription: 'Minor honey combing surfaces, finished with rich mortar.' },
                                            { checksHeading: 'Honeycombing check', checksdescription: 'Major honeycombing shall be brought to the notice of R.C.C.Consultant.' },
                                        ];

                                        async function ReinforcementWorkChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        ReinforcementWorkChacks();
                                    }

                                    if (newDatanew.subactivityname === "FoF RCC Slab") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the contractor to make the arrangements for pouring of concrete' },
                                            { subtaskdescription: 'Ask the contractor to mark the level  before concreting' },
                                            { subtaskdescription: 'Inform the concractor about the concrete mix ratio' },
                                            { subtaskdescription: 'Ask the contractor to control the water cement  ratio and mix waterproof chemical' },
                                            { subtaskdescription: 'Ask the contractor to pour the concrete evenly with proper finishing' },
                                            { subtaskdescription: 'Ask the contractor for compaction of  concrete' },
                                            { subtaskdescription: 'Checklist after concreting', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Check if any honeycombing occures and ask the contractor to repair it immediately' },
                                            { subtaskdescription: 'Ask the contractor to make the bunds for the curing' },
                                            { subtaskdescription: 'Ask the guard to do proper Curing' },
                                        ];

                                        async function BeamAndSlabRCCChecksCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamAndSlabRCCChecksCall();
                                    }







                                    if (newDatanew.subactivityname === "FoF RCC Slab") {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Supervision Check', checksdescription: 'See that concreting is done under skilled supervision. Never leave it to labour on site' },
                                            { checksHeading: 'Mix ratio check', checksdescription: 'The ratio of concrete and the water cement ratio should be as per the specifications or as directed by the engineer in charge' },
                                            { checksHeading: 'W/C Ratio check', checksdescription: 'Add water as per predetermined quantity only. Always measure the water with measuring container before adding in concrete.' },
                                            { checksHeading: 'Mix time check', checksdescription: 'Mix the wet concrete thoroughly for around 2 minutes to get the consistent concrete' },
                                            { checksHeading: 'Finishing check', checksdescription: 'Finish the surface and edges of concrete after placing of concrete using with trowels or wooden floats or metal floats.' },
                                            { checksHeading: 'Checklist after concreting', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'deshuttering check', checksdescription: 'Deshuttering of sides of outer beams after 48 hours.' },
                                            { checksHeading: 'curing check', checksdescription: 'Making small bunds in sand & cement mortar (1:10) for ponding method of curing for slab, with each bay having maximum size of 2.0 m x 2.0 m.' },
                                            { checksHeading: 'deshuttering check', checksdescription: 'Deshuttering of internal beam sides after 72 hours.' },
                                            { checksHeading: 'curing check', checksdescription: 'Curing of slab for 28 days.' },
                                            { checksHeading: 'deshuttering check', checksdescription: 'Deshuttering of slab after 7 days, 10 days or 15 days depending on spans.' },
                                            { checksHeading: 'Hacking check', checksdescription: 'Hacking of beam sides, beam bottom, slab bottom.' },
                                            { checksHeading: 'Honeycombing check', checksdescription: 'Minor honey combing surfaces, finished with rich mortar.' },
                                            { checksHeading: 'Honeycombing check', checksdescription: 'Major honeycombing shall be brought to the notice of R.C.C.Consultant.' },
                                        ];

                                        async function ReinforcementWorkChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        ReinforcementWorkChacks();
                                    }

                                    if (newDatanew.subactivityname === "Tower RCC Slab") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the contractor to make the arrangements for pouring of concrete' },
                                            { subtaskdescription: 'Ask the contractor to mark the level  before concreting' },
                                            { subtaskdescription: 'Inform the concractor about the concrete mix ratio' },
                                            { subtaskdescription: 'Ask the contractor to control the water cement  ratio and mix waterproof chemical' },
                                            { subtaskdescription: 'Ask the contractor to pour the concrete evenly with proper finishing' },
                                            { subtaskdescription: 'Ask the contractor for compaction of  concrete' },
                                            { subtaskdescription: 'Checklist after concreting', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Check if any honeycombing occures and ask the contractor to repair it immediately' },
                                            { subtaskdescription: 'Ask the contractor to make the bunds for the curing' },
                                            { subtaskdescription: 'Ask the guard to do proper Curing' },
                                        ];

                                        async function BeamAndSlabRCCChecksCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamAndSlabRCCChecksCall();
                                    }







                                    if (newDatanew.subactivityname === "Tower RCC Slab") {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Supervision Check', checksdescription: 'See that concreting is done under skilled supervision. Never leave it to labour on site' },
                                            { checksHeading: 'Mix ratio check', checksdescription: 'The ratio of concrete and the water cement ratio should be as per the specifications or as directed by the engineer in charge' },
                                            { checksHeading: 'W/C Ratio check', checksdescription: 'Add water as per predetermined quantity only. Always measure the water with measuring container before adding in concrete.' },
                                            { checksHeading: 'Mix time check', checksdescription: 'Mix the wet concrete thoroughly for around 2 minutes to get the consistent concrete' },
                                            { checksHeading: 'Finishing check', checksdescription: 'Finish the surface and edges of concrete after placing of concrete using with trowels or wooden floats or metal floats.' },
                                            { checksHeading: 'Checklist after concreting', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'deshuttering check', checksdescription: 'Deshuttering of sides of outer beams after 48 hours.' },
                                            { checksHeading: 'curing check', checksdescription: 'Making small bunds in sand & cement mortar (1:10) for ponding method of curing for slab, with each bay having maximum size of 2.0 m x 2.0 m.' },
                                            { checksHeading: 'deshuttering check', checksdescription: 'Deshuttering of internal beam sides after 72 hours.' },
                                            { checksHeading: 'curing check', checksdescription: 'Curing of slab for 28 days.' },
                                            { checksHeading: 'deshuttering check', checksdescription: 'Deshuttering of slab after 7 days, 10 days or 15 days depending on spans.' },
                                            { checksHeading: 'Hacking check', checksdescription: 'Hacking of beam sides, beam bottom, slab bottom.' },
                                            { checksHeading: 'Honeycombing check', checksdescription: 'Minor honey combing surfaces, finished with rich mortar.' },
                                            { checksHeading: 'Honeycombing check', checksdescription: 'Major honeycombing shall be brought to the notice of R.C.C.Consultant.' },
                                        ];

                                        async function ReinforcementWorkChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        ReinforcementWorkChacks();
                                    }



































                                    if (newDatanew.subactivityname === "GF Slab Shuttering") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1 : Checking of shuttering material', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Assign the labour and the contractor' },
                                            { subtaskdescription: 'Arrange the rebars and binding wire  at site' },
                                            { subtaskdescription: 'Ask the contractor to arrange  the shuttering  and supports at site' },
                                            { subtaskdescription: 'Arrange  the shuttering  oil and cover blocks at site' },
                                            { subtaskdescription: 'Arrange the stock of cement , sand & aggregate,steel and waterproofing compound required for casting of slab.(Check the manfacturing date of Cement)' },
                                            { subtaskdescription: 'Arrangement of water & standby arrangement of water in case of electrical failure.' },
                                            { subtaskdescription: 'Ask the contractor to arrange the sufficient labour strength for slab casting' },
                                            { subtaskdescription: 'Inform contractor about starting time of slab & maximum allowable time for slab casting.' },
                                            { subtaskdescription: 'Ask the contractor to mark the levels  in the column for checking the slab shuttering level with water level' },
                                            { subtaskdescription: 'Ask the contractor to remove the damaged shuttering and only workable shuttering should be used at site' },
                                            { subtaskdescription: 'Ask the contractor  to check the line and level of beam bottom' },
                                            { subtaskdescription: 'Ask the contractor  to do proper fiing of sides with line and level' },
                                            { subtaskdescription: 'Ask the contractor to check the individual level of each slab bay' },
                                            { subtaskdescription: 'Ask the contractor  for proper tightening of joints and oiling of shuttering' },
                                            { subtaskdescription: 'Ask the contractor to check the individual beam to beam measurement' },
                                            { subtaskdescription: 'Finalise the location and depth of sunken  as per the drawing' },
                                            { subtaskdescription: 'Ask the contractor to arrange the shuttering and Supports' },
                                            { subtaskdescription: 'Ask the contractor to use workable shuttering only and apply shuttering oil' },
                                            { subtaskdescription: 'Arrange the cover blocks and ask the contractor to place them properly' },
                                            { subtaskdescription: 'Arrange the putty,thermocol and tape' },
                                            { subtaskdescription: 'Ask the contractor to fill the gaps' },
                                        ];

                                        async function BeamSlabShutteringReinforcementRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteringReinforcementRCCfunCall();
                                    }






                                    if (newDatanew.subactivityname === "GF Slab Shuttering") {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Height Check', checksdescription: 'Height of slab from plinth / slab level.' },
                                            { checksHeading: 'Shuttering material Check', checksdescription: 'Quality of shuttering material.' },
                                            { checksHeading: 'Column cap check', checksdescription: 'Proper fixing of cap on column to take load of beam & slab shuttering.' },
                                            { checksHeading: 'Beam bottom check', checksdescription: 'Proper fixing of beam bottom cap.' },
                                            { checksHeading: 'Plumb and line check', checksdescription: 'Proper fixing of props for bottom in line & plumb at every 0.6 m internal.' },
                                            { checksHeading: 'Packing check', checksdescription: 'Packing below props only one or two wooden plank pieces is allowed. (No bricks or blocks are allowed).' },
                                            { checksHeading: 'Support check', checksdescription: 'Support to vertical joint of shuttering for 0.6 m beam or 0.75 m beam.' },
                                            { checksHeading: 'Packing check', checksdescription: 'Gaps in beam sides to be filled.' },
                                            { checksHeading: 'Beam sides check', checksdescription: 'Ensure fixing of steel plates over beam sides in flush position.' },
                                            { checksHeading: 'Side Plank Check', checksdescription: '‘Side plank’ for slab panel periphery' },
                                            { checksHeading: 'Tightening check', checksdescription: 'Water tightening of plates joints & ghabadi work.' },
                                            { checksHeading: 'Oiling check', checksdescription: 'Oiling of slab shuttering.' },
                                            { checksHeading: 'Line check', checksdescription: 'Outer line of beam sides.' },
                                            { checksHeading: 'Dimension check', checksdescription: 'Room sides & diagonals.' },
                                            { checksHeading: 'Tightening check', checksdescription: 'Water tightness near junctions of columns & beams.' },

                                        ];

                                        async function BeamSlabShutteringReinforcementRCCChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteringReinforcementRCCChacks();
                                    }









                                    if (newDatanew.subactivityname === "FF Slab Shuttering") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1 : Checking of shuttering material', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Assign the labour and the contractor' },
                                            { subtaskdescription: 'Arrange the rebars and binding wire  at site' },
                                            { subtaskdescription: 'Ask the contractor to arrange  the shuttering  and supports at site' },
                                            { subtaskdescription: 'Arrange  the shuttering  oil and cover blocks at site' },
                                            { subtaskdescription: 'Arrange the stock of cement , sand & aggregate,steel and waterproofing compound required for casting of slab.(Check the manfacturing date of Cement)' },
                                            { subtaskdescription: 'Arrangement of water & standby arrangement of water in case of electrical failure.' },
                                            { subtaskdescription: 'Ask the contractor to arrange the sufficient labour strength for slab casting' },
                                            { subtaskdescription: 'Inform contractor about starting time of slab & maximum allowable time for slab casting.' },
                                            { subtaskdescription: 'Ask the contractor to mark the levels  in the column for checking the slab shuttering level with water level' },
                                            { subtaskdescription: 'Ask the contractor to remove the damaged shuttering and only workable shuttering should be used at site' },
                                            { subtaskdescription: 'Ask the contractor  to check the line and level of beam bottom' },
                                            { subtaskdescription: 'Ask the contractor  to do proper fiing of sides with line and level' },
                                            { subtaskdescription: 'Ask the contractor to check the individual level of each slab bay' },
                                            { subtaskdescription: 'Ask the contractor  for proper tightening of joints and oiling of shuttering' },
                                            { subtaskdescription: 'Ask the contractor to check the individual beam to beam measurement' },
                                            { subtaskdescription: 'Finalise the location and depth of sunken  as per the drawing' },
                                            { subtaskdescription: 'Ask the contractor to arrange the shuttering and Supports' },
                                            { subtaskdescription: 'Ask the contractor to use workable shuttering only and apply shuttering oil' },
                                            { subtaskdescription: 'Arrange the cover blocks and ask the contractor to place them properly' },
                                            { subtaskdescription: 'Arrange the putty,thermocol and tape' },
                                            { subtaskdescription: 'Ask the contractor to fill the gaps' },
                                        ];

                                        async function BeamSlabShutteringReinforcementRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteringReinforcementRCCfunCall();
                                    }






                                    if (newDatanew.subactivityname === "FF Slab Shuttering") {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Height Check', checksdescription: 'Height of slab from plinth / slab level.' },
                                            { checksHeading: 'Shuttering material Check', checksdescription: 'Quality of shuttering material.' },
                                            { checksHeading: 'Column cap check', checksdescription: 'Proper fixing of cap on column to take load of beam & slab shuttering.' },
                                            { checksHeading: 'Beam bottom check', checksdescription: 'Proper fixing of beam bottom cap.' },
                                            { checksHeading: 'Plumb and line check', checksdescription: 'Proper fixing of props for bottom in line & plumb at every 0.6 m internal.' },
                                            { checksHeading: 'Packing check', checksdescription: 'Packing below props only one or two wooden plank pieces is allowed. (No bricks or blocks are allowed).' },
                                            { checksHeading: 'Support check', checksdescription: 'Support to vertical joint of shuttering for 0.6 m beam or 0.75 m beam.' },
                                            { checksHeading: 'Packing check', checksdescription: 'Gaps in beam sides to be filled.' },
                                            { checksHeading: 'Beam sides check', checksdescription: 'Ensure fixing of steel plates over beam sides in flush position.' },
                                            { checksHeading: 'Side Plank Check', checksdescription: '‘Side plank’ for slab panel periphery' },
                                            { checksHeading: 'Tightening check', checksdescription: 'Water tightening of plates joints & ghabadi work.' },
                                            { checksHeading: 'Oiling check', checksdescription: 'Oiling of slab shuttering.' },
                                            { checksHeading: 'Line check', checksdescription: 'Outer line of beam sides.' },
                                            { checksHeading: 'Dimension check', checksdescription: 'Room sides & diagonals.' },
                                            { checksHeading: 'Tightening check', checksdescription: 'Water tightness near junctions of columns & beams.' },

                                        ];

                                        async function BeamSlabShutteringReinforcementRCCChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteringReinforcementRCCChacks();
                                    }


















                                    if (newDatanew.subactivityname === "SF Slab Shuttering") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1 : Checking of shuttering material', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Assign the labour and the contractor' },
                                            { subtaskdescription: 'Arrange the rebars and binding wire  at site' },
                                            { subtaskdescription: 'Ask the contractor to arrange  the shuttering  and supports at site' },
                                            { subtaskdescription: 'Arrange  the shuttering  oil and cover blocks at site' },
                                            { subtaskdescription: 'Arrange the stock of cement , sand & aggregate,steel and waterproofing compound required for casting of slab.(Check the manfacturing date of Cement)' },
                                            { subtaskdescription: 'Arrangement of water & standby arrangement of water in case of electrical failure.' },
                                            { subtaskdescription: 'Ask the contractor to arrange the sufficient labour strength for slab casting' },
                                            { subtaskdescription: 'Inform contractor about starting time of slab & maximum allowable time for slab casting.' },
                                            { subtaskdescription: 'Ask the contractor to mark the levels  in the column for checking the slab shuttering level with water level' },
                                            { subtaskdescription: 'Ask the contractor to remove the damaged shuttering and only workable shuttering should be used at site' },
                                            { subtaskdescription: 'Ask the contractor  to check the line and level of beam bottom' },
                                            { subtaskdescription: 'Ask the contractor  to do proper fiing of sides with line and level' },
                                            { subtaskdescription: 'Ask the contractor to check the individual level of each slab bay' },
                                            { subtaskdescription: 'Ask the contractor  for proper tightening of joints and oiling of shuttering' },
                                            { subtaskdescription: 'Ask the contractor to check the individual beam to beam measurement' },
                                            { subtaskdescription: 'Finalise the location and depth of sunken  as per the drawing' },
                                            { subtaskdescription: 'Ask the contractor to arrange the shuttering and Supports' },
                                            { subtaskdescription: 'Ask the contractor to use workable shuttering only and apply shuttering oil' },
                                            { subtaskdescription: 'Arrange the cover blocks and ask the contractor to place them properly' },
                                            { subtaskdescription: 'Arrange the putty,thermocol and tape' },
                                            { subtaskdescription: 'Ask the contractor to fill the gaps' },
                                        ];

                                        async function BeamSlabShutteringReinforcementRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteringReinforcementRCCfunCall();
                                    }






                                    if (newDatanew.subactivityname === "SF Slab Shuttering") {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Height Check', checksdescription: 'Height of slab from plinth / slab level.' },
                                            { checksHeading: 'Shuttering material Check', checksdescription: 'Quality of shuttering material.' },
                                            { checksHeading: 'Column cap check', checksdescription: 'Proper fixing of cap on column to take load of beam & slab shuttering.' },
                                            { checksHeading: 'Beam bottom check', checksdescription: 'Proper fixing of beam bottom cap.' },
                                            { checksHeading: 'Plumb and line check', checksdescription: 'Proper fixing of props for bottom in line & plumb at every 0.6 m internal.' },
                                            { checksHeading: 'Packing check', checksdescription: 'Packing below props only one or two wooden plank pieces is allowed. (No bricks or blocks are allowed).' },
                                            { checksHeading: 'Support check', checksdescription: 'Support to vertical joint of shuttering for 0.6 m beam or 0.75 m beam.' },
                                            { checksHeading: 'Packing check', checksdescription: 'Gaps in beam sides to be filled.' },
                                            { checksHeading: 'Beam sides check', checksdescription: 'Ensure fixing of steel plates over beam sides in flush position.' },
                                            { checksHeading: 'Side Plank Check', checksdescription: '‘Side plank’ for slab panel periphery' },
                                            { checksHeading: 'Tightening check', checksdescription: 'Water tightening of plates joints & ghabadi work.' },
                                            { checksHeading: 'Oiling check', checksdescription: 'Oiling of slab shuttering.' },
                                            { checksHeading: 'Line check', checksdescription: 'Outer line of beam sides.' },
                                            { checksHeading: 'Dimension check', checksdescription: 'Room sides & diagonals.' },
                                            { checksHeading: 'Tightening check', checksdescription: 'Water tightness near junctions of columns & beams.' },

                                        ];

                                        async function BeamSlabShutteringReinforcementRCCChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteringReinforcementRCCChacks();
                                    }



                                    if (newDatanew.subactivityname === "SF Slab Shuttering") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Beam', headingforshortingTwo: 'Slab' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Explain Lvl.', NormalHeadingThree: 'Bottom', NormalHeadingfoure: 'Sides' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Plate : Gap', NormalHeadingThree: 'Support', NormalHeadingfoure: 'Cvr (O|T|P)' },
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }






                                    if (newDatanew.subactivityname === "TF Slab Shuttering") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1 : Checking of shuttering material', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Assign the labour and the contractor' },
                                            { subtaskdescription: 'Arrange the rebars and binding wire  at site' },
                                            { subtaskdescription: 'Ask the contractor to arrange  the shuttering  and supports at site' },
                                            { subtaskdescription: 'Arrange  the shuttering  oil and cover blocks at site' },
                                            { subtaskdescription: 'Arrange the stock of cement , sand & aggregate,steel and waterproofing compound required for casting of slab.(Check the manfacturing date of Cement)' },
                                            { subtaskdescription: 'Arrangement of water & standby arrangement of water in case of electrical failure.' },
                                            { subtaskdescription: 'Ask the contractor to arrange the sufficient labour strength for slab casting' },
                                            { subtaskdescription: 'Inform contractor about starting time of slab & maximum allowable time for slab casting.' },
                                            { subtaskdescription: 'Ask the contractor to mark the levels  in the column for checking the slab shuttering level with water level' },
                                            { subtaskdescription: 'Ask the contractor to remove the damaged shuttering and only workable shuttering should be used at site' },
                                            { subtaskdescription: 'Ask the contractor  to check the line and level of beam bottom' },
                                            { subtaskdescription: 'Ask the contractor  to do proper fiing of sides with line and level' },
                                            { subtaskdescription: 'Ask the contractor to check the individual level of each slab bay' },
                                            { subtaskdescription: 'Ask the contractor  for proper tightening of joints and oiling of shuttering' },
                                            { subtaskdescription: 'Ask the contractor to check the individual beam to beam measurement' },
                                            { subtaskdescription: 'Finalise the location and depth of sunken  as per the drawing' },
                                            { subtaskdescription: 'Ask the contractor to arrange the shuttering and Supports' },
                                            { subtaskdescription: 'Ask the contractor to use workable shuttering only and apply shuttering oil' },
                                            { subtaskdescription: 'Arrange the cover blocks and ask the contractor to place them properly' },
                                            { subtaskdescription: 'Arrange the putty,thermocol and tape' },
                                            { subtaskdescription: 'Ask the contractor to fill the gaps' },
                                        ];

                                        async function BeamSlabShutteringReinforcementRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteringReinforcementRCCfunCall();
                                    }






                                    if (newDatanew.subactivityname === "TF Slab Shuttering") {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Height Check', checksdescription: 'Height of slab from plinth / slab level.' },
                                            { checksHeading: 'Shuttering material Check', checksdescription: 'Quality of shuttering material.' },
                                            { checksHeading: 'Column cap check', checksdescription: 'Proper fixing of cap on column to take load of beam & slab shuttering.' },
                                            { checksHeading: 'Beam bottom check', checksdescription: 'Proper fixing of beam bottom cap.' },
                                            { checksHeading: 'Plumb and line check', checksdescription: 'Proper fixing of props for bottom in line & plumb at every 0.6 m internal.' },
                                            { checksHeading: 'Packing check', checksdescription: 'Packing below props only one or two wooden plank pieces is allowed. (No bricks or blocks are allowed).' },
                                            { checksHeading: 'Support check', checksdescription: 'Support to vertical joint of shuttering for 0.6 m beam or 0.75 m beam.' },
                                            { checksHeading: 'Packing check', checksdescription: 'Gaps in beam sides to be filled.' },
                                            { checksHeading: 'Beam sides check', checksdescription: 'Ensure fixing of steel plates over beam sides in flush position.' },
                                            { checksHeading: 'Side Plank Check', checksdescription: '‘Side plank’ for slab panel periphery' },
                                            { checksHeading: 'Tightening check', checksdescription: 'Water tightening of plates joints & ghabadi work.' },
                                            { checksHeading: 'Oiling check', checksdescription: 'Oiling of slab shuttering.' },
                                            { checksHeading: 'Line check', checksdescription: 'Outer line of beam sides.' },
                                            { checksHeading: 'Dimension check', checksdescription: 'Room sides & diagonals.' },
                                            { checksHeading: 'Tightening check', checksdescription: 'Water tightness near junctions of columns & beams.' },

                                        ];

                                        async function BeamSlabShutteringReinforcementRCCChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteringReinforcementRCCChacks();
                                    }




                                    if (newDatanew.subactivityname === "TF Slab Shuttering") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Beam', headingforshortingTwo: 'Slab' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Explain Lvl.', NormalHeadingThree: 'Bottom', NormalHeadingfoure: 'Sides' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Plate : Gap', NormalHeadingThree: 'Support', NormalHeadingfoure: 'Cvr (O|T|P)' },
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }









                                    if (newDatanew.subactivityname === "FoF Slab Shuttering") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1 : Checking of shuttering material', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Assign the labour and the contractor' },
                                            { subtaskdescription: 'Arrange the rebars and binding wire  at site' },
                                            { subtaskdescription: 'Ask the contractor to arrange  the shuttering  and supports at site' },
                                            { subtaskdescription: 'Arrange  the shuttering  oil and cover blocks at site' },
                                            { subtaskdescription: 'Arrange the stock of cement , sand & aggregate,steel and waterproofing compound required for casting of slab.(Check the manfacturing date of Cement)' },
                                            { subtaskdescription: 'Arrangement of water & standby arrangement of water in case of electrical failure.' },
                                            { subtaskdescription: 'Ask the contractor to arrange the sufficient labour strength for slab casting' },
                                            { subtaskdescription: 'Inform contractor about starting time of slab & maximum allowable time for slab casting.' },
                                            { subtaskdescription: 'Ask the contractor to mark the levels  in the column for checking the slab shuttering level with water level' },
                                            { subtaskdescription: 'Ask the contractor to remove the damaged shuttering and only workable shuttering should be used at site' },
                                            { subtaskdescription: 'Ask the contractor  to check the line and level of beam bottom' },
                                            { subtaskdescription: 'Ask the contractor  to do proper fiing of sides with line and level' },
                                            { subtaskdescription: 'Ask the contractor to check the individual level of each slab bay' },
                                            { subtaskdescription: 'Ask the contractor  for proper tightening of joints and oiling of shuttering' },
                                            { subtaskdescription: 'Ask the contractor to check the individual beam to beam measurement' },
                                            { subtaskdescription: 'Finalise the location and depth of sunken  as per the drawing' },
                                            { subtaskdescription: 'Ask the contractor to arrange the shuttering and Supports' },
                                            { subtaskdescription: 'Ask the contractor to use workable shuttering only and apply shuttering oil' },
                                            { subtaskdescription: 'Arrange the cover blocks and ask the contractor to place them properly' },
                                            { subtaskdescription: 'Arrange the putty,thermocol and tape' },
                                            { subtaskdescription: 'Ask the contractor to fill the gaps' },
                                        ];

                                        async function BeamSlabShutteringReinforcementRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteringReinforcementRCCfunCall();
                                    }






                                    if (newDatanew.subactivityname === "FoF Slab Shuttering") {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Height Check', checksdescription: 'Height of slab from plinth / slab level.' },
                                            { checksHeading: 'Shuttering material Check', checksdescription: 'Quality of shuttering material.' },
                                            { checksHeading: 'Column cap check', checksdescription: 'Proper fixing of cap on column to take load of beam & slab shuttering.' },
                                            { checksHeading: 'Beam bottom check', checksdescription: 'Proper fixing of beam bottom cap.' },
                                            { checksHeading: 'Plumb and line check', checksdescription: 'Proper fixing of props for bottom in line & plumb at every 0.6 m internal.' },
                                            { checksHeading: 'Packing check', checksdescription: 'Packing below props only one or two wooden plank pieces is allowed. (No bricks or blocks are allowed).' },
                                            { checksHeading: 'Support check', checksdescription: 'Support to vertical joint of shuttering for 0.6 m beam or 0.75 m beam.' },
                                            { checksHeading: 'Packing check', checksdescription: 'Gaps in beam sides to be filled.' },
                                            { checksHeading: 'Beam sides check', checksdescription: 'Ensure fixing of steel plates over beam sides in flush position.' },
                                            { checksHeading: 'Side Plank Check', checksdescription: '‘Side plank’ for slab panel periphery' },
                                            { checksHeading: 'Tightening check', checksdescription: 'Water tightening of plates joints & ghabadi work.' },
                                            { checksHeading: 'Oiling check', checksdescription: 'Oiling of slab shuttering.' },
                                            { checksHeading: 'Line check', checksdescription: 'Outer line of beam sides.' },
                                            { checksHeading: 'Dimension check', checksdescription: 'Room sides & diagonals.' },
                                            { checksHeading: 'Tightening check', checksdescription: 'Water tightness near junctions of columns & beams.' },

                                        ];

                                        async function BeamSlabShutteringReinforcementRCCChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteringReinforcementRCCChacks();
                                    }


                                    if (newDatanew.subactivityname === "FoF Slab Shuttering") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Beam', headingforshortingTwo: 'Slab' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Explain Lvl.', NormalHeadingThree: 'Bottom', NormalHeadingfoure: 'Sides' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Plate : Gap', NormalHeadingThree: 'Support', NormalHeadingfoure: 'Cvr (O|T|P)' },
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }








                                    if (newDatanew.subactivityname === "Tower Slab Shuttering") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1 : Checking of shuttering material', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Assign the labour and the contractor' },
                                            { subtaskdescription: 'Arrange the rebars and binding wire  at site' },
                                            { subtaskdescription: 'Ask the contractor to arrange  the shuttering  and supports at site' },
                                            { subtaskdescription: 'Arrange  the shuttering  oil and cover blocks at site' },
                                            { subtaskdescription: 'Arrange the stock of cement , sand & aggregate,steel and waterproofing compound required for casting of slab.(Check the manfacturing date of Cement)' },
                                            { subtaskdescription: 'Arrangement of water & standby arrangement of water in case of electrical failure.' },
                                            { subtaskdescription: 'Ask the contractor to arrange the sufficient labour strength for slab casting' },
                                            { subtaskdescription: 'Inform contractor about starting time of slab & maximum allowable time for slab casting.' },
                                            { subtaskdescription: 'Ask the contractor to mark the levels  in the column for checking the slab shuttering level with water level' },
                                            { subtaskdescription: 'Ask the contractor to remove the damaged shuttering and only workable shuttering should be used at site' },
                                            { subtaskdescription: 'Ask the contractor  to check the line and level of beam bottom' },
                                            { subtaskdescription: 'Ask the contractor  to do proper fiing of sides with line and level' },
                                            { subtaskdescription: 'Ask the contractor to check the individual level of each slab bay' },
                                            { subtaskdescription: 'Ask the contractor  for proper tightening of joints and oiling of shuttering' },
                                            { subtaskdescription: 'Ask the contractor to check the individual beam to beam measurement' },
                                            { subtaskdescription: 'Finalise the location and depth of sunken  as per the drawing' },
                                            { subtaskdescription: 'Ask the contractor to arrange the shuttering and Supports' },
                                            { subtaskdescription: 'Ask the contractor to use workable shuttering only and apply shuttering oil' },
                                            { subtaskdescription: 'Arrange the cover blocks and ask the contractor to place them properly' },
                                            { subtaskdescription: 'Arrange the putty,thermocol and tape' },
                                            { subtaskdescription: 'Ask the contractor to fill the gaps' },
                                        ];

                                        async function BeamSlabShutteringReinforcementRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteringReinforcementRCCfunCall();
                                    }






                                    if (newDatanew.subactivityname === "Tower Slab Shuttering") {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Height Check', checksdescription: 'Height of slab from plinth / slab level.' },
                                            { checksHeading: 'Shuttering material Check', checksdescription: 'Quality of shuttering material.' },
                                            { checksHeading: 'Column cap check', checksdescription: 'Proper fixing of cap on column to take load of beam & slab shuttering.' },
                                            { checksHeading: 'Beam bottom check', checksdescription: 'Proper fixing of beam bottom cap.' },
                                            { checksHeading: 'Plumb and line check', checksdescription: 'Proper fixing of props for bottom in line & plumb at every 0.6 m internal.' },
                                            { checksHeading: 'Packing check', checksdescription: 'Packing below props only one or two wooden plank pieces is allowed. (No bricks or blocks are allowed).' },
                                            { checksHeading: 'Support check', checksdescription: 'Support to vertical joint of shuttering for 0.6 m beam or 0.75 m beam.' },
                                            { checksHeading: 'Packing check', checksdescription: 'Gaps in beam sides to be filled.' },
                                            { checksHeading: 'Beam sides check', checksdescription: 'Ensure fixing of steel plates over beam sides in flush position.' },
                                            { checksHeading: 'Side Plank Check', checksdescription: '‘Side plank’ for slab panel periphery' },
                                            { checksHeading: 'Tightening check', checksdescription: 'Water tightening of plates joints & ghabadi work.' },
                                            { checksHeading: 'Oiling check', checksdescription: 'Oiling of slab shuttering.' },
                                            { checksHeading: 'Line check', checksdescription: 'Outer line of beam sides.' },
                                            { checksHeading: 'Dimension check', checksdescription: 'Room sides & diagonals.' },
                                            { checksHeading: 'Tightening check', checksdescription: 'Water tightness near junctions of columns & beams.' },

                                        ];

                                        async function BeamSlabShutteringReinforcementRCCChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteringReinforcementRCCChacks();
                                    }


                                    if (newDatanew.subactivityname === "Tower Slab Shuttering") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Beam', headingforshortingTwo: 'Slab' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Explain Lvl.', NormalHeadingThree: 'Bottom', NormalHeadingfoure: 'Sides' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Plate : Gap', NormalHeadingThree: 'Support', NormalHeadingfoure: 'Cvr (O|T|P)' },
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }















































                                    if (newDatanew.subactivityname === "GF RCC Column") {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Gridline check', checksdescription: 'Plotting of gridline for center of column above plinth / floor slab.' },
                                            { checksHeading: 'Lapping check', checksdescription: 'Binding & placing column reinforcement above upper floor slab as per required height, considering lap length of the bar.' },
                                            { checksHeading: 'Drawing check', checksdescription: 'Check if the column reinforcement is as per the lastest structural drawings' },
                                            { checksHeading: 'Shuttering Oil check', checksdescription: 'Check if the shuttering is properly cleaned and oiled' },
                                            { checksHeading: 'Packing check', checksdescription: 'Check if the gaps at joints are properly packed' },
                                            { checksHeading: 'Support check', checksdescription: 'Check if the props are resting on hard surface so as to prevent misalignment of columns' },
                                            { checksHeading: 'Concrete level check', checksdescription: 'Check if the top level of concrete has been marked' },
                                            { checksHeading: 'Material check', checksdescription: 'The material (cement,sand and aggregate) to be used for  concreting are of good quality' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Compaction check', checksdescription: 'Check if the concrete is properly compacted with the help of vibrators to reduce the air voids' },
                                            { checksHeading: 'Concrete Filling Check', checksdescription: 'Concrete filling should be continuous, for each column No Break in between or Mixer Break' },
                                            { checksHeading: 'W/C ratio check', checksdescription: 'Controlled water cement ratio.' },
                                            { checksHeading: 'Compaction check', checksdescription: 'Proper compaction of concrete' },
                                            { checksHeading: 'Phase 3', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Deshuttering check', checksdescription: 'Deshuttering of columns after 24 hrs-48 hrs.' },
                                            { checksHeading: '', checksdescription: 'Submission of the deshuttering report to higher authority.' },
                                            { checksHeading: 'Curing check', checksdescription: 'Curing of Columns minimum for 10 days' },
                                        ];

                                        async function pedastalrccChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        pedastalrccChacks();
                                    }




                                    if (newDatanew.subactivityname === "GF RCC Column") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Assign the labour and Contractor for the work' },
                                            { subtaskdescription: 'Explain the contractor about the work' },
                                            { subtaskdescription: 'Arrange the rebars and Binding Wires at site' },
                                            { subtaskdescription: 'Ask the contractor to arrange the shuttering and supports at site' },
                                            { subtaskdescription: 'Ask the contractor to make the arrangements for concrete mixer ,vibrator and Diesel' },
                                            { subtaskdescription: 'Calculate the material required for RCC and infrom the purchase manager' },
                                            { subtaskdescription: 'Aks the contractor to use the workable shuttering only  and do proper oiling of shuttering' },
                                            { subtaskdescription: 'Arrange the cover blocks at site and ask the contractor to place them' },
                                            { subtaskdescription: 'Arrange the putty,thermocol and Tape' },
                                            { subtaskdescription: 'Ask the contractor to make the arrangements for pouring of concrete' },
                                            { subtaskdescription: 'Arrange the water for concreting' },
                                            { subtaskdescription: 'Ask the contractor to check the electricity connections' },
                                            { subtaskdescription: 'Ask the contractor to clean and oil the shuttering and fill the gaps' },
                                            { subtaskdescription: 'Ask the contractor to mark the top level of concreting' },
                                            { subtaskdescription: 'Ask the contractor to check the line and Level' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Inform the contractor about the concrete mix ratio' },
                                            { subtaskdescription: 'Ask the contractor to control the water cement ratio' },
                                            { subtaskdescription: 'Ask the contractor to do proper compaction' },
                                            { subtaskdescription: 'Inform the contractor about the date of deshuttering' },
                                            { subtaskdescription: 'Phase 3', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Check for honeycombing during deshuttering and ask the contractor to repair it properly' },
                                            { subtaskdescription: 'Ask the guard to paint the curing compound' },
                                            { subtaskdescription: 'Ask the Guard to do three times curing' },
                                        ];

                                        async function RCCPedestalfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RCCPedestalfunCall();
                                    }



















                                    if (newDatanew.subactivityname === "FF RCC Column") {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Gridline check', checksdescription: 'Plotting of gridline for center of column above plinth / floor slab.' },
                                            { checksHeading: 'Lapping check', checksdescription: 'Binding & placing column reinforcement above upper floor slab as per required height, considering lap length of the bar.' },
                                            { checksHeading: 'Drawing check', checksdescription: 'Check if the column reinforcement is as per the lastest structural drawings' },
                                            { checksHeading: 'Shuttering Oil check', checksdescription: 'Check if the shuttering is properly cleaned and oiled' },
                                            { checksHeading: 'Packing check', checksdescription: 'Check if the gaps at joints are properly packed' },
                                            { checksHeading: 'Support check', checksdescription: 'Check if the props are resting on hard surface so as to prevent misalignment of columns' },
                                            { checksHeading: 'Concrete level check', checksdescription: 'Check if the top level of concrete has been marked' },
                                            { checksHeading: 'Material check', checksdescription: 'The material (cement,sand and aggregate) to be used for  concreting are of good quality' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Compaction check', checksdescription: 'Check if the concrete is properly compacted with the help of vibrators to reduce the air voids' },
                                            { checksHeading: 'Concrete Filling Check', checksdescription: 'Concrete filling should be continuous, for each column No Break in between or Mixer Break' },
                                            { checksHeading: 'W/C ratio check', checksdescription: 'Controlled water cement ratio.' },
                                            { checksHeading: 'Compaction check', checksdescription: 'Proper compaction of concrete' },
                                            { checksHeading: 'Phase 3', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Deshuttering check', checksdescription: 'Deshuttering of columns after 24 hrs-48 hrs.' },
                                            { checksHeading: '', checksdescription: 'Submission of the deshuttering report to higher authority.' },
                                            { checksHeading: 'Curing check', checksdescription: 'Curing of Columns minimum for 10 days' },
                                        ];

                                        async function pedastalrccChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        pedastalrccChacks();
                                    }




                                    if (newDatanew.subactivityname === "FF RCC Column") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Assign the labour and Contractor for the work' },
                                            { subtaskdescription: 'Explain the contractor about the work' },
                                            { subtaskdescription: 'Arrange the rebars and Binding Wires at site' },
                                            { subtaskdescription: 'Ask the contractor to arrange the shuttering and supports at site' },
                                            { subtaskdescription: 'Ask the contractor to make the arrangements for concrete mixer ,vibrator and Diesel' },
                                            { subtaskdescription: 'Calculate the material required for RCC and infrom the purchase manager' },
                                            { subtaskdescription: 'Aks the contractor to use the workable shuttering only  and do proper oiling of shuttering' },
                                            { subtaskdescription: 'Arrange the cover blocks at site and ask the contractor to place them' },
                                            { subtaskdescription: 'Arrange the putty,thermocol and Tape' },
                                            { subtaskdescription: 'Ask the contractor to make the arrangements for pouring of concrete' },
                                            { subtaskdescription: 'Arrange the water for concreting' },
                                            { subtaskdescription: 'Ask the contractor to check the electricity connections' },
                                            { subtaskdescription: 'Ask the contractor to clean and oil the shuttering and fill the gaps' },
                                            { subtaskdescription: 'Ask the contractor to mark the top level of concreting' },
                                            { subtaskdescription: 'Ask the contractor to check the line and Level' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Inform the contractor about the concrete mix ratio' },
                                            { subtaskdescription: 'Ask the contractor to control the water cement ratio' },
                                            { subtaskdescription: 'Ask the contractor to do proper compaction' },
                                            { subtaskdescription: 'Inform the contractor about the date of deshuttering' },
                                            { subtaskdescription: 'Phase 3', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Check for honeycombing during deshuttering and ask the contractor to repair it properly' },
                                            { subtaskdescription: 'Ask the guard to paint the curing compound' },
                                            { subtaskdescription: 'Ask the Guard to do three times curing' },
                                        ];

                                        async function RCCPedestalfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RCCPedestalfunCall();
                                    }












                                    if (newDatanew.subactivityname === "SF RCC Column") {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Gridline check', checksdescription: 'Plotting of gridline for center of column above plinth / floor slab.' },
                                            { checksHeading: 'Lapping check', checksdescription: 'Binding & placing column reinforcement above upper floor slab as per required height, considering lap length of the bar.' },
                                            { checksHeading: 'Drawing check', checksdescription: 'Check if the column reinforcement is as per the lastest structural drawings' },
                                            { checksHeading: 'Shuttering Oil check', checksdescription: 'Check if the shuttering is properly cleaned and oiled' },
                                            { checksHeading: 'Packing check', checksdescription: 'Check if the gaps at joints are properly packed' },
                                            { checksHeading: 'Support check', checksdescription: 'Check if the props are resting on hard surface so as to prevent misalignment of columns' },
                                            { checksHeading: 'Concrete level check', checksdescription: 'Check if the top level of concrete has been marked' },
                                            { checksHeading: 'Material check', checksdescription: 'The material (cement,sand and aggregate) to be used for  concreting are of good quality' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Compaction check', checksdescription: 'Check if the concrete is properly compacted with the help of vibrators to reduce the air voids' },
                                            { checksHeading: 'Concrete Filling Check', checksdescription: 'Concrete filling should be continuous, for each column No Break in between or Mixer Break' },
                                            { checksHeading: 'W/C ratio check', checksdescription: 'Controlled water cement ratio.' },
                                            { checksHeading: 'Compaction check', checksdescription: 'Proper compaction of concrete' },
                                            { checksHeading: 'Phase 3', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Deshuttering check', checksdescription: 'Deshuttering of columns after 24 hrs-48 hrs.' },
                                            { checksHeading: '', checksdescription: 'Submission of the deshuttering report to higher authority.' },
                                            { checksHeading: 'Curing check', checksdescription: 'Curing of Columns minimum for 10 days' },
                                        ];

                                        async function pedastalrccChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        pedastalrccChacks();
                                    }




                                    if (newDatanew.subactivityname === "SF RCC Column") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Assign the labour and Contractor for the work' },
                                            { subtaskdescription: 'Explain the contractor about the work' },
                                            { subtaskdescription: 'Arrange the rebars and Binding Wires at site' },
                                            { subtaskdescription: 'Ask the contractor to arrange the shuttering and supports at site' },
                                            { subtaskdescription: 'Ask the contractor to make the arrangements for concrete mixer ,vibrator and Diesel' },
                                            { subtaskdescription: 'Calculate the material required for RCC and infrom the purchase manager' },
                                            { subtaskdescription: 'Aks the contractor to use the workable shuttering only  and do proper oiling of shuttering' },
                                            { subtaskdescription: 'Arrange the cover blocks at site and ask the contractor to place them' },
                                            { subtaskdescription: 'Arrange the putty,thermocol and Tape' },
                                            { subtaskdescription: 'Ask the contractor to make the arrangements for pouring of concrete' },
                                            { subtaskdescription: 'Arrange the water for concreting' },
                                            { subtaskdescription: 'Ask the contractor to check the electricity connections' },
                                            { subtaskdescription: 'Ask the contractor to clean and oil the shuttering and fill the gaps' },
                                            { subtaskdescription: 'Ask the contractor to mark the top level of concreting' },
                                            { subtaskdescription: 'Ask the contractor to check the line and Level' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Inform the contractor about the concrete mix ratio' },
                                            { subtaskdescription: 'Ask the contractor to control the water cement ratio' },
                                            { subtaskdescription: 'Ask the contractor to do proper compaction' },
                                            { subtaskdescription: 'Inform the contractor about the date of deshuttering' },
                                            { subtaskdescription: 'Phase 3', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Check for honeycombing during deshuttering and ask the contractor to repair it properly' },
                                            { subtaskdescription: 'Ask the guard to paint the curing compound' },
                                            { subtaskdescription: 'Ask the Guard to do three times curing' },
                                        ];

                                        async function RCCPedestalfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RCCPedestalfunCall();
                                    }


                                    if (newDatanew.subactivityname === "SF RCC Column") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Column', headingforshortingTwo: 'Honey Comb' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Starter', NormalHeadingThree: 'Shuttering', NormalHeadingfoure: 'Casting' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Verticality', NormalHeadingThree: 'Honey Co.', NormalHeadingfoure: 'Curing' },
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }



                                    if (newDatanew.subactivityname === "TF RCC Column") {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Gridline check', checksdescription: 'Plotting of gridline for center of column above plinth / floor slab.' },
                                            { checksHeading: 'Lapping check', checksdescription: 'Binding & placing column reinforcement above upper floor slab as per required height, considering lap length of the bar.' },
                                            { checksHeading: 'Drawing check', checksdescription: 'Check if the column reinforcement is as per the lastest structural drawings' },
                                            { checksHeading: 'Shuttering Oil check', checksdescription: 'Check if the shuttering is properly cleaned and oiled' },
                                            { checksHeading: 'Packing check', checksdescription: 'Check if the gaps at joints are properly packed' },
                                            { checksHeading: 'Support check', checksdescription: 'Check if the props are resting on hard surface so as to prevent misalignment of columns' },
                                            { checksHeading: 'Concrete level check', checksdescription: 'Check if the top level of concrete has been marked' },
                                            { checksHeading: 'Material check', checksdescription: 'The material (cement,sand and aggregate) to be used for  concreting are of good quality' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Compaction check', checksdescription: 'Check if the concrete is properly compacted with the help of vibrators to reduce the air voids' },
                                            { checksHeading: 'Concrete Filling Check', checksdescription: 'Concrete filling should be continuous, for each column No Break in between or Mixer Break' },
                                            { checksHeading: 'W/C ratio check', checksdescription: 'Controlled water cement ratio.' },
                                            { checksHeading: 'Compaction check', checksdescription: 'Proper compaction of concrete' },
                                            { checksHeading: 'Phase 3', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Deshuttering check', checksdescription: 'Deshuttering of columns after 24 hrs-48 hrs.' },
                                            { checksHeading: '', checksdescription: 'Submission of the deshuttering report to higher authority.' },
                                            { checksHeading: 'Curing check', checksdescription: 'Curing of Columns minimum for 10 days' },
                                        ];

                                        async function pedastalrccChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        pedastalrccChacks();
                                    }




                                    if (newDatanew.subactivityname === "TF RCC Column") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Assign the labour and Contractor for the work' },
                                            { subtaskdescription: 'Explain the contractor about the work' },
                                            { subtaskdescription: 'Arrange the rebars and Binding Wires at site' },
                                            { subtaskdescription: 'Ask the contractor to arrange the shuttering and supports at site' },
                                            { subtaskdescription: 'Ask the contractor to make the arrangements for concrete mixer ,vibrator and Diesel' },
                                            { subtaskdescription: 'Calculate the material required for RCC and infrom the purchase manager' },
                                            { subtaskdescription: 'Aks the contractor to use the workable shuttering only  and do proper oiling of shuttering' },
                                            { subtaskdescription: 'Arrange the cover blocks at site and ask the contractor to place them' },
                                            { subtaskdescription: 'Arrange the putty,thermocol and Tape' },
                                            { subtaskdescription: 'Ask the contractor to make the arrangements for pouring of concrete' },
                                            { subtaskdescription: 'Arrange the water for concreting' },
                                            { subtaskdescription: 'Ask the contractor to check the electricity connections' },
                                            { subtaskdescription: 'Ask the contractor to clean and oil the shuttering and fill the gaps' },
                                            { subtaskdescription: 'Ask the contractor to mark the top level of concreting' },
                                            { subtaskdescription: 'Ask the contractor to check the line and Level' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Inform the contractor about the concrete mix ratio' },
                                            { subtaskdescription: 'Ask the contractor to control the water cement ratio' },
                                            { subtaskdescription: 'Ask the contractor to do proper compaction' },
                                            { subtaskdescription: 'Inform the contractor about the date of deshuttering' },
                                            { subtaskdescription: 'Phase 3', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Check for honeycombing during deshuttering and ask the contractor to repair it properly' },
                                            { subtaskdescription: 'Ask the guard to paint the curing compound' },
                                            { subtaskdescription: 'Ask the Guard to do three times curing' },
                                        ];

                                        async function RCCPedestalfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RCCPedestalfunCall();
                                    }



                                    if (newDatanew.subactivityname === "TF RCC Column") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Column', headingforshortingTwo: 'Honey Comb' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Starter', NormalHeadingThree: 'Shuttering', NormalHeadingfoure: 'Casting' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Verticality', NormalHeadingThree: 'Honey Co.', NormalHeadingfoure: 'Curing' },
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }





                                    if (newDatanew.subactivityname === "FoF RCC Column") {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Gridline check', checksdescription: 'Plotting of gridline for center of column above plinth / floor slab.' },
                                            { checksHeading: 'Lapping check', checksdescription: 'Binding & placing column reinforcement above upper floor slab as per required height, considering lap length of the bar.' },
                                            { checksHeading: 'Drawing check', checksdescription: 'Check if the column reinforcement is as per the lastest structural drawings' },
                                            { checksHeading: 'Shuttering Oil check', checksdescription: 'Check if the shuttering is properly cleaned and oiled' },
                                            { checksHeading: 'Packing check', checksdescription: 'Check if the gaps at joints are properly packed' },
                                            { checksHeading: 'Support check', checksdescription: 'Check if the props are resting on hard surface so as to prevent misalignment of columns' },
                                            { checksHeading: 'Concrete level check', checksdescription: 'Check if the top level of concrete has been marked' },
                                            { checksHeading: 'Material check', checksdescription: 'The material (cement,sand and aggregate) to be used for  concreting are of good quality' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Compaction check', checksdescription: 'Check if the concrete is properly compacted with the help of vibrators to reduce the air voids' },
                                            { checksHeading: 'Concrete Filling Check', checksdescription: 'Concrete filling should be continuous, for each column No Break in between or Mixer Break' },
                                            { checksHeading: 'W/C ratio check', checksdescription: 'Controlled water cement ratio.' },
                                            { checksHeading: 'Compaction check', checksdescription: 'Proper compaction of concrete' },
                                            { checksHeading: 'Phase 3', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Deshuttering check', checksdescription: 'Deshuttering of columns after 24 hrs-48 hrs.' },
                                            { checksHeading: '', checksdescription: 'Submission of the deshuttering report to higher authority.' },
                                            { checksHeading: 'Curing check', checksdescription: 'Curing of Columns minimum for 10 days' },
                                        ];

                                        async function pedastalrccChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        pedastalrccChacks();
                                    }




                                    if (newDatanew.subactivityname === "FoF RCC Column") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Assign the labour and Contractor for the work' },
                                            { subtaskdescription: 'Explain the contractor about the work' },
                                            { subtaskdescription: 'Arrange the rebars and Binding Wires at site' },
                                            { subtaskdescription: 'Ask the contractor to arrange the shuttering and supports at site' },
                                            { subtaskdescription: 'Ask the contractor to make the arrangements for concrete mixer ,vibrator and Diesel' },
                                            { subtaskdescription: 'Calculate the material required for RCC and infrom the purchase manager' },
                                            { subtaskdescription: 'Aks the contractor to use the workable shuttering only  and do proper oiling of shuttering' },
                                            { subtaskdescription: 'Arrange the cover blocks at site and ask the contractor to place them' },
                                            { subtaskdescription: 'Arrange the putty,thermocol and Tape' },
                                            { subtaskdescription: 'Ask the contractor to make the arrangements for pouring of concrete' },
                                            { subtaskdescription: 'Arrange the water for concreting' },
                                            { subtaskdescription: 'Ask the contractor to check the electricity connections' },
                                            { subtaskdescription: 'Ask the contractor to clean and oil the shuttering and fill the gaps' },
                                            { subtaskdescription: 'Ask the contractor to mark the top level of concreting' },
                                            { subtaskdescription: 'Ask the contractor to check the line and Level' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Inform the contractor about the concrete mix ratio' },
                                            { subtaskdescription: 'Ask the contractor to control the water cement ratio' },
                                            { subtaskdescription: 'Ask the contractor to do proper compaction' },
                                            { subtaskdescription: 'Inform the contractor about the date of deshuttering' },
                                            { subtaskdescription: 'Phase 3', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Check for honeycombing during deshuttering and ask the contractor to repair it properly' },
                                            { subtaskdescription: 'Ask the guard to paint the curing compound' },
                                            { subtaskdescription: 'Ask the Guard to do three times curing' },
                                        ];

                                        async function RCCPedestalfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RCCPedestalfunCall();
                                    }


                                    if (newDatanew.subactivityname === "FoF RCC Column") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Column', headingforshortingTwo: 'Honey Comb' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Starter', NormalHeadingThree: 'Shuttering', NormalHeadingfoure: 'Casting' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Verticality', NormalHeadingThree: 'Honey Co.', NormalHeadingfoure: 'Curing' },
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }




                                    if (newDatanew.subactivityname === "Tower RCC Column") {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Gridline check', checksdescription: 'Plotting of gridline for center of column above plinth / floor slab.' },
                                            { checksHeading: 'Lapping check', checksdescription: 'Binding & placing column reinforcement above upper floor slab as per required height, considering lap length of the bar.' },
                                            { checksHeading: 'Drawing check', checksdescription: 'Check if the column reinforcement is as per the lastest structural drawings' },
                                            { checksHeading: 'Shuttering Oil check', checksdescription: 'Check if the shuttering is properly cleaned and oiled' },
                                            { checksHeading: 'Packing check', checksdescription: 'Check if the gaps at joints are properly packed' },
                                            { checksHeading: 'Support check', checksdescription: 'Check if the props are resting on hard surface so as to prevent misalignment of columns' },
                                            { checksHeading: 'Concrete level check', checksdescription: 'Check if the top level of concrete has been marked' },
                                            { checksHeading: 'Material check', checksdescription: 'The material (cement,sand and aggregate) to be used for  concreting are of good quality' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Compaction check', checksdescription: 'Check if the concrete is properly compacted with the help of vibrators to reduce the air voids' },
                                            { checksHeading: 'Concrete Filling Check', checksdescription: 'Concrete filling should be continuous, for each column No Break in between or Mixer Break' },
                                            { checksHeading: 'W/C ratio check', checksdescription: 'Controlled water cement ratio.' },
                                            { checksHeading: 'Compaction check', checksdescription: 'Proper compaction of concrete' },
                                            { checksHeading: 'Phase 3', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Deshuttering check', checksdescription: 'Deshuttering of columns after 24 hrs-48 hrs.' },
                                            { checksHeading: '', checksdescription: 'Submission of the deshuttering report to higher authority.' },
                                            { checksHeading: 'Curing check', checksdescription: 'Curing of Columns minimum for 10 days' },
                                        ];

                                        async function pedastalrccChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        pedastalrccChacks();
                                    }




                                    if (newDatanew.subactivityname === "Tower RCC Column") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Assign the labour and Contractor for the work' },
                                            { subtaskdescription: 'Explain the contractor about the work' },
                                            { subtaskdescription: 'Arrange the rebars and Binding Wires at site' },
                                            { subtaskdescription: 'Ask the contractor to arrange the shuttering and supports at site' },
                                            { subtaskdescription: 'Ask the contractor to make the arrangements for concrete mixer ,vibrator and Diesel' },
                                            { subtaskdescription: 'Calculate the material required for RCC and infrom the purchase manager' },
                                            { subtaskdescription: 'Aks the contractor to use the workable shuttering only  and do proper oiling of shuttering' },
                                            { subtaskdescription: 'Arrange the cover blocks at site and ask the contractor to place them' },
                                            { subtaskdescription: 'Arrange the putty,thermocol and Tape' },
                                            { subtaskdescription: 'Ask the contractor to make the arrangements for pouring of concrete' },
                                            { subtaskdescription: 'Arrange the water for concreting' },
                                            { subtaskdescription: 'Ask the contractor to check the electricity connections' },
                                            { subtaskdescription: 'Ask the contractor to clean and oil the shuttering and fill the gaps' },
                                            { subtaskdescription: 'Ask the contractor to mark the top level of concreting' },
                                            { subtaskdescription: 'Ask the contractor to check the line and Level' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Inform the contractor about the concrete mix ratio' },
                                            { subtaskdescription: 'Ask the contractor to control the water cement ratio' },
                                            { subtaskdescription: 'Ask the contractor to do proper compaction' },
                                            { subtaskdescription: 'Inform the contractor about the date of deshuttering' },
                                            { subtaskdescription: 'Phase 3', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Check for honeycombing during deshuttering and ask the contractor to repair it properly' },
                                            { subtaskdescription: 'Ask the guard to paint the curing compound' },
                                            { subtaskdescription: 'Ask the Guard to do three times curing' },
                                        ];

                                        async function RCCPedestalfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RCCPedestalfunCall();
                                    }


                                    if (newDatanew.subactivityname === "Tower RCC Column") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Column', headingforshortingTwo: 'Honey Comb' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Starter', NormalHeadingThree: 'Shuttering', NormalHeadingfoure: 'Casting' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Verticality', NormalHeadingThree: 'Honey Co.', NormalHeadingfoure: 'Curing' },
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }

















                                    if (newDatanew.subactivityname === "SF Column Reinforcement") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Ask the contractor  to tie the rebars properly as per the specifications' },
                                            { subtaskdescription: 'Ask the contractor  to check the column for verticality' },
                                            { subtaskdescription: 'Ask the contractor to place supports in the column' }
                                        ];

                                        async function BeamSlabShutteringReinforcementRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteringReinforcementRCCfunCall();
                                    }





                                    if (newDatanew.subactivityname === "SF Column Reinforcement") {

                                        const dataArranew = [
                                            { materailname: 'Reinforcement', materailquantity: materlID.SSRSEF_ReinforcementTMTReinforcementQuantity, materailUnit: 'KG' },
                                            { materailname: 'Binding Wire', materailquantity: materlID.SSRSEF_ReinforcementTMTBindingWireQuantity, materailUnit: 'KG' },
                                            { materailname: 'Cover Block', materailquantity: materlID.SSRSEF_ReinforcementTMTCoverBlockQuantity, materailUnit: 'NOS.' },

                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === "SF Column Reinforcement") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Column', headingforshortingTwo: 'Final Check' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Explain', NormalHeadingThree: 'Binding', NormalHeadingfoure: 'Placement' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Verticality', NormalHeadingThree: 'Grid Check', NormalHeadingfoure: 'Starter' },
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }

                                    if (newDatanew.subactivityname === "SF RCC Column") {

                                        const dataArranew = [
                                            { materailname: 'Stone Aggregate (20 MM)', materailquantity: materlID.SSRSEF_FootingRCCStoneAggregate20MMQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Portland Cement', materailquantity: materlID.SSRSEF_FootingRCCPortlandCementQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Course Sand', materailquantity: materlID.SSRSEF_FootingRCCCourseSandQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Admixture - Waterproof', materailquantity: materlID.SSRSEF_FootingRCCAdmixtureWaterproofQuantity, materailUnit: 'Litre' },
                                            { materailname: 'RMC', materailquantity: materlID.SSRSEF_FootingRCCRMCQuantity, materailUnit: 'CUM' },
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === "SF Brick Work") {

                                        const dataArranew = [
                                            { materailname: 'Common Burnt Clay (7.5 D)', materailquantity: materlID.SSRSEF_BrickWorkCommonBurntClay75DQuantity, materailUnit: 'NOS' },
                                            { materailname: 'Portland Cement', materailquantity: materlID.SSRSEF_BrickWorkPortlandCementQuantity, materailUnit: 'KG' },
                                            { materailname: 'Course Sand', materailquantity: materlID.SSRSEF_BrickWorkCourseSandQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Stone Aggregate (20 MM)', materailquantity: materlID.SSRSEF_BrickWorkStoneAggregate20MMQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Autoclaved aerated cement (AAC)', materailquantity: materlID.SSRSEF_BrickWorkAutoclavedAeratedCementAACQuantity, materailUnit: 'CUM' },
                                            { materailname: 'Polymer modified adhesive mortar', materailquantity: materlID.SSRSEF_BrickWorkPolymerModifiedAdhesiveMortarQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Reinforcement', materailquantity: materlID.SSRSEF_BrickWorkReinforcementQuantity, materailUnit: 'KG' },
                                            { materailname: 'Door Frame', materailquantity: materlID.SSRSEF_BrickWorkDoorFrameQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Window frame', materailquantity: materlID.SSRSEF_BrickWorkWindowFrameQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'MS Door & Window Frame', materailquantity: materlID.SSRSEF_BrickWorkMSDoorWindowFrameQuantity, materailUnit: 'KG' },
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }






                                    if (newDatanew.subactivityname === "SF Slab Shuttering") {

                                        const dataArranew = [
                                            { materailname: 'Beam Bottom Shuttering', materailquantity: materlID.SSRSEF_SlabShutteringWorkBeamBottomShutteringQuantity, materailUnit: 'RUM' },
                                            { materailname: 'Beam Side Shuttering', materailquantity: materlID.SSRSEF_SlabShutteringWorkBeamSideShutteringQuantity, materailUnit: 'RUM' },
                                            { materailname: 'Slab Shuttering', materailquantity: materlID.SSRSEF_SlabShutteringWorkSlabShutteringQuantity, materailUnit: 'SQM' },
                                            { materailname: 'Balli for Support', materailquantity: materlID.SSRSEF_SlabShutteringWorkBalliForSupportQuantity, materailUnit: 'PER BALLI' },
                                            { materailname: 'Shuttering Oil', materailquantity: materlID.SSRSEF_SlabShutteringWorkShutteringOilQuantity, materailUnit: 'LITRE' },

                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }



                                    if (newDatanew.subactivityname === "SF Slab Reinforcement") {

                                        const dataArranew = [
                                            { materailname: 'Reinforcement', materailquantity: materlID.SSRSEF_SlabBeamReinforcementReinforcementQuantity, materailUnit: 'KG' },
                                            { materailname: 'Binding Wire', materailquantity: materlID.SSRSEF_SlabBeamReinforcementBindingWireQuantity, materailUnit: 'KG' },
                                            { materailname: 'Cover Block', materailquantity: materlID.SSRSEF_SlabBeamReinforcementCoverBlockQuantity, materailUnit: 'NOS.' },

                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === "SF RCC Slab") {

                                        const dataArranew = [
                                            { materailname: 'Stone Aggregate (20 MM)', materailquantity: materlID.SSRSEF_SlabBeamRCCStoneAggregate20MMQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Portland Cement', materailquantity: materlID.SSRSEF_SlabBeamRCCPortlandCementQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Course Sand', materailquantity: materlID.SSRSEF_SlabBeamRCCCourseSandQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Admixture - Waterproof', materailquantity: materlID.SSRSEF_SlabBeamRCCAdmixtureWaterproofQuantity, materailUnit: 'Litre' },
                                            { materailname: 'RMC', materailquantity: materlID.SSRSEF_SlabBeamRCCRMCQuantity, materailUnit: 'CUM' },
                                            { materailname: '25mm Conduit', materailquantity: materlID.SSRSEF_SlabBeamRCCConduit25mmQuantity, materailUnit: 'RMT' },
                                            { materailname: '25 mm PVC couplers', materailquantity: materlID.SSRSEF_SlabBeamRCCPVCcouplers25mmQuantity, materailUnit: 'NOS.' },
                                            { materailname: '25mm PVC bend', materailquantity: materlID.SSRSEF_SlabBeamRCCPVCbend25mmQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Fan Box', materailquantity: materlID.SSRSEF_SlabBeamRCCFanBoxQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Light Box', materailquantity: materlID.SSRSEF_SlabBeamRCCLightBoxQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Tape', materailquantity: materlID.SSRSEF_SlabBeamRCCTapeQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Connector', materailquantity: materlID.SSRSEF_SlabBeamRCCConnectorQuantity, materailUnit: 'NOS.' },

                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }








                                    if (newDatanew.subactivityname === "TF Column Reinforcement") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Ask the contractor  to tie the rebars properly as per the specifications' },
                                            { subtaskdescription: 'Ask the contractor  to check the column for verticality' },
                                            { subtaskdescription: 'Ask the contractor to place supports in the column' }
                                        ];

                                        async function BeamSlabShutteringReinforcementRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteringReinforcementRCCfunCall();
                                    }






                                    if (newDatanew.subactivityname === "TF Column Reinforcement") {

                                        const dataArranew = [
                                            { materailname: 'Reinforcement', materailquantity: materlID.SSRTHF_ReinforcementTMTReinforcementQuantity, materailUnit: 'KG' },
                                            { materailname: 'Binding Wire', materailquantity: materlID.SSRTHF_ReinforcementTMTBindingWireQuantity, materailUnit: 'KG' },
                                            { materailname: 'Cover Block', materailquantity: materlID.SSRTHF_ReinforcementTMTCoverBlockQuantity, materailUnit: 'NOS.' },

                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }

                                    if (newDatanew.subactivityname === "TF Column Reinforcement") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Column', headingforshortingTwo: 'Final Check' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Explain', NormalHeadingThree: 'Binding', NormalHeadingfoure: 'Placement' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Verticality', NormalHeadingThree: 'Grid Check', NormalHeadingfoure: 'Starter' },
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }




                                    if (newDatanew.subactivityname === "TF RCC Column") {

                                        const dataArranew = [
                                            { materailname: 'Stone Aggregate (20 MM)', materailquantity: materlID.SSRTHF_FootingRCCStoneAggregate20MMQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Portland Cement', materailquantity: materlID.SSRTHF_FootingRCCPortlandCementQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Course Sand', materailquantity: materlID.SSRTHF_FootingRCCCourseSandQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Admixture - Waterproof', materailquantity: materlID.SSRTHF_FootingRCCAdmixtureWaterproofQuantity, materailUnit: 'Litre' },
                                            { materailname: 'RMC', materailquantity: materlID.SSRTHF_FootingRCCRMCQuantity, materailUnit: 'CUM' },
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === "TF Brick Work") {

                                        const dataArranew = [
                                            { materailname: 'Common Burnt Clay (7.5 D)', materailquantity: materlID.SSRTHF_BrickWorkCommonBurntClay75DQuantity, materailUnit: 'NOS' },
                                            { materailname: 'Portland Cement', materailquantity: materlID.SSRTHF_BrickWorkPortlandCementQuantity, materailUnit: 'KG' },
                                            { materailname: 'Course Sand', materailquantity: materlID.SSRTHF_BrickWorkCourseSandQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Stone Aggregate (20 MM)', materailquantity: materlID.SSRTHF_BrickWorkStoneAggregate20MMQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Autoclaved aerated cement (AAC)', materailquantity: materlID.SSRTHF_BrickWorkAutoclavedAeratedCementAACQuantity, materailUnit: 'CUM' },
                                            { materailname: 'Polymer modified adhesive mortar', materailquantity: materlID.SSRTHF_BrickWorkPolymerModifiedAdhesiveMortarQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Reinforcement', materailquantity: materlID.SSRTHF_BrickWorkReinforcementQuantity, materailUnit: 'KG' },
                                            { materailname: 'Door Frame', materailquantity: materlID.SSRTHF_BrickWorkDoorFrameQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Window frame', materailquantity: materlID.SSRTHF_BrickWorkWindowFrameQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'MS Door & Window Frame', materailquantity: materlID.SSRTHF_BrickWorkMSDoorWindowFrameQuantity, materailUnit: 'KG' },
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }






                                    if (newDatanew.subactivityname === "TF Slab Shuttering") {

                                        const dataArranew = [
                                            { materailname: 'Beam Bottom Shuttering', materailquantity: materlID.SSRTHF_SlabShutteringWorkBeamBottomShutteringQuantity, materailUnit: 'RUM' },
                                            { materailname: 'Beam Side Shuttering', materailquantity: materlID.SSRTHF_SlabShutteringWorkBeamSideShutteringQuantity, materailUnit: 'RUM' },
                                            { materailname: 'Slab Shuttering', materailquantity: materlID.SSRTHF_SlabShutteringWorkSlabShutteringQuantity, materailUnit: 'SQM' },
                                            { materailname: 'Balli for Support', materailquantity: materlID.SSRTHF_SlabShutteringWorkBalliForSupportQuantity, materailUnit: 'PER BALLI' },
                                            { materailname: 'Shuttering Oil', materailquantity: materlID.SSRTHF_SlabShutteringWorkShutteringOilQuantity, materailUnit: 'LITRE' },

                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }



                                    if (newDatanew.subactivityname === "TF Slab Reinforcement") {

                                        const dataArranew = [
                                            { materailname: 'Reinforcement', materailquantity: materlID.SSRTHF_SlabBeamReinforcementReinforcementQuantity, materailUnit: 'KG' },
                                            { materailname: 'Binding Wire', materailquantity: materlID.SSRTHF_SlabBeamReinforcementBindingWireQuantity, materailUnit: 'KG' },
                                            { materailname: 'Cover Block', materailquantity: materlID.SSRTHF_SlabBeamReinforcementCoverBlockQuantity, materailUnit: 'NOS.' },

                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === "TF RCC Slab") {

                                        const dataArranew = [
                                            { materailname: 'Stone Aggregate (20 MM)', materailquantity: materlID.SSRTHF_SlabBeamRCCStoneAggregate20MMQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Portland Cement', materailquantity: materlID.SSRTHF_SlabBeamRCCPortlandCementQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Course Sand', materailquantity: materlID.SSRTHF_SlabBeamRCCCourseSandQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Admixture - Waterproof', materailquantity: materlID.SSRTHF_SlabBeamRCCAdmixtureWaterproofQuantity, materailUnit: 'Litre' },
                                            { materailname: 'RMC', materailquantity: materlID.SSRTHF_SlabBeamRCCRMCQuantity, materailUnit: 'CUM' },
                                            { materailname: '25mm Conduit', materailquantity: materlID.SSRTHF_SlabBeamRCCConduit25mmQuantity, materailUnit: 'RMT' },
                                            { materailname: '25 mm PVC couplers', materailquantity: materlID.SSRTHF_SlabBeamRCCPVCcouplers25mmQuantity, materailUnit: 'NOS.' },
                                            { materailname: '25mm PVC bend', materailquantity: materlID.SSRTHF_SlabBeamRCCPVCbend25mmQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Fan Box', materailquantity: materlID.SSRTHF_SlabBeamRCCFanBoxQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Light Box', materailquantity: materlID.SSRTHF_SlabBeamRCCLightBoxQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Tape', materailquantity: materlID.SSRTHF_SlabBeamRCCTapeQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Connector', materailquantity: materlID.SSRTHF_SlabBeamRCCConnectorQuantity, materailUnit: 'NOS.' },

                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }





                                    if (newDatanew.subactivityname === "FoF Column Reinforcement") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Ask the contractor  to tie the rebars properly as per the specifications' },
                                            { subtaskdescription: 'Ask the contractor  to check the column for verticality' },
                                            { subtaskdescription: 'Ask the contractor to place supports in the column' }
                                        ];

                                        async function BeamSlabShutteringReinforcementRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteringReinforcementRCCfunCall();
                                    }




                                    if (newDatanew.subactivityname === "FoF Column Reinforcement") {

                                        const dataArranew = [
                                            { materailname: 'Reinforcement', materailquantity: materlID.SSRFOF_ReinforcementTMTReinforcementQuantity, materailUnit: 'KG' },
                                            { materailname: 'Binding Wire', materailquantity: materlID.SSRFOF_ReinforcementTMTBindingWireQuantity, materailUnit: 'KG' },
                                            { materailname: 'Cover Block', materailquantity: materlID.SSRFOF_ReinforcementTMTCoverBlockQuantity, materailUnit: 'NOS.' },

                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }

                                    if (newDatanew.subactivityname === "FoF Column Reinforcement") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Column', headingforshortingTwo: 'Final Check' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Explain', NormalHeadingThree: 'Binding', NormalHeadingfoure: 'Placement' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Verticality', NormalHeadingThree: 'Grid Check', NormalHeadingfoure: 'Starter' },
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }


                                    if (newDatanew.subactivityname === "FoF RCC Column") {

                                        const dataArranew = [
                                            { materailname: 'Stone Aggregate (20 MM)', materailquantity: materlID.SSRFOF_FootingRCCStoneAggregate20MMQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Portland Cement', materailquantity: materlID.SSRFOF_FootingRCCPortlandCementQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Course Sand', materailquantity: materlID.SSRFOF_FootingRCCCourseSandQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Admixture - Waterproof', materailquantity: materlID.SSRFOF_FootingRCCAdmixtureWaterproofQuantity, materailUnit: 'Litre' },
                                            { materailname: 'RMC', materailquantity: materlID.SSRFOF_FootingRCCRMCQuantity, materailUnit: 'CUM' },
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === "FoF Brick Work") {

                                        const dataArranew = [
                                            { materailname: 'Common Burnt Clay (7.5 D)', materailquantity: materlID.SSRFOF_BrickWorkCommonBurntClay75DQuantity, materailUnit: 'NOS' },
                                            { materailname: 'Portland Cement', materailquantity: materlID.SSRFOF_BrickWorkPortlandCementQuantity, materailUnit: 'KG' },
                                            { materailname: 'Course Sand', materailquantity: materlID.SSRFOF_BrickWorkCourseSandQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Stone Aggregate (20 MM)', materailquantity: materlID.SSRFOF_BrickWorkStoneAggregate20MMQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Autoclaved aerated cement (AAC)', materailquantity: materlID.SSRFOF_BrickWorkAutoclavedAeratedCementAACQuantity, materailUnit: 'CUM' },
                                            { materailname: 'Polymer modified adhesive mortar', materailquantity: materlID.SSRFOF_BrickWorkPolymerModifiedAdhesiveMortarQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Reinforcement', materailquantity: materlID.SSRFOF_BrickWorkReinforcementQuantity, materailUnit: 'KG' },
                                            { materailname: 'Door Frame', materailquantity: materlID.SSRFOF_BrickWorkDoorFrameQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Window frame', materailquantity: materlID.SSRFOF_BrickWorkWindowFrameQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'MS Door & Window Frame', materailquantity: materlID.SSRFOF_BrickWorkMSDoorWindowFrameQuantity, materailUnit: 'KG' },
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }






                                    if (newDatanew.subactivityname === "FoF Slab Shuttering") {

                                        const dataArranew = [
                                            { materailname: 'Beam Bottom Shuttering', materailquantity: materlID.SSRFOF_SlabShutteringWorkBeamBottomShutteringQuantity, materailUnit: 'RUM' },
                                            { materailname: 'Beam Side Shuttering', materailquantity: materlID.SSRFOF_SlabShutteringWorkBeamSideShutteringQuantity, materailUnit: 'RUM' },
                                            { materailname: 'Slab Shuttering', materailquantity: materlID.SSRFOF_SlabShutteringWorkSlabShutteringQuantity, materailUnit: 'SQM' },
                                            { materailname: 'Balli for Support', materailquantity: materlID.SSRFOF_SlabShutteringWorkBalliForSupportQuantity, materailUnit: 'PER BALLI' },
                                            { materailname: 'Shuttering Oil', materailquantity: materlID.SSRFOF_SlabShutteringWorkShutteringOilQuantity, materailUnit: 'LITRE' },

                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }



                                    if (newDatanew.subactivityname === "FoF Slab Reinforcement") {

                                        const dataArranew = [
                                            { materailname: 'Reinforcement', materailquantity: materlID.SSRFOF_SlabBeamReinforcementReinforcementQuantity, materailUnit: 'KG' },
                                            { materailname: 'Binding Wire', materailquantity: materlID.SSRFOF_SlabBeamReinforcementBindingWireQuantity, materailUnit: 'KG' },
                                            { materailname: 'Cover Block', materailquantity: materlID.SSRFOF_SlabBeamReinforcementCoverBlockQuantity, materailUnit: 'NOS.' },

                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === "FoF RCC Slab") {

                                        const dataArranew = [
                                            { materailname: 'Stone Aggregate (20 MM)', materailquantity: materlID.SSRFOF_SlabBeamRCCStoneAggregate20MMQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Portland Cement', materailquantity: materlID.SSRFOF_SlabBeamRCCPortlandCementQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Course Sand', materailquantity: materlID.SSRFOF_SlabBeamRCCCourseSandQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Admixture - Waterproof', materailquantity: materlID.SSRFOF_SlabBeamRCCAdmixtureWaterproofQuantity, materailUnit: 'Litre' },
                                            { materailname: 'RMC', materailquantity: materlID.SSRFOF_SlabBeamRCCRMCQuantity, materailUnit: 'CUM' },
                                            { materailname: '25mm Conduit', materailquantity: materlID.SSRFOF_SlabBeamRCCConduit25mmQuantity, materailUnit: 'RMT' },
                                            { materailname: '25 mm PVC couplers', materailquantity: materlID.SSRFOF_SlabBeamRCCPVCcouplers25mmQuantity, materailUnit: 'NOS.' },
                                            { materailname: '25mm PVC bend', materailquantity: materlID.SSRFOF_SlabBeamRCCPVCbend25mmQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Fan Box', materailquantity: materlID.SSRFOF_SlabBeamRCCFanBoxQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Light Box', materailquantity: materlID.SSRFOF_SlabBeamRCCLightBoxQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Tape', materailquantity: materlID.SSRFOF_SlabBeamRCCTapeQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Connector', materailquantity: materlID.SSRFOF_SlabBeamRCCConnectorQuantity, materailUnit: 'NOS.' },

                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }





                                    if (newDatanew.subactivityname === "Tower Column Reinforcement") {

                                        const dataArranew = [
                                            { materailname: 'Reinforcement', materailquantity: materlID.SSRT_ReinforcementTMTReinforcementQuantity, materailUnit: 'KG' },
                                            { materailname: 'Binding Wire', materailquantity: materlID.SSRT_ReinforcementTMTBindingWireQuantity, materailUnit: 'KG' },
                                            { materailname: 'Cover Block', materailquantity: materlID.SSRT_ReinforcementTMTCoverBlockQuantity, materailUnit: 'NOS.' },

                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }

                                    if (newDatanew.subactivityname === "Tower Column Reinforcement") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Column', headingforshortingTwo: 'Final Check' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Explain', NormalHeadingThree: 'Binding', NormalHeadingfoure: 'Placement' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Verticality', NormalHeadingThree: 'Grid Check', NormalHeadingfoure: 'Starter' },
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }


                                    if (newDatanew.subactivityname === "Tower RCC Column") {

                                        const dataArranew = [
                                            { materailname: 'Stone Aggregate (20 MM)', materailquantity: materlID.SSRT_FootingRCCStoneAggregate20MMQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Portland Cement', materailquantity: materlID.SSRT_FootingRCCPortlandCementQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Course Sand', materailquantity: materlID.SSRT_FootingRCCCourseSandQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Admixture - Waterproof', materailquantity: materlID.SSRT_FootingRCCAdmixtureWaterproofQuantity, materailUnit: 'Litre' },
                                            { materailname: 'RMC', materailquantity: materlID.SSRT_FootingRCCRMCQuantity, materailUnit: 'CUM' },
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === "Tower Brick Work") {

                                        const dataArranew = [
                                            { materailname: 'Common Burnt Clay (7.5 D)', materailquantity: materlID.SSRT_BrickWorkCommonBurntClay75DQuantity, materailUnit: 'NOS' },
                                            { materailname: 'Portland Cement', materailquantity: materlID.SSRT_BrickWorkPortlandCementQuantity, materailUnit: 'KG' },
                                            { materailname: 'Course Sand', materailquantity: materlID.SSRT_BrickWorkCourseSandQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Stone Aggregate (20 MM)', materailquantity: materlID.SSRT_BrickWorkStoneAggregate20MMQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Autoclaved aerated cement (AAC)', materailquantity: materlID.SSRT_BrickWorkAutoclavedAeratedCementAACQuantity, materailUnit: 'CUM' },
                                            { materailname: 'Polymer modified adhesive mortar', materailquantity: materlID.SSRT_BrickWorkPolymerModifiedAdhesiveMortarQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Reinforcement', materailquantity: materlID.SSRT_BrickWorkReinforcementQuantity, materailUnit: 'KG' },
                                            { materailname: 'Door Frame', materailquantity: materlID.SSRT_BrickWorkDoorFrameQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Window frame', materailquantity: materlID.SSRT_BrickWorkWindowFrameQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'MS Door & Window Frame', materailquantity: materlID.SSRT_BrickWorkMSDoorWindowFrameQuantity, materailUnit: 'KG' },
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }






                                    if (newDatanew.subactivityname === "Tower Slab Shuttering") {

                                        const dataArranew = [
                                            { materailname: 'Beam Bottom Shuttering', materailquantity: materlID.SSRT_SlabShutteringWorkBeamBottomShutteringQuantity, materailUnit: 'RUM' },
                                            { materailname: 'Beam Side Shuttering', materailquantity: materlID.SSRT_SlabShutteringWorkBeamSideShutteringQuantity, materailUnit: 'RUM' },
                                            { materailname: 'Slab Shuttering', materailquantity: materlID.SSRT_SlabShutteringWorkSlabShutteringQuantity, materailUnit: 'SQM' },
                                            { materailname: 'Balli for Support', materailquantity: materlID.SSRT_SlabShutteringWorkBalliForSupportQuantity, materailUnit: 'PER BALLI' },
                                            { materailname: 'Shuttering Oil', materailquantity: materlID.SSRT_SlabShutteringWorkShutteringOilQuantity, materailUnit: 'LITRE' },

                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }



                                    if (newDatanew.subactivityname === "Tower Slab Reinforcement") {

                                        const dataArranew = [
                                            { materailname: 'Reinforcement', materailquantity: materlID.SSRT_SlabBeamReinforcementReinforcementQuantity, materailUnit: 'KG' },
                                            { materailname: 'Binding Wire', materailquantity: materlID.SSRT_SlabBeamReinforcementBindingWireQuantity, materailUnit: 'KG' },
                                            { materailname: 'Cover Block', materailquantity: materlID.SSRT_SlabBeamReinforcementCoverBlockQuantity, materailUnit: 'NOS.' },

                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === "Tower RCC Slab") {

                                        const dataArranew = [
                                            { materailname: 'Stone Aggregate (20 MM)', materailquantity: materlID.SSRT_SlabBeamRCCStoneAggregate20MMQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Portland Cement', materailquantity: materlID.SSRT_SlabBeamRCCPortlandCementQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Course Sand', materailquantity: materlID.SSRT_SlabBeamRCCCourseSandQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Admixture - Waterproof', materailquantity: materlID.SSRT_SlabBeamRCCAdmixtureWaterproofQuantity, materailUnit: 'Litre' },
                                            { materailname: 'RMC', materailquantity: materlID.SSRT_SlabBeamRCCRMCQuantity, materailUnit: 'CUM' },
                                            { materailname: '25mm Conduit', materailquantity: materlID.SSRT_SlabBeamRCCConduit25mmQuantity, materailUnit: 'RMT' },
                                            { materailname: '25 mm PVC couplers', materailquantity: materlID.SSRT_SlabBeamRCCPVCcouplers25mmQuantity, materailUnit: 'NOS.' },
                                            { materailname: '25mm PVC bend', materailquantity: materlID.SSRT_SlabBeamRCCPVCbend25mmQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Fan Box', materailquantity: materlID.SSRT_SlabBeamRCCFanBoxQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Light Box', materailquantity: materlID.SSRT_SlabBeamRCCLightBoxQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Tape', materailquantity: materlID.SSRT_SlabBeamRCCTapeQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Connector', materailquantity: materlID.SSRT_SlabBeamRCCConnectorQuantity, materailUnit: 'NOS.' },

                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }










                                    if (newDatanew.subactivityname === "Tower Column Reinforcement") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Ask the contractor  to tie the rebars properly as per the specifications' },
                                            { subtaskdescription: 'Ask the contractor  to check the column for verticality' },
                                            { subtaskdescription: 'Ask the contractor to place supports in the column' }
                                        ];

                                        async function BeamSlabShutteringReinforcementRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteringReinforcementRCCfunCall();
                                    }









                                    await Activities.updateOne(
                                        { _id: newss },
                                        {
                                            $push: {
                                                subactivitiesID: objID
                                            }
                                        }
                                    )
                                    // console.log('Data saved:', savedData);
                                } catch (error) {
                                    // console.error('Error saving data:', error);
                                }
                            }
                        }
                        miscellenousCalling();
                    }













                    if (newData.categoryname === "Brick Work") {
                        const dataArrBrickWor = [
                            { subactivityname: 'Door & Window (Wooden |MS) Frame', activityID: newData._id, projectID: objectproID, estimateDays: 1 },
                            { subactivityname: 'B1 - Brick Work', activityID: newData._id, projectID: objectproID, estimateDays: b1BrickWork_ESTD, TempID: 11 },
                            { subactivityname: 'B2 - Brick Work', activityID: newData._id, projectID: objectproID, estimateDays: b2BrickWork_ESTD, TempID: 22 },
                            { subactivityname: 'B3 - Brick Work', activityID: newData._id, projectID: objectproID, estimateDays: b3BrickWork_ESTD, TempID: 33 },
                            { subactivityname: 'B4 - Brick Work', activityID: newData._id, projectID: objectproID, estimateDays: b4BrickWork_ESTD, TempID: 44 },
                            { subactivityname: 'GF Brick Work', activityID: newData._id, projectID: objectproID, estimateDays: Real_gfBrickWork_ESTD, TempID: 0 },
                            { subactivityname: 'FF Brick Work', activityID: newData._id, projectID: objectproID, estimateDays: ffBrickWork_ESTD, TempID: 1 },
                            { subactivityname: 'SF Brick Work', activityID: newData._id, projectID: objectproID, estimateDays: sfBrickWork_ESTD, TempID: 2 },
                            { subactivityname: 'TF Brick Work', activityID: newData._id, projectID: objectproID, estimateDays: tfBrickWork_ESTD, TempID: 3 },
                            { subactivityname: 'FoF Brick Work', activityID: newData._id, projectID: objectproID, estimateDays: fofBrickWork_ESTD, TempID: 4 },
                            { subactivityname: 'Tower Brick Work', activityID: newData._id, projectID: objectproID, estimateDays: towerBrickWork_ESTD }
                        ];

                        async function BricWrkCheck() {
                            for (let i = 0; i < dataArrBrickWor.length; i++) {
                                if (dataArrBrickWor[i].TempID === 1 && NumbersOfFlorrs < 1 || dataArrBrickWor[i].TempID === 2 && NumbersOfFlorrs < 2 || dataArrBrickWor[i].TempID === 3 && NumbersOfFlorrs < 3 || dataArrBrickWor[i].TempID === 4 && NumbersOfFlorrs < 4 || dataArrBrickWor[i].TempID === 11 && NumbersOfBasemetFloor === 0 || dataArrBrickWor[i].TempID === 22 && NumbersOfBasemetFloor === 0 || dataArrBrickWor[i].TempID === 33 && NumbersOfBasemetFloor === 0 || dataArrBrickWor[i].TempID === 44 && NumbersOfBasemetFloor === 0) {
                                    continue; // Skip this iteration
                                }
                                try {
                                    const newDatanew = new SubActivities(dataArrBrickWor[i]);
                                    const savedData = await newDatanew.save();

                                    let objID = new mongoose.Types.ObjectId(newDatanew.id)
                                    let newss = new mongoose.Types.ObjectId(newData._id)
                                    // console.log(objID);







                                    if (newDatanew.subactivityname === 'Door & Window (Wooden |MS) Frame') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Assign the carpenter for the work and ask to review if any interdepencies occur' },
                                            { subtaskdescription: 'Ask the Carpenter to clear the interdepencies and coordinate with the other agencies' },
                                            { subtaskdescription: 'Arrange the material as per site requierment, please confirm the frame type before PO, as per sizes, frame type & other' },
                                            { subtaskdescription: 'Explain the door size,swing and opening direction to the carpenter for all the door type' },
                                            { subtaskdescription: 'Make the arrangement for the electriciy' },
                                            { subtaskdescription: 'Ask the contractor to make the  arrangements  for the supports to the frame' },
                                            { subtaskdescription: 'Final Lintel height confirmation as per drawing' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ensure that Access is clear and safe, temporary access has been provided as required.' },
                                            { subtaskdescription: 'Fastening methods to be confirmed with drawings and details.' },
                                            { subtaskdescription: 'All walls and ceilings to be confirmed plumb and square/are within tolerances for for frames.' },
                                            { subtaskdescription: 'Ensure that Door frame has been installed per drawings and specifications' },
                                            { subtaskdescription: 'Verify the frame as per the hardware schedule' },
                                            { subtaskdescription: 'Check the Size & specification of shutter,Side of opening,Slots & spacing of hinges.' },
                                            { subtaskdescription: 'Confirm the Frames for plumb & alignment' },
                                            { subtaskdescription: 'Ensure the clearance from all side of the shutters' },
                                        ];

                                        async function DoorfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        DoorfunCall();
                                    }
                                    if (newDatanew.subactivityname === 'Door & Window (Wooden |MS) Frame') {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Quality Check', checksdescription: 'Quality of door shutters should be good. Warping of surface i.e. formation of the wave pattern on the surface of shutter & broken edges of the shutters should be avoided.' },
                                            { checksHeading: 'Bend Check', checksdescription: 'Shutters with bends at the corners should be rejected.' },
                                            { checksHeading: 'Support Check', checksdescription: 'Temporary frame supports are in place.' },
                                            { checksHeading: 'Unevenness check', checksdescription: 'All visible dents, scratches, unevenness, etc. should be properly repaired by applying putty made from wood dust & resin. It should be properly scraped with sandpaper.' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Paint Check', checksdescription: 'Primer, putty & first coat of the oil paint should be completed before fixing any fittings on the shutter.' },
                                            { checksHeading: 'Tolerance Check', checksdescription: 'Once the shutter is fixed, there should be just the nominal gap between the shutter & frame, required for working tolerance.' },
                                            { checksHeading: 'Beading Check', checksdescription: 'Beading should be fixed to three sides before fixing the shutter.' },
                                            { checksHeading: 'Moulding Check', checksdescription: 'No joint should be provided to cover moulding except at the corners.' },
                                            { checksHeading: 'Support Check', checksdescription: 'Proper placing and support to the frames' },
                                        ];

                                        async function DoorChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        DoorChacks();
                                    }


                                    if (newDatanew.subactivityname === "Door & Window (Wooden |MS) Frame") {

                                        const dataArranew = [
                                            {},
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Opening', NormalHeadingThree: 'Hold Fast', NormalHeadingfoure: 'Verticality' },
                                            {},
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }









                                    var bricktype = "Normal";
                                    if (bricktype === "Normal") {

                                        if (newDatanew.subactivityname === "B1 - Brick Work") {

                                            const dataArranew = [
                                                { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                                { checksHeading: 'Cleaning check', checksdescription: 'Cleaning the entire floor, before starting the line out of masonry.' },
                                                { checksHeading: 'Screening check', checksdescription: 'Screening of sand,mortar proportion & soaking of bricks.' },
                                                { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                                { checksHeading: 'Door window check', checksdescription: 'Erection of door & window frames with fixing the  necessary number of holdfast.' },
                                                { checksHeading: 'Mortar thickness check', checksdescription: 'Thickness of joints not more than 12mm and Racking of joints & surface cleaning after completion of day-to-day work.' },
                                                { checksHeading: 'Height check', checksdescription: 'Brickwork should be taken up in layers not exceeding one meter height at a time.' },
                                                { checksHeading: 'Scaffholding check', checksdescription: 'Check type of scaffolding and whether tied and braced properly.' },
                                                { checksHeading: 'Rebars check', checksdescription: 'Check wheather  reinforcement is provided in lintel in brick wall' },
                                                { checksHeading: 'Lintel check', checksdescription: 'Above Lintel work till Roof | Beam Bottom' },
                                                { checksHeading: 'Filling check', checksdescription: 'Filling of alll the Joints' },
                                                { checksHeading: 'Phase 3', phaseHeadingShow: 'Yes' },
                                                { checksHeading: 'Curing check', checksdescription: 'Curing should be done for 7 days' },
                                            ];

                                            async function BrickWorkChacks() {
                                                for (let i = 0; i < dataArranew.length; i++) {
                                                    try {
                                                        const newDatanewtask = new Checks(dataArranew[i]);
                                                        const savedData = await newDatanewtask.save();

                                                        let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                        let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                        // console.log(objID);
                                                        await SubActivities.updateOne(
                                                            { _id: newss },
                                                            {
                                                                $push: {
                                                                    checksID: objID
                                                                }
                                                            }
                                                        )
                                                        // console.log('Data saved:', savedData);
                                                    } catch (error) {
                                                        // console.error('Error saving data:', error);
                                                    }
                                                }
                                            }
                                            BrickWorkChacks();
                                        }



                                        if (newDatanew.subactivityname === "B1 - Brick Work") {

                                            const dataArranew = [
                                                { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                                { subtaskdescription: 'Arrange the bricks/blocks ,sand and cement at site' },
                                                { subtaskdescription: 'Assign the  contractor for the work' },
                                                { subtaskdescription: 'Arrange the doors and window frames and hold fasts at site' },
                                                { subtaskdescription: 'Make the water and electricity arrangements at site' },
                                                { subtaskdescription: 'Ask the contractor to deliver the scaffholding material at site' },
                                                { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                                { subtaskdescription: 'Ask the contractor to soak the bricks in water before laying' },
                                                { subtaskdescription: 'Explain the brick layout to the contractor' },
                                                { subtaskdescription: 'Finalise the bond of brickwork' },
                                                { subtaskdescription: 'Ask the contractor to lay the brickwork in line and in plumb with the beam bottom' },
                                                { subtaskdescription: 'Calculate the quantity of door and Window frames and arrange them' },
                                                { subtaskdescription: 'Ask the contractor to do proper raking of joints' },
                                                { subtaskdescription: 'Ask the contractor not to do brickwork more than 1.5m in height in one day' },
                                                { subtaskdescription: 'Ask the contractor to do brickwork in proper line and level' },
                                                { subtaskdescription: 'Phase 3', phaseHeadingShow: 'Yes' },
                                                { subtaskdescription: 'Assign the guard for the curing ' },
                                                { subtaskdescription: 'Ask the contractor for daily cleaning of site after the work' },
                                            ];

                                            async function BrickWorkfunCall() {
                                                for (let i = 0; i < dataArranew.length; i++) {
                                                    try {
                                                        const newDatanewtask = new Subtask(dataArranew[i]);
                                                        const savedData = await newDatanewtask.save();

                                                        let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                        let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                        // console.log(objID);
                                                        await SubActivities.updateOne(
                                                            { _id: newss },
                                                            {
                                                                $push: {
                                                                    subtaskID: objID
                                                                }
                                                            }
                                                        )
                                                        // console.log('Data saved:', savedData);
                                                    } catch (error) {
                                                        // console.error('Error saving data:', error);
                                                    }
                                                }
                                            }
                                            BrickWorkfunCall();
                                        }








                                        if (newDatanew.subactivityname === "B2 - Brick Work") {

                                            const dataArranew = [
                                                { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                                { checksHeading: 'Cleaning check', checksdescription: 'Cleaning the entire floor, before starting the line out of masonry.' },
                                                { checksHeading: 'Screening check', checksdescription: 'Screening of sand,mortar proportion & soaking of bricks.' },
                                                { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                                { checksHeading: 'Door window check', checksdescription: 'Erection of door & window frames with fixing the  necessary number of holdfast.' },
                                                { checksHeading: 'Mortar thickness check', checksdescription: 'Thickness of joints not more than 12mm and Racking of joints & surface cleaning after completion of day-to-day work.' },
                                                { checksHeading: 'Height check', checksdescription: 'Brickwork should be taken up in layers not exceeding one meter height at a time.' },
                                                { checksHeading: 'Scaffholding check', checksdescription: 'Check type of scaffolding and whether tied and braced properly.' },
                                                { checksHeading: 'Rebars check', checksdescription: 'Check wheather  reinforcement is provided in lintel in brick wall' },
                                                { checksHeading: 'Lintel check', checksdescription: 'Above Lintel work till Roof | Beam Bottom' },
                                                { checksHeading: 'Filling check', checksdescription: 'Filling of alll the Joints' },
                                                { checksHeading: 'Phase 3', phaseHeadingShow: 'Yes' },
                                                { checksHeading: 'Curing check', checksdescription: 'Curing should be done for 7 days' },
                                            ];

                                            async function BrickWorkChacks() {
                                                for (let i = 0; i < dataArranew.length; i++) {
                                                    try {
                                                        const newDatanewtask = new Checks(dataArranew[i]);
                                                        const savedData = await newDatanewtask.save();

                                                        let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                        let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                        // console.log(objID);
                                                        await SubActivities.updateOne(
                                                            { _id: newss },
                                                            {
                                                                $push: {
                                                                    checksID: objID
                                                                }
                                                            }
                                                        )
                                                        // console.log('Data saved:', savedData);
                                                    } catch (error) {
                                                        // console.error('Error saving data:', error);
                                                    }
                                                }
                                            }
                                            BrickWorkChacks();
                                        }



                                        if (newDatanew.subactivityname === "B2 - Brick Work") {

                                            const dataArranew = [
                                                { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                                { subtaskdescription: 'Arrange the bricks/blocks ,sand and cement at site' },
                                                { subtaskdescription: 'Assign the  contractor for the work' },
                                                { subtaskdescription: 'Arrange the doors and window frames and hold fasts at site' },
                                                { subtaskdescription: 'Make the water and electricity arrangements at site' },
                                                { subtaskdescription: 'Ask the contractor to deliver the scaffholding material at site' },
                                                { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                                { subtaskdescription: 'Ask the contractor to soak the bricks in water before laying' },
                                                { subtaskdescription: 'Explain the brick layout to the contractor' },
                                                { subtaskdescription: 'Finalise the bond of brickwork' },
                                                { subtaskdescription: 'Ask the contractor to lay the brickwork in line and in plumb with the beam bottom' },
                                                { subtaskdescription: 'Calculate the quantity of door and Window frames and arrange them' },
                                                { subtaskdescription: 'Ask the contractor to do proper raking of joints' },
                                                { subtaskdescription: 'Ask the contractor not to do brickwork more than 1.5m in height in one day' },
                                                { subtaskdescription: 'Ask the contractor to do brickwork in proper line and level' },
                                                { subtaskdescription: 'Phase 3', phaseHeadingShow: 'Yes' },
                                                { subtaskdescription: 'Assign the guard for the curing ' },
                                                { subtaskdescription: 'Ask the contractor for daily cleaning of site after the work' },
                                            ];

                                            async function BrickWorkfunCall() {
                                                for (let i = 0; i < dataArranew.length; i++) {
                                                    try {
                                                        const newDatanewtask = new Subtask(dataArranew[i]);
                                                        const savedData = await newDatanewtask.save();

                                                        let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                        let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                        // console.log(objID);
                                                        await SubActivities.updateOne(
                                                            { _id: newss },
                                                            {
                                                                $push: {
                                                                    subtaskID: objID
                                                                }
                                                            }
                                                        )
                                                        // console.log('Data saved:', savedData);
                                                    } catch (error) {
                                                        // console.error('Error saving data:', error);
                                                    }
                                                }
                                            }
                                            BrickWorkfunCall();
                                        }








                                        if (newDatanew.subactivityname === "B3 - Brick Work") {

                                            const dataArranew = [
                                                { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                                { checksHeading: 'Cleaning check', checksdescription: 'Cleaning the entire floor, before starting the line out of masonry.' },
                                                { checksHeading: 'Screening check', checksdescription: 'Screening of sand,mortar proportion & soaking of bricks.' },
                                                { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                                { checksHeading: 'Door window check', checksdescription: 'Erection of door & window frames with fixing the  necessary number of holdfast.' },
                                                { checksHeading: 'Mortar thickness check', checksdescription: 'Thickness of joints not more than 12mm and Racking of joints & surface cleaning after completion of day-to-day work.' },
                                                { checksHeading: 'Height check', checksdescription: 'Brickwork should be taken up in layers not exceeding one meter height at a time.' },
                                                { checksHeading: 'Scaffholding check', checksdescription: 'Check type of scaffolding and whether tied and braced properly.' },
                                                { checksHeading: 'Rebars check', checksdescription: 'Check wheather  reinforcement is provided in lintel in brick wall' },
                                                { checksHeading: 'Lintel check', checksdescription: 'Above Lintel work till Roof | Beam Bottom' },
                                                { checksHeading: 'Filling check', checksdescription: 'Filling of alll the Joints' },
                                                { checksHeading: 'Phase 3', phaseHeadingShow: 'Yes' },
                                                { checksHeading: 'Curing check', checksdescription: 'Curing should be done for 7 days' },
                                            ];

                                            async function BrickWorkChacks() {
                                                for (let i = 0; i < dataArranew.length; i++) {
                                                    try {
                                                        const newDatanewtask = new Checks(dataArranew[i]);
                                                        const savedData = await newDatanewtask.save();

                                                        let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                        let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                        // console.log(objID);
                                                        await SubActivities.updateOne(
                                                            { _id: newss },
                                                            {
                                                                $push: {
                                                                    checksID: objID
                                                                }
                                                            }
                                                        )
                                                        // console.log('Data saved:', savedData);
                                                    } catch (error) {
                                                        // console.error('Error saving data:', error);
                                                    }
                                                }
                                            }
                                            BrickWorkChacks();
                                        }



                                        if (newDatanew.subactivityname === "B3 - Brick Work") {

                                            const dataArranew = [
                                                { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                                { subtaskdescription: 'Arrange the bricks/blocks ,sand and cement at site' },
                                                { subtaskdescription: 'Assign the  contractor for the work' },
                                                { subtaskdescription: 'Arrange the doors and window frames and hold fasts at site' },
                                                { subtaskdescription: 'Make the water and electricity arrangements at site' },
                                                { subtaskdescription: 'Ask the contractor to deliver the scaffholding material at site' },
                                                { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                                { subtaskdescription: 'Ask the contractor to soak the bricks in water before laying' },
                                                { subtaskdescription: 'Explain the brick layout to the contractor' },
                                                { subtaskdescription: 'Finalise the bond of brickwork' },
                                                { subtaskdescription: 'Ask the contractor to lay the brickwork in line and in plumb with the beam bottom' },
                                                { subtaskdescription: 'Calculate the quantity of door and Window frames and arrange them' },
                                                { subtaskdescription: 'Ask the contractor to do proper raking of joints' },
                                                { subtaskdescription: 'Ask the contractor not to do brickwork more than 1.5m in height in one day' },
                                                { subtaskdescription: 'Ask the contractor to do brickwork in proper line and level' },
                                                { subtaskdescription: 'Phase 3', phaseHeadingShow: 'Yes' },
                                                { subtaskdescription: 'Assign the guard for the curing ' },
                                                { subtaskdescription: 'Ask the contractor for daily cleaning of site after the work' },
                                            ];

                                            async function BrickWorkfunCall() {
                                                for (let i = 0; i < dataArranew.length; i++) {
                                                    try {
                                                        const newDatanewtask = new Subtask(dataArranew[i]);
                                                        const savedData = await newDatanewtask.save();

                                                        let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                        let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                        // console.log(objID);
                                                        await SubActivities.updateOne(
                                                            { _id: newss },
                                                            {
                                                                $push: {
                                                                    subtaskID: objID
                                                                }
                                                            }
                                                        )
                                                        // console.log('Data saved:', savedData);
                                                    } catch (error) {
                                                        // console.error('Error saving data:', error);
                                                    }
                                                }
                                            }
                                            BrickWorkfunCall();
                                        }








                                        if (newDatanew.subactivityname === "B4 - Brick Work") {

                                            const dataArranew = [
                                                { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                                { checksHeading: 'Cleaning check', checksdescription: 'Cleaning the entire floor, before starting the line out of masonry.' },
                                                { checksHeading: 'Screening check', checksdescription: 'Screening of sand,mortar proportion & soaking of bricks.' },
                                                { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                                { checksHeading: 'Door window check', checksdescription: 'Erection of door & window frames with fixing the  necessary number of holdfast.' },
                                                { checksHeading: 'Mortar thickness check', checksdescription: 'Thickness of joints not more than 12mm and Racking of joints & surface cleaning after completion of day-to-day work.' },
                                                { checksHeading: 'Height check', checksdescription: 'Brickwork should be taken up in layers not exceeding one meter height at a time.' },
                                                { checksHeading: 'Scaffholding check', checksdescription: 'Check type of scaffolding and whether tied and braced properly.' },
                                                { checksHeading: 'Rebars check', checksdescription: 'Check wheather  reinforcement is provided in lintel in brick wall' },
                                                { checksHeading: 'Lintel check', checksdescription: 'Above Lintel work till Roof | Beam Bottom' },
                                                { checksHeading: 'Filling check', checksdescription: 'Filling of alll the Joints' },
                                                { checksHeading: 'Phase 3', phaseHeadingShow: 'Yes' },
                                                { checksHeading: 'Curing check', checksdescription: 'Curing should be done for 7 days' },
                                            ];

                                            async function BrickWorkChacks() {
                                                for (let i = 0; i < dataArranew.length; i++) {
                                                    try {
                                                        const newDatanewtask = new Checks(dataArranew[i]);
                                                        const savedData = await newDatanewtask.save();

                                                        let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                        let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                        // console.log(objID);
                                                        await SubActivities.updateOne(
                                                            { _id: newss },
                                                            {
                                                                $push: {
                                                                    checksID: objID
                                                                }
                                                            }
                                                        )
                                                        // console.log('Data saved:', savedData);
                                                    } catch (error) {
                                                        // console.error('Error saving data:', error);
                                                    }
                                                }
                                            }
                                            BrickWorkChacks();
                                        }



                                        if (newDatanew.subactivityname === "B4 - Brick Work") {

                                            const dataArranew = [
                                                { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                                { subtaskdescription: 'Arrange the bricks/blocks ,sand and cement at site' },
                                                { subtaskdescription: 'Assign the  contractor for the work' },
                                                { subtaskdescription: 'Arrange the doors and window frames and hold fasts at site' },
                                                { subtaskdescription: 'Make the water and electricity arrangements at site' },
                                                { subtaskdescription: 'Ask the contractor to deliver the scaffholding material at site' },
                                                { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                                { subtaskdescription: 'Ask the contractor to soak the bricks in water before laying' },
                                                { subtaskdescription: 'Explain the brick layout to the contractor' },
                                                { subtaskdescription: 'Finalise the bond of brickwork' },
                                                { subtaskdescription: 'Ask the contractor to lay the brickwork in line and in plumb with the beam bottom' },
                                                { subtaskdescription: 'Calculate the quantity of door and Window frames and arrange them' },
                                                { subtaskdescription: 'Ask the contractor to do proper raking of joints' },
                                                { subtaskdescription: 'Ask the contractor not to do brickwork more than 1.5m in height in one day' },
                                                { subtaskdescription: 'Ask the contractor to do brickwork in proper line and level' },
                                                { subtaskdescription: 'Phase 3', phaseHeadingShow: 'Yes' },
                                                { subtaskdescription: 'Assign the guard for the curing ' },
                                                { subtaskdescription: 'Ask the contractor for daily cleaning of site after the work' },
                                            ];

                                            async function BrickWorkfunCall() {
                                                for (let i = 0; i < dataArranew.length; i++) {
                                                    try {
                                                        const newDatanewtask = new Subtask(dataArranew[i]);
                                                        const savedData = await newDatanewtask.save();

                                                        let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                        let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                        // console.log(objID);
                                                        await SubActivities.updateOne(
                                                            { _id: newss },
                                                            {
                                                                $push: {
                                                                    subtaskID: objID
                                                                }
                                                            }
                                                        )
                                                        // console.log('Data saved:', savedData);
                                                    } catch (error) {
                                                        // console.error('Error saving data:', error);
                                                    }
                                                }
                                            }
                                            BrickWorkfunCall();
                                        }








                                        if (newDatanew.subactivityname === "GF Brick Work") {

                                            const dataArranew = [
                                                { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                                { checksHeading: 'Cleaning check', checksdescription: 'Cleaning the entire floor, before starting the line out of masonry.' },
                                                { checksHeading: 'Screening check', checksdescription: 'Screening of sand,mortar proportion & soaking of bricks.' },
                                                { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                                { checksHeading: 'Door window check', checksdescription: 'Erection of door & window frames with fixing the  necessary number of holdfast.' },
                                                { checksHeading: 'Mortar thickness check', checksdescription: 'Thickness of joints not more than 12mm and Racking of joints & surface cleaning after completion of day-to-day work.' },
                                                { checksHeading: 'Height check', checksdescription: 'Brickwork should be taken up in layers not exceeding one meter height at a time.' },
                                                { checksHeading: 'Scaffholding check', checksdescription: 'Check type of scaffolding and whether tied and braced properly.' },
                                                { checksHeading: 'Rebars check', checksdescription: 'Check wheather  reinforcement is provided in lintel in brick wall' },
                                                { checksHeading: 'Lintel check', checksdescription: 'Above Lintel work till Roof | Beam Bottom' },
                                                { checksHeading: 'Filling check', checksdescription: 'Filling of alll the Joints' },
                                                { checksHeading: 'Phase 3', phaseHeadingShow: 'Yes' },
                                                { checksHeading: 'Curing check', checksdescription: 'Curing should be done for 7 days' },
                                            ];

                                            async function BrickWorkChacks() {
                                                for (let i = 0; i < dataArranew.length; i++) {
                                                    try {
                                                        const newDatanewtask = new Checks(dataArranew[i]);
                                                        const savedData = await newDatanewtask.save();

                                                        let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                        let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                        // console.log(objID);
                                                        await SubActivities.updateOne(
                                                            { _id: newss },
                                                            {
                                                                $push: {
                                                                    checksID: objID
                                                                }
                                                            }
                                                        )
                                                        // console.log('Data saved:', savedData);
                                                    } catch (error) {
                                                        // console.error('Error saving data:', error);
                                                    }
                                                }
                                            }
                                            BrickWorkChacks();
                                        }


                                        if (newDatanew.subactivityname === "GF Brick Work") {

                                            const dataArranew = [
                                                { materailname: 'Common Burnt Clay (7.5 D)', materailquantity: materlID.BWRB_GFBrickWorkCommonBurntClay75DQuantity, materailUnit: 'NOS' },
                                                { materailname: 'Portland Cement', materailquantity: materlID.BWRB_GFBrickWorkPortlandCementQuantity, materailUnit: 'BAG' },
                                                { materailname: 'Course Sand', materailquantity: materlID.BWRB_GFBrickWorkCourseSandQuantity, materailUnit: 'CUFT' },
                                                { materailname: 'Stone Aggregate (20 MM)', materailquantity: materlID.BWRB_GFBrickWorkStoneAggregate20MMQuantity, materailUnit: 'CUFT' },
                                                { materailname: 'Autoclaved aerated cement (AAC)', materailquantity: materlID.BWRB_GFBrickWorkAutoclavedAeratedCementAACQuantity, materailUnit: 'CUM' },
                                                { materailname: 'Polymer modified adhesive mortar', materailquantity: materlID.BWRB_GFBrickWorkPolymerModifiedAdhesiveMortarQuantity, materailUnit: 'BAG' },
                                                { materailname: 'Reinforcement', materailquantity: materlID.BWRB_GFBrickWorkReinforcementQuantity, materailUnit: 'KG' },
                                                { materailname: 'Door Frame', materailquantity: materlID.BWRB_GFBrickWorkDoorFrameQuantity, materailUnit: 'CUFT' },
                                                { materailname: 'Window frame', materailquantity: materlID.BWRB_GFBrickWorkWindowFrameQuantity, materailUnit: 'CUFT' },
                                                { materailname: 'MS Door & Window Frame', materailquantity: materlID.BWRB_GFBrickWorkMSDoorWindowFrameQuantity, materailUnit: 'KG' },

                                            ];

                                            async function SteelReinforcementfunHGHCall() {
                                                for (let i = 0; i < dataArranew.length; i++) {
                                                    try {
                                                        const newDatanewtask = new Material(dataArranew[i]);
                                                        const savedData = await newDatanewtask.save();

                                                        let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                        let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                        // console.log(objID);
                                                        await SubActivities.updateOne(
                                                            { _id: newss },
                                                            {
                                                                $push: {
                                                                    materialsName: objID
                                                                }
                                                            }
                                                        )
                                                        // console.log('Data saved:', savedData);
                                                    } catch (error) {
                                                        // console.error('Error saving data:', error);
                                                    }
                                                }
                                            }
                                            SteelReinforcementfunHGHCall();
                                        }



                                        if (newDatanew.subactivityname === "GF Brick Work") {

                                            const dataArranew = [
                                                { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                                { subtaskdescription: 'Arrange the bricks/blocks ,sand and cement at site' },
                                                { subtaskdescription: 'Assign the  contractor for the work' },
                                                { subtaskdescription: 'Arrange the doors and window frames and hold fasts at site' },
                                                { subtaskdescription: 'Make the water and electricity arrangements at site' },
                                                { subtaskdescription: 'Ask the contractor to deliver the scaffholding material at site' },
                                                { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                                { subtaskdescription: 'Ask the contractor to soak the bricks in water before laying' },
                                                { subtaskdescription: 'Explain the brick layout to the contractor' },
                                                { subtaskdescription: 'Finalise the bond of brickwork' },
                                                { subtaskdescription: 'Ask the contractor to lay the brickwork in line and in plumb with the beam bottom' },
                                                { subtaskdescription: 'Calculate the quantity of door and Window frames and arrange them' },
                                                { subtaskdescription: 'Ask the contractor to do proper raking of joints' },
                                                { subtaskdescription: 'Ask the contractor not to do brickwork more than 1.5m in height in one day' },
                                                { subtaskdescription: 'Ask the contractor to do brickwork in proper line and level' },
                                                { subtaskdescription: 'Phase 3', phaseHeadingShow: 'Yes' },
                                                { subtaskdescription: 'Assign the guard for the curing ' },
                                                { subtaskdescription: 'Ask the contractor for daily cleaning of site after the work' },
                                            ];

                                            async function BrickWorkfunCall() {
                                                for (let i = 0; i < dataArranew.length; i++) {
                                                    try {
                                                        const newDatanewtask = new Subtask(dataArranew[i]);
                                                        const savedData = await newDatanewtask.save();

                                                        let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                        let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                        // console.log(objID);
                                                        await SubActivities.updateOne(
                                                            { _id: newss },
                                                            {
                                                                $push: {
                                                                    subtaskID: objID
                                                                }
                                                            }
                                                        )
                                                        // console.log('Data saved:', savedData);
                                                    } catch (error) {
                                                        // console.error('Error saving data:', error);
                                                    }
                                                }
                                            }
                                            BrickWorkfunCall();
                                        }




                                        if (newDatanew.subactivityname === "GF Brick Work") {

                                            const dataArranew = [
                                                { headingforshortingOne: 'Layout', headingforshortingTwo: 'Brick Work' },
                                                { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Layout', NormalHeadingThree: 'Opening', NormalHeadingfoure: 'Dimension' },
                                                { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Sill Band', NormalHeadingThree: 'Lintel Band', NormalHeadingfoure: 'Beam Bott.' },
                                                {},
                                                {},
                                                {},
                                            ];

                                            async function RccsnagsSnags() {
                                                for (let i = 0; i < dataArranew.length; i++) {
                                                    try {
                                                        const newDatanewtask = new Snags(dataArranew[i]);
                                                        const savedData = await newDatanewtask.save();

                                                        let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                        let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                        // console.log(objID);
                                                        await SubActivities.updateOne(
                                                            { _id: newss },
                                                            {
                                                                $push: {
                                                                    snagsID: objID
                                                                }
                                                            }
                                                        )
                                                        // console.log('Data saved:', savedData);
                                                    } catch (error) {
                                                        // console.error('Error saving data:', error);
                                                    }
                                                }
                                            }
                                            RccsnagsSnags();
                                        }




                                        if (newDatanew.subactivityname === "FF Brick Work") {

                                            const dataArranew = [
                                                { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                                { checksHeading: 'Cleaning check', checksdescription: 'Cleaning the entire floor, before starting the line out of masonry.' },
                                                { checksHeading: 'Screening check', checksdescription: 'Screening of sand,mortar proportion & soaking of bricks.' },
                                                { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                                { checksHeading: 'Door window check', checksdescription: 'Erection of door & window frames with fixing the  necessary number of holdfast.' },
                                                { checksHeading: 'Mortar thickness check', checksdescription: 'Thickness of joints not more than 12mm and Racking of joints & surface cleaning after completion of day-to-day work.' },
                                                { checksHeading: 'Height check', checksdescription: 'Brickwork should be taken up in layers not exceeding one meter height at a time.' },
                                                { checksHeading: 'Scaffholding check', checksdescription: 'Check type of scaffolding and whether tied and braced properly.' },
                                                { checksHeading: 'Rebars check', checksdescription: 'Check wheather  reinforcement is provided in lintel in brick wall' },
                                                { checksHeading: 'Lintel check', checksdescription: 'Above Lintel work till Roof | Beam Bottom' },
                                                { checksHeading: 'Filling check', checksdescription: 'Filling of alll the Joints' },
                                                { checksHeading: 'Phase 3', phaseHeadingShow: 'Yes' },
                                                { checksHeading: 'Curing check', checksdescription: 'Curing should be done for 7 days' },
                                            ];

                                            async function BrickWorkChacks() {
                                                for (let i = 0; i < dataArranew.length; i++) {
                                                    try {
                                                        const newDatanewtask = new Checks(dataArranew[i]);
                                                        const savedData = await newDatanewtask.save();

                                                        let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                        let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                        // console.log(objID);
                                                        await SubActivities.updateOne(
                                                            { _id: newss },
                                                            {
                                                                $push: {
                                                                    checksID: objID
                                                                }
                                                            }
                                                        )
                                                        // console.log('Data saved:', savedData);
                                                    } catch (error) {
                                                        // console.error('Error saving data:', error);
                                                    }
                                                }
                                            }
                                            BrickWorkChacks();
                                        }


                                        if (newDatanew.subactivityname === "FF Brick Work") {

                                            const dataArranew = [
                                                { materailname: 'Common Burnt Clay (7.5 D)', materailquantity: materlID.BWRB_FFBrickWorkCommonBurntClay75DQuantity, materailUnit: 'NOS' },
                                                { materailname: 'Portland Cement', materailquantity: materlID.BWRB_FFBrickWorkPortlandCementQuantity, materailUnit: 'BAG' },
                                                { materailname: 'Course Sand', materailquantity: materlID.BWRB_FFBrickWorkCourseSandQuantity, materailUnit: 'CUFT' },
                                                { materailname: 'Stone Aggregate (20 MM)', materailquantity: materlID.BWRB_FFBrickWorkStoneAggregate20MMQuantity, materailUnit: 'CUFT' },
                                                { materailname: 'Autoclaved aerated cement (AAC)', materailquantity: materlID.BWRB_FFBrickWorkAutoclavedAeratedCementAACQuantity, materailUnit: 'CUM' },
                                                { materailname: 'Polymer modified adhesive mortar', materailquantity: materlID.BWRB_FFBrickWorkPolymerModifiedAdhesiveMortarQuantity, materailUnit: 'BAG' },
                                                { materailname: 'Reinforcement', materailquantity: materlID.BWRB_FFBrickWorkReinforcementQuantity, materailUnit: 'KG' },
                                                { materailname: 'Door Frame', materailquantity: materlID.BWRB_FFBrickWorkDoorFrameQuantity, materailUnit: 'CUFT' },
                                                { materailname: 'Window frame', materailquantity: materlID.BWRB_FFBrickWorkWindowFrameQuantity, materailUnit: 'CUFT' },
                                                { materailname: 'MS Door & Window Frame', materailquantity: materlID.BWRB_FFBrickWorkMSDoorWindowFrameQuantity, materailUnit: 'KG' },

                                            ];

                                            async function SteelReinforcementfunHGHCall() {
                                                for (let i = 0; i < dataArranew.length; i++) {
                                                    try {
                                                        const newDatanewtask = new Material(dataArranew[i]);
                                                        const savedData = await newDatanewtask.save();

                                                        let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                        let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                        // console.log(objID);
                                                        await SubActivities.updateOne(
                                                            { _id: newss },
                                                            {
                                                                $push: {
                                                                    materialsName: objID
                                                                }
                                                            }
                                                        )
                                                        // console.log('Data saved:', savedData);
                                                    } catch (error) {
                                                        // console.error('Error saving data:', error);
                                                    }
                                                }
                                            }
                                            SteelReinforcementfunHGHCall();
                                        }


                                        if (newDatanew.subactivityname === "FF Brick Work") {

                                            const dataArranew = [
                                                { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                                { subtaskdescription: 'Arrange the bricks/blocks ,sand and cement at site' },
                                                { subtaskdescription: 'Assign the  contractor for the work' },
                                                { subtaskdescription: 'Arrange the doors and window frames and hold fasts at site' },
                                                { subtaskdescription: 'Make the water and electricity arrangements at site' },
                                                { subtaskdescription: 'Ask the contractor to deliver the scaffholding material at site' },
                                                { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                                { subtaskdescription: 'Ask the contractor to soak the bricks in water before laying' },
                                                { subtaskdescription: 'Explain the brick layout to the contractor' },
                                                { subtaskdescription: 'Finalise the bond of brickwork' },
                                                { subtaskdescription: 'Ask the contractor to lay the brickwork in line and in plumb with the beam bottom' },
                                                { subtaskdescription: 'Calculate the quantity of door and Window frames and arrange them' },
                                                { subtaskdescription: 'Ask the contractor to do proper raking of joints' },
                                                { subtaskdescription: 'Ask the contractor not to do brickwork more than 1.5m in height in one day' },
                                                { subtaskdescription: 'Ask the contractor to do brickwork in proper line and level' },
                                                { subtaskdescription: 'Phase 3', phaseHeadingShow: 'Yes' },
                                                { subtaskdescription: 'Assign the guard for the curing ' },
                                                { subtaskdescription: 'Ask the contractor for daily cleaning of site after the work' },
                                            ];

                                            async function BrickWorkfunCall() {
                                                for (let i = 0; i < dataArranew.length; i++) {
                                                    try {
                                                        const newDatanewtask = new Subtask(dataArranew[i]);
                                                        const savedData = await newDatanewtask.save();

                                                        let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                        let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                        // console.log(objID);
                                                        await SubActivities.updateOne(
                                                            { _id: newss },
                                                            {
                                                                $push: {
                                                                    subtaskID: objID
                                                                }
                                                            }
                                                        )
                                                        // console.log('Data saved:', savedData);
                                                    } catch (error) {
                                                        // console.error('Error saving data:', error);
                                                    }
                                                }
                                            }
                                            BrickWorkfunCall();
                                        }





                                        if (newDatanew.subactivityname === "FF Brick Work") {

                                            const dataArranew = [
                                                { headingforshortingOne: 'Layout', headingforshortingTwo: 'Brick Work' },
                                                { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Layout', NormalHeadingThree: 'Opening', NormalHeadingfoure: 'Dimension' },
                                                { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Sill Band', NormalHeadingThree: 'Lintel Band', NormalHeadingfoure: 'Beam Bott.' },
                                                {},
                                                {},
                                                {},
                                            ];

                                            async function RccsnagsSnags() {
                                                for (let i = 0; i < dataArranew.length; i++) {
                                                    try {
                                                        const newDatanewtask = new Snags(dataArranew[i]);
                                                        const savedData = await newDatanewtask.save();

                                                        let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                        let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                        // console.log(objID);
                                                        await SubActivities.updateOne(
                                                            { _id: newss },
                                                            {
                                                                $push: {
                                                                    snagsID: objID
                                                                }
                                                            }
                                                        )
                                                        // console.log('Data saved:', savedData);
                                                    } catch (error) {
                                                        // console.error('Error saving data:', error);
                                                    }
                                                }
                                            }
                                            RccsnagsSnags();
                                        }



                                        if (newDatanew.subactivityname === "SF Brick Work") {

                                            const dataArranew = [
                                                { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                                { checksHeading: 'Cleaning check', checksdescription: 'Cleaning the entire floor, before starting the line out of masonry.' },
                                                { checksHeading: 'Screening check', checksdescription: 'Screening of sand,mortar proportion & soaking of bricks.' },
                                                { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                                { checksHeading: 'Door window check', checksdescription: 'Erection of door & window frames with fixing the  necessary number of holdfast.' },
                                                { checksHeading: 'Mortar thickness check', checksdescription: 'Thickness of joints not more than 12mm and Racking of joints & surface cleaning after completion of day-to-day work.' },
                                                { checksHeading: 'Height check', checksdescription: 'Brickwork should be taken up in layers not exceeding one meter height at a time.' },
                                                { checksHeading: 'Scaffholding check', checksdescription: 'Check type of scaffolding and whether tied and braced properly.' },
                                                { checksHeading: 'Rebars check', checksdescription: 'Check wheather  reinforcement is provided in lintel in brick wall' },
                                                { checksHeading: 'Lintel check', checksdescription: 'Above Lintel work till Roof | Beam Bottom' },
                                                { checksHeading: 'Filling check', checksdescription: 'Filling of alll the Joints' },
                                                { checksHeading: 'Phase 3', phaseHeadingShow: 'Yes' },
                                                { checksHeading: 'Curing check', checksdescription: 'Curing should be done for 7 days' },
                                            ];

                                            async function BrickWorkChacks() {
                                                for (let i = 0; i < dataArranew.length; i++) {
                                                    try {
                                                        const newDatanewtask = new Checks(dataArranew[i]);
                                                        const savedData = await newDatanewtask.save();

                                                        let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                        let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                        // console.log(objID);
                                                        await SubActivities.updateOne(
                                                            { _id: newss },
                                                            {
                                                                $push: {
                                                                    checksID: objID
                                                                }
                                                            }
                                                        )
                                                        // console.log('Data saved:', savedData);
                                                    } catch (error) {
                                                        // console.error('Error saving data:', error);
                                                    }
                                                }
                                            }
                                            BrickWorkChacks();
                                        }



                                        if (newDatanew.subactivityname === "SF Brick Work") {

                                            const dataArranew = [
                                                { materailname: 'Common Burnt Clay (7.5 D)', materailquantity: materlID.BWRB_SFBrickWorkCommonBurntClay75DQuantity, materailUnit: 'NOS' },
                                                { materailname: 'Portland Cement', materailquantity: materlID.BWRB_SFBrickWorkPortlandCementQuantity, materailUnit: 'BAG' },
                                                { materailname: 'Course Sand', materailquantity: materlID.BWRB_BWRB_SFBrickWorkCourseSandQuantity, materailUnit: 'CUFT' },
                                                { materailname: 'Stone Aggregate (20 MM)', materailquantity: materlID.BWRB_SFBrickWorkStoneAggregate20MMQuantity, materailUnit: 'CUFT' },
                                                { materailname: 'Autoclaved aerated cement (AAC)', materailquantity: materlID.BWRB_SFBrickWorkAutoclavedAeratedCementAACQuantity, materailUnit: 'CUM' },
                                                { materailname: 'Polymer modified adhesive mortar', materailquantity: materlID.BWRB_SFBrickWorkPolymerModifiedAdhesiveMortarQuantity, materailUnit: 'BAG' },
                                                { materailname: 'Reinforcement', materailquantity: materlID.BWRB_SFBrickWorkReinforcementQuantity, materailUnit: 'KG' },
                                                { materailname: 'Door Frame', materailquantity: materlID.BWRB_SFBrickWorkDoorFrameQuantity, materailUnit: 'CUFT' },
                                                { materailname: 'Window frame', materailquantity: materlID.BWRB_SFBrickWorkWindowFrameQuantity, materailUnit: 'CUFT' },
                                                { materailname: 'MS Door & Window Frame', materailquantity: materlID.BWRB_SFBrickWorkMSDoorWindowFrameQuantity, materailUnit: 'KG' },

                                            ];

                                            async function SteelReinforcementfunHGHCall() {
                                                for (let i = 0; i < dataArranew.length; i++) {
                                                    try {
                                                        const newDatanewtask = new Material(dataArranew[i]);
                                                        const savedData = await newDatanewtask.save();

                                                        let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                        let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                        // console.log(objID);
                                                        await SubActivities.updateOne(
                                                            { _id: newss },
                                                            {
                                                                $push: {
                                                                    materialsName: objID
                                                                }
                                                            }
                                                        )
                                                        // console.log('Data saved:', savedData);
                                                    } catch (error) {
                                                        // console.error('Error saving data:', error);
                                                    }
                                                }
                                            }
                                            SteelReinforcementfunHGHCall();
                                        }


                                        if (newDatanew.subactivityname === "SF Brick Work") {

                                            const dataArranew = [
                                                { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                                { subtaskdescription: 'Arrange the bricks/blocks ,sand and cement at site' },
                                                { subtaskdescription: 'Assign the  contractor for the work' },
                                                { subtaskdescription: 'Arrange the doors and window frames and hold fasts at site' },
                                                { subtaskdescription: 'Make the water and electricity arrangements at site' },
                                                { subtaskdescription: 'Ask the contractor to deliver the scaffholding material at site' },
                                                { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                                { subtaskdescription: 'Ask the contractor to soak the bricks in water before laying' },
                                                { subtaskdescription: 'Explain the brick layout to the contractor' },
                                                { subtaskdescription: 'Finalise the bond of brickwork' },
                                                { subtaskdescription: 'Ask the contractor to lay the brickwork in line and in plumb with the beam bottom' },
                                                { subtaskdescription: 'Calculate the quantity of door and Window frames and arrange them' },
                                                { subtaskdescription: 'Ask the contractor to do proper raking of joints' },
                                                { subtaskdescription: 'Ask the contractor not to do brickwork more than 1.5m in height in one day' },
                                                { subtaskdescription: 'Ask the contractor to do brickwork in proper line and level' },
                                                { subtaskdescription: 'Phase 3', phaseHeadingShow: 'Yes' },
                                                { subtaskdescription: 'Assign the guard for the curing ' },
                                                { subtaskdescription: 'Ask the contractor for daily cleaning of site after the work' },
                                            ];

                                            async function BrickWorkfunCall() {
                                                for (let i = 0; i < dataArranew.length; i++) {
                                                    try {
                                                        const newDatanewtask = new Subtask(dataArranew[i]);
                                                        const savedData = await newDatanewtask.save();

                                                        let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                        let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                        // console.log(objID);
                                                        await SubActivities.updateOne(
                                                            { _id: newss },
                                                            {
                                                                $push: {
                                                                    subtaskID: objID
                                                                }
                                                            }
                                                        )
                                                        // console.log('Data saved:', savedData);
                                                    } catch (error) {
                                                        // console.error('Error saving data:', error);
                                                    }
                                                }
                                            }
                                            BrickWorkfunCall();
                                        }



                                        if (newDatanew.subactivityname === "SF Brick Work") {

                                            const dataArranew = [
                                                { headingforshortingOne: 'Layout', headingforshortingTwo: 'Brick Work' },
                                                { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Layout', NormalHeadingThree: 'Opening', NormalHeadingfoure: 'Dimension' },
                                                { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Sill Band', NormalHeadingThree: 'Lintel Band', NormalHeadingfoure: 'Beam Bott.' },
                                                {},
                                                {},
                                                {},
                                            ];

                                            async function RccsnagsSnags() {
                                                for (let i = 0; i < dataArranew.length; i++) {
                                                    try {
                                                        const newDatanewtask = new Snags(dataArranew[i]);
                                                        const savedData = await newDatanewtask.save();

                                                        let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                        let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                        // console.log(objID);
                                                        await SubActivities.updateOne(
                                                            { _id: newss },
                                                            {
                                                                $push: {
                                                                    snagsID: objID
                                                                }
                                                            }
                                                        )
                                                        // console.log('Data saved:', savedData);
                                                    } catch (error) {
                                                        // console.error('Error saving data:', error);
                                                    }
                                                }
                                            }
                                            RccsnagsSnags();
                                        }




                                        if (newDatanew.subactivityname === "TF Brick Work") {

                                            const dataArranew = [
                                                { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                                { checksHeading: 'Cleaning check', checksdescription: 'Cleaning the entire floor, before starting the line out of masonry.' },
                                                { checksHeading: 'Screening check', checksdescription: 'Screening of sand,mortar proportion & soaking of bricks.' },
                                                { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                                { checksHeading: 'Door window check', checksdescription: 'Erection of door & window frames with fixing the  necessary number of holdfast.' },
                                                { checksHeading: 'Mortar thickness check', checksdescription: 'Thickness of joints not more than 12mm and Racking of joints & surface cleaning after completion of day-to-day work.' },
                                                { checksHeading: 'Height check', checksdescription: 'Brickwork should be taken up in layers not exceeding one meter height at a time.' },
                                                { checksHeading: 'Scaffholding check', checksdescription: 'Check type of scaffolding and whether tied and braced properly.' },
                                                { checksHeading: 'Rebars check', checksdescription: 'Check wheather  reinforcement is provided in lintel in brick wall' },
                                                { checksHeading: 'Lintel check', checksdescription: 'Above Lintel work till Roof | Beam Bottom' },
                                                { checksHeading: 'Filling check', checksdescription: 'Filling of alll the Joints' },
                                                { checksHeading: 'Phase 3', phaseHeadingShow: 'Yes' },
                                                { checksHeading: 'Curing check', checksdescription: 'Curing should be done for 7 days' },
                                            ];

                                            async function BrickWorkChacks() {
                                                for (let i = 0; i < dataArranew.length; i++) {
                                                    try {
                                                        const newDatanewtask = new Checks(dataArranew[i]);
                                                        const savedData = await newDatanewtask.save();

                                                        let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                        let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                        // console.log(objID);
                                                        await SubActivities.updateOne(
                                                            { _id: newss },
                                                            {
                                                                $push: {
                                                                    checksID: objID
                                                                }
                                                            }
                                                        )
                                                        // console.log('Data saved:', savedData);
                                                    } catch (error) {
                                                        // console.error('Error saving data:', error);
                                                    }
                                                }
                                            }
                                            BrickWorkChacks();
                                        }



                                        if (newDatanew.subactivityname === "TF Brick Work") {

                                            const dataArranew = [
                                                { materailname: 'Common Burnt Clay (7.5 D)', materailquantity: materlID.BWRB_TFBrickWorkCommonBurntClay75DQuantity, materailUnit: 'NOS' },
                                                { materailname: 'Portland Cement', materailquantity: materlID.BWRB_TFBrickWorkPortlandCementQuantity, materailUnit: 'BAG' },
                                                { materailname: 'Course Sand', materailquantity: materlID.BWRB_TFBrickWorkCourseSandQuantity, materailUnit: 'CUFT' },
                                                { materailname: 'Stone Aggregate (20 MM)', materailquantity: materlID.BWRB_TFBrickWorkStoneAggregate20MMQuantity, materailUnit: 'CUFT' },
                                                { materailname: 'Autoclaved aerated cement (AAC)', materailquantity: materlID.BWRB_TFBrickWorkAutoclavedAeratedCementAACQuantity, materailUnit: 'CUM' },
                                                { materailname: 'Polymer modified adhesive mortar', materailquantity: materlID.BWRB_TFBrickWorkPolymerModifiedAdhesiveMortarQuantity, materailUnit: 'BAG' },
                                                { materailname: 'Reinforcement', materailquantity: materlID.BWRB_TFBrickWorkReinforcementQuantity, materailUnit: 'KG' },
                                                { materailname: 'Door Frame', materailquantity: materlID.BWRB_TFBrickWorkDoorFrameQuantity, materailUnit: 'CUFT' },
                                                { materailname: 'Window frame', materailquantity: materlID.BWRB_TFBrickWorkWindowFrameQuantity, materailUnit: 'CUFT' },
                                                { materailname: 'MS Door & Window Frame', materailquantity: materlID.BWRB_TFBrickWorkMSDoorWindowFrameQuantity, materailUnit: 'KG' },

                                            ];

                                            async function SteelReinforcementfunHGHCall() {
                                                for (let i = 0; i < dataArranew.length; i++) {
                                                    try {
                                                        const newDatanewtask = new Material(dataArranew[i]);
                                                        const savedData = await newDatanewtask.save();

                                                        let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                        let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                        // console.log(objID);
                                                        await SubActivities.updateOne(
                                                            { _id: newss },
                                                            {
                                                                $push: {
                                                                    materialsName: objID
                                                                }
                                                            }
                                                        )
                                                        // console.log('Data saved:', savedData);
                                                    } catch (error) {
                                                        // console.error('Error saving data:', error);
                                                    }
                                                }
                                            }
                                            SteelReinforcementfunHGHCall();
                                        }



                                        if (newDatanew.subactivityname === "TF Brick Work") {

                                            const dataArranew = [
                                                { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                                { subtaskdescription: 'Arrange the bricks/blocks ,sand and cement at site' },
                                                { subtaskdescription: 'Assign the  contractor for the work' },
                                                { subtaskdescription: 'Arrange the doors and window frames and hold fasts at site' },
                                                { subtaskdescription: 'Make the water and electricity arrangements at site' },
                                                { subtaskdescription: 'Ask the contractor to deliver the scaffholding material at site' },
                                                { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                                { subtaskdescription: 'Ask the contractor to soak the bricks in water before laying' },
                                                { subtaskdescription: 'Explain the brick layout to the contractor' },
                                                { subtaskdescription: 'Finalise the bond of brickwork' },
                                                { subtaskdescription: 'Ask the contractor to lay the brickwork in line and in plumb with the beam bottom' },
                                                { subtaskdescription: 'Calculate the quantity of door and Window frames and arrange them' },
                                                { subtaskdescription: 'Ask the contractor to do proper raking of joints' },
                                                { subtaskdescription: 'Ask the contractor not to do brickwork more than 1.5m in height in one day' },
                                                { subtaskdescription: 'Ask the contractor to do brickwork in proper line and level' },
                                                { subtaskdescription: 'Phase 3', phaseHeadingShow: 'Yes' },
                                                { subtaskdescription: 'Assign the guard for the curing ' },
                                                { subtaskdescription: 'Ask the contractor for daily cleaning of site after the work' },
                                            ];

                                            async function BrickWorkfunCall() {
                                                for (let i = 0; i < dataArranew.length; i++) {
                                                    try {
                                                        const newDatanewtask = new Subtask(dataArranew[i]);
                                                        const savedData = await newDatanewtask.save();

                                                        let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                        let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                        // console.log(objID);
                                                        await SubActivities.updateOne(
                                                            { _id: newss },
                                                            {
                                                                $push: {
                                                                    subtaskID: objID
                                                                }
                                                            }
                                                        )
                                                        // console.log('Data saved:', savedData);
                                                    } catch (error) {
                                                        // console.error('Error saving data:', error);
                                                    }
                                                }
                                            }
                                            BrickWorkfunCall();
                                        }





                                        if (newDatanew.subactivityname === "TF Brick Work") {

                                            const dataArranew = [
                                                { headingforshortingOne: 'Layout', headingforshortingTwo: 'Brick Work' },
                                                { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Layout', NormalHeadingThree: 'Opening', NormalHeadingfoure: 'Dimension' },
                                                { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Sill Band', NormalHeadingThree: 'Lintel Band', NormalHeadingfoure: 'Beam Bott.' },
                                                {},
                                                {},
                                                {},
                                            ];

                                            async function RccsnagsSnags() {
                                                for (let i = 0; i < dataArranew.length; i++) {
                                                    try {
                                                        const newDatanewtask = new Snags(dataArranew[i]);
                                                        const savedData = await newDatanewtask.save();

                                                        let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                        let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                        // console.log(objID);
                                                        await SubActivities.updateOne(
                                                            { _id: newss },
                                                            {
                                                                $push: {
                                                                    snagsID: objID
                                                                }
                                                            }
                                                        )
                                                        // console.log('Data saved:', savedData);
                                                    } catch (error) {
                                                        // console.error('Error saving data:', error);
                                                    }
                                                }
                                            }
                                            RccsnagsSnags();
                                        }



                                        if (newDatanew.subactivityname === "FoF Brick Work") {

                                            const dataArranew = [
                                                { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                                { checksHeading: 'Cleaning check', checksdescription: 'Cleaning the entire floor, before starting the line out of masonry.' },
                                                { checksHeading: 'Screening check', checksdescription: 'Screening of sand,mortar proportion & soaking of bricks.' },
                                                { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                                { checksHeading: 'Door window check', checksdescription: 'Erection of door & window frames with fixing the  necessary number of holdfast.' },
                                                { checksHeading: 'Mortar thickness check', checksdescription: 'Thickness of joints not more than 12mm and Racking of joints & surface cleaning after completion of day-to-day work.' },
                                                { checksHeading: 'Height check', checksdescription: 'Brickwork should be taken up in layers not exceeding one meter height at a time.' },
                                                { checksHeading: 'Scaffholding check', checksdescription: 'Check type of scaffolding and whether tied and braced properly.' },
                                                { checksHeading: 'Rebars check', checksdescription: 'Check wheather  reinforcement is provided in lintel in brick wall' },
                                                { checksHeading: 'Lintel check', checksdescription: 'Above Lintel work till Roof | Beam Bottom' },
                                                { checksHeading: 'Filling check', checksdescription: 'Filling of alll the Joints' },
                                                { checksHeading: 'Phase 3', phaseHeadingShow: 'Yes' },
                                                { checksHeading: 'Curing check', checksdescription: 'Curing should be done for 7 days' },
                                            ];

                                            async function BrickWorkChacks() {
                                                for (let i = 0; i < dataArranew.length; i++) {
                                                    try {
                                                        const newDatanewtask = new Checks(dataArranew[i]);
                                                        const savedData = await newDatanewtask.save();

                                                        let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                        let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                        // console.log(objID);
                                                        await SubActivities.updateOne(
                                                            { _id: newss },
                                                            {
                                                                $push: {
                                                                    checksID: objID
                                                                }
                                                            }
                                                        )
                                                        // console.log('Data saved:', savedData);
                                                    } catch (error) {
                                                        // console.error('Error saving data:', error);
                                                    }
                                                }
                                            }
                                            BrickWorkChacks();
                                        }



                                        if (newDatanew.subactivityname === "FoF Brick Work") {

                                            const dataArranew = [
                                                { materailname: 'Common Burnt Clay (7.5 D)', materailquantity: materlID.BWRB_FoFBrickWorkCommonBurntClay75DQuantity, materailUnit: 'NOS' },
                                                { materailname: 'Portland Cement', materailquantity: materlID.BWRB_FoFBrickWorkPortlandCementQuantity, materailUnit: 'BAG' },
                                                { materailname: 'Course Sand', materailquantity: materlID.BWRB_FoFBrickWorkCourseSandQuantity, materailUnit: 'CUFT' },
                                                { materailname: 'Stone Aggregate (20 MM)', materailquantity: materlID.BWRB_FoFBrickWorkStoneAggregate20MMQuantity, materailUnit: 'CUFT' },
                                                { materailname: 'Autoclaved aerated cement (AAC)', materailquantity: materlID.BWRB_FoFBrickWorkAutoclavedAeratedCementAACQuantity, materailUnit: 'CUM' },
                                                { materailname: 'Polymer modified adhesive mortar', materailquantity: materlID.BWRB_FoFBrickWorkPolymerModifiedAdhesiveMortarQuantity, materailUnit: 'BAG' },
                                                { materailname: 'Reinforcement', materailquantity: materlID.BWRB_FoFBrickWorkReinforcementQuantity, materailUnit: 'KG' },
                                                { materailname: 'Door Frame', materailquantity: materlID.BWRB_FoFBrickWorkDoorFrameQuantity, materailUnit: 'CUFT' },
                                                { materailname: 'Window frame', materailquantity: materlID.BWRB_FoFBrickWorkWindowFrameQuantity, materailUnit: 'CUFT' },
                                                { materailname: 'MS Door & Window Frame', materailquantity: materlID.BWRB_FoFBrickWorkMSDoorWindowFrameQuantity, materailUnit: 'KG' },

                                            ];

                                            async function SteelReinforcementfunHGHCall() {
                                                for (let i = 0; i < dataArranew.length; i++) {
                                                    try {
                                                        const newDatanewtask = new Material(dataArranew[i]);
                                                        const savedData = await newDatanewtask.save();

                                                        let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                        let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                        // console.log(objID);
                                                        await SubActivities.updateOne(
                                                            { _id: newss },
                                                            {
                                                                $push: {
                                                                    materialsName: objID
                                                                }
                                                            }
                                                        )
                                                        // console.log('Data saved:', savedData);
                                                    } catch (error) {
                                                        // console.error('Error saving data:', error);
                                                    }
                                                }
                                            }
                                            SteelReinforcementfunHGHCall();
                                        }



                                        if (newDatanew.subactivityname === "FoF Brick Work") {

                                            const dataArranew = [
                                                { headingforshortingOne: 'Layout', headingforshortingTwo: 'Brick Work' },
                                                { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Layout', NormalHeadingThree: 'Opening', NormalHeadingfoure: 'Dimension' },
                                                { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Sill Band', NormalHeadingThree: 'Lintel Band', NormalHeadingfoure: 'Beam Bott.' },
                                                {},
                                                {},
                                                {},
                                            ];

                                            async function RccsnagsSnags() {
                                                for (let i = 0; i < dataArranew.length; i++) {
                                                    try {
                                                        const newDatanewtask = new Snags(dataArranew[i]);
                                                        const savedData = await newDatanewtask.save();

                                                        let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                        let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                        // console.log(objID);
                                                        await SubActivities.updateOne(
                                                            { _id: newss },
                                                            {
                                                                $push: {
                                                                    snagsID: objID
                                                                }
                                                            }
                                                        )
                                                        // console.log('Data saved:', savedData);
                                                    } catch (error) {
                                                        // console.error('Error saving data:', error);
                                                    }
                                                }
                                            }
                                            RccsnagsSnags();
                                        }

                                        if (newDatanew.subactivityname === "Tower Brick Work") {

                                            const dataArranew = [
                                                { materailname: 'Common Burnt Clay (7.5 D)', materailquantity: materlID.BWRB_TowerBrickWorkCommonBurntClay75DQuantity, materailUnit: 'NOS' },
                                                { materailname: 'Portland Cement', materailquantity: materlID.BWRB_TowerBrickWorkPortlandCementQuantity, materailUnit: 'BAG' },
                                                { materailname: 'Course Sand', materailquantity: materlID.BWRB_TowerBrickWorkCourseSandQuantity, materailUnit: 'CUFT' },
                                                { materailname: 'Stone Aggregate (20 MM)', materailquantity: materlID.BWRB_TowerBrickWorkStoneAggregate20MMQuantity, materailUnit: 'CUFT' },
                                                { materailname: 'Autoclaved aerated cement (AAC)', materailquantity: materlID.BWRB_TowerBrickWorkAutoclavedAeratedCementAACQuantity, materailUnit: 'CUM' },
                                                { materailname: 'Polymer modified adhesive mortar', materailquantity: materlID.BWRB_TowerBrickWorkPolymerModifiedAdhesiveMortarQuantity, materailUnit: 'BAG' },
                                                { materailname: 'Reinforcement', materailquantity: materlID.BWRB_TowerBrickWorkReinforcementQuantity, materailUnit: 'KG' },
                                                { materailname: 'Door Frame', materailquantity: materlID.BWRB_TowerBrickWorkDoorFrameQuantity, materailUnit: 'CUFT' },
                                                { materailname: 'Window frame', materailquantity: materlID.BWRB_TowerBrickWorkWindowFrameQuantity, materailUnit: 'CUFT' },
                                                { materailname: 'MS Door & Window Frame', materailquantity: materlID.BWRB_TowerBrickWorkMSDoorWindowFrameQuantity, materailUnit: 'KG' },

                                            ];

                                            async function SteelReinforcementfunHGHCall() {
                                                for (let i = 0; i < dataArranew.length; i++) {
                                                    try {
                                                        const newDatanewtask = new Material(dataArranew[i]);
                                                        const savedData = await newDatanewtask.save();

                                                        let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                        let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                        // console.log(objID);
                                                        await SubActivities.updateOne(
                                                            { _id: newss },
                                                            {
                                                                $push: {
                                                                    materialsName: objID
                                                                }
                                                            }
                                                        )
                                                        // console.log('Data saved:', savedData);
                                                    } catch (error) {
                                                        // console.error('Error saving data:', error);
                                                    }
                                                }
                                            }
                                            SteelReinforcementfunHGHCall();
                                        }





                                        if (newDatanew.subactivityname === "Tower Brick Work") {

                                            const dataArranew = [
                                                { headingforshortingOne: 'Layout', headingforshortingTwo: 'Brick Work' },
                                                { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Layout', NormalHeadingThree: 'Opening', NormalHeadingfoure: 'Dimension' },
                                                { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Sill Band', NormalHeadingThree: 'Lintel Band', NormalHeadingfoure: 'Beam Bott.' },
                                                {},
                                                {},
                                                {},
                                            ];

                                            async function RccsnagsSnags() {
                                                for (let i = 0; i < dataArranew.length; i++) {
                                                    try {
                                                        const newDatanewtask = new Snags(dataArranew[i]);
                                                        const savedData = await newDatanewtask.save();

                                                        let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                        let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                        // console.log(objID);
                                                        await SubActivities.updateOne(
                                                            { _id: newss },
                                                            {
                                                                $push: {
                                                                    snagsID: objID
                                                                }
                                                            }
                                                        )
                                                        // console.log('Data saved:', savedData);
                                                    } catch (error) {
                                                        // console.error('Error saving data:', error);
                                                    }
                                                }
                                            }
                                            RccsnagsSnags();
                                        }


                                        if (newDatanew.subactivityname === "FoF Brick Work") {

                                            const dataArranew = [
                                                { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                                { subtaskdescription: 'Arrange the bricks/blocks ,sand and cement at site' },
                                                { subtaskdescription: 'Assign the  contractor for the work' },
                                                { subtaskdescription: 'Arrange the doors and window frames and hold fasts at site' },
                                                { subtaskdescription: 'Make the water and electricity arrangements at site' },
                                                { subtaskdescription: 'Ask the contractor to deliver the scaffholding material at site' },
                                                { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                                { subtaskdescription: 'Ask the contractor to soak the bricks in water before laying' },
                                                { subtaskdescription: 'Explain the brick layout to the contractor' },
                                                { subtaskdescription: 'Finalise the bond of brickwork' },
                                                { subtaskdescription: 'Ask the contractor to lay the brickwork in line and in plumb with the beam bottom' },
                                                { subtaskdescription: 'Calculate the quantity of door and Window frames and arrange them' },
                                                { subtaskdescription: 'Ask the contractor to do proper raking of joints' },
                                                { subtaskdescription: 'Ask the contractor not to do brickwork more than 1.5m in height in one day' },
                                                { subtaskdescription: 'Ask the contractor to do brickwork in proper line and level' },
                                                { subtaskdescription: 'Phase 3', phaseHeadingShow: 'Yes' },
                                                { subtaskdescription: 'Assign the guard for the curing ' },
                                                { subtaskdescription: 'Ask the contractor for daily cleaning of site after the work' },
                                            ];

                                            async function BrickWorkfunCall() {
                                                for (let i = 0; i < dataArranew.length; i++) {
                                                    try {
                                                        const newDatanewtask = new Subtask(dataArranew[i]);
                                                        const savedData = await newDatanewtask.save();

                                                        let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                        let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                        // console.log(objID);
                                                        await SubActivities.updateOne(
                                                            { _id: newss },
                                                            {
                                                                $push: {
                                                                    subtaskID: objID
                                                                }
                                                            }
                                                        )
                                                        // console.log('Data saved:', savedData);
                                                    } catch (error) {
                                                        // console.error('Error saving data:', error);
                                                    }
                                                }
                                            }
                                            BrickWorkfunCall();
                                        }

                                    }




                                    await Activities.updateOne(
                                        { _id: newss },
                                        {
                                            $push: {
                                                subactivitiesID: objID
                                            }
                                        }
                                    )
                                    // console.log('Data saved:', savedData);
                                } catch (error) {
                                    // console.error('Error saving data:', error);
                                }
                            }
                        }
                        BricWrkCheck();
                    }













                    if (newData.categoryname === "Electrical Wall Conditing") {
                        const dataArranew = [
                            { subactivityname: 'B1 - Electrical Conduting', activityID: newData._id, projectID: objectproID, estimateDays: b1ElectricalConduiting_ESTD, TempID: 11 },
                            { subactivityname: 'B2 - Electrical Conduting', activityID: newData._id, projectID: objectproID, estimateDays: b2ElectricalConduiting_ESTD, TempID: 22 },
                            { subactivityname: 'B3 - Electrical Conduting', activityID: newData._id, projectID: objectproID, estimateDays: b3ElectricalConduiting_ESTD, TempID: 33 },
                            { subactivityname: 'B4 - Electrical Conduting', activityID: newData._id, projectID: objectproID, estimateDays: b4ElectricalConduiting_ESTD, TempID: 44 },
                            { subactivityname: 'GF - Electrical Conduting', activityID: newData._id, projectID: objectproID, estimateDays: gfElectricalConduiting_ESTD },
                            { subactivityname: 'FF - Electrical Conduting', activityID: newData._id, projectID: objectproID, estimateDays: ffElectricalConduiting_ESTD, TempID: 1 },
                            { subactivityname: 'SF - Electrical Conduting', activityID: newData._id, projectID: objectproID, estimateDays: sfElectricalConduiting_ESTD, TempID: 2 },
                            { subactivityname: 'TF - Electrical Conduting', activityID: newData._id, projectID: objectproID, estimateDays: tfElectricalConduiting_ESTD, TempID: 3 },
                            { subactivityname: 'FoF - Electrical Conduting', activityID: newData._id, projectID: objectproID, estimateDays: fofElectricalConduiting_ESTD, TempID: 4 },
                            { subactivityname: 'Tower - Electrical Conduting', activityID: newData._id, projectID: objectproID, estimateDays: towerElectricalConduiting_ESTD }
                        ];

                        async function miscellenousCalling() {
                            for (let i = 0; i < dataArranew.length; i++) {
                                if (dataArranew[i].TempID === 1 && NumbersOfFlorrs < 1 || dataArranew[i].TempID === 2 && NumbersOfFlorrs < 2 || dataArranew[i].TempID === 3 && NumbersOfFlorrs < 3 || dataArranew[i].TempID === 4 && NumbersOfFlorrs < 4 || dataArranew[i].TempID === 11 && NumbersOfBasemetFloor === 0 || dataArranew[i].TempID === 22 && NumbersOfBasemetFloor === 0 || dataArranew[i].TempID === 33 && NumbersOfBasemetFloor === 0 || dataArranew[i].TempID === 44 && NumbersOfBasemetFloor === 0) {
                                    continue; // Skip this iteration
                                }
                                try {
                                    const newDatanew = new SubActivities(dataArranew[i]);
                                    const savedData = await newDatanew.save();

                                    let objID = new mongoose.Types.ObjectId(newDatanew.id)
                                    let newss = new mongoose.Types.ObjectId(newData._id)
                                    // console.log(objID);


                                    //Anuj
                                    if (newDatanew.subactivityname === 'B1 - Electrical Conduting') {

                                        const dataArranew = [
                                            { checksHeading: 'Drawing Check', checksdescription: 'Study the electrical work procedure drawings for the positions of various points, D.B., etc.' },
                                            { checksHeading: 'Drawing Check', checksdescription: 'Provide the conduits for mains, light circuits TV, and telephone as per the approved drawings.' },
                                            { checksHeading: 'Inspection box check', checksdescription: 'Provide suitable inspection boxes to permit periodical inspection and to facilitate the removal of wires, if necessary.' },
                                            { checksHeading: 'Height check', checksdescription: 'Study the drawings in detail and mark the position of switch boxes with respect to the height from F.F.L.' },
                                            { checksHeading: 'Line out check', checksdescription: 'Do the line out on the wall by color marking.' },
                                            { checksHeading: 'Chasing Check', checksdescription: 'Start chasing of the wall with a cutting machine.' },
                                            { checksHeading: 'Bends check', checksdescription: 'Bends in conduit pipes should not be sharp.' },
                                            { checksHeading: 'Conduit Check', checksdescription: 'Provide thick conduit pipes of the approved quality in the chased portion and tie them with the help of binding wires and nails.' },
                                            { checksHeading: 'Conduit Check', checksdescription: 'The conduit pipe should not project out of the It should be at least 5mm inside the wall. the surface of the wall.' },
                                            { checksHeading: 'Inspection box check', checksdescription: 'Provide an inspection box on the wall, at a suitable location.' },
                                            { checksHeading: 'Finishing Check', checksdescription: 'Fix all the boxes flush to the adjacent finished. wall, considering the thickness of the plaster.' },
                                            { checksHeading: 'Finishing Check', checksdescription: 'Finish the chased portion with cement mortar. Roughen the surface.' },
                                            { checksHeading: 'Chicken mesh check', checksdescription: 'In case of 3 or more conduits, provide a chicken mesh over the portion of the conduit before finishing.' },
                                            { checksHeading: 'Dummy plates Check', checksdescription: 'Cover all the boxes with dummy plates to prevent damage during plastering.' },
                                            { checksHeading: 'Cleaning Check', checksdescription: 'After completion of all plastering work, clean the concealed boxes.' },
                                            { checksHeading: 'Inspection box check', checksdescription: 'Provide suitable inspection boxes to permit periodical inspection and to facilitate the removal of wires, if necessary.' },
                                        ];

                                        async function EleCtriclChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        EleCtriclChacks();
                                    }

                                    if (newDatanew.subactivityname === 'B1 - Electrical Conduting') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Assign the electrician been for the work' },
                                            { subtaskdescription: 'Explain the electrician  all the work with the  drawings' },
                                            { subtaskdescription: 'Ask the electrician to have a initial review and check if any interdepencies occur' },
                                            { subtaskdescription: 'Ask the electrician to clear the interdepencies and coordinate with the other agencies' },
                                            { subtaskdescription: 'Take the quantity of materials from the electrician and give to purchase manager' },
                                            { subtaskdescription: 'Ask the purchase manager to arrange the materials on site' },
                                            { subtaskdescription: 'Ask the electrician to check the material' },
                                            { subtaskdescription: 'Indicate for the electrical lines, locations of DB,MCB ,switch boxes etc to the electrician' },
                                            { subtaskdescription: 'Ask the contractor to do the chasing work with machine and it should be in line' },
                                            { subtaskdescription: 'Ask the contractor not to take the sharp bends and do not overlap the conduits' },
                                            { subtaskdescription: 'Confirm the number of points in each room as per the drawing.' },
                                            { subtaskdescription: 'Confirm the location of the points.' },
                                            { subtaskdescription: 'Ensure that the height of all the boards and points is as specified.' },
                                            { subtaskdescription: 'Check the line, level, and alignment of battening / casing-capping.' },
                                            { subtaskdescription: 'Ensure that the quality and specification of all the material is as approved.' },
                                            { subtaskdescription: 'Check the sizes of the boards as per the pictures on it.' },
                                            { subtaskdescription: 'Ask the contractor to finish the chased portion with cement mortar' },
                                        ];

                                        async function BeamSlabShutteringReinforcementRCCCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteringReinforcementRCCCall();
                                    }
                                    //Anuj

                                    if (newDatanew.subactivityname === 'B2 - Electrical Conduting') {

                                        const dataArranew = [
                                            { checksHeading: 'Drawing Check', checksdescription: 'Study the electrical work procedure drawings for the positions of various points, D.B., etc.' },
                                            { checksHeading: 'Drawing Check', checksdescription: 'Provide the conduits for mains, light circuits TV, and telephone as per the approved drawings.' },
                                            { checksHeading: 'Inspection box check', checksdescription: 'Provide suitable inspection boxes to permit periodical inspection and to facilitate the removal of wires, if necessary.' },
                                            { checksHeading: 'Height check', checksdescription: 'Study the drawings in detail and mark the position of switch boxes with respect to the height from F.F.L.' },
                                            { checksHeading: 'Line out check', checksdescription: 'Do the line out on the wall by color marking.' },
                                            { checksHeading: 'Chasing Check', checksdescription: 'Start chasing of the wall with a cutting machine.' },
                                            { checksHeading: 'Bends check', checksdescription: 'Bends in conduit pipes should not be sharp.' },
                                            { checksHeading: 'Conduit Check', checksdescription: 'Provide thick conduit pipes of the approved quality in the chased portion and tie them with the help of binding wires and nails.' },
                                            { checksHeading: 'Conduit Check', checksdescription: 'The conduit pipe should not project out of the It should be at least 5mm inside the wall. the surface of the wall.' },
                                            { checksHeading: 'Inspection box check', checksdescription: 'Provide an inspection box on the wall, at a suitable location.' },
                                            { checksHeading: 'Finishing Check', checksdescription: 'Fix all the boxes flush to the adjacent finished. wall, considering the thickness of the plaster.' },
                                            { checksHeading: 'Finishing Check', checksdescription: 'Finish the chased portion with cement mortar. Roughen the surface.' },
                                            { checksHeading: 'Chicken mesh check', checksdescription: 'In case of 3 or more conduits, provide a chicken mesh over the portion of the conduit before finishing.' },
                                            { checksHeading: 'Dummy plates Check', checksdescription: 'Cover all the boxes with dummy plates to prevent damage during plastering.' },
                                            { checksHeading: 'Cleaning Check', checksdescription: 'After completion of all plastering work, clean the concealed boxes.' },
                                            { checksHeading: 'Inspection box check', checksdescription: 'Provide suitable inspection boxes to permit periodical inspection and to facilitate the removal of wires, if necessary.' },
                                        ];

                                        async function EleCtriclChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        EleCtriclChacks();
                                    }

                                    if (newDatanew.subactivityname === 'B2 - Electrical Conduting') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Assign the electrician been for the work' },
                                            { subtaskdescription: 'Explain the electrician  all the work with the  drawings' },
                                            { subtaskdescription: 'Ask the electrician to have a initial review and check if any interdepencies occur' },
                                            { subtaskdescription: 'Ask the electrician to clear the interdepencies and coordinate with the other agencies' },
                                            { subtaskdescription: 'Take the quantity of materials from the electrician and give to purchase manager' },
                                            { subtaskdescription: 'Ask the purchase manager to arrange the materials on site' },
                                            { subtaskdescription: 'Ask the electrician to check the material' },
                                            { subtaskdescription: 'Indicate for the electrical lines, locations of DB,MCB ,switch boxes etc to the electrician' },
                                            { subtaskdescription: 'Ask the contractor to do the chasing work with machine and it should be in line' },
                                            { subtaskdescription: 'Ask the contractor not to take the sharp bends and do not overlap the conduits' },
                                            { subtaskdescription: 'Confirm the number of points in each room as per the drawing.' },
                                            { subtaskdescription: 'Confirm the location of the points.' },
                                            { subtaskdescription: 'Ensure that the height of all the boards and points is as specified.' },
                                            { subtaskdescription: 'Check the line, level, and alignment of battening / casing-capping.' },
                                            { subtaskdescription: 'Ensure that the quality and specification of all the material is as approved.' },
                                            { subtaskdescription: 'Check the sizes of the boards as per the pictures on it.' },
                                            { subtaskdescription: 'Ask the contractor to finish the chased portion with cement mortar' },
                                        ];

                                        async function BeamSlabShutteringReinforcementRCCCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteringReinforcementRCCCall();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'B3 - Electrical Conduting') {

                                        const dataArranew = [
                                            { checksHeading: 'Drawing Check', checksdescription: 'Study the electrical work procedure drawings for the positions of various points, D.B., etc.' },
                                            { checksHeading: 'Drawing Check', checksdescription: 'Provide the conduits for mains, light circuits TV, and telephone as per the approved drawings.' },
                                            { checksHeading: 'Inspection box check', checksdescription: 'Provide suitable inspection boxes to permit periodical inspection and to facilitate the removal of wires, if necessary.' },
                                            { checksHeading: 'Height check', checksdescription: 'Study the drawings in detail and mark the position of switch boxes with respect to the height from F.F.L.' },
                                            { checksHeading: 'Line out check', checksdescription: 'Do the line out on the wall by color marking.' },
                                            { checksHeading: 'Chasing Check', checksdescription: 'Start chasing of the wall with a cutting machine.' },
                                            { checksHeading: 'Bends check', checksdescription: 'Bends in conduit pipes should not be sharp.' },
                                            { checksHeading: 'Conduit Check', checksdescription: 'Provide thick conduit pipes of the approved quality in the chased portion and tie them with the help of binding wires and nails.' },
                                            { checksHeading: 'Conduit Check', checksdescription: 'The conduit pipe should not project out of the It should be at least 5mm inside the wall. the surface of the wall.' },
                                            { checksHeading: 'Inspection box check', checksdescription: 'Provide an inspection box on the wall, at a suitable location.' },
                                            { checksHeading: 'Finishing Check', checksdescription: 'Fix all the boxes flush to the adjacent finished. wall, considering the thickness of the plaster.' },
                                            { checksHeading: 'Finishing Check', checksdescription: 'Finish the chased portion with cement mortar. Roughen the surface.' },
                                            { checksHeading: 'Chicken mesh check', checksdescription: 'In case of 3 or more conduits, provide a chicken mesh over the portion of the conduit before finishing.' },
                                            { checksHeading: 'Dummy plates Check', checksdescription: 'Cover all the boxes with dummy plates to prevent damage during plastering.' },
                                            { checksHeading: 'Cleaning Check', checksdescription: 'After completion of all plastering work, clean the concealed boxes.' },
                                            { checksHeading: 'Inspection box check', checksdescription: 'Provide suitable inspection boxes to permit periodical inspection and to facilitate the removal of wires, if necessary.' },
                                        ];

                                        async function EleCtriclChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        EleCtriclChacks();
                                    }

                                    if (newDatanew.subactivityname === 'B3 - Electrical Conduting') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Assign the electrician been for the work' },
                                            { subtaskdescription: 'Explain the electrician  all the work with the  drawings' },
                                            { subtaskdescription: 'Ask the electrician to have a initial review and check if any interdepencies occur' },
                                            { subtaskdescription: 'Ask the electrician to clear the interdepencies and coordinate with the other agencies' },
                                            { subtaskdescription: 'Take the quantity of materials from the electrician and give to purchase manager' },
                                            { subtaskdescription: 'Ask the purchase manager to arrange the materials on site' },
                                            { subtaskdescription: 'Ask the electrician to check the material' },
                                            { subtaskdescription: 'Indicate for the electrical lines, locations of DB,MCB ,switch boxes etc to the electrician' },
                                            { subtaskdescription: 'Ask the contractor to do the chasing work with machine and it should be in line' },
                                            { subtaskdescription: 'Ask the contractor not to take the sharp bends and do not overlap the conduits' },
                                            { subtaskdescription: 'Confirm the number of points in each room as per the drawing.' },
                                            { subtaskdescription: 'Confirm the location of the points.' },
                                            { subtaskdescription: 'Ensure that the height of all the boards and points is as specified.' },
                                            { subtaskdescription: 'Check the line, level, and alignment of battening / casing-capping.' },
                                            { subtaskdescription: 'Ensure that the quality and specification of all the material is as approved.' },
                                            { subtaskdescription: 'Check the sizes of the boards as per the pictures on it.' },
                                            { subtaskdescription: 'Ask the contractor to finish the chased portion with cement mortar' },
                                        ];

                                        async function BeamSlabShutteringReinforcementRCCCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteringReinforcementRCCCall();
                                    }

                                    //Anuj
                                    if (newDatanew.subactivityname === 'B4 - Electrical Conduting') {

                                        const dataArranew = [
                                            { checksHeading: 'Drawing Check', checksdescription: 'Study the electrical work procedure drawings for the positions of various points, D.B., etc.' },
                                            { checksHeading: 'Drawing Check', checksdescription: 'Provide the conduits for mains, light circuits TV, and telephone as per the approved drawings.' },
                                            { checksHeading: 'Inspection box check', checksdescription: 'Provide suitable inspection boxes to permit periodical inspection and to facilitate the removal of wires, if necessary.' },
                                            { checksHeading: 'Height check', checksdescription: 'Study the drawings in detail and mark the position of switch boxes with respect to the height from F.F.L.' },
                                            { checksHeading: 'Line out check', checksdescription: 'Do the line out on the wall by color marking.' },
                                            { checksHeading: 'Chasing Check', checksdescription: 'Start chasing of the wall with a cutting machine.' },
                                            { checksHeading: 'Bends check', checksdescription: 'Bends in conduit pipes should not be sharp.' },
                                            { checksHeading: 'Conduit Check', checksdescription: 'Provide thick conduit pipes of the approved quality in the chased portion and tie them with the help of binding wires and nails.' },
                                            { checksHeading: 'Conduit Check', checksdescription: 'The conduit pipe should not project out of the It should be at least 5mm inside the wall. the surface of the wall.' },
                                            { checksHeading: 'Inspection box check', checksdescription: 'Provide an inspection box on the wall, at a suitable location.' },
                                            { checksHeading: 'Finishing Check', checksdescription: 'Fix all the boxes flush to the adjacent finished. wall, considering the thickness of the plaster.' },
                                            { checksHeading: 'Finishing Check', checksdescription: 'Finish the chased portion with cement mortar. Roughen the surface.' },
                                            { checksHeading: 'Chicken mesh check', checksdescription: 'In case of 3 or more conduits, provide a chicken mesh over the portion of the conduit before finishing.' },
                                            { checksHeading: 'Dummy plates Check', checksdescription: 'Cover all the boxes with dummy plates to prevent damage during plastering.' },
                                            { checksHeading: 'Cleaning Check', checksdescription: 'After completion of all plastering work, clean the concealed boxes.' },
                                            { checksHeading: 'Inspection box check', checksdescription: 'Provide suitable inspection boxes to permit periodical inspection and to facilitate the removal of wires, if necessary.' },
                                        ];

                                        async function EleCtriclChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        EleCtriclChacks();
                                    }

                                    if (newDatanew.subactivityname === 'B4 - Electrical Conduting') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Assign the electrician been for the work' },
                                            { subtaskdescription: 'Explain the electrician  all the work with the  drawings' },
                                            { subtaskdescription: 'Ask the electrician to have a initial review and check if any interdepencies occur' },
                                            { subtaskdescription: 'Ask the electrician to clear the interdepencies and coordinate with the other agencies' },
                                            { subtaskdescription: 'Take the quantity of materials from the electrician and give to purchase manager' },
                                            { subtaskdescription: 'Ask the purchase manager to arrange the materials on site' },
                                            { subtaskdescription: 'Ask the electrician to check the material' },
                                            { subtaskdescription: 'Indicate for the electrical lines, locations of DB,MCB ,switch boxes etc to the electrician' },
                                            { subtaskdescription: 'Ask the contractor to do the chasing work with machine and it should be in line' },
                                            { subtaskdescription: 'Ask the contractor not to take the sharp bends and do not overlap the conduits' },
                                            { subtaskdescription: 'Confirm the number of points in each room as per the drawing.' },
                                            { subtaskdescription: 'Confirm the location of the points.' },
                                            { subtaskdescription: 'Ensure that the height of all the boards and points is as specified.' },
                                            { subtaskdescription: 'Check the line, level, and alignment of battening / casing-capping.' },
                                            { subtaskdescription: 'Ensure that the quality and specification of all the material is as approved.' },
                                            { subtaskdescription: 'Check the sizes of the boards as per the pictures on it.' },
                                            { subtaskdescription: 'Ask the contractor to finish the chased portion with cement mortar' },
                                        ];

                                        async function BeamSlabShutteringReinforcementRCCCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteringReinforcementRCCCall();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'GF - Electrical Conduting') {

                                        const dataArranew = [
                                            { checksHeading: 'Drawing Check', checksdescription: 'Study the electrical work procedure drawings for the positions of various points, D.B., etc.' },
                                            { checksHeading: 'Drawing Check', checksdescription: 'Provide the conduits for mains, light circuits TV, and telephone as per the approved drawings.' },
                                            { checksHeading: 'Inspection box check', checksdescription: 'Provide suitable inspection boxes to permit periodical inspection and to facilitate the removal of wires, if necessary.' },
                                            { checksHeading: 'Height check', checksdescription: 'Study the drawings in detail and mark the position of switch boxes with respect to the height from F.F.L.' },
                                            { checksHeading: 'Line out check', checksdescription: 'Do the line out on the wall by color marking.' },
                                            { checksHeading: 'Chasing Check', checksdescription: 'Start chasing of the wall with a cutting machine.' },
                                            { checksHeading: 'Bends check', checksdescription: 'Bends in conduit pipes should not be sharp.' },
                                            { checksHeading: 'Conduit Check', checksdescription: 'Provide thick conduit pipes of the approved quality in the chased portion and tie them with the help of binding wires and nails.' },
                                            { checksHeading: 'Conduit Check', checksdescription: 'The conduit pipe should not project out of the It should be at least 5mm inside the wall. the surface of the wall.' },
                                            { checksHeading: 'Inspection box check', checksdescription: 'Provide an inspection box on the wall, at a suitable location.' },
                                            { checksHeading: 'Finishing Check', checksdescription: 'Fix all the boxes flush to the adjacent finished. wall, considering the thickness of the plaster.' },
                                            { checksHeading: 'Finishing Check', checksdescription: 'Finish the chased portion with cement mortar. Roughen the surface.' },
                                            { checksHeading: 'Chicken mesh check', checksdescription: 'In case of 3 or more conduits, provide a chicken mesh over the portion of the conduit before finishing.' },
                                            { checksHeading: 'Dummy plates Check', checksdescription: 'Cover all the boxes with dummy plates to prevent damage during plastering.' },
                                            { checksHeading: 'Cleaning Check', checksdescription: 'After completion of all plastering work, clean the concealed boxes.' },
                                            { checksHeading: 'Inspection box check', checksdescription: 'Provide suitable inspection boxes to permit periodical inspection and to facilitate the removal of wires, if necessary.' },
                                        ];

                                        async function EleCtriclChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        EleCtriclChacks();
                                    }


                                    if (newDatanew.subactivityname === "GF - Electrical Conduting") {

                                        const dataArranew = [
                                            { materailname: '25mm Conduit', materailquantity: materlID.ECW_GFElectricalConduitingConduit25mmQuantity, materailUnit: 'RMT' },
                                            { materailname: '25 mm PVC couplers', materailquantity: materlID.ECW_GFElectricalConduitingPVCcouplers25mmQuantity, materailUnit: 'NOS.' },
                                            { materailname: '25mm PVC bend', materailquantity: materlID.ECW_GFElectricalConduitingPVCbend25mmQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Modular GI box 2 - 3 Module', materailquantity: materlID.ECW_GFElectricalConduitingModularGIbox2To3ModuleQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Modular GI box 4 Module', materailquantity: materlID.ECW_GFElectricalConduitingModularGIbox4ModuleQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Modular GI box 6 Module', materailquantity: materlID.ECW_GFElectricalConduitingModularGIbox6ModuleQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Modular GI box 8 Module', materailquantity: materlID.ECW_GFElectricalConduitingModularGIbox8ModuleQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Modular GI box 12 Module', materailquantity: materlID.ECW_GFElectricalConduitingModularGIbox12ModuleQuantity, materailUnit: 'NOS.' },

                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }




                                    if (newDatanew.subactivityname === 'GF - Electrical Conduting') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Assign the electrician been for the work' },
                                            { subtaskdescription: 'Explain the electrician  all the work with the  drawings' },
                                            { subtaskdescription: 'Ask the electrician to have a initial review and check if any interdepencies occur' },
                                            { subtaskdescription: 'Ask the electrician to clear the interdepencies and coordinate with the other agencies' },
                                            { subtaskdescription: 'Take the quantity of materials from the electrician and give to purchase manager' },
                                            { subtaskdescription: 'Ask the purchase manager to arrange the materials on site' },
                                            { subtaskdescription: 'Ask the electrician to check the material' },
                                            { subtaskdescription: 'Indicate for the electrical lines, locations of DB,MCB ,switch boxes etc to the electrician' },
                                            { subtaskdescription: 'Ask the contractor to do the chasing work with machine and it should be in line' },
                                            { subtaskdescription: 'Ask the contractor not to take the sharp bends and do not overlap the conduits' },
                                            { subtaskdescription: 'Confirm the number of points in each room as per the drawing.' },
                                            { subtaskdescription: 'Confirm the location of the points.' },
                                            { subtaskdescription: 'Ensure that the height of all the boards and points is as specified.' },
                                            { subtaskdescription: 'Check the line, level, and alignment of battening / casing-capping.' },
                                            { subtaskdescription: 'Ensure that the quality and specification of all the material is as approved.' },
                                            { subtaskdescription: 'Check the sizes of the boards as per the pictures on it.' },
                                            { subtaskdescription: 'Ask the contractor to finish the chased portion with cement mortar' },
                                        ];

                                        async function BeamSlabShutteringReinforcementRCCCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteringReinforcementRCCCall();
                                    }



                                    if (newDatanew.subactivityname === "GF - Electrical Conduting") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Layout', headingforshortingTwo: 'Pipeline' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Layout', NormalHeadingThree: 'Heights', NormalHeadingfoure: 'Conduit' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Pipeline', NormalHeadingThree: 'Metal Box', NormalHeadingfoure: 'Covering' },
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }




                                    //Anuj
                                    if (newDatanew.subactivityname === 'FF - Electrical Conduting') {

                                        const dataArranew = [
                                            { checksHeading: 'Drawing Check', checksdescription: 'Study the electrical work procedure drawings for the positions of various points, D.B., etc.' },
                                            { checksHeading: 'Drawing Check', checksdescription: 'Provide the conduits for mains, light circuits TV, and telephone as per the approved drawings.' },
                                            { checksHeading: 'Inspection box check', checksdescription: 'Provide suitable inspection boxes to permit periodical inspection and to facilitate the removal of wires, if necessary.' },
                                            { checksHeading: 'Height check', checksdescription: 'Study the drawings in detail and mark the position of switch boxes with respect to the height from F.F.L.' },
                                            { checksHeading: 'Line out check', checksdescription: 'Do the line out on the wall by color marking.' },
                                            { checksHeading: 'Chasing Check', checksdescription: 'Start chasing of the wall with a cutting machine.' },
                                            { checksHeading: 'Bends check', checksdescription: 'Bends in conduit pipes should not be sharp.' },
                                            { checksHeading: 'Conduit Check', checksdescription: 'Provide thick conduit pipes of the approved quality in the chased portion and tie them with the help of binding wires and nails.' },
                                            { checksHeading: 'Conduit Check', checksdescription: 'The conduit pipe should not project out of the It should be at least 5mm inside the wall. the surface of the wall.' },
                                            { checksHeading: 'Inspection box check', checksdescription: 'Provide an inspection box on the wall, at a suitable location.' },
                                            { checksHeading: 'Finishing Check', checksdescription: 'Fix all the boxes flush to the adjacent finished. wall, considering the thickness of the plaster.' },
                                            { checksHeading: 'Finishing Check', checksdescription: 'Finish the chased portion with cement mortar. Roughen the surface.' },
                                            { checksHeading: 'Chicken mesh check', checksdescription: 'In case of 3 or more conduits, provide a chicken mesh over the portion of the conduit before finishing.' },
                                            { checksHeading: 'Dummy plates Check', checksdescription: 'Cover all the boxes with dummy plates to prevent damage during plastering.' },
                                            { checksHeading: 'Cleaning Check', checksdescription: 'After completion of all plastering work, clean the concealed boxes.' },
                                            { checksHeading: 'Inspection box check', checksdescription: 'Provide suitable inspection boxes to permit periodical inspection and to facilitate the removal of wires, if necessary.' },
                                        ];

                                        async function EleCtriclChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        EleCtriclChacks();
                                    }



                                    if (newDatanew.subactivityname === "FF - Electrical Conduting") {

                                        const dataArranew = [
                                            { materailname: '25mm Conduit', materailquantity: materlID.ECW_FFElectricalConduitingConduit25mmQuantity, materailUnit: 'RMT' },
                                            { materailname: '25 mm PVC couplers', materailquantity: materlID.ECW_FFElectricalConduitingPVCcouplers25mmQuantity, materailUnit: 'NOS.' },
                                            { materailname: '25mm PVC bend', materailquantity: materlID.ECW_FFElectricalConduitingPVCbend25mmQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Modular GI box 2 - 3 Module', materailquantity: materlID.ECW_FFElectricalConduitingModularGIbox2To3ModuleQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Modular GI box 4 Module', materailquantity: materlID.ECW_FFElectricalConduitingModularGIbox4ModuleQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Modular GI box 6 Module', materailquantity: materlID.ECW_FFElectricalConduitingModularGIbox6ModuleQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Modular GI box 8 Module', materailquantity: materlID.ECW_FFElectricalConduitingModularGIbox8ModuleQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Modular GI box 12 Module', materailquantity: materlID.ECW_FFElectricalConduitingModularGIbox12ModuleQuantity, materailUnit: 'NOS.' },

                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === 'FF - Electrical Conduting') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Assign the electrician been for the work' },
                                            { subtaskdescription: 'Explain the electrician  all the work with the  drawings' },
                                            { subtaskdescription: 'Ask the electrician to have a initial review and check if any interdepencies occur' },
                                            { subtaskdescription: 'Ask the electrician to clear the interdepencies and coordinate with the other agencies' },
                                            { subtaskdescription: 'Take the quantity of materials from the electrician and give to purchase manager' },
                                            { subtaskdescription: 'Ask the purchase manager to arrange the materials on site' },
                                            { subtaskdescription: 'Ask the electrician to check the material' },
                                            { subtaskdescription: 'Indicate for the electrical lines, locations of DB,MCB ,switch boxes etc to the electrician' },
                                            { subtaskdescription: 'Ask the contractor to do the chasing work with machine and it should be in line' },
                                            { subtaskdescription: 'Ask the contractor not to take the sharp bends and do not overlap the conduits' },
                                            { subtaskdescription: 'Confirm the number of points in each room as per the drawing.' },
                                            { subtaskdescription: 'Confirm the location of the points.' },
                                            { subtaskdescription: 'Ensure that the height of all the boards and points is as specified.' },
                                            { subtaskdescription: 'Check the line, level, and alignment of battening / casing-capping.' },
                                            { subtaskdescription: 'Ensure that the quality and specification of all the material is as approved.' },
                                            { subtaskdescription: 'Check the sizes of the boards as per the pictures on it.' },
                                            { subtaskdescription: 'Ask the contractor to finish the chased portion with cement mortar' },
                                        ];

                                        async function BeamSlabShutteringReinforcementRCCCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteringReinforcementRCCCall();
                                    }



                                    if (newDatanew.subactivityname === "FF - Electrical Conduting") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Layout', headingforshortingTwo: 'Pipeline' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Layout', NormalHeadingThree: 'Heights', NormalHeadingfoure: 'Conduit' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Pipeline', NormalHeadingThree: 'Metal Box', NormalHeadingfoure: 'Covering' },
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }

                                    if (newDatanew.subactivityname === 'SF - Electrical Conduting') {

                                        const dataArranew = [
                                            { checksHeading: 'Drawing Check', checksdescription: 'Study the electrical work procedure drawings for the positions of various points, D.B., etc.' },
                                            { checksHeading: 'Drawing Check', checksdescription: 'Provide the conduits for mains, light circuits TV, and telephone as per the approved drawings.' },
                                            { checksHeading: 'Inspection box check', checksdescription: 'Provide suitable inspection boxes to permit periodical inspection and to facilitate the removal of wires, if necessary.' },
                                            { checksHeading: 'Height check', checksdescription: 'Study the drawings in detail and mark the position of switch boxes with respect to the height from F.F.L.' },
                                            { checksHeading: 'Line out check', checksdescription: 'Do the line out on the wall by color marking.' },
                                            { checksHeading: 'Chasing Check', checksdescription: 'Start chasing of the wall with a cutting machine.' },
                                            { checksHeading: 'Bends check', checksdescription: 'Bends in conduit pipes should not be sharp.' },
                                            { checksHeading: 'Conduit Check', checksdescription: 'Provide thick conduit pipes of the approved quality in the chased portion and tie them with the help of binding wires and nails.' },
                                            { checksHeading: 'Conduit Check', checksdescription: 'The conduit pipe should not project out of the It should be at least 5mm inside the wall. the surface of the wall.' },
                                            { checksHeading: 'Inspection box check', checksdescription: 'Provide an inspection box on the wall, at a suitable location.' },
                                            { checksHeading: 'Finishing Check', checksdescription: 'Fix all the boxes flush to the adjacent finished. wall, considering the thickness of the plaster.' },
                                            { checksHeading: 'Finishing Check', checksdescription: 'Finish the chased portion with cement mortar. Roughen the surface.' },
                                            { checksHeading: 'Chicken mesh check', checksdescription: 'In case of 3 or more conduits, provide a chicken mesh over the portion of the conduit before finishing.' },
                                            { checksHeading: 'Dummy plates Check', checksdescription: 'Cover all the boxes with dummy plates to prevent damage during plastering.' },
                                            { checksHeading: 'Cleaning Check', checksdescription: 'After completion of all plastering work, clean the concealed boxes.' },
                                            { checksHeading: 'Inspection box check', checksdescription: 'Provide suitable inspection boxes to permit periodical inspection and to facilitate the removal of wires, if necessary.' },
                                        ];

                                        async function EleCtriclChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        EleCtriclChacks();
                                    }


                                    if (newDatanew.subactivityname === "SF - Electrical Conduting") {

                                        const dataArranew = [
                                            { materailname: '25mm Conduit', materailquantity: materlID.ECW_SFElectricalConduitingConduit25mmQuantity, materailUnit: 'RMT' },
                                            { materailname: '25 mm PVC couplers', materailquantity: materlID.ECW_SFElectricalConduitingPVCcouplers25mmQuantity, materailUnit: 'NOS.' },
                                            { materailname: '25mm PVC bend', materailquantity: materlID.ECW_SFElectricalConduitingPVCbend25mmQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Modular GI box 2 - 3 Module', materailquantity: materlID.ECW_SFElectricalConduitingModularGIbox2To3ModuleQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Modular GI box 4 Module', materailquantity: materlID.ECW_SFElectricalConduitingModularGIbox4ModuleQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Modular GI box 6 Module', materailquantity: materlID.ECW_SFElectricalConduitingModularGIbox6ModuleQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Modular GI box 8 Module', materailquantity: materlID.ECW_SFElectricalConduitingModularGIbox8ModuleQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Modular GI box 12 Module', materailquantity: materlID.ECW_SFElectricalConduitingModularGIbox12ModuleQuantity, materailUnit: 'NOS.' },

                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === 'SF - Electrical Conduting') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Assign the electrician been for the work' },
                                            { subtaskdescription: 'Explain the electrician  all the work with the  drawings' },
                                            { subtaskdescription: 'Ask the electrician to have a initial review and check if any interdepencies occur' },
                                            { subtaskdescription: 'Ask the electrician to clear the interdepencies and coordinate with the other agencies' },
                                            { subtaskdescription: 'Take the quantity of materials from the electrician and give to purchase manager' },
                                            { subtaskdescription: 'Ask the purchase manager to arrange the materials on site' },
                                            { subtaskdescription: 'Ask the electrician to check the material' },
                                            { subtaskdescription: 'Indicate for the electrical lines, locations of DB,MCB ,switch boxes etc to the electrician' },
                                            { subtaskdescription: 'Ask the contractor to do the chasing work with machine and it should be in line' },
                                            { subtaskdescription: 'Ask the contractor not to take the sharp bends and do not overlap the conduits' },
                                            { subtaskdescription: 'Confirm the number of points in each room as per the drawing.' },
                                            { subtaskdescription: 'Confirm the location of the points.' },
                                            { subtaskdescription: 'Ensure that the height of all the boards and points is as specified.' },
                                            { subtaskdescription: 'Check the line, level, and alignment of battening / casing-capping.' },
                                            { subtaskdescription: 'Ensure that the quality and specification of all the material is as approved.' },
                                            { subtaskdescription: 'Check the sizes of the boards as per the pictures on it.' },
                                            { subtaskdescription: 'Ask the contractor to finish the chased portion with cement mortar' },
                                        ];

                                        async function BeamSlabShutteringReinforcementRCCCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteringReinforcementRCCCall();
                                    }



                                    if (newDatanew.subactivityname === "SF - Electrical Conduting") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Layout', headingforshortingTwo: 'Pipeline' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Layout', NormalHeadingThree: 'Heights', NormalHeadingfoure: 'Conduit' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Pipeline', NormalHeadingThree: 'Metal Box', NormalHeadingfoure: 'Covering' },
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }

                                    if (newDatanew.subactivityname === 'TF - Electrical Conduting') {

                                        const dataArranew = [
                                            { checksHeading: 'Drawing Check', checksdescription: 'Study the electrical work procedure drawings for the positions of various points, D.B., etc.' },
                                            { checksHeading: 'Drawing Check', checksdescription: 'Provide the conduits for mains, light circuits TV, and telephone as per the approved drawings.' },
                                            { checksHeading: 'Inspection box check', checksdescription: 'Provide suitable inspection boxes to permit periodical inspection and to facilitate the removal of wires, if necessary.' },
                                            { checksHeading: 'Height check', checksdescription: 'Study the drawings in detail and mark the position of switch boxes with respect to the height from F.F.L.' },
                                            { checksHeading: 'Line out check', checksdescription: 'Do the line out on the wall by color marking.' },
                                            { checksHeading: 'Chasing Check', checksdescription: 'Start chasing of the wall with a cutting machine.' },
                                            { checksHeading: 'Bends check', checksdescription: 'Bends in conduit pipes should not be sharp.' },
                                            { checksHeading: 'Conduit Check', checksdescription: 'Provide thick conduit pipes of the approved quality in the chased portion and tie them with the help of binding wires and nails.' },
                                            { checksHeading: 'Conduit Check', checksdescription: 'The conduit pipe should not project out of the It should be at least 5mm inside the wall. the surface of the wall.' },
                                            { checksHeading: 'Inspection box check', checksdescription: 'Provide an inspection box on the wall, at a suitable location.' },
                                            { checksHeading: 'Finishing Check', checksdescription: 'Fix all the boxes flush to the adjacent finished. wall, considering the thickness of the plaster.' },
                                            { checksHeading: 'Finishing Check', checksdescription: 'Finish the chased portion with cement mortar. Roughen the surface.' },
                                            { checksHeading: 'Chicken mesh check', checksdescription: 'In case of 3 or more conduits, provide a chicken mesh over the portion of the conduit before finishing.' },
                                            { checksHeading: 'Dummy plates Check', checksdescription: 'Cover all the boxes with dummy plates to prevent damage during plastering.' },
                                            { checksHeading: 'Cleaning Check', checksdescription: 'After completion of all plastering work, clean the concealed boxes.' },
                                            { checksHeading: 'Inspection box check', checksdescription: 'Provide suitable inspection boxes to permit periodical inspection and to facilitate the removal of wires, if necessary.' },
                                        ];

                                        async function EleCtriclChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        EleCtriclChacks();
                                    }

                                    if (newDatanew.subactivityname === "TF - Electrical Conduting") {

                                        const dataArranew = [
                                            { materailname: '25mm Conduit', materailquantity: materlID.ECW_TFElectricalConduitingConduit25mmQuantity, materailUnit: 'RMT' },
                                            { materailname: '25 mm PVC couplers', materailquantity: materlID.ECW_TFElectricalConduitingPVCcouplers25mmQuantity, materailUnit: 'NOS.' },
                                            { materailname: '25mm PVC bend', materailquantity: materlID.ECW_TFElectricalConduitingPVCbend25mmQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Modular GI box 2 - 3 Module', materailquantity: materlID.ECW_TFElectricalConduitingModularGIbox2To3ModuleQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Modular GI box 4 Module', materailquantity: materlID.ECW_TFElectricalConduitingModularGIbox4ModuleQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Modular GI box 6 Module', materailquantity: materlID.ECW_TFElectricalConduitingModularGIbox6ModuleQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Modular GI box 8 Module', materailquantity: materlID.ECW_TFElectricalConduitingModularGIbox8ModuleQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Modular GI box 12 Module', materailquantity: materlID.ECW_TFElectricalConduitingModularGIbox12ModuleQuantity, materailUnit: 'NOS.' },

                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === 'TF - Electrical Conduting') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Assign the electrician been for the work' },
                                            { subtaskdescription: 'Explain the electrician  all the work with the  drawings' },
                                            { subtaskdescription: 'Ask the electrician to have a initial review and check if any interdepencies occur' },
                                            { subtaskdescription: 'Ask the electrician to clear the interdepencies and coordinate with the other agencies' },
                                            { subtaskdescription: 'Take the quantity of materials from the electrician and give to purchase manager' },
                                            { subtaskdescription: 'Ask the purchase manager to arrange the materials on site' },
                                            { subtaskdescription: 'Ask the electrician to check the material' },
                                            { subtaskdescription: 'Indicate for the electrical lines, locations of DB,MCB ,switch boxes etc to the electrician' },
                                            { subtaskdescription: 'Ask the contractor to do the chasing work with machine and it should be in line' },
                                            { subtaskdescription: 'Ask the contractor not to take the sharp bends and do not overlap the conduits' },
                                            { subtaskdescription: 'Confirm the number of points in each room as per the drawing.' },
                                            { subtaskdescription: 'Confirm the location of the points.' },
                                            { subtaskdescription: 'Ensure that the height of all the boards and points is as specified.' },
                                            { subtaskdescription: 'Check the line, level, and alignment of battening / casing-capping.' },
                                            { subtaskdescription: 'Ensure that the quality and specification of all the material is as approved.' },
                                            { subtaskdescription: 'Check the sizes of the boards as per the pictures on it.' },
                                            { subtaskdescription: 'Ask the contractor to finish the chased portion with cement mortar' },
                                        ];

                                        async function BeamSlabShutteringReinforcementRCCCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteringReinforcementRCCCall();
                                    }



                                    if (newDatanew.subactivityname === "TF - Electrical Conduting") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Layout', headingforshortingTwo: 'Pipeline' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Layout', NormalHeadingThree: 'Heights', NormalHeadingfoure: 'Conduit' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Pipeline', NormalHeadingThree: 'Metal Box', NormalHeadingfoure: 'Covering' },
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }

                                    if (newDatanew.subactivityname === 'FoF - Electrical Conduting') {

                                        const dataArranew = [
                                            { checksHeading: 'Drawing Check', checksdescription: 'Study the electrical work procedure drawings for the positions of various points, D.B., etc.' },
                                            { checksHeading: 'Drawing Check', checksdescription: 'Provide the conduits for mains, light circuits TV, and telephone as per the approved drawings.' },
                                            { checksHeading: 'Inspection box check', checksdescription: 'Provide suitable inspection boxes to permit periodical inspection and to facilitate the removal of wires, if necessary.' },
                                            { checksHeading: 'Height check', checksdescription: 'Study the drawings in detail and mark the position of switch boxes with respect to the height from F.F.L.' },
                                            { checksHeading: 'Line out check', checksdescription: 'Do the line out on the wall by color marking.' },
                                            { checksHeading: 'Chasing Check', checksdescription: 'Start chasing of the wall with a cutting machine.' },
                                            { checksHeading: 'Bends check', checksdescription: 'Bends in conduit pipes should not be sharp.' },
                                            { checksHeading: 'Conduit Check', checksdescription: 'Provide thick conduit pipes of the approved quality in the chased portion and tie them with the help of binding wires and nails.' },
                                            { checksHeading: 'Conduit Check', checksdescription: 'The conduit pipe should not project out of the It should be at least 5mm inside the wall. the surface of the wall.' },
                                            { checksHeading: 'Inspection box check', checksdescription: 'Provide an inspection box on the wall, at a suitable location.' },
                                            { checksHeading: 'Finishing Check', checksdescription: 'Fix all the boxes flush to the adjacent finished. wall, considering the thickness of the plaster.' },
                                            { checksHeading: 'Finishing Check', checksdescription: 'Finish the chased portion with cement mortar. Roughen the surface.' },
                                            { checksHeading: 'Chicken mesh check', checksdescription: 'In case of 3 or more conduits, provide a chicken mesh over the portion of the conduit before finishing.' },
                                            { checksHeading: 'Dummy plates Check', checksdescription: 'Cover all the boxes with dummy plates to prevent damage during plastering.' },
                                            { checksHeading: 'Cleaning Check', checksdescription: 'After completion of all plastering work, clean the concealed boxes.' },
                                            { checksHeading: 'Inspection box check', checksdescription: 'Provide suitable inspection boxes to permit periodical inspection and to facilitate the removal of wires, if necessary.' },
                                        ];

                                        async function EleCtriclChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        EleCtriclChacks();
                                    }


                                    if (newDatanew.subactivityname === "FoF - Electrical Conduting") {

                                        const dataArranew = [
                                            { materailname: '25mm Conduit', materailquantity: materlID.ECW_FoFElectricalConduitingConduit25mmQuantity, materailUnit: 'RMT' },
                                            { materailname: '25 mm PVC couplers', materailquantity: materlID.ECW_FoFElectricalConduitingPVCcouplers25mmQuantity, materailUnit: 'NOS.' },
                                            { materailname: '25mm PVC bend', materailquantity: materlID.ECW_FoFElectricalConduitingPVCbend25mmQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Modular GI box 2 - 3 Module', materailquantity: materlID.ECW_FoFElectricalConduitingModularGIbox2To3ModuleQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Modular GI box 4 Module', materailquantity: materlID.ECW_FoFElectricalConduitingModularGIbox4ModuleQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Modular GI box 6 Module', materailquantity: materlID.ECW_FoFElectricalConduitingModularGIbox6ModuleQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Modular GI box 8 Module', materailquantity: materlID.ECW_FoFElectricalConduitingModularGIbox8ModuleQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Modular GI box 12 Module', materailquantity: materlID.ECW_FoFElectricalConduitingModularGIbox12ModuleQuantity, materailUnit: 'NOS.' },

                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === 'FoF - Electrical Conduting') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Assign the electrician been for the work' },
                                            { subtaskdescription: 'Explain the electrician  all the work with the  drawings' },
                                            { subtaskdescription: 'Ask the electrician to have a initial review and check if any interdepencies occur' },
                                            { subtaskdescription: 'Ask the electrician to clear the interdepencies and coordinate with the other agencies' },
                                            { subtaskdescription: 'Take the quantity of materials from the electrician and give to purchase manager' },
                                            { subtaskdescription: 'Ask the purchase manager to arrange the materials on site' },
                                            { subtaskdescription: 'Ask the electrician to check the material' },
                                            { subtaskdescription: 'Indicate for the electrical lines, locations of DB,MCB ,switch boxes etc to the electrician' },
                                            { subtaskdescription: 'Ask the contractor to do the chasing work with machine and it should be in line' },
                                            { subtaskdescription: 'Ask the contractor not to take the sharp bends and do not overlap the conduits' },
                                            { subtaskdescription: 'Confirm the number of points in each room as per the drawing.' },
                                            { subtaskdescription: 'Confirm the location of the points.' },
                                            { subtaskdescription: 'Ensure that the height of all the boards and points is as specified.' },
                                            { subtaskdescription: 'Check the line, level, and alignment of battening / casing-capping.' },
                                            { subtaskdescription: 'Ensure that the quality and specification of all the material is as approved.' },
                                            { subtaskdescription: 'Check the sizes of the boards as per the pictures on it.' },
                                            { subtaskdescription: 'Ask the contractor to finish the chased portion with cement mortar' },
                                        ];

                                        async function BeamSlabShutteringReinforcementRCCCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteringReinforcementRCCCall();
                                    }

                                    if (newDatanew.subactivityname === "FoF - Electrical Conduting") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Layout', headingforshortingTwo: 'Pipeline' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Layout', NormalHeadingThree: 'Heights', NormalHeadingfoure: 'Conduit' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Pipeline', NormalHeadingThree: 'Metal Box', NormalHeadingfoure: 'Covering' },
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }


                                    if (newDatanew.subactivityname === 'Tower - Electrical Conduting') {

                                        const dataArranew = [
                                            { checksHeading: 'Drawing Check', checksdescription: 'Study the electrical work procedure drawings for the positions of various points, D.B., etc.' },
                                            { checksHeading: 'Drawing Check', checksdescription: 'Provide the conduits for mains, light circuits TV, and telephone as per the approved drawings.' },
                                            { checksHeading: 'Inspection box check', checksdescription: 'Provide suitable inspection boxes to permit periodical inspection and to facilitate the removal of wires, if necessary.' },
                                            { checksHeading: 'Height check', checksdescription: 'Study the drawings in detail and mark the position of switch boxes with respect to the height from F.F.L.' },
                                            { checksHeading: 'Line out check', checksdescription: 'Do the line out on the wall by color marking.' },
                                            { checksHeading: 'Chasing Check', checksdescription: 'Start chasing of the wall with a cutting machine.' },
                                            { checksHeading: 'Bends check', checksdescription: 'Bends in conduit pipes should not be sharp.' },
                                            { checksHeading: 'Conduit Check', checksdescription: 'Provide thick conduit pipes of the approved quality in the chased portion and tie them with the help of binding wires and nails.' },
                                            { checksHeading: 'Conduit Check', checksdescription: 'The conduit pipe should not project out of the It should be at least 5mm inside the wall. the surface of the wall.' },
                                            { checksHeading: 'Inspection box check', checksdescription: 'Provide an inspection box on the wall, at a suitable location.' },
                                            { checksHeading: 'Finishing Check', checksdescription: 'Fix all the boxes flush to the adjacent finished. wall, considering the thickness of the plaster.' },
                                            { checksHeading: 'Finishing Check', checksdescription: 'Finish the chased portion with cement mortar. Roughen the surface.' },
                                            { checksHeading: 'Chicken mesh check', checksdescription: 'In case of 3 or more conduits, provide a chicken mesh over the portion of the conduit before finishing.' },
                                            { checksHeading: 'Dummy plates Check', checksdescription: 'Cover all the boxes with dummy plates to prevent damage during plastering.' },
                                            { checksHeading: 'Cleaning Check', checksdescription: 'After completion of all plastering work, clean the concealed boxes.' },
                                            { checksHeading: 'Inspection box check', checksdescription: 'Provide suitable inspection boxes to permit periodical inspection and to facilitate the removal of wires, if necessary.' },
                                        ];

                                        async function EleCtriclChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        EleCtriclChacks();
                                    }

                                    if (newDatanew.subactivityname === "Tower - Electrical Conduting") {

                                        const dataArranew = [
                                            { materailname: '25mm Conduit', materailquantity: materlID.ECW_TowerElectricalConduitingConduit25mmQuantity, materailUnit: 'RMT' },
                                            { materailname: '25 mm PVC couplers', materailquantity: materlID.ECW_TowerElectricalConduitingPVCcouplers25mmQuantity, materailUnit: 'NOS.' },
                                            { materailname: '25mm PVC bend', materailquantity: materlID.ECW_TowerElectricalConduitingPVCbend25mmQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Modular GI box 2 - 3 Module', materailquantity: materlID.ECW_TowerElectricalConduitingModularGIbox2To3ModuleQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Modular GI box 4 Module', materailquantity: materlID.ECW_TowerElectricalConduitingModularGIbox4ModuleQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Modular GI box 6 Module', materailquantity: materlID.ECW_TowerElectricalConduitingModularGIbox6ModuleQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Modular GI box 8 Module', materailquantity: materlID.ECW_TowerElectricalConduitingModularGIbox8ModuleQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Modular GI box 12 Module', materailquantity: materlID.ECW_TowerElectricalConduitingModularGIbox12ModuleQuantity, materailUnit: 'NOS.' },

                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }



                                    if (newDatanew.subactivityname === 'Tower - Electrical Conduting') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Assign the electrician been for the work' },
                                            { subtaskdescription: 'Explain the electrician  all the work with the  drawings' },
                                            { subtaskdescription: 'Ask the electrician to have a initial review and check if any interdepencies occur' },
                                            { subtaskdescription: 'Ask the electrician to clear the interdepencies and coordinate with the other agencies' },
                                            { subtaskdescription: 'Take the quantity of materials from the electrician and give to purchase manager' },
                                            { subtaskdescription: 'Ask the purchase manager to arrange the materials on site' },
                                            { subtaskdescription: 'Ask the electrician to check the material' },
                                            { subtaskdescription: 'Indicate for the electrical lines, locations of DB,MCB ,switch boxes etc to the electrician' },
                                            { subtaskdescription: 'Ask the contractor to do the chasing work with machine and it should be in line' },
                                            { subtaskdescription: 'Ask the contractor not to take the sharp bends and do not overlap the conduits' },
                                            { subtaskdescription: 'Confirm the number of points in each room as per the drawing.' },
                                            { subtaskdescription: 'Confirm the location of the points.' },
                                            { subtaskdescription: 'Ensure that the height of all the boards and points is as specified.' },
                                            { subtaskdescription: 'Check the line, level, and alignment of battening / casing-capping.' },
                                            { subtaskdescription: 'Ensure that the quality and specification of all the material is as approved.' },
                                            { subtaskdescription: 'Check the sizes of the boards as per the pictures on it.' },
                                            { subtaskdescription: 'Ask the contractor to finish the chased portion with cement mortar' },
                                        ];

                                        async function BeamSlabShutteringReinforcementRCCCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteringReinforcementRCCCall();
                                    }

                                    if (newDatanew.subactivityname === "Tower - Electrical Conduting") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Layout', headingforshortingTwo: 'Pipeline' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Layout', NormalHeadingThree: 'Heights', NormalHeadingfoure: 'Conduit' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Pipeline', NormalHeadingThree: 'Metal Box', NormalHeadingfoure: 'Covering' },
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }





                                    await Activities.updateOne(
                                        { _id: newss },
                                        {
                                            $push: {
                                                subactivitiesID: objID
                                            }
                                        }
                                    )
                                    // console.log('Data saved:', savedData);
                                } catch (error) {
                                    // console.error('Error saving data:', error);
                                }
                            }
                        }
                        miscellenousCalling();
                    }










                    if (newData.categoryname === "Plumbing") {

                        const dataArranew = [
                            { subactivityname: 'B1 - Pipe Work below Floor Level', activityID: newData._id, projectID: objectproID, estimateDays: 4, TempID: 11 },
                            { subactivityname: 'B1 - Sunken Filling - COBA |Waste', activityID: newData._id, projectID: objectproID, estimateDays: 4, TempID: 11 },
                            { subactivityname: 'B1 -Wall Conduting + Internal Fittings', activityID: newData._id, projectID: objectproID, estimateDays: 4, TempID: 11 },
                            { subactivityname: 'B1 -Waterproofing', activityID: newData._id, projectID: objectproID, estimateDays: 4, TempID: 11 },

                            { subactivityname: 'B2 - Pipe Work below Floor Level', activityID: newData._id, projectID: objectproID, estimateDays: 4, TempID: 22 },
                            { subactivityname: 'B2 - Sunken Filling - COBA |Waste', activityID: newData._id, projectID: objectproID, estimateDays: 4, TempID: 22 },
                            { subactivityname: 'B2 -Wall Conduting + Internal Fittings', activityID: newData._id, projectID: objectproID, estimateDays: 4, TempID: 22 },
                            { subactivityname: 'B2 -Waterproofing', activityID: newData._id, projectID: objectproID, estimateDays: 4, TempID: 22 },

                            { subactivityname: 'B3 - Pipe Work below Floor Level', activityID: newData._id, projectID: objectproID, estimateDays: 4, TempID: 33 },
                            { subactivityname: 'B3 - Sunken Filling - COBA |Waste', activityID: newData._id, projectID: objectproID, estimateDays: 4, TempID: 33 },
                            { subactivityname: 'B3 -Wall Conduting + Internal Fittings', activityID: newData._id, projectID: objectproID, estimateDays: 4, TempID: 33 },
                            { subactivityname: 'B3 -Waterproofing', activityID: newData._id, projectID: objectproID, estimateDays: 4, TempID: 33 },

                            { subactivityname: 'B4 - Pipe Work below Floor Level', activityID: newData._id, projectID: objectproID, estimateDays: 4, TempID: 44 },
                            { subactivityname: 'B4 - Sunken Filling - COBA |Waste', activityID: newData._id, projectID: objectproID, estimateDays: 4, TempID: 44 },
                            { subactivityname: 'B4 -Wall Conduting + Internal Fittings', activityID: newData._id, projectID: objectproID, estimateDays: 4, TempID: 44 },
                            { subactivityname: 'B4 -Waterproofing', activityID: newData._id, projectID: objectproID, estimateDays: 4, TempID: 44 },

                            { subactivityname: 'GF - Pipe Work below Floor Level', activityID: newData._id, projectID: objectproID, estimateDays: GFPipeWorkBelowFloorLevel_ESTD },
                            { subactivityname: 'GF - Sunken Filling - COBA |Waste', activityID: newData._id, projectID: objectproID, estimateDays: GFSunkenFillingCOBAWaste_ESTD },
                            { subactivityname: 'GF -Wall Conduting + Internal Fittings', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                            { subactivityname: 'GF -Waterproofing', activityID: newData._id, projectID: objectproID, estimateDays: GFWaterproofing_ESTD },

                            { subactivityname: 'FF - Pipe Work below Floor Level', activityID: newData._id, projectID: objectproID, estimateDays: FFPipeWorkBelowFloorLevel_ESTD, TempID: 1 },
                            { subactivityname: 'FF - Sunken Filling - COBA |Waste', activityID: newData._id, projectID: objectproID, estimateDays: FFSunkenFillingCOBAWaste_ESTD, TempID: 1 },
                            { subactivityname: 'FF -Wall Conduting + Internal Fittings', activityID: newData._id, projectID: objectproID, estimateDays: 4, TempID: 1 },
                            { subactivityname: 'FF -Waterproofing', activityID: newData._id, projectID: objectproID, estimateDays: FFWaterproofing_ESTD, TempID: 1 },

                            { subactivityname: 'SF - Pipe Work below Floor Level', activityID: newData._id, projectID: objectproID, estimateDays: SFPipeWorkBelowFloorLevel_ESTD, TempID: 2 },
                            { subactivityname: 'SF - Sunken Filling - COBA |Waste', activityID: newData._id, projectID: objectproID, estimateDays: SFSunkenFillingCOBAWaste_ESTD, TempID: 2 },
                            { subactivityname: 'SF -Wall Conduting + Internal Fittings', activityID: newData._id, projectID: objectproID, estimateDays: 4, TempID: 2 },
                            { subactivityname: 'SF -Waterproofing', activityID: newData._id, projectID: objectproID, estimateDays: SFWaterproofing_ESTD, TempID: 2 },

                            { subactivityname: 'TF - Pipe Work below Floor Level', activityID: newData._id, projectID: objectproID, estimateDays: TFPipeWorkBelowFloorLevel_ESTD, TempID: 3 },
                            { subactivityname: 'TF - Sunken Filling - COBA |Waste', activityID: newData._id, projectID: objectproID, estimateDays: TFSunkenFillingCOBAWaste_ESTD, TempID: 3 },
                            { subactivityname: 'TF -Wall Conduting + Internal Fittings', activityID: newData._id, projectID: objectproID, estimateDays: 4, TempID: 3 },
                            { subactivityname: 'TF -Waterproofing', activityID: newData._id, projectID: objectproID, estimateDays: TFWaterproofing_ESTD, TempID: 3 },

                            { subactivityname: 'FoF - Pipe Work below Floor Level', activityID: newData._id, projectID: objectproID, estimateDays: FoFPipeWorkBelowFloorLevel_ESTD, TempID: 4 },
                            { subactivityname: 'FoF - Sunken Filling - COBA |Waste', activityID: newData._id, projectID: objectproID, estimateDays: FoFSunkenFillingCOBAWaste_ESTD, TempID: 4 },
                            { subactivityname: 'FoF -Wall Conduting + Internal Fittings', activityID: newData._id, projectID: objectproID, estimateDays: 4, TempID: 4 },
                            { subactivityname: 'FoF -Waterproofing', activityID: newData._id, projectID: objectproID, estimateDays: FoFWaterproofing_ESTD, TempID: 4 },

                            { subactivityname: 'Tower - Pipe Work below Floor Level', activityID: newData._id, projectID: objectproID, estimateDays: TowerPipeWorkBelowFloorLevel_ESTD },
                            { subactivityname: 'Tower - Sunken Filling - COBA |Waste', activityID: newData._id, projectID: objectproID, estimateDays: TowerSunkenFillingCOBAWaste_ESTD },
                            { subactivityname: 'Tower -Wall Conduting + Internal Fittings', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                            { subactivityname: 'Tower -Waterproofing', activityID: newData._id, projectID: objectproID, estimateDays: TowerWaterproofing_ESTD },

                            { subactivityname: 'Rain Water Harvesting', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                            { subactivityname: 'AC', activityID: newData._id, projectID: objectproID, estimateDays: ac_ESTD },
                            { subactivityname: 'Reverse Line', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                            { subactivityname: 'Seperate | Individual Line per Floor', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                            // { subactivityname: 'Water Tank', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                            { subactivityname: 'Solar Heater | Geyser Line', activityID: newData._id, projectID: objectproID, estimateDays: 4 }

                        ];


                        async function miscellenousCalling() {
                            for (let i = 0; i < dataArranew.length; i++) {
                                if (dataArranew[i].TempID === 1 && NumbersOfFlorrs < 1 || dataArranew[i].TempID === 2 && NumbersOfFlorrs < 2 || dataArranew[i].TempID === 3 && NumbersOfFlorrs < 3 || dataArranew[i].TempID === 4 && NumbersOfFlorrs < 4 || dataArranew[i].TempID === 11 && NumbersOfBasemetFloor === 0 || dataArranew[i].TempID === 22 && NumbersOfBasemetFloor === 0 || dataArranew[i].TempID === 33 && NumbersOfBasemetFloor === 0 || dataArranew[i].TempID === 44 && NumbersOfBasemetFloor === 0) {
                                    continue; // Skip this iteration
                                }
                                try {
                                    const newDatanew = new SubActivities(dataArranew[i]);
                                    const savedData = await newDatanew.save();

                                    let objID = new mongoose.Types.ObjectId(newDatanew.id)
                                    let newss = new mongoose.Types.ObjectId(newData._id)
                                    // console.log(objID);

                                    //Anuj
                                    if (newDatanew.subactivityname === 'B1 - Pipe Work below Floor Level') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Assign the plumber for the work' },
                                            { subtaskdescription: 'Explain all the drawings to the plumber and ask him to carry out the work as per the drawings' },
                                            { subtaskdescription: 'Stormwater drawing' },
                                            { subtaskdescription: 'Drainage drawing' },
                                            { subtaskdescription: 'Water supply lines' },
                                            { subtaskdescription: 'Septic tank' },
                                            { subtaskdescription: 'O.H.W.T. - clear understanding of the supply system and other additioanl things if needed to be sorted with client if needed' },
                                            { subtaskdescription: 'U.G.W.T. - As per the client requirement, if connection is from society or Munical Corporation then how they want ki water is to be taken to overhead' },
                                            { subtaskdescription: 'Terrace level distribution - water slope on the terrace, Pipe, at the level of floor in case if the flooring is not done till the time, Flooring level is to be mention ' },
                                            { subtaskdescription: 'Internal plumbing work details' },
                                            { subtaskdescription: 'Swimming pool (if provided), details regarding plumbing requirements/filtration plant' },
                                            { subtaskdescription: 'Ask the Plumber to have a initial review and check if any interdepencies occur' },
                                            { subtaskdescription: 'Ask the Plumber to clear the interdepencies and coordinate with the other agencies' },
                                            { subtaskdescription: 'Inform the Plumber not to cut beam or column' },
                                            { subtaskdescription: 'Indicate the plumbing lines ie, sanitary and drainage line to the plumber' },
                                            { subtaskdescription: 'Take the quantity of materials  from the plumber and give to purchase manager' },
                                            { subtaskdescription: 'Ask the purchase manager to arrange the materials at site' },
                                            { subtaskdescription: 'Ask the plumber to check the materials which has been delivered' },
                                            { subtaskdescription: 'Internal washroom drawing, please confrm once with the clinet meet on site for the final head ups if needed' },
                                        ];

                                        async function PlumbingfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PlumbingfunCall();
                                    }
                                    if (newDatanew.subactivityname === 'B1 - Pipe Work below Floor Level') {

                                        const dataArranew = [
                                            { checksHeading: 'Co-Ordination and Role of Water-Proofing Agency - Pre Work ', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Sunken floor check', checksdescription: 'Sunken floor should be plastered with C.M. 1:4 with a water-proofing compound and tested for water tightness.' },
                                            { checksHeading: 'Waterproofing Toilet Floor check', checksdescription: 'The first coat of water-proofing should be done before fixing sanitary traps, in case of water closets (W.C.) and toilets.' },
                                            { checksHeading: 'Waterproofing Terrace Floor', checksdescription: 'The first coat of water-proofing and brickbat Coba coat should be done before fixing the bends of rainwater lines at the terrace level.' },
                                            { checksHeading: 'Rainwater pipe check', checksdescription: 'In the case of terrace rainwater pipes, the joint near the bend should be neatly finished with cement mortar, to prevent leakages.' },
                                            { checksHeading: 'Co-Ordination and Role of Masonry Plaster Agency - Pre Work', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Outlets and traps check', checksdescription: 'Generally, all outlets are fixed and taken out from the building face, or sleeves are provided before the external plaster, Traps should be well embedded in cement mortar at the junction.' },
                                            { checksHeading: 'Chasing check', checksdescription: 'The walls of the W.C. and bathroom should be strong enough for the chasing of grooves for concealed pipes. Masonry of these walls must be done with the correctly specified ' },
                                            { checksHeading: 'Trap joints check', checksdescription: 'All the trap joints should be properly finished to avoid any leakage problems in the future. ' },
                                            { checksHeading: 'Bend check', checksdescription: 'In the case of terrace rainwater pipes, the joint near the bend should be neatly finished with cement mortar, to prevent leakages.' },
                                            { checksHeading: 'Line and level check', checksdescription: 'Hence duct plaster must be done in perfect plumb, line, and level. engineers contractors.' },
                                            { checksHeading: 'Co-Ordination and Role of Masonry Plaster Agency - Pre Work', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Levels Check', checksdescription: 'Levels should be given by the flooring person, for the pipe fitting as per drawing ' },
                                            { checksHeading: '', checksdescription: 'This causes the pipes to choke up and may lead to repairing/replacing the pipes. To prevent this, the tile powder slurry should be collected and disposed of manually. In addition, the following points should be observed-' },
                                            { checksHeading: 'Opening check', checksdescription: 'The opening of I.W.C. should be filled with sand, gunny bags, and the top layer should be covered with a thick layer of P.O.P.' },
                                            { checksHeading: 'Nahani trap check', checksdescription: 'Nahani trap hole should be made in the flooring tile after the completion of the polishing work.' },
                                            { checksHeading: 'Co-Ordination and Role of  Electrification Agency - Pre Work ', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Concelaed pipes check', checksdescription: 'Concealed plumbing and concealed electrification work are inter-linked activities, as far as bathrooms and toilets are concerned.' },
                                            { checksHeading: 'Concelaed pipes check', checksdescription: 'Since, both activities run simultaneously, pipes should be laid very carefully.' },
                                            { checksHeading: 'Electrical conduits check', checksdescription: 'Electrical conduits should not cross the plumbing pipes, so as to prevent any short circuits.' },
                                            { checksHeading: 'Co-Ordination and Role of  Painting Agency - Pre Work ', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Painting check', checksdescription: 'Painting is the final finishing item and starts after 90% of the plumbing work is over.' },
                                            { checksHeading: 'Painting check', checksdescription: 'Painters should not wash the used paint tins in bathroom washbasins. The sediments of the paints can cause choking up of the plumbing lines' },
                                            { checksHeading: 'General Care to be Taken By Plumber', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Handling check', checksdescription: 'Plumbers themselves should exercise precautions, since handling all agencies at a time is difficult.' },
                                            { checksHeading: 'Trap check', checksdescription: 'Plumbers should seal all the traps with gunny bags and a layer of plaster of Paris at the top, to minimize the choke-up problem.' },
                                            { checksHeading: 'Seal Check', checksdescription: 'Remove these seals at the time of testing.' },
                                        ];

                                        async function PlumbingChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PlumbingChacks();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'B1 - Sunken Filling - COBA |Waste') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Assign the plumber for the work' },
                                            { subtaskdescription: 'Explain all the drawings to the plumber and ask him to carry out the work as per the drawings' },
                                            { subtaskdescription: 'Stormwater drawing' },
                                            { subtaskdescription: 'Drainage drawing' },
                                            { subtaskdescription: 'Water supply lines' },
                                            { subtaskdescription: 'Septic tank' },
                                            { subtaskdescription: 'O.H.W.T. - clear understanding of the supply system and other additioanl things if needed to be sorted with client if needed' },
                                            { subtaskdescription: 'U.G.W.T. - As per the client requirement, if connection is from society or Munical Corporation then how they want ki water is to be taken to overhead' },
                                            { subtaskdescription: 'Terrace level distribution - water slope on the terrace, Pipe, at the level of floor in case if the flooring is not done till the time, Flooring level is to be mention ' },
                                            { subtaskdescription: 'Internal plumbing work details' },
                                            { subtaskdescription: 'Swimming pool (if provided), details regarding plumbing requirements/filtration plant' },
                                            { subtaskdescription: 'Ask the Plumber to have a initial review and check if any interdepencies occur' },
                                            { subtaskdescription: 'Ask the Plumber to clear the interdepencies and coordinate with the other agencies' },
                                            { subtaskdescription: 'Inform the Plumber not to cut beam or column' },
                                            { subtaskdescription: 'Indicate the plumbing lines ie, sanitary and drainage line to the plumber' },
                                            { subtaskdescription: 'Take the quantity of materials  from the plumber and give to purchase manager' },
                                            { subtaskdescription: 'Ask the purchase manager to arrange the materials at site' },
                                            { subtaskdescription: 'Ask the plumber to check the materials which has been delivered' },
                                            { subtaskdescription: 'Internal washroom drawing, please confrm once with the clinet meet on site for the final head ups if needed' },
                                        ];

                                        async function PlumbingfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PlumbingfunCall();
                                    }
                                    if (newDatanew.subactivityname === 'B1 - Sunken Filling - COBA |Waste') {

                                        const dataArranew = [
                                            { checksHeading: 'Co-Ordination and Role of Water-Proofing Agency - Pre Work ', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Sunken floor check', checksdescription: 'Sunken floor should be plastered with C.M. 1:4 with a water-proofing compound and tested for water tightness.' },
                                            { checksHeading: 'Waterproofing Toilet Floor check', checksdescription: 'The first coat of water-proofing should be done before fixing sanitary traps, in case of water closets (W.C.) and toilets.' },
                                            { checksHeading: 'Waterproofing Terrace Floor', checksdescription: 'The first coat of water-proofing and brickbat Coba coat should be done before fixing the bends of rainwater lines at the terrace level.' },
                                            { checksHeading: 'Rainwater pipe check', checksdescription: 'In the case of terrace rainwater pipes, the joint near the bend should be neatly finished with cement mortar, to prevent leakages.' },
                                            { checksHeading: 'Co-Ordination and Role of Masonry Plaster Agency - Pre Work', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Outlets and traps check', checksdescription: 'Generally, all outlets are fixed and taken out from the building face, or sleeves are provided before the external plaster, Traps should be well embedded in cement mortar at the junction.' },
                                            { checksHeading: 'Chasing check', checksdescription: 'The walls of the W.C. and bathroom should be strong enough for the chasing of grooves for concealed pipes. Masonry of these walls must be done with the correctly specified ' },
                                            { checksHeading: 'Trap joints check', checksdescription: 'All the trap joints should be properly finished to avoid any leakage problems in the future. ' },
                                            { checksHeading: 'Bend check', checksdescription: 'In the case of terrace rainwater pipes, the joint near the bend should be neatly finished with cement mortar, to prevent leakages.' },
                                            { checksHeading: 'Line and level check', checksdescription: 'Hence duct plaster must be done in perfect plumb, line, and level. engineers contractors.' },
                                            { checksHeading: 'Co-Ordination and Role of Masonry Plaster Agency - Pre Work', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Levels Check', checksdescription: 'Levels should be given by the flooring person, for the pipe fitting as per drawing ' },
                                            { checksHeading: '', checksdescription: 'This causes the pipes to choke up and may lead to repairing/replacing the pipes. To prevent this, the tile powder slurry should be collected and disposed of manually. In addition, the following points should be observed-' },
                                            { checksHeading: 'Opening check', checksdescription: 'The opening of I.W.C. should be filled with sand, gunny bags, and the top layer should be covered with a thick layer of P.O.P.' },
                                            { checksHeading: 'Nahani trap check', checksdescription: 'Nahani trap hole should be made in the flooring tile after the completion of the polishing work.' },
                                            { checksHeading: 'Co-Ordination and Role of  Electrification Agency - Pre Work ', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Concelaed pipes check', checksdescription: 'Concealed plumbing and concealed electrification work are inter-linked activities, as far as bathrooms and toilets are concerned.' },
                                            { checksHeading: 'Concelaed pipes check', checksdescription: 'Since, both activities run simultaneously, pipes should be laid very carefully.' },
                                            { checksHeading: 'Electrical conduits check', checksdescription: 'Electrical conduits should not cross the plumbing pipes, so as to prevent any short circuits.' },
                                            { checksHeading: 'Co-Ordination and Role of  Painting Agency - Pre Work ', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Painting check', checksdescription: 'Painting is the final finishing item and starts after 90% of the plumbing work is over.' },
                                            { checksHeading: 'Painting check', checksdescription: 'Painters should not wash the used paint tins in bathroom washbasins. The sediments of the paints can cause choking up of the plumbing lines' },
                                            { checksHeading: 'General Care to be Taken By Plumber', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Handling check', checksdescription: 'Plumbers themselves should exercise precautions, since handling all agencies at a time is difficult.' },
                                            { checksHeading: 'Trap check', checksdescription: 'Plumbers should seal all the traps with gunny bags and a layer of plaster of Paris at the top, to minimize the choke-up problem.' },
                                            { checksHeading: 'Seal Check', checksdescription: 'Remove these seals at the time of testing.' },
                                        ];

                                        async function PlumbingChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PlumbingChacks();
                                    }

                                    //Anuj
                                    if (newDatanew.subactivityname === 'B2 - Pipe Work below Floor Level') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Assign the plumber for the work' },
                                            { subtaskdescription: 'Explain all the drawings to the plumber and ask him to carry out the work as per the drawings' },
                                            { subtaskdescription: 'Stormwater drawing' },
                                            { subtaskdescription: 'Drainage drawing' },
                                            { subtaskdescription: 'Water supply lines' },
                                            { subtaskdescription: 'Septic tank' },
                                            { subtaskdescription: 'O.H.W.T. - clear understanding of the supply system and other additioanl things if needed to be sorted with client if needed' },
                                            { subtaskdescription: 'U.G.W.T. - As per the client requirement, if connection is from society or Munical Corporation then how they want ki water is to be taken to overhead' },
                                            { subtaskdescription: 'Terrace level distribution - water slope on the terrace, Pipe, at the level of floor in case if the flooring is not done till the time, Flooring level is to be mention ' },
                                            { subtaskdescription: 'Internal plumbing work details' },
                                            { subtaskdescription: 'Swimming pool (if provided), details regarding plumbing requirements/filtration plant' },
                                            { subtaskdescription: 'Ask the Plumber to have a initial review and check if any interdepencies occur' },
                                            { subtaskdescription: 'Ask the Plumber to clear the interdepencies and coordinate with the other agencies' },
                                            { subtaskdescription: 'Inform the Plumber not to cut beam or column' },
                                            { subtaskdescription: 'Indicate the plumbing lines ie, sanitary and drainage line to the plumber' },
                                            { subtaskdescription: 'Take the quantity of materials  from the plumber and give to purchase manager' },
                                            { subtaskdescription: 'Ask the purchase manager to arrange the materials at site' },
                                            { subtaskdescription: 'Ask the plumber to check the materials which has been delivered' },
                                            { subtaskdescription: 'Internal washroom drawing, please confrm once with the clinet meet on site for the final head ups if needed' },
                                        ];

                                        async function PlumbingfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PlumbingfunCall();
                                    }
                                    if (newDatanew.subactivityname === 'B2 - Pipe Work below Floor Level') {

                                        const dataArranew = [
                                            { checksHeading: 'Co-Ordination and Role of Water-Proofing Agency - Pre Work ', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Sunken floor check', checksdescription: 'Sunken floor should be plastered with C.M. 1:4 with a water-proofing compound and tested for water tightness.' },
                                            { checksHeading: 'Waterproofing Toilet Floor check', checksdescription: 'The first coat of water-proofing should be done before fixing sanitary traps, in case of water closets (W.C.) and toilets.' },
                                            { checksHeading: 'Waterproofing Terrace Floor', checksdescription: 'The first coat of water-proofing and brickbat Coba coat should be done before fixing the bends of rainwater lines at the terrace level.' },
                                            { checksHeading: 'Rainwater pipe check', checksdescription: 'In the case of terrace rainwater pipes, the joint near the bend should be neatly finished with cement mortar, to prevent leakages.' },
                                            { checksHeading: 'Co-Ordination and Role of Masonry Plaster Agency - Pre Work', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Outlets and traps check', checksdescription: 'Generally, all outlets are fixed and taken out from the building face, or sleeves are provided before the external plaster, Traps should be well embedded in cement mortar at the junction.' },
                                            { checksHeading: 'Chasing check', checksdescription: 'The walls of the W.C. and bathroom should be strong enough for the chasing of grooves for concealed pipes. Masonry of these walls must be done with the correctly specified ' },
                                            { checksHeading: 'Trap joints check', checksdescription: 'All the trap joints should be properly finished to avoid any leakage problems in the future. ' },
                                            { checksHeading: 'Bend check', checksdescription: 'In the case of terrace rainwater pipes, the joint near the bend should be neatly finished with cement mortar, to prevent leakages.' },
                                            { checksHeading: 'Line and level check', checksdescription: 'Hence duct plaster must be done in perfect plumb, line, and level. engineers contractors.' },
                                            { checksHeading: 'Co-Ordination and Role of Masonry Plaster Agency - Pre Work', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Levels Check', checksdescription: 'Levels should be given by the flooring person, for the pipe fitting as per drawing ' },
                                            { checksHeading: '', checksdescription: 'This causes the pipes to choke up and may lead to repairing/replacing the pipes. To prevent this, the tile powder slurry should be collected and disposed of manually. In addition, the following points should be observed-' },
                                            { checksHeading: 'Opening check', checksdescription: 'The opening of I.W.C. should be filled with sand, gunny bags, and the top layer should be covered with a thick layer of P.O.P.' },
                                            { checksHeading: 'Nahani trap check', checksdescription: 'Nahani trap hole should be made in the flooring tile after the completion of the polishing work.' },
                                            { checksHeading: 'Co-Ordination and Role of  Electrification Agency - Pre Work ', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Concelaed pipes check', checksdescription: 'Concealed plumbing and concealed electrification work are inter-linked activities, as far as bathrooms and toilets are concerned.' },
                                            { checksHeading: 'Concelaed pipes check', checksdescription: 'Since, both activities run simultaneously, pipes should be laid very carefully.' },
                                            { checksHeading: 'Electrical conduits check', checksdescription: 'Electrical conduits should not cross the plumbing pipes, so as to prevent any short circuits.' },
                                            { checksHeading: 'Co-Ordination and Role of  Painting Agency - Pre Work ', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Painting check', checksdescription: 'Painting is the final finishing item and starts after 90% of the plumbing work is over.' },
                                            { checksHeading: 'Painting check', checksdescription: 'Painters should not wash the used paint tins in bathroom washbasins. The sediments of the paints can cause choking up of the plumbing lines' },
                                            { checksHeading: 'General Care to be Taken By Plumber', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Handling check', checksdescription: 'Plumbers themselves should exercise precautions, since handling all agencies at a time is difficult.' },
                                            { checksHeading: 'Trap check', checksdescription: 'Plumbers should seal all the traps with gunny bags and a layer of plaster of Paris at the top, to minimize the choke-up problem.' },
                                            { checksHeading: 'Seal Check', checksdescription: 'Remove these seals at the time of testing.' },
                                        ];

                                        async function PlumbingChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PlumbingChacks();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'B2 - Sunken Filling - COBA |Waste') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Assign the plumber for the work' },
                                            { subtaskdescription: 'Explain all the drawings to the plumber and ask him to carry out the work as per the drawings' },
                                            { subtaskdescription: 'Stormwater drawing' },
                                            { subtaskdescription: 'Drainage drawing' },
                                            { subtaskdescription: 'Water supply lines' },
                                            { subtaskdescription: 'Septic tank' },
                                            { subtaskdescription: 'O.H.W.T. - clear understanding of the supply system and other additioanl things if needed to be sorted with client if needed' },
                                            { subtaskdescription: 'U.G.W.T. - As per the client requirement, if connection is from society or Munical Corporation then how they want ki water is to be taken to overhead' },
                                            { subtaskdescription: 'Terrace level distribution - water slope on the terrace, Pipe, at the level of floor in case if the flooring is not done till the time, Flooring level is to be mention ' },
                                            { subtaskdescription: 'Internal plumbing work details' },
                                            { subtaskdescription: 'Swimming pool (if provided), details regarding plumbing requirements/filtration plant' },
                                            { subtaskdescription: 'Ask the Plumber to have a initial review and check if any interdepencies occur' },
                                            { subtaskdescription: 'Ask the Plumber to clear the interdepencies and coordinate with the other agencies' },
                                            { subtaskdescription: 'Inform the Plumber not to cut beam or column' },
                                            { subtaskdescription: 'Indicate the plumbing lines ie, sanitary and drainage line to the plumber' },
                                            { subtaskdescription: 'Take the quantity of materials  from the plumber and give to purchase manager' },
                                            { subtaskdescription: 'Ask the purchase manager to arrange the materials at site' },
                                            { subtaskdescription: 'Ask the plumber to check the materials which has been delivered' },
                                            { subtaskdescription: 'Internal washroom drawing, please confrm once with the clinet meet on site for the final head ups if needed' },
                                        ];

                                        async function PlumbingfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PlumbingfunCall();
                                    }
                                    if (newDatanew.subactivityname === 'B2 - Sunken Filling - COBA |Waste') {

                                        const dataArranew = [
                                            { checksHeading: 'Co-Ordination and Role of Water-Proofing Agency - Pre Work ', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Sunken floor check', checksdescription: 'Sunken floor should be plastered with C.M. 1:4 with a water-proofing compound and tested for water tightness.' },
                                            { checksHeading: 'Waterproofing Toilet Floor check', checksdescription: 'The first coat of water-proofing should be done before fixing sanitary traps, in case of water closets (W.C.) and toilets.' },
                                            { checksHeading: 'Waterproofing Terrace Floor', checksdescription: 'The first coat of water-proofing and brickbat Coba coat should be done before fixing the bends of rainwater lines at the terrace level.' },
                                            { checksHeading: 'Rainwater pipe check', checksdescription: 'In the case of terrace rainwater pipes, the joint near the bend should be neatly finished with cement mortar, to prevent leakages.' },
                                            { checksHeading: 'Co-Ordination and Role of Masonry Plaster Agency - Pre Work', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Outlets and traps check', checksdescription: 'Generally, all outlets are fixed and taken out from the building face, or sleeves are provided before the external plaster, Traps should be well embedded in cement mortar at the junction.' },
                                            { checksHeading: 'Chasing check', checksdescription: 'The walls of the W.C. and bathroom should be strong enough for the chasing of grooves for concealed pipes. Masonry of these walls must be done with the correctly specified ' },
                                            { checksHeading: 'Trap joints check', checksdescription: 'All the trap joints should be properly finished to avoid any leakage problems in the future. ' },
                                            { checksHeading: 'Bend check', checksdescription: 'In the case of terrace rainwater pipes, the joint near the bend should be neatly finished with cement mortar, to prevent leakages.' },
                                            { checksHeading: 'Line and level check', checksdescription: 'Hence duct plaster must be done in perfect plumb, line, and level. engineers contractors.' },
                                            { checksHeading: 'Co-Ordination and Role of Masonry Plaster Agency - Pre Work', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Levels Check', checksdescription: 'Levels should be given by the flooring person, for the pipe fitting as per drawing ' },
                                            { checksHeading: '', checksdescription: 'This causes the pipes to choke up and may lead to repairing/replacing the pipes. To prevent this, the tile powder slurry should be collected and disposed of manually. In addition, the following points should be observed-' },
                                            { checksHeading: 'Opening check', checksdescription: 'The opening of I.W.C. should be filled with sand, gunny bags, and the top layer should be covered with a thick layer of P.O.P.' },
                                            { checksHeading: 'Nahani trap check', checksdescription: 'Nahani trap hole should be made in the flooring tile after the completion of the polishing work.' },
                                            { checksHeading: 'Co-Ordination and Role of  Electrification Agency - Pre Work ', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Concelaed pipes check', checksdescription: 'Concealed plumbing and concealed electrification work are inter-linked activities, as far as bathrooms and toilets are concerned.' },
                                            { checksHeading: 'Concelaed pipes check', checksdescription: 'Since, both activities run simultaneously, pipes should be laid very carefully.' },
                                            { checksHeading: 'Electrical conduits check', checksdescription: 'Electrical conduits should not cross the plumbing pipes, so as to prevent any short circuits.' },
                                            { checksHeading: 'Co-Ordination and Role of  Painting Agency - Pre Work ', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Painting check', checksdescription: 'Painting is the final finishing item and starts after 90% of the plumbing work is over.' },
                                            { checksHeading: 'Painting check', checksdescription: 'Painters should not wash the used paint tins in bathroom washbasins. The sediments of the paints can cause choking up of the plumbing lines' },
                                            { checksHeading: 'General Care to be Taken By Plumber', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Handling check', checksdescription: 'Plumbers themselves should exercise precautions, since handling all agencies at a time is difficult.' },
                                            { checksHeading: 'Trap check', checksdescription: 'Plumbers should seal all the traps with gunny bags and a layer of plaster of Paris at the top, to minimize the choke-up problem.' },
                                            { checksHeading: 'Seal Check', checksdescription: 'Remove these seals at the time of testing.' },
                                        ];

                                        async function PlumbingChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PlumbingChacks();
                                    }


                                    //Anuj
                                    if (newDatanew.subactivityname === 'B3 - Pipe Work below Floor Level') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Assign the plumber for the work' },
                                            { subtaskdescription: 'Explain all the drawings to the plumber and ask him to carry out the work as per the drawings' },
                                            { subtaskdescription: 'Stormwater drawing' },
                                            { subtaskdescription: 'Drainage drawing' },
                                            { subtaskdescription: 'Water supply lines' },
                                            { subtaskdescription: 'Septic tank' },
                                            { subtaskdescription: 'O.H.W.T. - clear understanding of the supply system and other additioanl things if needed to be sorted with client if needed' },
                                            { subtaskdescription: 'U.G.W.T. - As per the client requirement, if connection is from society or Munical Corporation then how they want ki water is to be taken to overhead' },
                                            { subtaskdescription: 'Terrace level distribution - water slope on the terrace, Pipe, at the level of floor in case if the flooring is not done till the time, Flooring level is to be mention ' },
                                            { subtaskdescription: 'Internal plumbing work details' },
                                            { subtaskdescription: 'Swimming pool (if provided), details regarding plumbing requirements/filtration plant' },
                                            { subtaskdescription: 'Ask the Plumber to have a initial review and check if any interdepencies occur' },
                                            { subtaskdescription: 'Ask the Plumber to clear the interdepencies and coordinate with the other agencies' },
                                            { subtaskdescription: 'Inform the Plumber not to cut beam or column' },
                                            { subtaskdescription: 'Indicate the plumbing lines ie, sanitary and drainage line to the plumber' },
                                            { subtaskdescription: 'Take the quantity of materials  from the plumber and give to purchase manager' },
                                            { subtaskdescription: 'Ask the purchase manager to arrange the materials at site' },
                                            { subtaskdescription: 'Ask the plumber to check the materials which has been delivered' },
                                            { subtaskdescription: 'Internal washroom drawing, please confrm once with the clinet meet on site for the final head ups if needed' },
                                        ];

                                        async function PlumbingfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PlumbingfunCall();
                                    }
                                    if (newDatanew.subactivityname === 'B3 - Pipe Work below Floor Level') {

                                        const dataArranew = [
                                            { checksHeading: 'Co-Ordination and Role of Water-Proofing Agency - Pre Work ', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Sunken floor check', checksdescription: 'Sunken floor should be plastered with C.M. 1:4 with a water-proofing compound and tested for water tightness.' },
                                            { checksHeading: 'Waterproofing Toilet Floor check', checksdescription: 'The first coat of water-proofing should be done before fixing sanitary traps, in case of water closets (W.C.) and toilets.' },
                                            { checksHeading: 'Waterproofing Terrace Floor', checksdescription: 'The first coat of water-proofing and brickbat Coba coat should be done before fixing the bends of rainwater lines at the terrace level.' },
                                            { checksHeading: 'Rainwater pipe check', checksdescription: 'In the case of terrace rainwater pipes, the joint near the bend should be neatly finished with cement mortar, to prevent leakages.' },
                                            { checksHeading: 'Co-Ordination and Role of Masonry Plaster Agency - Pre Work', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Outlets and traps check', checksdescription: 'Generally, all outlets are fixed and taken out from the building face, or sleeves are provided before the external plaster, Traps should be well embedded in cement mortar at the junction.' },
                                            { checksHeading: 'Chasing check', checksdescription: 'The walls of the W.C. and bathroom should be strong enough for the chasing of grooves for concealed pipes. Masonry of these walls must be done with the correctly specified ' },
                                            { checksHeading: 'Trap joints check', checksdescription: 'All the trap joints should be properly finished to avoid any leakage problems in the future. ' },
                                            { checksHeading: 'Bend check', checksdescription: 'In the case of terrace rainwater pipes, the joint near the bend should be neatly finished with cement mortar, to prevent leakages.' },
                                            { checksHeading: 'Line and level check', checksdescription: 'Hence duct plaster must be done in perfect plumb, line, and level. engineers contractors.' },
                                            { checksHeading: 'Co-Ordination and Role of Masonry Plaster Agency - Pre Work', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Levels Check', checksdescription: 'Levels should be given by the flooring person, for the pipe fitting as per drawing ' },
                                            { checksHeading: '', checksdescription: 'This causes the pipes to choke up and may lead to repairing/replacing the pipes. To prevent this, the tile powder slurry should be collected and disposed of manually. In addition, the following points should be observed-' },
                                            { checksHeading: 'Opening check', checksdescription: 'The opening of I.W.C. should be filled with sand, gunny bags, and the top layer should be covered with a thick layer of P.O.P.' },
                                            { checksHeading: 'Nahani trap check', checksdescription: 'Nahani trap hole should be made in the flooring tile after the completion of the polishing work.' },
                                            { checksHeading: 'Co-Ordination and Role of  Electrification Agency - Pre Work ', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Concelaed pipes check', checksdescription: 'Concealed plumbing and concealed electrification work are inter-linked activities, as far as bathrooms and toilets are concerned.' },
                                            { checksHeading: 'Concelaed pipes check', checksdescription: 'Since, both activities run simultaneously, pipes should be laid very carefully.' },
                                            { checksHeading: 'Electrical conduits check', checksdescription: 'Electrical conduits should not cross the plumbing pipes, so as to prevent any short circuits.' },
                                            { checksHeading: 'Co-Ordination and Role of  Painting Agency - Pre Work ', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Painting check', checksdescription: 'Painting is the final finishing item and starts after 90% of the plumbing work is over.' },
                                            { checksHeading: 'Painting check', checksdescription: 'Painters should not wash the used paint tins in bathroom washbasins. The sediments of the paints can cause choking up of the plumbing lines' },
                                            { checksHeading: 'General Care to be Taken By Plumber', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Handling check', checksdescription: 'Plumbers themselves should exercise precautions, since handling all agencies at a time is difficult.' },
                                            { checksHeading: 'Trap check', checksdescription: 'Plumbers should seal all the traps with gunny bags and a layer of plaster of Paris at the top, to minimize the choke-up problem.' },
                                            { checksHeading: 'Seal Check', checksdescription: 'Remove these seals at the time of testing.' },
                                        ];

                                        async function PlumbingChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PlumbingChacks();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'B3 - Sunken Filling - COBA |Waste') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Assign the plumber for the work' },
                                            { subtaskdescription: 'Explain all the drawings to the plumber and ask him to carry out the work as per the drawings' },
                                            { subtaskdescription: 'Stormwater drawing' },
                                            { subtaskdescription: 'Drainage drawing' },
                                            { subtaskdescription: 'Water supply lines' },
                                            { subtaskdescription: 'Septic tank' },
                                            { subtaskdescription: 'O.H.W.T. - clear understanding of the supply system and other additioanl things if needed to be sorted with client if needed' },
                                            { subtaskdescription: 'U.G.W.T. - As per the client requirement, if connection is from society or Munical Corporation then how they want ki water is to be taken to overhead' },
                                            { subtaskdescription: 'Terrace level distribution - water slope on the terrace, Pipe, at the level of floor in case if the flooring is not done till the time, Flooring level is to be mention ' },
                                            { subtaskdescription: 'Internal plumbing work details' },
                                            { subtaskdescription: 'Swimming pool (if provided), details regarding plumbing requirements/filtration plant' },
                                            { subtaskdescription: 'Ask the Plumber to have a initial review and check if any interdepencies occur' },
                                            { subtaskdescription: 'Ask the Plumber to clear the interdepencies and coordinate with the other agencies' },
                                            { subtaskdescription: 'Inform the Plumber not to cut beam or column' },
                                            { subtaskdescription: 'Indicate the plumbing lines ie, sanitary and drainage line to the plumber' },
                                            { subtaskdescription: 'Take the quantity of materials  from the plumber and give to purchase manager' },
                                            { subtaskdescription: 'Ask the purchase manager to arrange the materials at site' },
                                            { subtaskdescription: 'Ask the plumber to check the materials which has been delivered' },
                                            { subtaskdescription: 'Internal washroom drawing, please confrm once with the clinet meet on site for the final head ups if needed' },
                                        ];

                                        async function PlumbingfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PlumbingfunCall();
                                    }
                                    if (newDatanew.subactivityname === 'B3 - Sunken Filling - COBA |Waste') {

                                        const dataArranew = [
                                            { checksHeading: 'Co-Ordination and Role of Water-Proofing Agency - Pre Work ', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Sunken floor check', checksdescription: 'Sunken floor should be plastered with C.M. 1:4 with a water-proofing compound and tested for water tightness.' },
                                            { checksHeading: 'Waterproofing Toilet Floor check', checksdescription: 'The first coat of water-proofing should be done before fixing sanitary traps, in case of water closets (W.C.) and toilets.' },
                                            { checksHeading: 'Waterproofing Terrace Floor', checksdescription: 'The first coat of water-proofing and brickbat Coba coat should be done before fixing the bends of rainwater lines at the terrace level.' },
                                            { checksHeading: 'Rainwater pipe check', checksdescription: 'In the case of terrace rainwater pipes, the joint near the bend should be neatly finished with cement mortar, to prevent leakages.' },
                                            { checksHeading: 'Co-Ordination and Role of Masonry Plaster Agency - Pre Work', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Outlets and traps check', checksdescription: 'Generally, all outlets are fixed and taken out from the building face, or sleeves are provided before the external plaster, Traps should be well embedded in cement mortar at the junction.' },
                                            { checksHeading: 'Chasing check', checksdescription: 'The walls of the W.C. and bathroom should be strong enough for the chasing of grooves for concealed pipes. Masonry of these walls must be done with the correctly specified ' },
                                            { checksHeading: 'Trap joints check', checksdescription: 'All the trap joints should be properly finished to avoid any leakage problems in the future. ' },
                                            { checksHeading: 'Bend check', checksdescription: 'In the case of terrace rainwater pipes, the joint near the bend should be neatly finished with cement mortar, to prevent leakages.' },
                                            { checksHeading: 'Line and level check', checksdescription: 'Hence duct plaster must be done in perfect plumb, line, and level. engineers contractors.' },
                                            { checksHeading: 'Co-Ordination and Role of Masonry Plaster Agency - Pre Work', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Levels Check', checksdescription: 'Levels should be given by the flooring person, for the pipe fitting as per drawing ' },
                                            { checksHeading: '', checksdescription: 'This causes the pipes to choke up and may lead to repairing/replacing the pipes. To prevent this, the tile powder slurry should be collected and disposed of manually. In addition, the following points should be observed-' },
                                            { checksHeading: 'Opening check', checksdescription: 'The opening of I.W.C. should be filled with sand, gunny bags, and the top layer should be covered with a thick layer of P.O.P.' },
                                            { checksHeading: 'Nahani trap check', checksdescription: 'Nahani trap hole should be made in the flooring tile after the completion of the polishing work.' },
                                            { checksHeading: 'Co-Ordination and Role of  Electrification Agency - Pre Work ', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Concelaed pipes check', checksdescription: 'Concealed plumbing and concealed electrification work are inter-linked activities, as far as bathrooms and toilets are concerned.' },
                                            { checksHeading: 'Concelaed pipes check', checksdescription: 'Since, both activities run simultaneously, pipes should be laid very carefully.' },
                                            { checksHeading: 'Electrical conduits check', checksdescription: 'Electrical conduits should not cross the plumbing pipes, so as to prevent any short circuits.' },
                                            { checksHeading: 'Co-Ordination and Role of  Painting Agency - Pre Work ', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Painting check', checksdescription: 'Painting is the final finishing item and starts after 90% of the plumbing work is over.' },
                                            { checksHeading: 'Painting check', checksdescription: 'Painters should not wash the used paint tins in bathroom washbasins. The sediments of the paints can cause choking up of the plumbing lines' },
                                            { checksHeading: 'General Care to be Taken By Plumber', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Handling check', checksdescription: 'Plumbers themselves should exercise precautions, since handling all agencies at a time is difficult.' },
                                            { checksHeading: 'Trap check', checksdescription: 'Plumbers should seal all the traps with gunny bags and a layer of plaster of Paris at the top, to minimize the choke-up problem.' },
                                            { checksHeading: 'Seal Check', checksdescription: 'Remove these seals at the time of testing.' },
                                        ];

                                        async function PlumbingChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PlumbingChacks();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'B4 - Pipe Work below Floor Level') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Assign the plumber for the work' },
                                            { subtaskdescription: 'Explain all the drawings to the plumber and ask him to carry out the work as per the drawings' },
                                            { subtaskdescription: 'Stormwater drawing' },
                                            { subtaskdescription: 'Drainage drawing' },
                                            { subtaskdescription: 'Water supply lines' },
                                            { subtaskdescription: 'Septic tank' },
                                            { subtaskdescription: 'O.H.W.T. - clear understanding of the supply system and other additioanl things if needed to be sorted with client if needed' },
                                            { subtaskdescription: 'U.G.W.T. - As per the client requirement, if connection is from society or Munical Corporation then how they want ki water is to be taken to overhead' },
                                            { subtaskdescription: 'Terrace level distribution - water slope on the terrace, Pipe, at the level of floor in case if the flooring is not done till the time, Flooring level is to be mention ' },
                                            { subtaskdescription: 'Internal plumbing work details' },
                                            { subtaskdescription: 'Swimming pool (if provided), details regarding plumbing requirements/filtration plant' },
                                            { subtaskdescription: 'Ask the Plumber to have a initial review and check if any interdepencies occur' },
                                            { subtaskdescription: 'Ask the Plumber to clear the interdepencies and coordinate with the other agencies' },
                                            { subtaskdescription: 'Inform the Plumber not to cut beam or column' },
                                            { subtaskdescription: 'Indicate the plumbing lines ie, sanitary and drainage line to the plumber' },
                                            { subtaskdescription: 'Take the quantity of materials  from the plumber and give to purchase manager' },
                                            { subtaskdescription: 'Ask the purchase manager to arrange the materials at site' },
                                            { subtaskdescription: 'Ask the plumber to check the materials which has been delivered' },
                                            { subtaskdescription: 'Internal washroom drawing, please confrm once with the clinet meet on site for the final head ups if needed' },
                                        ];

                                        async function PlumbingfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PlumbingfunCall();
                                    }
                                    if (newDatanew.subactivityname === 'B4 - Pipe Work below Floor Level') {

                                        const dataArranew = [
                                            { checksHeading: 'Co-Ordination and Role of Water-Proofing Agency - Pre Work ', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Sunken floor check', checksdescription: 'Sunken floor should be plastered with C.M. 1:4 with a water-proofing compound and tested for water tightness.' },
                                            { checksHeading: 'Waterproofing Toilet Floor check', checksdescription: 'The first coat of water-proofing should be done before fixing sanitary traps, in case of water closets (W.C.) and toilets.' },
                                            { checksHeading: 'Waterproofing Terrace Floor', checksdescription: 'The first coat of water-proofing and brickbat Coba coat should be done before fixing the bends of rainwater lines at the terrace level.' },
                                            { checksHeading: 'Rainwater pipe check', checksdescription: 'In the case of terrace rainwater pipes, the joint near the bend should be neatly finished with cement mortar, to prevent leakages.' },
                                            { checksHeading: 'Co-Ordination and Role of Masonry Plaster Agency - Pre Work', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Outlets and traps check', checksdescription: 'Generally, all outlets are fixed and taken out from the building face, or sleeves are provided before the external plaster, Traps should be well embedded in cement mortar at the junction.' },
                                            { checksHeading: 'Chasing check', checksdescription: 'The walls of the W.C. and bathroom should be strong enough for the chasing of grooves for concealed pipes. Masonry of these walls must be done with the correctly specified ' },
                                            { checksHeading: 'Trap joints check', checksdescription: 'All the trap joints should be properly finished to avoid any leakage problems in the future. ' },
                                            { checksHeading: 'Bend check', checksdescription: 'In the case of terrace rainwater pipes, the joint near the bend should be neatly finished with cement mortar, to prevent leakages.' },
                                            { checksHeading: 'Line and level check', checksdescription: 'Hence duct plaster must be done in perfect plumb, line, and level. engineers contractors.' },
                                            { checksHeading: 'Co-Ordination and Role of Masonry Plaster Agency - Pre Work', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Levels Check', checksdescription: 'Levels should be given by the flooring person, for the pipe fitting as per drawing ' },
                                            { checksHeading: '', checksdescription: 'This causes the pipes to choke up and may lead to repairing/replacing the pipes. To prevent this, the tile powder slurry should be collected and disposed of manually. In addition, the following points should be observed-' },
                                            { checksHeading: 'Opening check', checksdescription: 'The opening of I.W.C. should be filled with sand, gunny bags, and the top layer should be covered with a thick layer of P.O.P.' },
                                            { checksHeading: 'Nahani trap check', checksdescription: 'Nahani trap hole should be made in the flooring tile after the completion of the polishing work.' },
                                            { checksHeading: 'Co-Ordination and Role of  Electrification Agency - Pre Work ', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Concelaed pipes check', checksdescription: 'Concealed plumbing and concealed electrification work are inter-linked activities, as far as bathrooms and toilets are concerned.' },
                                            { checksHeading: 'Concelaed pipes check', checksdescription: 'Since, both activities run simultaneously, pipes should be laid very carefully.' },
                                            { checksHeading: 'Electrical conduits check', checksdescription: 'Electrical conduits should not cross the plumbing pipes, so as to prevent any short circuits.' },
                                            { checksHeading: 'Co-Ordination and Role of  Painting Agency - Pre Work ', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Painting check', checksdescription: 'Painting is the final finishing item and starts after 90% of the plumbing work is over.' },
                                            { checksHeading: 'Painting check', checksdescription: 'Painters should not wash the used paint tins in bathroom washbasins. The sediments of the paints can cause choking up of the plumbing lines' },
                                            { checksHeading: 'General Care to be Taken By Plumber', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Handling check', checksdescription: 'Plumbers themselves should exercise precautions, since handling all agencies at a time is difficult.' },
                                            { checksHeading: 'Trap check', checksdescription: 'Plumbers should seal all the traps with gunny bags and a layer of plaster of Paris at the top, to minimize the choke-up problem.' },
                                            { checksHeading: 'Seal Check', checksdescription: 'Remove these seals at the time of testing.' },
                                        ];

                                        async function PlumbingChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PlumbingChacks();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'B4 - Sunken Filling - COBA |Waste') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Assign the plumber for the work' },
                                            { subtaskdescription: 'Explain all the drawings to the plumber and ask him to carry out the work as per the drawings' },
                                            { subtaskdescription: 'Stormwater drawing' },
                                            { subtaskdescription: 'Drainage drawing' },
                                            { subtaskdescription: 'Water supply lines' },
                                            { subtaskdescription: 'Septic tank' },
                                            { subtaskdescription: 'O.H.W.T. - clear understanding of the supply system and other additioanl things if needed to be sorted with client if needed' },
                                            { subtaskdescription: 'U.G.W.T. - As per the client requirement, if connection is from society or Munical Corporation then how they want ki water is to be taken to overhead' },
                                            { subtaskdescription: 'Terrace level distribution - water slope on the terrace, Pipe, at the level of floor in case if the flooring is not done till the time, Flooring level is to be mention ' },
                                            { subtaskdescription: 'Internal plumbing work details' },
                                            { subtaskdescription: 'Swimming pool (if provided), details regarding plumbing requirements/filtration plant' },
                                            { subtaskdescription: 'Ask the Plumber to have a initial review and check if any interdepencies occur' },
                                            { subtaskdescription: 'Ask the Plumber to clear the interdepencies and coordinate with the other agencies' },
                                            { subtaskdescription: 'Inform the Plumber not to cut beam or column' },
                                            { subtaskdescription: 'Indicate the plumbing lines ie, sanitary and drainage line to the plumber' },
                                            { subtaskdescription: 'Take the quantity of materials  from the plumber and give to purchase manager' },
                                            { subtaskdescription: 'Ask the purchase manager to arrange the materials at site' },
                                            { subtaskdescription: 'Ask the plumber to check the materials which has been delivered' },
                                            { subtaskdescription: 'Internal washroom drawing, please confrm once with the clinet meet on site for the final head ups if needed' },
                                        ];

                                        async function PlumbingfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PlumbingfunCall();
                                    }
                                    if (newDatanew.subactivityname === 'B4 - Sunken Filling - COBA |Waste') {

                                        const dataArranew = [
                                            { checksHeading: 'Co-Ordination and Role of Water-Proofing Agency - Pre Work ', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Sunken floor check', checksdescription: 'Sunken floor should be plastered with C.M. 1:4 with a water-proofing compound and tested for water tightness.' },
                                            { checksHeading: 'Waterproofing Toilet Floor check', checksdescription: 'The first coat of water-proofing should be done before fixing sanitary traps, in case of water closets (W.C.) and toilets.' },
                                            { checksHeading: 'Waterproofing Terrace Floor', checksdescription: 'The first coat of water-proofing and brickbat Coba coat should be done before fixing the bends of rainwater lines at the terrace level.' },
                                            { checksHeading: 'Rainwater pipe check', checksdescription: 'In the case of terrace rainwater pipes, the joint near the bend should be neatly finished with cement mortar, to prevent leakages.' },
                                            { checksHeading: 'Co-Ordination and Role of Masonry Plaster Agency - Pre Work', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Outlets and traps check', checksdescription: 'Generally, all outlets are fixed and taken out from the building face, or sleeves are provided before the external plaster, Traps should be well embedded in cement mortar at the junction.' },
                                            { checksHeading: 'Chasing check', checksdescription: 'The walls of the W.C. and bathroom should be strong enough for the chasing of grooves for concealed pipes. Masonry of these walls must be done with the correctly specified ' },
                                            { checksHeading: 'Trap joints check', checksdescription: 'All the trap joints should be properly finished to avoid any leakage problems in the future. ' },
                                            { checksHeading: 'Bend check', checksdescription: 'In the case of terrace rainwater pipes, the joint near the bend should be neatly finished with cement mortar, to prevent leakages.' },
                                            { checksHeading: 'Line and level check', checksdescription: 'Hence duct plaster must be done in perfect plumb, line, and level. engineers contractors.' },
                                            { checksHeading: 'Co-Ordination and Role of Masonry Plaster Agency - Pre Work', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Levels Check', checksdescription: 'Levels should be given by the flooring person, for the pipe fitting as per drawing ' },
                                            { checksHeading: '', checksdescription: 'This causes the pipes to choke up and may lead to repairing/replacing the pipes. To prevent this, the tile powder slurry should be collected and disposed of manually. In addition, the following points should be observed-' },
                                            { checksHeading: 'Opening check', checksdescription: 'The opening of I.W.C. should be filled with sand, gunny bags, and the top layer should be covered with a thick layer of P.O.P.' },
                                            { checksHeading: 'Nahani trap check', checksdescription: 'Nahani trap hole should be made in the flooring tile after the completion of the polishing work.' },
                                            { checksHeading: 'Co-Ordination and Role of  Electrification Agency - Pre Work ', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Concelaed pipes check', checksdescription: 'Concealed plumbing and concealed electrification work are inter-linked activities, as far as bathrooms and toilets are concerned.' },
                                            { checksHeading: 'Concelaed pipes check', checksdescription: 'Since, both activities run simultaneously, pipes should be laid very carefully.' },
                                            { checksHeading: 'Electrical conduits check', checksdescription: 'Electrical conduits should not cross the plumbing pipes, so as to prevent any short circuits.' },
                                            { checksHeading: 'Co-Ordination and Role of  Painting Agency - Pre Work ', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Painting check', checksdescription: 'Painting is the final finishing item and starts after 90% of the plumbing work is over.' },
                                            { checksHeading: 'Painting check', checksdescription: 'Painters should not wash the used paint tins in bathroom washbasins. The sediments of the paints can cause choking up of the plumbing lines' },
                                            { checksHeading: 'General Care to be Taken By Plumber', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Handling check', checksdescription: 'Plumbers themselves should exercise precautions, since handling all agencies at a time is difficult.' },
                                            { checksHeading: 'Trap check', checksdescription: 'Plumbers should seal all the traps with gunny bags and a layer of plaster of Paris at the top, to minimize the choke-up problem.' },
                                            { checksHeading: 'Seal Check', checksdescription: 'Remove these seals at the time of testing.' },
                                        ];

                                        async function PlumbingChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PlumbingChacks();
                                    }

                                    if (newDatanew.subactivityname === 'GF - Pipe Work below Floor Level') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Assign the plumber for the work' },
                                            { subtaskdescription: 'Explain all the drawings to the plumber and ask him to carry out the work as per the drawings' },
                                            { subtaskdescription: 'Stormwater drawing' },
                                            { subtaskdescription: 'Drainage drawing' },
                                            { subtaskdescription: 'Water supply lines' },
                                            { subtaskdescription: 'Septic tank' },
                                            { subtaskdescription: 'O.H.W.T. - clear understanding of the supply system and other additioanl things if needed to be sorted with client if needed' },
                                            { subtaskdescription: 'U.G.W.T. - As per the client requirement, if connection is from society or Munical Corporation then how they want ki water is to be taken to overhead' },
                                            { subtaskdescription: 'Terrace level distribution - water slope on the terrace, Pipe, at the level of floor in case if the flooring is not done till the time, Flooring level is to be mention ' },
                                            { subtaskdescription: 'Internal plumbing work details' },
                                            { subtaskdescription: 'Swimming pool (if provided), details regarding plumbing requirements/filtration plant' },
                                            { subtaskdescription: 'Ask the Plumber to have a initial review and check if any interdepencies occur' },
                                            { subtaskdescription: 'Ask the Plumber to clear the interdepencies and coordinate with the other agencies' },
                                            { subtaskdescription: 'Inform the Plumber not to cut beam or column' },
                                            { subtaskdescription: 'Indicate the plumbing lines ie, sanitary and drainage line to the plumber' },
                                            { subtaskdescription: 'Take the quantity of materials  from the plumber and give to purchase manager' },
                                            { subtaskdescription: 'Ask the purchase manager to arrange the materials at site' },
                                            { subtaskdescription: 'Ask the plumber to check the materials which has been delivered' },
                                            { subtaskdescription: 'Internal washroom drawing, please confrm once with the clinet meet on site for the final head ups if needed' },
                                        ];

                                        async function PlumbingfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PlumbingfunCall();
                                    }

                                    if (newDatanew.subactivityname === "GF - Pipe Work below Floor Level") {

                                        const dataArranew = [
                                            { materailname: '100 MM Pipe', materailquantity: materlID.GFPW_GFPipeWorkBelowFloorLevelPipe100MMQuantity, materailUnit: 'RUFT' },
                                            { materailname: '75 MM Pipe', materailquantity: materlID.GFPW_GFPipeWorkBelowFloorLevelPipe75MMQuantity, materailUnit: 'RUFT' },
                                            { materailname: 'Solent', materailquantity: materlID.GFPW_GFPipeWorkBelowFloorLevelSolentQuantity, materailUnit: 'Container' },
                                            { materailname: 'Traps', materailquantity: materlID.GFPW_GFPipeWorkBelowFloorLevelTrapsQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Connector', materailquantity: materlID.GFPW_GFPipeWorkBelowFloorLevelConnectorQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Portland Cement', materailquantity: materlID.GFPW_GFPipeWorkBelowFloorLevelPortlandCementQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Course Sand', materailquantity: materlID.GFPW_GFPipeWorkBelowFloorLevelCourseSandQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Stone Aggregate (20 MM)', materailquantity: materlID.GFPW_GFPipeWorkBelowFloorLevelStoneAggregate20MMQuantity, materailUnit: 'NOS.' },


                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }



                                    if (newDatanew.subactivityname === "GF - Sunken Filling - COBA |Waste") {

                                        const dataArranew = [
                                            { materailname: 'Brick Bats', materailquantity: materlID.GFPW_GFSunkenFillingCOBAWasteBrickBatsQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Cement', materailquantity: materlID.GFPW_GFSunkenFillingCOBAWasteCementQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Sand', materailquantity: materlID.GFPW_GFSunkenFillingCOBAWasteSandQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Waterproofing', materailquantity: materlID.GFPW_GFSunkenFillingCOBAWasteWaterproofingQuantity, materailUnit: 'KG' },
                                            { materailname: 'Filling - Malba', materailquantity: materlID.GFPW_GFSunkenFillingCOBAWasteFillingMalbaQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Filling  - Cement', materailquantity: materlID.GFPW_GFSunkenFillingCOBAWasteFillingCementQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Filling  - Ploymer Cementious Coat', materailquantity: materlID.GFPW_GFSunkenFillingCOBAWasteFillingPolymerCementiousCoatQuantity, materailUnit: 'SQFT' },

                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === "GF -Wall Conduting + Internal Fittings") {

                                        const dataArranew = [
                                            { materailname: '20 MM 11 SDR Pipe', materailquantity: materlID.GFPW_GFWallConduitingInternalFittingsPipe20MM11SDRQuantity, materailUnit: 'NOS.' },
                                            { materailname: '32 MM 11 SDR Pipe', materailquantity: materlID.GFPW_GFWallConduitingInternalFittingsPipe32MM11SDRQuantity, materailUnit: 'NOS.' },
                                            { materailname: '40 MM 11 SDR Pipe', materailquantity: materlID.GFPW_GFWallConduitingInternalFittingsPipe40MM11SDRQuantity, materailUnit: 'NOS.' },
                                            { materailname: '110 MM 11 SDR Pipe', materailquantity: materlID.GFPW_GFWallConduitingInternalFittingsPipe110MM11SDRQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Elbow - 20 MM', materailquantity: materlID.GFPW_GFWallConduitingInternalFittingsElbow20MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Elbow - 32 MM', materailquantity: materlID.GFPW_GFWallConduitingInternalFittingsElbow32MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Elbow - 40 MM', materailquantity: materlID.GFPW_GFWallConduitingInternalFittingsElbow40MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Elbow - 110 MM', materailquantity: materlID.GFPW_GFWallConduitingInternalFittingsElbow110MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Shu Elbow - 20 MM', materailquantity: materlID.GFPW_GFWallConduitingInternalFittingsShuElbow20MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Shu Elbow - 32 MM', materailquantity: materlID.GFPW_GFWallConduitingInternalFittingsShuElbow32MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Shu Elbow - 40 MM', materailquantity: materlID.GFPW_GFWallConduitingInternalFittingsShuElbow40MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Shu Elbow - 110 MM', materailquantity: materlID.GFPW_GFWallConduitingInternalFittingsShuElbow110MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Tee - 32 MM', materailquantity: materlID.GFPW_GFWallConduitingInternalFittingsTee32MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Tee - 110 MM', materailquantity: materlID.GFPW_GFWallConduitingInternalFittingsTee110MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Door Tee - 110 MM', materailquantity: materlID.GFPW_GFWallConduitingInternalFittingsDoorTee110MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Coupler - 20 MM', materailquantity: materlID.GFPW_GFWallConduitingInternalFittingsCoupler20MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Coupler - 32 MM', materailquantity: materlID.GFPW_GFWallConduitingInternalFittingsCoupler32MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Union - 20 MM', materailquantity: materlID.GFPW_GFWallConduitingInternalFittingsUnion20MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Union - 32 MM', materailquantity: materlID.GFPW_GFWallConduitingInternalFittingsUnion32MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Step over bend - 20 MM', materailquantity: materlID.GFPW_GFWallConduitingInternalFittingsStepOverBend20MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Tank Nippal Plain - 32 MM', materailquantity: materlID.GFPW_GFWallConduitingInternalFittingsTankNippalPlain32MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Endcap - 20 MM', materailquantity: materlID.GFPW_GFWallConduitingInternalFittingsEndcap20MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Endcap - 32 MM', materailquantity: materlID.GFPW_GFWallConduitingInternalFittingsEndcap32MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Endcap - 40 MM', materailquantity: materlID.GFPW_GFWallConduitingInternalFittingsEndcap40MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Endcap - 110 MM', materailquantity: materlID.GFPW_GFWallConduitingInternalFittingsEndcap110MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Ball Valve - 20 MM', materailquantity: materlID.GFPW_GFWallConduitingInternalFittingsBallValve20MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Ball Valve - 32 MM', materailquantity: materlID.GFPW_GFWallConduitingInternalFittingsBallValve32MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'NRV - 32 MM', materailquantity: materlID.GFPW_GFWallConduitingInternalFittingsNRV32MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Single Y (Tee) - 110 MM', materailquantity: materlID.GFPW_GFWallConduitingInternalFittingsSingleYTee110MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Nahani Trap -  - 110 MM', materailquantity: materlID.GFPW_GFWallConduitingInternalFittingsNahaniTrap110MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Vent Cowl  - 110 MM', materailquantity: materlID.GFPW_GFWallConduitingInternalFittingsVentCowl110MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Brass Elbow - 20 MM (20 x 15)', materailquantity: materlID.GFPW_GFWallConduitingInternalFittingsBrassElbow20MM2015Quantity, materailUnit: 'NOS.' },
                                            { materailname: 'Brass Tee 20 MM - (20 x 15)', materailquantity: materlID.GFPW_GFWallConduitingInternalFittingsBrassTee20MM2015Quantity, materailUnit: 'NOS.' },
                                            { materailname: 'MTA 20 MM - (20 x 15)', materailquantity: materlID.GFPW_GFWallConduitingInternalFittingsMTA20MM2015Quantity, materailUnit: 'NOS.' },
                                            { materailname: 'FTA 20 MM - (20 x 15)', materailquantity: materlID.GFPW_GFWallConduitingInternalFittingsFTA20MM2015Quantity, materailUnit: 'NOS.' },
                                            { materailname: 'Bush - 32 x 20', materailquantity: materlID.GFPW_GFWallConduitingInternalFittingsBush32x20Quantity, materailUnit: 'NOS.' },
                                            { materailname: 'P Trap - 125 x 110', materailquantity: materlID.GFPW_GFWallConduitingInternalFittingsPTrap125x110Quantity, materailUnit: 'NOS.' },
                                            { materailname: 'P Trap - 110 x 110', materailquantity: materlID.GFPW_GFWallConduitingInternalFittingsPTrap110x110Quantity, materailUnit: 'NOS.' },
                                            { materailname: 'Solvent - 118 ML', materailquantity: materlID.GFPW_GFWallConduitingInternalFittingsSolvent118MLQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Solvent - 237 ML', materailquantity: materlID.GFPW_GFWallConduitingInternalFittingsSolvent237MLQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Solvent - 250 ML', materailquantity: materlID.GFPW_GFWallConduitingInternalFittingsSolvent250MLQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Rubber Lubricants - 250 GM', materailquantity: materlID.GFPW_GFWallConduitingInternalFittingsRubberLubricants250GMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Long Plug - 15 MM', materailquantity: materlID.GFPW_GFWallConduitingInternalFittingsLongPlug15MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Tefloe Tap', materailquantity: materlID.GFPW_GFWallConduitingInternalFittingsTefloeTapQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Concealed Tank', materailquantity: materlID.GFPW_GFWallConduitingInternalFittingsConcealedTankQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Wash Basin Tap Tpye', materailquantity: materlID.GFPW_GFWallConduitingInternalFittingsWashBasinTapTypeQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Diverter', materailquantity: materlID.GFPW_GFWallConduitingInternalFittingsDiverterQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Thermostat', materailquantity: materlID.GFPW_GFWallConduitingInternalFittingsThermostatQuantity, materailUnit: 'NOS.' },

                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === "GF -Wall Conduting + Internal Fittings") {

                                        const dataArranew = [
                                            {},
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Lay. + Hei.', NormalHeadingThree: 'Con. + Pipe', NormalHeadingfoure: 'Fit. + Cover' },
                                            {},
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }


                                    if (newDatanew.subactivityname === "GF -Waterproofing") {

                                        const dataArranew = [
                                            { materailname: 'Fiber Reinforced Elastomeric Liquid', materailquantity: materlID.GFPW_GFWaterproofingFiberReinforcedElastomericLiquidQuantity, materailUnit: 'Liter' },
                                            { materailname: 'Polymer for internal Wall', materailquantity: materlID.GFPW_GFWaterproofingPolymerForInternalWallQuantity, materailUnit: 'KG' },

                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }

                                    if (newDatanew.subactivityname === 'GF - Pipe Work below Floor Level') {

                                        const dataArranew = [
                                            { checksHeading: 'Co-Ordination and Role of Water-Proofing Agency - Pre Work ', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Sunken floor check', checksdescription: 'Sunken floor should be plastered with C.M. 1:4 with a water-proofing compound and tested for water tightness.' },
                                            { checksHeading: 'Waterproofing Toilet Floor check', checksdescription: 'The first coat of water-proofing should be done before fixing sanitary traps, in case of water closets (W.C.) and toilets.' },
                                            { checksHeading: 'Waterproofing Terrace Floor', checksdescription: 'The first coat of water-proofing and brickbat Coba coat should be done before fixing the bends of rainwater lines at the terrace level.' },
                                            { checksHeading: 'Rainwater pipe check', checksdescription: 'In the case of terrace rainwater pipes, the joint near the bend should be neatly finished with cement mortar, to prevent leakages.' },
                                            { checksHeading: 'Co-Ordination and Role of Masonry Plaster Agency - Pre Work', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Outlets and traps check', checksdescription: 'Generally, all outlets are fixed and taken out from the building face, or sleeves are provided before the external plaster, Traps should be well embedded in cement mortar at the junction.' },
                                            { checksHeading: 'Chasing check', checksdescription: 'The walls of the W.C. and bathroom should be strong enough for the chasing of grooves for concealed pipes. Masonry of these walls must be done with the correctly specified ' },
                                            { checksHeading: 'Trap joints check', checksdescription: 'All the trap joints should be properly finished to avoid any leakage problems in the future. ' },
                                            { checksHeading: 'Bend check', checksdescription: 'In the case of terrace rainwater pipes, the joint near the bend should be neatly finished with cement mortar, to prevent leakages.' },
                                            { checksHeading: 'Line and level check', checksdescription: 'Hence duct plaster must be done in perfect plumb, line, and level. engineers contractors.' },
                                            { checksHeading: 'Co-Ordination and Role of Masonry Plaster Agency - Pre Work', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Levels Check', checksdescription: 'Levels should be given by the flooring person, for the pipe fitting as per drawing ' },
                                            { checksHeading: '', checksdescription: 'This causes the pipes to choke up and may lead to repairing/replacing the pipes. To prevent this, the tile powder slurry should be collected and disposed of manually. In addition, the following points should be observed-' },
                                            { checksHeading: 'Opening check', checksdescription: 'The opening of I.W.C. should be filled with sand, gunny bags, and the top layer should be covered with a thick layer of P.O.P.' },
                                            { checksHeading: 'Nahani trap check', checksdescription: 'Nahani trap hole should be made in the flooring tile after the completion of the polishing work.' },
                                            { checksHeading: 'Co-Ordination and Role of  Electrification Agency - Pre Work ', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Concelaed pipes check', checksdescription: 'Concealed plumbing and concealed electrification work are inter-linked activities, as far as bathrooms and toilets are concerned.' },
                                            { checksHeading: 'Concelaed pipes check', checksdescription: 'Since, both activities run simultaneously, pipes should be laid very carefully.' },
                                            { checksHeading: 'Electrical conduits check', checksdescription: 'Electrical conduits should not cross the plumbing pipes, so as to prevent any short circuits.' },
                                            { checksHeading: 'Co-Ordination and Role of  Painting Agency - Pre Work ', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Painting check', checksdescription: 'Painting is the final finishing item and starts after 90% of the plumbing work is over.' },
                                            { checksHeading: 'Painting check', checksdescription: 'Painters should not wash the used paint tins in bathroom washbasins. The sediments of the paints can cause choking up of the plumbing lines' },
                                            { checksHeading: 'General Care to be Taken By Plumber', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Handling check', checksdescription: 'Plumbers themselves should exercise precautions, since handling all agencies at a time is difficult.' },
                                            { checksHeading: 'Trap check', checksdescription: 'Plumbers should seal all the traps with gunny bags and a layer of plaster of Paris at the top, to minimize the choke-up problem.' },
                                            { checksHeading: 'Seal Check', checksdescription: 'Remove these seals at the time of testing.' },
                                        ];

                                        async function PlumbingChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PlumbingChacks();
                                    }

                                    if (newDatanew.subactivityname === "GF - Pipe Work below Floor Level") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Layout', headingforshortingTwo: 'Pipeline' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Layout', NormalHeadingThree: 'Trap Locat.', NormalHeadingfoure: 'Base Prep.' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Pipe Laying', NormalHeadingThree: 'Covering', NormalHeadingfoure: 'Curing' },
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'GF - Sunken Filling - COBA |Waste') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Assign the plumber for the work' },
                                            { subtaskdescription: 'Explain all the drawings to the plumber and ask him to carry out the work as per the drawings' },
                                            { subtaskdescription: 'Stormwater drawing' },
                                            { subtaskdescription: 'Drainage drawing' },
                                            { subtaskdescription: 'Water supply lines' },
                                            { subtaskdescription: 'Septic tank' },
                                            { subtaskdescription: 'O.H.W.T. - clear understanding of the supply system and other additioanl things if needed to be sorted with client if needed' },
                                            { subtaskdescription: 'U.G.W.T. - As per the client requirement, if connection is from society or Munical Corporation then how they want ki water is to be taken to overhead' },
                                            { subtaskdescription: 'Terrace level distribution - water slope on the terrace, Pipe, at the level of floor in case if the flooring is not done till the time, Flooring level is to be mention ' },
                                            { subtaskdescription: 'Internal plumbing work details' },
                                            { subtaskdescription: 'Swimming pool (if provided), details regarding plumbing requirements/filtration plant' },
                                            { subtaskdescription: 'Ask the Plumber to have a initial review and check if any interdepencies occur' },
                                            { subtaskdescription: 'Ask the Plumber to clear the interdepencies and coordinate with the other agencies' },
                                            { subtaskdescription: 'Inform the Plumber not to cut beam or column' },
                                            { subtaskdescription: 'Indicate the plumbing lines ie, sanitary and drainage line to the plumber' },
                                            { subtaskdescription: 'Take the quantity of materials  from the plumber and give to purchase manager' },
                                            { subtaskdescription: 'Ask the purchase manager to arrange the materials at site' },
                                            { subtaskdescription: 'Ask the plumber to check the materials which has been delivered' },
                                            { subtaskdescription: 'Internal washroom drawing, please confrm once with the clinet meet on site for the final head ups if needed' },
                                        ];

                                        async function PlumbingfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PlumbingfunCall();
                                    }
                                    if (newDatanew.subactivityname === 'GF - Sunken Filling - COBA |Waste') {

                                        const dataArranew = [
                                            { checksHeading: 'Co-Ordination and Role of Water-Proofing Agency - Pre Work ', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Sunken floor check', checksdescription: 'Sunken floor should be plastered with C.M. 1:4 with a water-proofing compound and tested for water tightness.' },
                                            { checksHeading: 'Waterproofing Toilet Floor check', checksdescription: 'The first coat of water-proofing should be done before fixing sanitary traps, in case of water closets (W.C.) and toilets.' },
                                            { checksHeading: 'Waterproofing Terrace Floor', checksdescription: 'The first coat of water-proofing and brickbat Coba coat should be done before fixing the bends of rainwater lines at the terrace level.' },
                                            { checksHeading: 'Rainwater pipe check', checksdescription: 'In the case of terrace rainwater pipes, the joint near the bend should be neatly finished with cement mortar, to prevent leakages.' },
                                            { checksHeading: 'Co-Ordination and Role of Masonry Plaster Agency - Pre Work', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Outlets and traps check', checksdescription: 'Generally, all outlets are fixed and taken out from the building face, or sleeves are provided before the external plaster, Traps should be well embedded in cement mortar at the junction.' },
                                            { checksHeading: 'Chasing check', checksdescription: 'The walls of the W.C. and bathroom should be strong enough for the chasing of grooves for concealed pipes. Masonry of these walls must be done with the correctly specified ' },
                                            { checksHeading: 'Trap joints check', checksdescription: 'All the trap joints should be properly finished to avoid any leakage problems in the future. ' },
                                            { checksHeading: 'Bend check', checksdescription: 'In the case of terrace rainwater pipes, the joint near the bend should be neatly finished with cement mortar, to prevent leakages.' },
                                            { checksHeading: 'Line and level check', checksdescription: 'Hence duct plaster must be done in perfect plumb, line, and level. engineers contractors.' },
                                            { checksHeading: 'Co-Ordination and Role of Masonry Plaster Agency - Pre Work', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Levels Check', checksdescription: 'Levels should be given by the flooring person, for the pipe fitting as per drawing ' },
                                            { checksHeading: '', checksdescription: 'This causes the pipes to choke up and may lead to repairing/replacing the pipes. To prevent this, the tile powder slurry should be collected and disposed of manually. In addition, the following points should be observed-' },
                                            { checksHeading: 'Opening check', checksdescription: 'The opening of I.W.C. should be filled with sand, gunny bags, and the top layer should be covered with a thick layer of P.O.P.' },
                                            { checksHeading: 'Nahani trap check', checksdescription: 'Nahani trap hole should be made in the flooring tile after the completion of the polishing work.' },
                                            { checksHeading: 'Co-Ordination and Role of  Electrification Agency - Pre Work ', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Concelaed pipes check', checksdescription: 'Concealed plumbing and concealed electrification work are inter-linked activities, as far as bathrooms and toilets are concerned.' },
                                            { checksHeading: 'Concelaed pipes check', checksdescription: 'Since, both activities run simultaneously, pipes should be laid very carefully.' },
                                            { checksHeading: 'Electrical conduits check', checksdescription: 'Electrical conduits should not cross the plumbing pipes, so as to prevent any short circuits.' },
                                            { checksHeading: 'Co-Ordination and Role of  Painting Agency - Pre Work ', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Painting check', checksdescription: 'Painting is the final finishing item and starts after 90% of the plumbing work is over.' },
                                            { checksHeading: 'Painting check', checksdescription: 'Painters should not wash the used paint tins in bathroom washbasins. The sediments of the paints can cause choking up of the plumbing lines' },
                                            { checksHeading: 'General Care to be Taken By Plumber', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Handling check', checksdescription: 'Plumbers themselves should exercise precautions, since handling all agencies at a time is difficult.' },
                                            { checksHeading: 'Trap check', checksdescription: 'Plumbers should seal all the traps with gunny bags and a layer of plaster of Paris at the top, to minimize the choke-up problem.' },
                                            { checksHeading: 'Seal Check', checksdescription: 'Remove these seals at the time of testing.' },
                                        ];

                                        async function PlumbingChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PlumbingChacks();
                                    }

                                    if (newDatanew.subactivityname === 'FF - Pipe Work below Floor Level') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Assign the plumber for the work' },
                                            { subtaskdescription: 'Explain all the drawings to the plumber and ask him to carry out the work as per the drawings' },
                                            { subtaskdescription: 'Stormwater drawing' },
                                            { subtaskdescription: 'Drainage drawing' },
                                            { subtaskdescription: 'Water supply lines' },
                                            { subtaskdescription: 'Septic tank' },
                                            { subtaskdescription: 'O.H.W.T. - clear understanding of the supply system and other additioanl things if needed to be sorted with client if needed' },
                                            { subtaskdescription: 'U.G.W.T. - As per the client requirement, if connection is from society or Munical Corporation then how they want ki water is to be taken to overhead' },
                                            { subtaskdescription: 'Terrace level distribution - water slope on the terrace, Pipe, at the level of floor in case if the flooring is not done till the time, Flooring level is to be mention ' },
                                            { subtaskdescription: 'Internal plumbing work details' },
                                            { subtaskdescription: 'Swimming pool (if provided), details regarding plumbing requirements/filtration plant' },
                                            { subtaskdescription: 'Ask the Plumber to have a initial review and check if any interdepencies occur' },
                                            { subtaskdescription: 'Ask the Plumber to clear the interdepencies and coordinate with the other agencies' },
                                            { subtaskdescription: 'Inform the Plumber not to cut beam or column' },
                                            { subtaskdescription: 'Indicate the plumbing lines ie, sanitary and drainage line to the plumber' },
                                            { subtaskdescription: 'Take the quantity of materials  from the plumber and give to purchase manager' },
                                            { subtaskdescription: 'Ask the purchase manager to arrange the materials at site' },
                                            { subtaskdescription: 'Ask the plumber to check the materials which has been delivered' },
                                            { subtaskdescription: 'Internal washroom drawing, please confrm once with the clinet meet on site for the final head ups if needed' },
                                        ];

                                        async function PlumbingfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PlumbingfunCall();
                                    }



                                    if (newDatanew.subactivityname === "FF - Pipe Work below Floor Level") {

                                        const dataArranew = [
                                            { materailname: '100 MM Pipe', materailquantity: materlID.FFPW_FFPipeWorkBelowFloorLevelPipe100MMQuantity, materailUnit: 'RUFT' },
                                            { materailname: '75 MM Pipe', materailquantity: materlID.FFPW_FFPipeWorkBelowFloorLevelPipe75MMQuantity, materailUnit: 'RUFT' },
                                            { materailname: 'Solent', materailquantity: materlID.FFPW_FFPipeWorkBelowFloorLevelSolentQuantity, materailUnit: 'Container' },
                                            { materailname: 'Traps', materailquantity: materlID.FFPW_FFPipeWorkBelowFloorLevelTrapsQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Connector', materailquantity: materlID.FFPW_FFPipeWorkBelowFloorLevelConnectorQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Portland Cement', materailquantity: materlID.FFPW_FFPipeWorkBelowFloorLevelPortlandCementQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Course Sand', materailquantity: materlID.FFPW_FFPipeWorkBelowFloorLevelCourseSandQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Stone Aggregate (20 MM)', materailquantity: materlID.FFPW_FFPipeWorkBelowFloorLevelStoneAggregate20MMQuantity, materailUnit: 'NOS.' },


                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }



                                    if (newDatanew.subactivityname === "FF - Sunken Filling - COBA |Waste") {

                                        const dataArranew = [
                                            { materailname: 'Brick Bats', materailquantity: materlID.FFPW_FFSunkenFillingCOBAWasteBrickBatsQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Cement', materailquantity: materlID.FFPW_FFSunkenFillingCOBAWasteCementQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Sand', materailquantity: materlID.FFPW_FFSunkenFillingCOBAWasteSandQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Waterproofing', materailquantity: materlID.FFPW_FFSunkenFillingCOBAWasteWaterproofingQuantity, materailUnit: 'KG' },
                                            { materailname: 'Filling - Malba', materailquantity: materlID.FFPW_FFSunkenFillingCOBAWasteFillingMalbaQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Filling  - Cement', materailquantity: materlID.FFPW_FFSunkenFillingCOBAWasteFillingCementQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Filling  - Ploymer Cementious Coat', materailquantity: materlID.FFPW_FFSunkenFillingCOBAWasteFillingPolymerCementiousCoatQuantity, materailUnit: 'SQFT' },

                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === "FF -Wall Conduting + Internal Fittings") {

                                        const dataArranew = [
                                            { materailname: '20 MM 11 SDR Pipe', materailquantity: materlID.FFPW_FFWallConduitingInternalFittingsPipe20MM11SDRQuantity, materailUnit: 'NOS.' },
                                            { materailname: '32 MM 11 SDR Pipe', materailquantity: materlID.FFPW_FFWallConduitingInternalFittingsPipe32MM11SDRQuantity, materailUnit: 'NOS.' },
                                            { materailname: '40 MM 11 SDR Pipe', materailquantity: materlID.FFPW_FFWallConduitingInternalFittingsPipe40MM11SDRQuantity, materailUnit: 'NOS.' },
                                            { materailname: '110 MM 11 SDR Pipe', materailquantity: materlID.FFPW_FFWallConduitingInternalFittingsPipe110MM11SDRQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Elbow - 20 MM', materailquantity: materlID.FFPW_FFWallConduitingInternalFittingsElbow20MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Elbow - 32 MM', materailquantity: materlID.FFPW_FFWallConduitingInternalFittingsElbow32MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Elbow - 40 MM', materailquantity: materlID.FFPW_FFWallConduitingInternalFittingsElbow40MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Elbow - 110 MM', materailquantity: materlID.FFPW_FFWallConduitingInternalFittingsElbow110MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Shu Elbow - 20 MM', materailquantity: materlID.FFPW_FFWallConduitingInternalFittingsShuElbow20MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Shu Elbow - 32 MM', materailquantity: materlID.FFPW_FFWallConduitingInternalFittingsShuElbow32MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Shu Elbow - 40 MM', materailquantity: materlID.FFPW_FFWallConduitingInternalFittingsShuElbow40MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Shu Elbow - 110 MM', materailquantity: materlID.FFPW_FFWallConduitingInternalFittingsShuElbow110MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Tee - 32 MM', materailquantity: materlID.FFPW_FFWallConduitingInternalFittingsTee32MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Tee - 110 MM', materailquantity: materlID.FFPW_FFWallConduitingInternalFittingsTee110MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Door Tee - 110 MM', materailquantity: materlID.FFPW_FFWallConduitingInternalFittingsDoorTee110MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Coupler - 20 MM', materailquantity: materlID.FFPW_FFWallConduitingInternalFittingsCoupler20MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Coupler - 32 MM', materailquantity: materlID.FFPW_FFWallConduitingInternalFittingsCoupler32MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Union - 20 MM', materailquantity: materlID.FFPW_FFWallConduitingInternalFittingsUnion20MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Union - 32 MM', materailquantity: materlID.FFPW_FFWallConduitingInternalFittingsUnion32MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Step over bend - 20 MM', materailquantity: materlID.FFPW_FFWallConduitingInternalFittingsStepOverBend20MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Tank Nippal Plain - 32 MM', materailquantity: materlID.FFPW_FFWallConduitingInternalFittingsTankNippalPlain32MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Endcap - 20 MM', materailquantity: materlID.FFPW_FFWallConduitingInternalFittingsEndcap20MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Endcap - 32 MM', materailquantity: materlID.FFPW_FFWallConduitingInternalFittingsEndcap32MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Endcap - 40 MM', materailquantity: materlID.FFPW_FFWallConduitingInternalFittingsEndcap40MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Endcap - 110 MM', materailquantity: materlID.FFPW_FFWallConduitingInternalFittingsEndcap110MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Ball Valve - 20 MM', materailquantity: materlID.FFPW_FFWallConduitingInternalFittingsBallValve20MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Ball Valve - 32 MM', materailquantity: materlID.FFPW_FFWallConduitingInternalFittingsBallValve32MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'NRV - 32 MM', materailquantity: materlID.FFPW_FFWallConduitingInternalFittingsNRV32MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Single Y (Tee) - 110 MM', materailquantity: materlID.FFPW_FFWallConduitingInternalFittingsSingleYTee110MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Nahani Trap -  - 110 MM', materailquantity: materlID.FFPW_FFWallConduitingInternalFittingsNahaniTrap110MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Vent Cowl  - 110 MM', materailquantity: materlID.FFPW_FFWallConduitingInternalFittingsVentCowl110MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Brass Elbow - 20 MM (20 x 15)', materailquantity: materlID.FFPW_FFWallConduitingInternalFittingsBrassElbow20MM2015Quantity, materailUnit: 'NOS.' },
                                            { materailname: 'Brass Tee 20 MM - (20 x 15)', materailquantity: materlID.FFPW_FFWallConduitingInternalFittingsBrassTee20MM2015Quantity, materailUnit: 'NOS.' },
                                            { materailname: 'MTA 20 MM - (20 x 15)', materailquantity: materlID.FFPW_FFPW_FFWallConduitingInternalFittingsMTA20MM2015Quantity, materailUnit: 'NOS.' },
                                            { materailname: 'FTA 20 MM - (20 x 15)', materailquantity: materlID.FFPW_FFWallConduitingInternalFittingsFTA20MM2015Quantity, materailUnit: 'NOS.' },
                                            { materailname: 'Bush - 32 x 20', materailquantity: materlID.FFPW_FFWallConduitingInternalFittingsBush32x20Quantity, materailUnit: 'NOS.' },
                                            { materailname: 'P Trap - 125 x 110', materailquantity: materlID.FFPW_FFWallConduitingInternalFittingsPTrap125x110Quantity, materailUnit: 'NOS.' },
                                            { materailname: 'P Trap - 110 x 110', materailquantity: materlID.FFPW_FFWallConduitingInternalFittingsPTrap110x110Quantity, materailUnit: 'NOS.' },
                                            { materailname: 'Solvent - 118 ML', materailquantity: materlID.FFPW_FFWallConduitingInternalFittingsSolvent118MLQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Solvent - 237 ML', materailquantity: materlID.FFPW_FFWallConduitingInternalFittingsSolvent237MLQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Solvent - 250 ML', materailquantity: materlID.FFPW_FFWallConduitingInternalFittingsSolvent250MLQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Rubber Lubricants - 250 GM', materailquantity: materlID.FFPW_FFWallConduitingInternalFittingsRubberLubricants250GMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Long Plug - 15 MM', materailquantity: materlID.FFPW_FFWallConduitingInternalFittingsLongPlug15MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Tefloe Tap', materailquantity: materlID.FFPW_FFWallConduitingInternalFittingsTefloeTapQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Concealed Tank', materailquantity: materlID.FFPW_FFWallConduitingInternalFittingsConcealedTankQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Wash Basin Tap Tpye', materailquantity: materlID.FFPW_FFWallConduitingInternalFittingsWashBasinTapTypeQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Diverter', materailquantity: materlID.FFPW_FFWallConduitingInternalFittingsDiverterQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Thermostat', materailquantity: materlID.FFPW_FFWallConduitingInternalFittingsThermostatQuantity, materailUnit: 'NOS.' },

                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === "FF -Wall Conduting + Internal Fittings") {

                                        const dataArranew = [
                                            {},
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Lay. + Hei.', NormalHeadingThree: 'Con. + Pipe', NormalHeadingfoure: 'Fit. + Cover' },
                                            {},
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }


                                    if (newDatanew.subactivityname === "FF -Waterproofing") {

                                        const dataArranew = [
                                            { materailname: 'Fiber Reinforced Elastomeric Liquid', materailquantity: materlID.FFPW_FFWaterproofingFiberReinforcedElastomericLiquidQuantity, materailUnit: 'Liter' },
                                            { materailname: 'Polymer for internal Wall', materailquantity: materlID.FFPW_FFWaterproofingPolymerForInternalWallQuantity, materailUnit: 'KG' },

                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }



                                    if (newDatanew.subactivityname === 'FF - Pipe Work below Floor Level') {

                                        const dataArranew = [
                                            { checksHeading: 'Co-Ordination and Role of Water-Proofing Agency - Pre Work ', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Sunken floor check', checksdescription: 'Sunken floor should be plastered with C.M. 1:4 with a water-proofing compound and tested for water tightness.' },
                                            { checksHeading: 'Waterproofing Toilet Floor check', checksdescription: 'The first coat of water-proofing should be done before fixing sanitary traps, in case of water closets (W.C.) and toilets.' },
                                            { checksHeading: 'Waterproofing Terrace Floor', checksdescription: 'The first coat of water-proofing and brickbat Coba coat should be done before fixing the bends of rainwater lines at the terrace level.' },
                                            { checksHeading: 'Rainwater pipe check', checksdescription: 'In the case of terrace rainwater pipes, the joint near the bend should be neatly finished with cement mortar, to prevent leakages.' },
                                            { checksHeading: 'Co-Ordination and Role of Masonry Plaster Agency - Pre Work', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Outlets and traps check', checksdescription: 'Generally, all outlets are fixed and taken out from the building face, or sleeves are provided before the external plaster, Traps should be well embedded in cement mortar at the junction.' },
                                            { checksHeading: 'Chasing check', checksdescription: 'The walls of the W.C. and bathroom should be strong enough for the chasing of grooves for concealed pipes. Masonry of these walls must be done with the correctly specified ' },
                                            { checksHeading: 'Trap joints check', checksdescription: 'All the trap joints should be properly finished to avoid any leakage problems in the future. ' },
                                            { checksHeading: 'Bend check', checksdescription: 'In the case of terrace rainwater pipes, the joint near the bend should be neatly finished with cement mortar, to prevent leakages.' },
                                            { checksHeading: 'Line and level check', checksdescription: 'Hence duct plaster must be done in perfect plumb, line, and level. engineers contractors.' },
                                            { checksHeading: 'Co-Ordination and Role of Masonry Plaster Agency - Pre Work', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Levels Check', checksdescription: 'Levels should be given by the flooring person, for the pipe fitting as per drawing ' },
                                            { checksHeading: '', checksdescription: 'This causes the pipes to choke up and may lead to repairing/replacing the pipes. To prevent this, the tile powder slurry should be collected and disposed of manually. In addition, the following points should be observed-' },
                                            { checksHeading: 'Opening check', checksdescription: 'The opening of I.W.C. should be filled with sand, gunny bags, and the top layer should be covered with a thick layer of P.O.P.' },
                                            { checksHeading: 'Nahani trap check', checksdescription: 'Nahani trap hole should be made in the flooring tile after the completion of the polishing work.' },
                                            { checksHeading: 'Co-Ordination and Role of  Electrification Agency - Pre Work ', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Concelaed pipes check', checksdescription: 'Concealed plumbing and concealed electrification work are inter-linked activities, as far as bathrooms and toilets are concerned.' },
                                            { checksHeading: 'Concelaed pipes check', checksdescription: 'Since, both activities run simultaneously, pipes should be laid very carefully.' },
                                            { checksHeading: 'Electrical conduits check', checksdescription: 'Electrical conduits should not cross the plumbing pipes, so as to prevent any short circuits.' },
                                            { checksHeading: 'Co-Ordination and Role of  Painting Agency - Pre Work ', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Painting check', checksdescription: 'Painting is the final finishing item and starts after 90% of the plumbing work is over.' },
                                            { checksHeading: 'Painting check', checksdescription: 'Painters should not wash the used paint tins in bathroom washbasins. The sediments of the paints can cause choking up of the plumbing lines' },
                                            { checksHeading: 'General Care to be Taken By Plumber', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Handling check', checksdescription: 'Plumbers themselves should exercise precautions, since handling all agencies at a time is difficult.' },
                                            { checksHeading: 'Trap check', checksdescription: 'Plumbers should seal all the traps with gunny bags and a layer of plaster of Paris at the top, to minimize the choke-up problem.' },
                                            { checksHeading: 'Seal Check', checksdescription: 'Remove these seals at the time of testing.' },
                                        ];

                                        async function PlumbingChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PlumbingChacks();
                                    }


                                    if (newDatanew.subactivityname === "FF - Pipe Work below Floor Level") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Layout', headingforshortingTwo: 'Pipeline' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Layout', NormalHeadingThree: 'Trap Locat.', NormalHeadingfoure: 'Base Prep.' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Pipe Laying', NormalHeadingThree: 'Covering', NormalHeadingfoure: 'Curing' },
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }


                                    if (newDatanew.subactivityname === 'FF - Sunken Filling - COBA |Waste') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Assign the plumber for the work' },
                                            { subtaskdescription: 'Explain all the drawings to the plumber and ask him to carry out the work as per the drawings' },
                                            { subtaskdescription: 'Stormwater drawing' },
                                            { subtaskdescription: 'Drainage drawing' },
                                            { subtaskdescription: 'Water supply lines' },
                                            { subtaskdescription: 'Septic tank' },
                                            { subtaskdescription: 'O.H.W.T. - clear understanding of the supply system and other additioanl things if needed to be sorted with client if needed' },
                                            { subtaskdescription: 'U.G.W.T. - As per the client requirement, if connection is from society or Munical Corporation then how they want ki water is to be taken to overhead' },
                                            { subtaskdescription: 'Terrace level distribution - water slope on the terrace, Pipe, at the level of floor in case if the flooring is not done till the time, Flooring level is to be mention ' },
                                            { subtaskdescription: 'Internal plumbing work details' },
                                            { subtaskdescription: 'Swimming pool (if provided), details regarding plumbing requirements/filtration plant' },
                                            { subtaskdescription: 'Ask the Plumber to have a initial review and check if any interdepencies occur' },
                                            { subtaskdescription: 'Ask the Plumber to clear the interdepencies and coordinate with the other agencies' },
                                            { subtaskdescription: 'Inform the Plumber not to cut beam or column' },
                                            { subtaskdescription: 'Indicate the plumbing lines ie, sanitary and drainage line to the plumber' },
                                            { subtaskdescription: 'Take the quantity of materials  from the plumber and give to purchase manager' },
                                            { subtaskdescription: 'Ask the purchase manager to arrange the materials at site' },
                                            { subtaskdescription: 'Ask the plumber to check the materials which has been delivered' },
                                            { subtaskdescription: 'Internal washroom drawing, please confrm once with the clinet meet on site for the final head ups if needed' },
                                        ];

                                        async function PlumbingfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PlumbingfunCall();
                                    }


                                    if (newDatanew.subactivityname === 'FF - Sunken Filling - COBA |Waste') {

                                        const dataArranew = [
                                            { checksHeading: 'Co-Ordination and Role of Water-Proofing Agency - Pre Work ', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Sunken floor check', checksdescription: 'Sunken floor should be plastered with C.M. 1:4 with a water-proofing compound and tested for water tightness.' },
                                            { checksHeading: 'Waterproofing Toilet Floor check', checksdescription: 'The first coat of water-proofing should be done before fixing sanitary traps, in case of water closets (W.C.) and toilets.' },
                                            { checksHeading: 'Waterproofing Terrace Floor', checksdescription: 'The first coat of water-proofing and brickbat Coba coat should be done before fixing the bends of rainwater lines at the terrace level.' },
                                            { checksHeading: 'Rainwater pipe check', checksdescription: 'In the case of terrace rainwater pipes, the joint near the bend should be neatly finished with cement mortar, to prevent leakages.' },
                                            { checksHeading: 'Co-Ordination and Role of Masonry Plaster Agency - Pre Work', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Outlets and traps check', checksdescription: 'Generally, all outlets are fixed and taken out from the building face, or sleeves are provided before the external plaster, Traps should be well embedded in cement mortar at the junction.' },
                                            { checksHeading: 'Chasing check', checksdescription: 'The walls of the W.C. and bathroom should be strong enough for the chasing of grooves for concealed pipes. Masonry of these walls must be done with the correctly specified ' },
                                            { checksHeading: 'Trap joints check', checksdescription: 'All the trap joints should be properly finished to avoid any leakage problems in the future. ' },
                                            { checksHeading: 'Bend check', checksdescription: 'In the case of terrace rainwater pipes, the joint near the bend should be neatly finished with cement mortar, to prevent leakages.' },
                                            { checksHeading: 'Line and level check', checksdescription: 'Hence duct plaster must be done in perfect plumb, line, and level. engineers contractors.' },
                                            { checksHeading: 'Co-Ordination and Role of Masonry Plaster Agency - Pre Work', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Levels Check', checksdescription: 'Levels should be given by the flooring person, for the pipe fitting as per drawing ' },
                                            { checksHeading: '', checksdescription: 'This causes the pipes to choke up and may lead to repairing/replacing the pipes. To prevent this, the tile powder slurry should be collected and disposed of manually. In addition, the following points should be observed-' },
                                            { checksHeading: 'Opening check', checksdescription: 'The opening of I.W.C. should be filled with sand, gunny bags, and the top layer should be covered with a thick layer of P.O.P.' },
                                            { checksHeading: 'Nahani trap check', checksdescription: 'Nahani trap hole should be made in the flooring tile after the completion of the polishing work.' },
                                            { checksHeading: 'Co-Ordination and Role of  Electrification Agency - Pre Work ', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Concelaed pipes check', checksdescription: 'Concealed plumbing and concealed electrification work are inter-linked activities, as far as bathrooms and toilets are concerned.' },
                                            { checksHeading: 'Concelaed pipes check', checksdescription: 'Since, both activities run simultaneously, pipes should be laid very carefully.' },
                                            { checksHeading: 'Electrical conduits check', checksdescription: 'Electrical conduits should not cross the plumbing pipes, so as to prevent any short circuits.' },
                                            { checksHeading: 'Co-Ordination and Role of  Painting Agency - Pre Work ', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Painting check', checksdescription: 'Painting is the final finishing item and starts after 90% of the plumbing work is over.' },
                                            { checksHeading: 'Painting check', checksdescription: 'Painters should not wash the used paint tins in bathroom washbasins. The sediments of the paints can cause choking up of the plumbing lines' },
                                            { checksHeading: 'General Care to be Taken By Plumber', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Handling check', checksdescription: 'Plumbers themselves should exercise precautions, since handling all agencies at a time is difficult.' },
                                            { checksHeading: 'Trap check', checksdescription: 'Plumbers should seal all the traps with gunny bags and a layer of plaster of Paris at the top, to minimize the choke-up problem.' },
                                            { checksHeading: 'Seal Check', checksdescription: 'Remove these seals at the time of testing.' },
                                        ];

                                        async function PlumbingChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PlumbingChacks();
                                    }


                                    if (newDatanew.subactivityname === 'SF - Pipe Work below Floor Level') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Assign the plumber for the work' },
                                            { subtaskdescription: 'Explain all the drawings to the plumber and ask him to carry out the work as per the drawings' },
                                            { subtaskdescription: 'Stormwater drawing' },
                                            { subtaskdescription: 'Drainage drawing' },
                                            { subtaskdescription: 'Water supply lines' },
                                            { subtaskdescription: 'Septic tank' },
                                            { subtaskdescription: 'O.H.W.T. - clear understanding of the supply system and other additioanl things if needed to be sorted with client if needed' },
                                            { subtaskdescription: 'U.G.W.T. - As per the client requirement, if connection is from society or Munical Corporation then how they want ki water is to be taken to overhead' },
                                            { subtaskdescription: 'Terrace level distribution - water slope on the terrace, Pipe, at the level of floor in case if the flooring is not done till the time, Flooring level is to be mention ' },
                                            { subtaskdescription: 'Internal plumbing work details' },
                                            { subtaskdescription: 'Swimming pool (if provided), details regarding plumbing requirements/filtration plant' },
                                            { subtaskdescription: 'Ask the Plumber to have a initial review and check if any interdepencies occur' },
                                            { subtaskdescription: 'Ask the Plumber to clear the interdepencies and coordinate with the other agencies' },
                                            { subtaskdescription: 'Inform the Plumber not to cut beam or column' },
                                            { subtaskdescription: 'Indicate the plumbing lines ie, sanitary and drainage line to the plumber' },
                                            { subtaskdescription: 'Take the quantity of materials  from the plumber and give to purchase manager' },
                                            { subtaskdescription: 'Ask the purchase manager to arrange the materials at site' },
                                            { subtaskdescription: 'Ask the plumber to check the materials which has been delivered' },
                                            { subtaskdescription: 'Internal washroom drawing, please confrm once with the clinet meet on site for the final head ups if needed' },
                                        ];

                                        async function PlumbingfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PlumbingfunCall();
                                    }



                                    if (newDatanew.subactivityname === "SF - Pipe Work below Floor Level") {

                                        const dataArranew = [
                                            { materailname: '100 MM Pipe', materailquantity: materlID.SFPW_SFPipeWorkBelowFloorLevelPipe100MMQuantity, materailUnit: 'RUFT' },
                                            { materailname: '75 MM Pipe', materailquantity: materlID.SFPW_SFPipeWorkBelowFloorLevelPipe75MMQuantity, materailUnit: 'RUFT' },
                                            { materailname: 'Solent', materailquantity: materlID.SFPW_SFPipeWorkBelowFloorLevelSolentQuantity, materailUnit: 'Container' },
                                            { materailname: 'Traps', materailquantity: materlID.SFPW_SFPipeWorkBelowFloorLevelTrapsQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Connector', materailquantity: materlID.SFPW_SFPipeWorkBelowFloorLevelConnectorQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Portland Cement', materailquantity: materlID.SFPW_SFPipeWorkBelowFloorLevelPortlandCementQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Course Sand', materailquantity: materlID.SFPW_SFPipeWorkBelowFloorLevelCourseSandQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Stone Aggregate (20 MM)', materailquantity: materlID.SFPW_SFPipeWorkBelowFloorLevelStoneAggregate20MMQuantity, materailUnit: 'NOS.' },


                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }



                                    if (newDatanew.subactivityname === "SF - Sunken Filling - COBA |Waste") {

                                        const dataArranew = [
                                            { materailname: 'Brick Bats', materailquantity: materlID.SFPW_SFSunkenFillingCOBAWasteBrickBatsQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Cement', materailquantity: materlID.SFPW_SFSunkenFillingCOBAWasteCementQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Sand', materailquantity: materlID.SFPW_SFSunkenFillingCOBAWasteSandQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Waterproofing', materailquantity: materlID.SFPW_SFSunkenFillingCOBAWasteWaterproofingQuantity, materailUnit: 'KG' },
                                            { materailname: 'Filling - Malba', materailquantity: materlID.SFPW_SFSunkenFillingCOBAWasteFillingMalbaQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Filling  - Cement', materailquantity: materlID.SFPW_SFSunkenFillingCOBAWasteFillingCementQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Filling  - Ploymer Cementious Coat', materailquantity: materlID.SFPW_SFSunkenFillingCOBAWasteFillingPolymerCementiousCoatQuantity, materailUnit: 'SQFT' },

                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === "SF -Wall Conduting + Internal Fittings") {

                                        const dataArranew = [
                                            { materailname: '20 MM 11 SDR Pipe', materailquantity: materlID.SFPW_SFWallConduitingInternalFittingsPipe20MM11SDRQuantity, materailUnit: 'NOS.' },
                                            { materailname: '32 MM 11 SDR Pipe', materailquantity: materlID.SFPW_SFWallConduitingInternalFittingsPipe32MM11SDRQuantity, materailUnit: 'NOS.' },
                                            { materailname: '40 MM 11 SDR Pipe', materailquantity: materlID.SFPW_SFWallConduitingInternalFittingsPipe40MM11SDRQuantity, materailUnit: 'NOS.' },
                                            { materailname: '110 MM 11 SDR Pipe', materailquantity: materlID.SFPW_SFWallConduitingInternalFittingsPipe110MM11SDRQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Elbow - 20 MM', materailquantity: materlID.SFPW_SFWallConduitingInternalFittingsElbow20MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Elbow - 32 MM', materailquantity: materlID.SFPW_SFWallConduitingInternalFittingsElbow32MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Elbow - 40 MM', materailquantity: materlID.SFPW_SFWallConduitingInternalFittingsElbow40MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Elbow - 110 MM', materailquantity: materlID.SFPW_SFWallConduitingInternalFittingsElbow110MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Shu Elbow - 20 MM', materailquantity: materlID.SFPW_SFWallConduitingInternalFittingsShuElbow20MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Shu Elbow - 32 MM', materailquantity: materlID.SFPW_SFWallConduitingInternalFittingsShuElbow32MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Shu Elbow - 40 MM', materailquantity: materlID.SFPW_SFWallConduitingInternalFittingsShuElbow40MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Shu Elbow - 110 MM', materailquantity: materlID.SFPW_SFWallConduitingInternalFittingsShuElbow110MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Tee - 32 MM', materailquantity: materlID.SFPW_SFWallConduitingInternalFittingsTee32MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Tee - 110 MM', materailquantity: materlID.SFPW_SFWallConduitingInternalFittingsTee110MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Door Tee - 110 MM', materailquantity: materlID.SFPW_SFWallConduitingInternalFittingsDoorTee110MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Coupler - 20 MM', materailquantity: materlID.SFPW_SFWallConduitingInternalFittingsCoupler20MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Coupler - 32 MM', materailquantity: materlID.SFPW_SFWallConduitingInternalFittingsCoupler32MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Union - 20 MM', materailquantity: materlID.SFPW_SFWallConduitingInternalFittingsUnion20MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Union - 32 MM', materailquantity: materlID.SFPW_SFWallConduitingInternalFittingsUnion32MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Step over bend - 20 MM', materailquantity: materlID.SFPW_SFWallConduitingInternalFittingsStepOverBend20MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Tank Nippal Plain - 32 MM', materailquantity: materlID.SFPW_SFWallConduitingInternalFittingsTankNippalPlain32MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Endcap - 20 MM', materailquantity: materlID.SFPW_SFWallConduitingInternalFittingsEndcap20MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Endcap - 32 MM', materailquantity: materlID.SFPW_SFWallConduitingInternalFittingsEndcap32MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Endcap - 40 MM', materailquantity: materlID.SFPW_SFWallConduitingInternalFittingsEndcap40MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Endcap - 110 MM', materailquantity: materlID.SFPW_SFWallConduitingInternalFittingsEndcap110MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Ball Valve - 20 MM', materailquantity: materlID.SFPW_SFWallConduitingInternalFittingsBallValve20MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Ball Valve - 32 MM', materailquantity: materlID.SFPW_SFWallConduitingInternalFittingsBallValve32MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'NRV - 32 MM', materailquantity: materlID.SFPW_SFWallConduitingInternalFittingsNRV32MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Single Y (Tee) - 110 MM', materailquantity: materlID.SFPW_SFWallConduitingInternalFittingsSingleYTee110MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Nahani Trap -  - 110 MM', materailquantity: materlID.SFPW_SFWallConduitingInternalFittingsNahaniTrap110MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Vent Cowl  - 110 MM', materailquantity: materlID.SFPW_SFWallConduitingInternalFittingsVentCowl110MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Brass Elbow - 20 MM (20 x 15)', materailquantity: materlID.SFPW_SFWallConduitingInternalFittingsBrassElbow20MM2015Quantity, materailUnit: 'NOS.' },
                                            { materailname: 'Brass Tee 20 MM - (20 x 15)', materailquantity: materlID.SFPW_SFWallConduitingInternalFittingsBrassTee20MM2015Quantity, materailUnit: 'NOS.' },
                                            { materailname: 'MTA 20 MM - (20 x 15)', materailquantity: materlID.SFPW_SFWallConduitingInternalFittingsMTA20MM2015Quantity, materailUnit: 'NOS.' },
                                            { materailname: 'FTA 20 MM - (20 x 15)', materailquantity: materlID.SFPW_SFWallConduitingInternalFittingsFTA20MM2015Quantity, materailUnit: 'NOS.' },
                                            { materailname: 'Bush - 32 x 20', materailquantity: materlID.SFPW_SFWallConduitingInternalFittingsBush32x20Quantity, materailUnit: 'NOS.' },
                                            { materailname: 'P Trap - 125 x 110', materailquantity: materlID.SFPW_SFWallConduitingInternalFittingsPTrap125x110Quantity, materailUnit: 'NOS.' },
                                            { materailname: 'P Trap - 110 x 110', materailquantity: materlID.SFPW_SFWallConduitingInternalFittingsPTrap110x110Quantity, materailUnit: 'NOS.' },
                                            { materailname: 'Solvent - 118 ML', materailquantity: materlID.SFPW_SFWallConduitingInternalFittingsSolvent118MLQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Solvent - 237 ML', materailquantity: materlID.SFPW_SFWallConduitingInternalFittingsSolvent237MLQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Solvent - 250 ML', materailquantity: materlID.SFPW_SFWallConduitingInternalFittingsSolvent250MLQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Rubber Lubricants - 250 GM', materailquantity: materlID.SFPW_SFWallConduitingInternalFittingsRubberLubricants250GMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Long Plug - 15 MM', materailquantity: materlID.SFPW_SFWallConduitingInternalFittingsLongPlug15MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Tefloe Tap', materailquantity: materlID.SFPW_SFWallConduitingInternalFittingsTefloeTapQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Concealed Tank', materailquantity: materlID.SFPW_SFWallConduitingInternalFittingsConcealedTankQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Wash Basin Tap Tpye', materailquantity: materlID.SFPW_SFWallConduitingInternalFittingsWashBasinTapTypeQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Diverter', materailquantity: materlID.SFPW_SFWallConduitingInternalFittingsDiverterQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Thermostat', materailquantity: materlID.SFPW_SFWallConduitingInternalFittingsThermostatQuantity, materailUnit: 'NOS.' },

                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }



                                    if (newDatanew.subactivityname === "SF -Wall Conduting + Internal Fittings") {

                                        const dataArranew = [
                                            {},
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Lay. + Hei.', NormalHeadingThree: 'Con. + Pipe', NormalHeadingfoure: 'Fit. + Cover' },
                                            {},
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }

                                    if (newDatanew.subactivityname === "SF -Waterproofing") {

                                        const dataArranew = [
                                            { materailname: 'Fiber Reinforced Elastomeric Liquid', materailquantity: materlID.SFPW_SFWaterproofingFiberReinforcedElastomericLiquidQuantity, materailUnit: 'Liter' },
                                            { materailname: 'Polymer for internal Wall', materailquantity: materlID.SFPW_SFWaterproofingPolymerForInternalWallQuantity, materailUnit: 'KG' },

                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === 'SF - Pipe Work below Floor Level') {

                                        const dataArranew = [
                                            { checksHeading: 'Co-Ordination and Role of Water-Proofing Agency - Pre Work ', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Sunken floor check', checksdescription: 'Sunken floor should be plastered with C.M. 1:4 with a water-proofing compound and tested for water tightness.' },
                                            { checksHeading: 'Waterproofing Toilet Floor check', checksdescription: 'The first coat of water-proofing should be done before fixing sanitary traps, in case of water closets (W.C.) and toilets.' },
                                            { checksHeading: 'Waterproofing Terrace Floor', checksdescription: 'The first coat of water-proofing and brickbat Coba coat should be done before fixing the bends of rainwater lines at the terrace level.' },
                                            { checksHeading: 'Rainwater pipe check', checksdescription: 'In the case of terrace rainwater pipes, the joint near the bend should be neatly finished with cement mortar, to prevent leakages.' },
                                            { checksHeading: 'Co-Ordination and Role of Masonry Plaster Agency - Pre Work', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Outlets and traps check', checksdescription: 'Generally, all outlets are fixed and taken out from the building face, or sleeves are provided before the external plaster, Traps should be well embedded in cement mortar at the junction.' },
                                            { checksHeading: 'Chasing check', checksdescription: 'The walls of the W.C. and bathroom should be strong enough for the chasing of grooves for concealed pipes. Masonry of these walls must be done with the correctly specified ' },
                                            { checksHeading: 'Trap joints check', checksdescription: 'All the trap joints should be properly finished to avoid any leakage problems in the future. ' },
                                            { checksHeading: 'Bend check', checksdescription: 'In the case of terrace rainwater pipes, the joint near the bend should be neatly finished with cement mortar, to prevent leakages.' },
                                            { checksHeading: 'Line and level check', checksdescription: 'Hence duct plaster must be done in perfect plumb, line, and level. engineers contractors.' },
                                            { checksHeading: 'Co-Ordination and Role of Masonry Plaster Agency - Pre Work', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Levels Check', checksdescription: 'Levels should be given by the flooring person, for the pipe fitting as per drawing ' },
                                            { checksHeading: '', checksdescription: 'This causes the pipes to choke up and may lead to repairing/replacing the pipes. To prevent this, the tile powder slurry should be collected and disposed of manually. In addition, the following points should be observed-' },
                                            { checksHeading: 'Opening check', checksdescription: 'The opening of I.W.C. should be filled with sand, gunny bags, and the top layer should be covered with a thick layer of P.O.P.' },
                                            { checksHeading: 'Nahani trap check', checksdescription: 'Nahani trap hole should be made in the flooring tile after the completion of the polishing work.' },
                                            { checksHeading: 'Co-Ordination and Role of  Electrification Agency - Pre Work ', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Concelaed pipes check', checksdescription: 'Concealed plumbing and concealed electrification work are inter-linked activities, as far as bathrooms and toilets are concerned.' },
                                            { checksHeading: 'Concelaed pipes check', checksdescription: 'Since, both activities run simultaneously, pipes should be laid very carefully.' },
                                            { checksHeading: 'Electrical conduits check', checksdescription: 'Electrical conduits should not cross the plumbing pipes, so as to prevent any short circuits.' },
                                            { checksHeading: 'Co-Ordination and Role of  Painting Agency - Pre Work ', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Painting check', checksdescription: 'Painting is the final finishing item and starts after 90% of the plumbing work is over.' },
                                            { checksHeading: 'Painting check', checksdescription: 'Painters should not wash the used paint tins in bathroom washbasins. The sediments of the paints can cause choking up of the plumbing lines' },
                                            { checksHeading: 'General Care to be Taken By Plumber', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Handling check', checksdescription: 'Plumbers themselves should exercise precautions, since handling all agencies at a time is difficult.' },
                                            { checksHeading: 'Trap check', checksdescription: 'Plumbers should seal all the traps with gunny bags and a layer of plaster of Paris at the top, to minimize the choke-up problem.' },
                                            { checksHeading: 'Seal Check', checksdescription: 'Remove these seals at the time of testing.' },
                                        ];

                                        async function PlumbingChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PlumbingChacks();
                                    }


                                    if (newDatanew.subactivityname === "SF - Pipe Work below Floor Level") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Layout', headingforshortingTwo: 'Pipeline' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Layout', NormalHeadingThree: 'Trap Locat.', NormalHeadingfoure: 'Base Prep.' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Pipe Laying', NormalHeadingThree: 'Covering', NormalHeadingfoure: 'Curing' },
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }

                                    //Anuj
                                    if (newDatanew.subactivityname === 'SF - Sunken Filling - COBA |Waste') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Assign the plumber for the work' },
                                            { subtaskdescription: 'Explain all the drawings to the plumber and ask him to carry out the work as per the drawings' },
                                            { subtaskdescription: 'Stormwater drawing' },
                                            { subtaskdescription: 'Drainage drawing' },
                                            { subtaskdescription: 'Water supply lines' },
                                            { subtaskdescription: 'Septic tank' },
                                            { subtaskdescription: 'O.H.W.T. - clear understanding of the supply system and other additioanl things if needed to be sorted with client if needed' },
                                            { subtaskdescription: 'U.G.W.T. - As per the client requirement, if connection is from society or Munical Corporation then how they want ki water is to be taken to overhead' },
                                            { subtaskdescription: 'Terrace level distribution - water slope on the terrace, Pipe, at the level of floor in case if the flooring is not done till the time, Flooring level is to be mention ' },
                                            { subtaskdescription: 'Internal plumbing work details' },
                                            { subtaskdescription: 'Swimming pool (if provided), details regarding plumbing requirements/filtration plant' },
                                            { subtaskdescription: 'Ask the Plumber to have a initial review and check if any interdepencies occur' },
                                            { subtaskdescription: 'Ask the Plumber to clear the interdepencies and coordinate with the other agencies' },
                                            { subtaskdescription: 'Inform the Plumber not to cut beam or column' },
                                            { subtaskdescription: 'Indicate the plumbing lines ie, sanitary and drainage line to the plumber' },
                                            { subtaskdescription: 'Take the quantity of materials  from the plumber and give to purchase manager' },
                                            { subtaskdescription: 'Ask the purchase manager to arrange the materials at site' },
                                            { subtaskdescription: 'Ask the plumber to check the materials which has been delivered' },
                                            { subtaskdescription: 'Internal washroom drawing, please confrm once with the clinet meet on site for the final head ups if needed' },
                                        ];

                                        async function PlumbingfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PlumbingfunCall();
                                    }
                                    if (newDatanew.subactivityname === 'SF - Sunken Filling - COBA |Waste') {

                                        const dataArranew = [
                                            { checksHeading: 'Co-Ordination and Role of Water-Proofing Agency - Pre Work ', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Sunken floor check', checksdescription: 'Sunken floor should be plastered with C.M. 1:4 with a water-proofing compound and tested for water tightness.' },
                                            { checksHeading: 'Waterproofing Toilet Floor check', checksdescription: 'The first coat of water-proofing should be done before fixing sanitary traps, in case of water closets (W.C.) and toilets.' },
                                            { checksHeading: 'Waterproofing Terrace Floor', checksdescription: 'The first coat of water-proofing and brickbat Coba coat should be done before fixing the bends of rainwater lines at the terrace level.' },
                                            { checksHeading: 'Rainwater pipe check', checksdescription: 'In the case of terrace rainwater pipes, the joint near the bend should be neatly finished with cement mortar, to prevent leakages.' },
                                            { checksHeading: 'Co-Ordination and Role of Masonry Plaster Agency - Pre Work', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Outlets and traps check', checksdescription: 'Generally, all outlets are fixed and taken out from the building face, or sleeves are provided before the external plaster, Traps should be well embedded in cement mortar at the junction.' },
                                            { checksHeading: 'Chasing check', checksdescription: 'The walls of the W.C. and bathroom should be strong enough for the chasing of grooves for concealed pipes. Masonry of these walls must be done with the correctly specified ' },
                                            { checksHeading: 'Trap joints check', checksdescription: 'All the trap joints should be properly finished to avoid any leakage problems in the future. ' },
                                            { checksHeading: 'Bend check', checksdescription: 'In the case of terrace rainwater pipes, the joint near the bend should be neatly finished with cement mortar, to prevent leakages.' },
                                            { checksHeading: 'Line and level check', checksdescription: 'Hence duct plaster must be done in perfect plumb, line, and level. engineers contractors.' },
                                            { checksHeading: 'Co-Ordination and Role of Masonry Plaster Agency - Pre Work', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Levels Check', checksdescription: 'Levels should be given by the flooring person, for the pipe fitting as per drawing ' },
                                            { checksHeading: '', checksdescription: 'This causes the pipes to choke up and may lead to repairing/replacing the pipes. To prevent this, the tile powder slurry should be collected and disposed of manually. In addition, the following points should be observed-' },
                                            { checksHeading: 'Opening check', checksdescription: 'The opening of I.W.C. should be filled with sand, gunny bags, and the top layer should be covered with a thick layer of P.O.P.' },
                                            { checksHeading: 'Nahani trap check', checksdescription: 'Nahani trap hole should be made in the flooring tile after the completion of the polishing work.' },
                                            { checksHeading: 'Co-Ordination and Role of  Electrification Agency - Pre Work ', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Concelaed pipes check', checksdescription: 'Concealed plumbing and concealed electrification work are inter-linked activities, as far as bathrooms and toilets are concerned.' },
                                            { checksHeading: 'Concelaed pipes check', checksdescription: 'Since, both activities run simultaneously, pipes should be laid very carefully.' },
                                            { checksHeading: 'Electrical conduits check', checksdescription: 'Electrical conduits should not cross the plumbing pipes, so as to prevent any short circuits.' },
                                            { checksHeading: 'Co-Ordination and Role of  Painting Agency - Pre Work ', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Painting check', checksdescription: 'Painting is the final finishing item and starts after 90% of the plumbing work is over.' },
                                            { checksHeading: 'Painting check', checksdescription: 'Painters should not wash the used paint tins in bathroom washbasins. The sediments of the paints can cause choking up of the plumbing lines' },
                                            { checksHeading: 'General Care to be Taken By Plumber', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Handling check', checksdescription: 'Plumbers themselves should exercise precautions, since handling all agencies at a time is difficult.' },
                                            { checksHeading: 'Trap check', checksdescription: 'Plumbers should seal all the traps with gunny bags and a layer of plaster of Paris at the top, to minimize the choke-up problem.' },
                                            { checksHeading: 'Seal Check', checksdescription: 'Remove these seals at the time of testing.' },
                                        ];

                                        async function PlumbingChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PlumbingChacks();
                                    }

                                    if (newDatanew.subactivityname === 'TF - Pipe Work below Floor Level') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Assign the plumber for the work' },
                                            { subtaskdescription: 'Explain all the drawings to the plumber and ask him to carry out the work as per the drawings' },
                                            { subtaskdescription: 'Stormwater drawing' },
                                            { subtaskdescription: 'Drainage drawing' },
                                            { subtaskdescription: 'Water supply lines' },
                                            { subtaskdescription: 'Septic tank' },
                                            { subtaskdescription: 'O.H.W.T. - clear understanding of the supply system and other additioanl things if needed to be sorted with client if needed' },
                                            { subtaskdescription: 'U.G.W.T. - As per the client requirement, if connection is from society or Munical Corporation then how they want ki water is to be taken to overhead' },
                                            { subtaskdescription: 'Terrace level distribution - water slope on the terrace, Pipe, at the level of floor in case if the flooring is not done till the time, Flooring level is to be mention ' },
                                            { subtaskdescription: 'Internal plumbing work details' },
                                            { subtaskdescription: 'Swimming pool (if provided), details regarding plumbing requirements/filtration plant' },
                                            { subtaskdescription: 'Ask the Plumber to have a initial review and check if any interdepencies occur' },
                                            { subtaskdescription: 'Ask the Plumber to clear the interdepencies and coordinate with the other agencies' },
                                            { subtaskdescription: 'Inform the Plumber not to cut beam or column' },
                                            { subtaskdescription: 'Indicate the plumbing lines ie, sanitary and drainage line to the plumber' },
                                            { subtaskdescription: 'Take the quantity of materials  from the plumber and give to purchase manager' },
                                            { subtaskdescription: 'Ask the purchase manager to arrange the materials at site' },
                                            { subtaskdescription: 'Ask the plumber to check the materials which has been delivered' },
                                            { subtaskdescription: 'Internal washroom drawing, please confrm once with the clinet meet on site for the final head ups if needed' },
                                        ];

                                        async function PlumbingfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PlumbingfunCall();
                                    }




                                    if (newDatanew.subactivityname === "TF - Pipe Work below Floor Level") {

                                        const dataArranew = [
                                            { materailname: '100 MM Pipe', materailquantity: materlID.TFPW_TFPipeWorkBelowFloorLevelPipe100MMQuantity, materailUnit: 'RUFT' },
                                            { materailname: '75 MM Pipe', materailquantity: materlID.TFPW_TFPipeWorkBelowFloorLevelPipe75MMQuantity, materailUnit: 'RUFT' },
                                            { materailname: 'Solent', materailquantity: materlID.TFPW_TFPipeWorkBelowFloorLevelSolentQuantity, materailUnit: 'Container' },
                                            { materailname: 'Traps', materailquantity: materlID.TFPW_TFPipeWorkBelowFloorLevelTrapsQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Connector', materailquantity: materlID.TFPW_TFPipeWorkBelowFloorLevelConnectorQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Portland Cement', materailquantity: materlID.TFPW_TFPipeWorkBelowFloorLevelPortlandCementQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Course Sand', materailquantity: materlID.TFPW_TFPipeWorkBelowFloorLevelCourseSandQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Stone Aggregate (20 MM)', materailquantity: materlID.TFPW_TFPipeWorkBelowFloorLevelStoneAggregate20MMQuantity, materailUnit: 'NOS.' },


                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }



                                    if (newDatanew.subactivityname === "TF - Sunken Filling - COBA |Waste") {

                                        const dataArranew = [
                                            { materailname: 'Brick Bats', materailquantity: materlID.TFPW_TFSunkenFillingCOBAWasteBrickBatsQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Cement', materailquantity: materlID.TFPW_TFSunkenFillingCOBAWasteCementQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Sand', materailquantity: materlID.TFPW_TFSunkenFillingCOBAWasteSandQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Waterproofing', materailquantity: materlID.TFPW_TFSunkenFillingCOBAWasteWaterproofingQuantity, materailUnit: 'KG' },
                                            { materailname: 'Filling - Malba', materailquantity: materlID.TFPW_TFSunkenFillingCOBAWasteFillingMalbaQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Filling  - Cement', materailquantity: materlID.TFPW_TFSunkenFillingCOBAWasteFillingCementQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Filling  - Ploymer Cementious Coat', materailquantity: materlID.TFPW_TFSunkenFillingCOBAWasteFillingPolymerCementiousCoatQuantity, materailUnit: 'SQFT' },

                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === "TF -Wall Conduting + Internal Fittings") {

                                        const dataArranew = [
                                            { materailname: '20 MM 11 SDR Pipe', materailquantity: materlID.TFPW_TFWallConduitingInternalFittingsPipe20MM11SDRQuantity, materailUnit: 'NOS.' },
                                            { materailname: '32 MM 11 SDR Pipe', materailquantity: materlID.TFPW_TFWallConduitingInternalFittingsPipe32MM11SDRQuantity, materailUnit: 'NOS.' },
                                            { materailname: '40 MM 11 SDR Pipe', materailquantity: materlID.TFPW_TFWallConduitingInternalFittingsPipe40MM11SDRQuantity, materailUnit: 'NOS.' },
                                            { materailname: '110 MM 11 SDR Pipe', materailquantity: materlID.TFPW_TFWallConduitingInternalFittingsPipe110MM11SDRQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Elbow - 20 MM', materailquantity: materlID.TFPW_TFWallConduitingInternalFittingsElbow20MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Elbow - 32 MM', materailquantity: materlID.TFPW_TFWallConduitingInternalFittingsElbow32MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Elbow - 40 MM', materailquantity: materlID.TFPW_TFWallConduitingInternalFittingsElbow40MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Elbow - 110 MM', materailquantity: materlID.TFPW_TFWallConduitingInternalFittingsElbow110MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Shu Elbow - 20 MM', materailquantity: materlID.TFPW_TFWallConduitingInternalFittingsShuElbow20MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Shu Elbow - 32 MM', materailquantity: materlID.TFPW_TFWallConduitingInternalFittingsShuElbow32MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Shu Elbow - 40 MM', materailquantity: materlID.TFPW_TFWallConduitingInternalFittingsShuElbow40MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Shu Elbow - 110 MM', materailquantity: materlID.TFPW_TFWallConduitingInternalFittingsShuElbow110MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Tee - 32 MM', materailquantity: materlID.TFPW_TFWallConduitingInternalFittingsTee32MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Tee - 110 MM', materailquantity: materlID.TFPW_TFWallConduitingInternalFittingsTee110MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Door Tee - 110 MM', materailquantity: materlID.TFPW_TFWallConduitingInternalFittingsDoorTee110MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Coupler - 20 MM', materailquantity: materlID.TFPW_TFWallConduitingInternalFittingsCoupler20MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Coupler - 32 MM', materailquantity: materlID.TFPW_TFWallConduitingInternalFittingsCoupler32MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Union - 20 MM', materailquantity: materlID.TFPW_TFWallConduitingInternalFittingsUnion20MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Union - 32 MM', materailquantity: materlID.TFPW_TFWallConduitingInternalFittingsUnion32MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Step over bend - 20 MM', materailquantity: materlID.TFPW_TFWallConduitingInternalFittingsStepOverBend20MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Tank Nippal Plain - 32 MM', materailquantity: materlID.TFPW_TFWallConduitingInternalFittingsTankNippalPlain32MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Endcap - 20 MM', materailquantity: materlID.TFPW_TFWallConduitingInternalFittingsEndcap20MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Endcap - 32 MM', materailquantity: materlID.TFPW_TFWallConduitingInternalFittingsEndcap32MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Endcap - 40 MM', materailquantity: materlID.TFPW_TFWallConduitingInternalFittingsEndcap40MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Endcap - 110 MM', materailquantity: materlID.TFPW_TFWallConduitingInternalFittingsEndcap110MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Ball Valve - 20 MM', materailquantity: materlID.TFPW_TFWallConduitingInternalFittingsBallValve20MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Ball Valve - 32 MM', materailquantity: materlID.TFPW_TFWallConduitingInternalFittingsBallValve32MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'NRV - 32 MM', materailquantity: materlID.TFPW_TFWallConduitingInternalFittingsNRV32MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Single Y (Tee) - 110 MM', materailquantity: materlID.TFPW_TFWallConduitingInternalFittingsSingleYTee110MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Nahani Trap -  - 110 MM', materailquantity: materlID.TFPW_TFWallConduitingInternalFittingsNahaniTrap110MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Vent Cowl  - 110 MM', materailquantity: materlID.TFPW_TFWallConduitingInternalFittingsVentCowl110MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Brass Elbow - 20 MM (20 x 15)', materailquantity: materlID.TFPW_TFWallConduitingInternalFittingsBrassElbow20MM2015Quantity, materailUnit: 'NOS.' },
                                            { materailname: 'Brass Tee 20 MM - (20 x 15)', materailquantity: materlID.TFPW_TFWallConduitingInternalFittingsBrassTee20MM2015Quantity, materailUnit: 'NOS.' },
                                            { materailname: 'MTA 20 MM - (20 x 15)', materailquantity: materlID.TFPW_TFPW_TFWallConduitingInternalFittingsMTA20MM2015Quantity, materailUnit: 'NOS.' },
                                            { materailname: 'FTA 20 MM - (20 x 15)', materailquantity: materlID.TFPW_TFWallConduitingInternalFittingsFTA20MM2015Quantity, materailUnit: 'NOS.' },
                                            { materailname: 'Bush - 32 x 20', materailquantity: materlID.TFPW_TFWallConduitingInternalFittingsBush32x20Quantity, materailUnit: 'NOS.' },
                                            { materailname: 'P Trap - 125 x 110', materailquantity: materlID.TFPW_TFWallConduitingInternalFittingsPTrap125x110Quantity, materailUnit: 'NOS.' },
                                            { materailname: 'P Trap - 110 x 110', materailquantity: materlID.TFPW_TFWallConduitingInternalFittingsPTrap110x110Quantity, materailUnit: 'NOS.' },
                                            { materailname: 'Solvent - 118 ML', materailquantity: materlID.TFPW_TFWallConduitingInternalFittingsSolvent118MLQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Solvent - 237 ML', materailquantity: materlID.TFPW_TFWallConduitingInternalFittingsSolvent237MLQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Solvent - 250 ML', materailquantity: materlID.TFPW_TFWallConduitingInternalFittingsSolvent250MLQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Rubber Lubricants - 250 GM', materailquantity: materlID.TFPW_TFWallConduitingInternalFittingsRubberLubricants250GMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Long Plug - 15 MM', materailquantity: materlID.TFPW_TFWallConduitingInternalFittingsLongPlug15MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Tefloe Tap', materailquantity: materlID.TFPW_TFWallConduitingInternalFittingsTefloeTapQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Concealed Tank', materailquantity: materlID.TFPW_TFWallConduitingInternalFittingsConcealedTankQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Wash Basin Tap Tpye', materailquantity: materlID.TFPW_TFWallConduitingInternalFittingsWashBasinTapTypeQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Diverter', materailquantity: materlID.TFPW_TFWallConduitingInternalFittingsDiverterQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Thermostat', materailquantity: materlID.TFPW_TFWallConduitingInternalFittingsThermostatQuantity, materailUnit: 'NOS.' },

                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === "TF -Wall Conduting + Internal Fittings") {

                                        const dataArranew = [
                                            {},
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Lay. + Hei.', NormalHeadingThree: 'Con. + Pipe', NormalHeadingfoure: 'Fit. + Cover' },
                                            {},
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }


                                    if (newDatanew.subactivityname === "TF -Waterproofing") {

                                        const dataArranew = [
                                            { materailname: 'Fiber Reinforced Elastomeric Liquid', materailquantity: materlID.TFPW_TFWaterproofingFiberReinforcedElastomericLiquidQuantity, materailUnit: 'Liter' },
                                            { materailname: 'Polymer for internal Wall', materailquantity: materlID.TFPW_TFWaterproofingPolymerForInternalWallQuantity, materailUnit: 'KG' },

                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === 'TF - Pipe Work below Floor Level') {

                                        const dataArranew = [
                                            { checksHeading: 'Co-Ordination and Role of Water-Proofing Agency - Pre Work ', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Sunken floor check', checksdescription: 'Sunken floor should be plastered with C.M. 1:4 with a water-proofing compound and tested for water tightness.' },
                                            { checksHeading: 'Waterproofing Toilet Floor check', checksdescription: 'The first coat of water-proofing should be done before fixing sanitary traps, in case of water closets (W.C.) and toilets.' },
                                            { checksHeading: 'Waterproofing Terrace Floor', checksdescription: 'The first coat of water-proofing and brickbat Coba coat should be done before fixing the bends of rainwater lines at the terrace level.' },
                                            { checksHeading: 'Rainwater pipe check', checksdescription: 'In the case of terrace rainwater pipes, the joint near the bend should be neatly finished with cement mortar, to prevent leakages.' },
                                            { checksHeading: 'Co-Ordination and Role of Masonry Plaster Agency - Pre Work', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Outlets and traps check', checksdescription: 'Generally, all outlets are fixed and taken out from the building face, or sleeves are provided before the external plaster, Traps should be well embedded in cement mortar at the junction.' },
                                            { checksHeading: 'Chasing check', checksdescription: 'The walls of the W.C. and bathroom should be strong enough for the chasing of grooves for concealed pipes. Masonry of these walls must be done with the correctly specified ' },
                                            { checksHeading: 'Trap joints check', checksdescription: 'All the trap joints should be properly finished to avoid any leakage problems in the future. ' },
                                            { checksHeading: 'Bend check', checksdescription: 'In the case of terrace rainwater pipes, the joint near the bend should be neatly finished with cement mortar, to prevent leakages.' },
                                            { checksHeading: 'Line and level check', checksdescription: 'Hence duct plaster must be done in perfect plumb, line, and level. engineers contractors.' },
                                            { checksHeading: 'Co-Ordination and Role of Masonry Plaster Agency - Pre Work', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Levels Check', checksdescription: 'Levels should be given by the flooring person, for the pipe fitting as per drawing ' },
                                            { checksHeading: '', checksdescription: 'This causes the pipes to choke up and may lead to repairing/replacing the pipes. To prevent this, the tile powder slurry should be collected and disposed of manually. In addition, the following points should be observed-' },
                                            { checksHeading: 'Opening check', checksdescription: 'The opening of I.W.C. should be filled with sand, gunny bags, and the top layer should be covered with a thick layer of P.O.P.' },
                                            { checksHeading: 'Nahani trap check', checksdescription: 'Nahani trap hole should be made in the flooring tile after the completion of the polishing work.' },
                                            { checksHeading: 'Co-Ordination and Role of  Electrification Agency - Pre Work ', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Concelaed pipes check', checksdescription: 'Concealed plumbing and concealed electrification work are inter-linked activities, as far as bathrooms and toilets are concerned.' },
                                            { checksHeading: 'Concelaed pipes check', checksdescription: 'Since, both activities run simultaneously, pipes should be laid very carefully.' },
                                            { checksHeading: 'Electrical conduits check', checksdescription: 'Electrical conduits should not cross the plumbing pipes, so as to prevent any short circuits.' },
                                            { checksHeading: 'Co-Ordination and Role of  Painting Agency - Pre Work ', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Painting check', checksdescription: 'Painting is the final finishing item and starts after 90% of the plumbing work is over.' },
                                            { checksHeading: 'Painting check', checksdescription: 'Painters should not wash the used paint tins in bathroom washbasins. The sediments of the paints can cause choking up of the plumbing lines' },
                                            { checksHeading: 'General Care to be Taken By Plumber', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Handling check', checksdescription: 'Plumbers themselves should exercise precautions, since handling all agencies at a time is difficult.' },
                                            { checksHeading: 'Trap check', checksdescription: 'Plumbers should seal all the traps with gunny bags and a layer of plaster of Paris at the top, to minimize the choke-up problem.' },
                                            { checksHeading: 'Seal Check', checksdescription: 'Remove these seals at the time of testing.' },
                                        ];

                                        async function PlumbingChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PlumbingChacks();
                                    }


                                    if (newDatanew.subactivityname === "TF - Pipe Work below Floor Level") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Layout', headingforshortingTwo: 'Pipeline' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Layout', NormalHeadingThree: 'Trap Locat.', NormalHeadingfoure: 'Base Prep.' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Pipe Laying', NormalHeadingThree: 'Covering', NormalHeadingfoure: 'Curing' },
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }


                                    if (newDatanew.subactivityname === 'TF - Sunken Filling - COBA |Waste') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Assign the plumber for the work' },
                                            { subtaskdescription: 'Explain all the drawings to the plumber and ask him to carry out the work as per the drawings' },
                                            { subtaskdescription: 'Stormwater drawing' },
                                            { subtaskdescription: 'Drainage drawing' },
                                            { subtaskdescription: 'Water supply lines' },
                                            { subtaskdescription: 'Septic tank' },
                                            { subtaskdescription: 'O.H.W.T. - clear understanding of the supply system and other additioanl things if needed to be sorted with client if needed' },
                                            { subtaskdescription: 'U.G.W.T. - As per the client requirement, if connection is from society or Munical Corporation then how they want ki water is to be taken to overhead' },
                                            { subtaskdescription: 'Terrace level distribution - water slope on the terrace, Pipe, at the level of floor in case if the flooring is not done till the time, Flooring level is to be mention ' },
                                            { subtaskdescription: 'Internal plumbing work details' },
                                            { subtaskdescription: 'Swimming pool (if provided), details regarding plumbing requirements/filtration plant' },
                                            { subtaskdescription: 'Ask the Plumber to have a initial review and check if any interdepencies occur' },
                                            { subtaskdescription: 'Ask the Plumber to clear the interdepencies and coordinate with the other agencies' },
                                            { subtaskdescription: 'Inform the Plumber not to cut beam or column' },
                                            { subtaskdescription: 'Indicate the plumbing lines ie, sanitary and drainage line to the plumber' },
                                            { subtaskdescription: 'Take the quantity of materials  from the plumber and give to purchase manager' },
                                            { subtaskdescription: 'Ask the purchase manager to arrange the materials at site' },
                                            { subtaskdescription: 'Ask the plumber to check the materials which has been delivered' },
                                            { subtaskdescription: 'Internal washroom drawing, please confrm once with the clinet meet on site for the final head ups if needed' },
                                        ];

                                        async function PlumbingfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PlumbingfunCall();
                                    }


                                    if (newDatanew.subactivityname === 'TF - Sunken Filling - COBA |Waste') {

                                        const dataArranew = [
                                            { checksHeading: 'Co-Ordination and Role of Water-Proofing Agency - Pre Work ', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Sunken floor check', checksdescription: 'Sunken floor should be plastered with C.M. 1:4 with a water-proofing compound and tested for water tightness.' },
                                            { checksHeading: 'Waterproofing Toilet Floor check', checksdescription: 'The first coat of water-proofing should be done before fixing sanitary traps, in case of water closets (W.C.) and toilets.' },
                                            { checksHeading: 'Waterproofing Terrace Floor', checksdescription: 'The first coat of water-proofing and brickbat Coba coat should be done before fixing the bends of rainwater lines at the terrace level.' },
                                            { checksHeading: 'Rainwater pipe check', checksdescription: 'In the case of terrace rainwater pipes, the joint near the bend should be neatly finished with cement mortar, to prevent leakages.' },
                                            { checksHeading: 'Co-Ordination and Role of Masonry Plaster Agency - Pre Work', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Outlets and traps check', checksdescription: 'Generally, all outlets are fixed and taken out from the building face, or sleeves are provided before the external plaster, Traps should be well embedded in cement mortar at the junction.' },
                                            { checksHeading: 'Chasing check', checksdescription: 'The walls of the W.C. and bathroom should be strong enough for the chasing of grooves for concealed pipes. Masonry of these walls must be done with the correctly specified ' },
                                            { checksHeading: 'Trap joints check', checksdescription: 'All the trap joints should be properly finished to avoid any leakage problems in the future. ' },
                                            { checksHeading: 'Bend check', checksdescription: 'In the case of terrace rainwater pipes, the joint near the bend should be neatly finished with cement mortar, to prevent leakages.' },
                                            { checksHeading: 'Line and level check', checksdescription: 'Hence duct plaster must be done in perfect plumb, line, and level. engineers contractors.' },
                                            { checksHeading: 'Co-Ordination and Role of Masonry Plaster Agency - Pre Work', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Levels Check', checksdescription: 'Levels should be given by the flooring person, for the pipe fitting as per drawing ' },
                                            { checksHeading: '', checksdescription: 'This causes the pipes to choke up and may lead to repairing/replacing the pipes. To prevent this, the tile powder slurry should be collected and disposed of manually. In addition, the following points should be observed-' },
                                            { checksHeading: 'Opening check', checksdescription: 'The opening of I.W.C. should be filled with sand, gunny bags, and the top layer should be covered with a thick layer of P.O.P.' },
                                            { checksHeading: 'Nahani trap check', checksdescription: 'Nahani trap hole should be made in the flooring tile after the completion of the polishing work.' },
                                            { checksHeading: 'Co-Ordination and Role of  Electrification Agency - Pre Work ', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Concelaed pipes check', checksdescription: 'Concealed plumbing and concealed electrification work are inter-linked activities, as far as bathrooms and toilets are concerned.' },
                                            { checksHeading: 'Concelaed pipes check', checksdescription: 'Since, both activities run simultaneously, pipes should be laid very carefully.' },
                                            { checksHeading: 'Electrical conduits check', checksdescription: 'Electrical conduits should not cross the plumbing pipes, so as to prevent any short circuits.' },
                                            { checksHeading: 'Co-Ordination and Role of  Painting Agency - Pre Work ', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Painting check', checksdescription: 'Painting is the final finishing item and starts after 90% of the plumbing work is over.' },
                                            { checksHeading: 'Painting check', checksdescription: 'Painters should not wash the used paint tins in bathroom washbasins. The sediments of the paints can cause choking up of the plumbing lines' },
                                            { checksHeading: 'General Care to be Taken By Plumber', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Handling check', checksdescription: 'Plumbers themselves should exercise precautions, since handling all agencies at a time is difficult.' },
                                            { checksHeading: 'Trap check', checksdescription: 'Plumbers should seal all the traps with gunny bags and a layer of plaster of Paris at the top, to minimize the choke-up problem.' },
                                            { checksHeading: 'Seal Check', checksdescription: 'Remove these seals at the time of testing.' },
                                        ];

                                        async function PlumbingChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PlumbingChacks();
                                    }


                                    if (newDatanew.subactivityname === 'FoF - Pipe Work below Floor Level') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Assign the plumber for the work' },
                                            { subtaskdescription: 'Explain all the drawings to the plumber and ask him to carry out the work as per the drawings' },
                                            { subtaskdescription: 'Stormwater drawing' },
                                            { subtaskdescription: 'Drainage drawing' },
                                            { subtaskdescription: 'Water supply lines' },
                                            { subtaskdescription: 'Septic tank' },
                                            { subtaskdescription: 'O.H.W.T. - clear understanding of the supply system and other additioanl things if needed to be sorted with client if needed' },
                                            { subtaskdescription: 'U.G.W.T. - As per the client requirement, if connection is from society or Munical Corporation then how they want ki water is to be taken to overhead' },
                                            { subtaskdescription: 'Terrace level distribution - water slope on the terrace, Pipe, at the level of floor in case if the flooring is not done till the time, Flooring level is to be mention ' },
                                            { subtaskdescription: 'Internal plumbing work details' },
                                            { subtaskdescription: 'Swimming pool (if provided), details regarding plumbing requirements/filtration plant' },
                                            { subtaskdescription: 'Ask the Plumber to have a initial review and check if any interdepencies occur' },
                                            { subtaskdescription: 'Ask the Plumber to clear the interdepencies and coordinate with the other agencies' },
                                            { subtaskdescription: 'Inform the Plumber not to cut beam or column' },
                                            { subtaskdescription: 'Indicate the plumbing lines ie, sanitary and drainage line to the plumber' },
                                            { subtaskdescription: 'Take the quantity of materials  from the plumber and give to purchase manager' },
                                            { subtaskdescription: 'Ask the purchase manager to arrange the materials at site' },
                                            { subtaskdescription: 'Ask the plumber to check the materials which has been delivered' },
                                            { subtaskdescription: 'Internal washroom drawing, please confrm once with the clinet meet on site for the final head ups if needed' },
                                        ];

                                        async function PlumbingfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PlumbingfunCall();
                                    }





                                    if (newDatanew.subactivityname === "FoF - Pipe Work below Floor Level") {

                                        const dataArranew = [
                                            { materailname: '100 MM Pipe', materailquantity: materlID.FOFPW_FoFPipeWorkBelowFloorLevelPipe100MMQuantity, materailUnit: 'RUFT' },
                                            { materailname: '75 MM Pipe', materailquantity: materlID.FOFPW_FoFPipeWorkBelowFloorLevelPipe75MMQuantity, materailUnit: 'RUFT' },
                                            { materailname: 'Solent', materailquantity: materlID.FOFPW_FoFPipeWorkBelowFloorLevelSolentQuantity, materailUnit: 'Container' },
                                            { materailname: 'Traps', materailquantity: materlID.FOFPW_FoFPipeWorkBelowFloorLevelTrapsQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Connector', materailquantity: materlID.FOFPW_FoFPipeWorkBelowFloorLevelConnectorQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Portland Cement', materailquantity: materlID.FOFPW_FoFPipeWorkBelowFloorLevelPortlandCementQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Course Sand', materailquantity: materlID.FOFPW_FoFPipeWorkBelowFloorLevelCourseSandQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Stone Aggregate (20 MM)', materailquantity: materlID.FOFPW_FoFPipeWorkBelowFloorLevelStoneAggregate20MMQuantity, materailUnit: 'NOS.' },


                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }



                                    if (newDatanew.subactivityname === "FoF - Sunken Filling - COBA |Waste") {

                                        const dataArranew = [
                                            { materailname: 'Brick Bats', materailquantity: materlID.FOFPW_FoFSunkenFillingCOBAWasteBrickBatsQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Cement', materailquantity: materlID.FOFPW_FoFSunkenFillingCOBAWasteCementQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Sand', materailquantity: materlID.FOFPW_FoFSunkenFillingCOBAWasteSandQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Waterproofing', materailquantity: materlID.FOFPW_FoFSunkenFillingCOBAWasteWaterproofingQuantity, materailUnit: 'KG' },
                                            { materailname: 'Filling - Malba', materailquantity: materlID.FOFPW_FoFSunkenFillingCOBAWasteFillingMalbaQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Filling  - Cement', materailquantity: materlID.FOFPW_FoFSunkenFillingCOBAWasteFillingCementQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Filling  - Ploymer Cementious Coat', materailquantity: materlID.FOFPW_FoFSunkenFillingCOBAWasteFillingPolymerCementiousCoatQuantity, materailUnit: 'SQFT' },

                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === "FoF -Wall Conduting + Internal Fittings") {

                                        const dataArranew = [
                                            { materailname: '20 MM 11 SDR Pipe', materailquantity: materlID.FOFPW_FoFWallConduitingInternalFittingsPipe20MM11SDRQuantity, materailUnit: 'NOS.' },
                                            { materailname: '32 MM 11 SDR Pipe', materailquantity: materlID.FOFPW_FoFWallConduitingInternalFittingsPipe32MM11SDRQuantity, materailUnit: 'NOS.' },
                                            { materailname: '40 MM 11 SDR Pipe', materailquantity: materlID.FOFPW_FoFWallConduitingInternalFittingsPipe40MM11SDRQuantity, materailUnit: 'NOS.' },
                                            { materailname: '110 MM 11 SDR Pipe', materailquantity: materlID.FOFPW_FoFWallConduitingInternalFittingsPipe110MM11SDRQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Elbow - 20 MM', materailquantity: materlID.FOFPW_FoFWallConduitingInternalFittingsElbow20MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Elbow - 32 MM', materailquantity: materlID.FOFPW_FoFWallConduitingInternalFittingsElbow32MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Elbow - 40 MM', materailquantity: materlID.FOFPW_FoFWallConduitingInternalFittingsElbow40MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Elbow - 110 MM', materailquantity: materlID.FOFPW_FoFWallConduitingInternalFittingsElbow110MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Shu Elbow - 20 MM', materailquantity: materlID.FOFPW_FoFWallConduitingInternalFittingsShuElbow20MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Shu Elbow - 32 MM', materailquantity: materlID.FOFPW_FoFWallConduitingInternalFittingsShuElbow32MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Shu Elbow - 40 MM', materailquantity: materlID.FOFPW_FoFWallConduitingInternalFittingsShuElbow40MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Shu Elbow - 110 MM', materailquantity: materlID.FOFPW_FoFWallConduitingInternalFittingsShuElbow110MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Tee - 32 MM', materailquantity: materlID.FOFPW_FoFWallConduitingInternalFittingsTee32MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Tee - 110 MM', materailquantity: materlID.FOFPW_FoFWallConduitingInternalFittingsTee110MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Door Tee - 110 MM', materailquantity: materlID.FOFPW_FoFWallConduitingInternalFittingsDoorTee110MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Coupler - 20 MM', materailquantity: materlID.FOFPW_FoFWallConduitingInternalFittingsCoupler20MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Coupler - 32 MM', materailquantity: materlID.FOFPW_FoFWallConduitingInternalFittingsCoupler32MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Union - 20 MM', materailquantity: materlID.FOFPW_FoFWallConduitingInternalFittingsUnion20MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Union - 32 MM', materailquantity: materlID.FOFPW_FoFWallConduitingInternalFittingsUnion32MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Step over bend - 20 MM', materailquantity: materlID.FOFPW_FoFWallConduitingInternalFittingsStepOverBend20MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Tank Nippal Plain - 32 MM', materailquantity: materlID.FOFPW_FoFWallConduitingInternalFittingsTankNippalPlain32MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Endcap - 20 MM', materailquantity: materlID.FOFPW_FoFWallConduitingInternalFittingsEndcap20MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Endcap - 32 MM', materailquantity: materlID.FOFPW_FoFWallConduitingInternalFittingsEndcap32MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Endcap - 40 MM', materailquantity: materlID.FOFPW_FoFWallConduitingInternalFittingsEndcap40MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Endcap - 110 MM', materailquantity: materlID.FOFPW_FoFWallConduitingInternalFittingsEndcap110MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Ball Valve - 20 MM', materailquantity: materlID.FOFPW_FoFWallConduitingInternalFittingsBallValve20MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Ball Valve - 32 MM', materailquantity: materlID.FOFPW_FoFWallConduitingInternalFittingsBallValve32MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'NRV - 32 MM', materailquantity: materlID.FOFPW_FoFWallConduitingInternalFittingsNRV32MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Single Y (Tee) - 110 MM', materailquantity: materlID.FOFPW_FoFWallConduitingInternalFittingsSingleYTee110MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Nahani Trap -  - 110 MM', materailquantity: materlID.FOFPW_FoFWallConduitingInternalFittingsNahaniTrap110MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Vent Cowl  - 110 MM', materailquantity: materlID.FOFPW_FoFWallConduitingInternalFittingsVentCowl110MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Brass Elbow - 20 MM (20 x 15)', materailquantity: materlID.FOFPW_FoFWallConduitingInternalFittingsBrassElbow20MM2015Quantity, materailUnit: 'NOS.' },
                                            { materailname: 'Brass Tee 20 MM - (20 x 15)', materailquantity: materlID.FOFPW_FoFWallConduitingInternalFittingsBrassTee20MM2015Quantity, materailUnit: 'NOS.' },
                                            { materailname: 'MTA 20 MM - (20 x 15)', materailquantity: materlID.FOFPW_FOFPW_FoFWallConduitingInternalFittingsMTA20MM2015Quantity, materailUnit: 'NOS.' },
                                            { materailname: 'FTA 20 MM - (20 x 15)', materailquantity: materlID.FOFPW_FoFWallConduitingInternalFittingsFTA20MM2015Quantity, materailUnit: 'NOS.' },
                                            { materailname: 'Bush - 32 x 20', materailquantity: materlID.FOFPW_FoFWallConduitingInternalFittingsBush32x20Quantity, materailUnit: 'NOS.' },
                                            { materailname: 'P Trap - 125 x 110', materailquantity: materlID.FOFPW_FoFWallConduitingInternalFittingsPTrap125x110Quantity, materailUnit: 'NOS.' },
                                            { materailname: 'P Trap - 110 x 110', materailquantity: materlID.FOFPW_FoFWallConduitingInternalFittingsPTrap110x110Quantity, materailUnit: 'NOS.' },
                                            { materailname: 'Solvent - 118 ML', materailquantity: materlID.FOFPW_FoFWallConduitingInternalFittingsSolvent118MLQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Solvent - 237 ML', materailquantity: materlID.FOFPW_FoFWallConduitingInternalFittingsSolvent237MLQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Solvent - 250 ML', materailquantity: materlID.FOFPW_FoFWallConduitingInternalFittingsSolvent250MLQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Rubber Lubricants - 250 GM', materailquantity: materlID.FOFPW_FoFWallConduitingInternalFittingsRubberLubricants250GMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Long Plug - 15 MM', materailquantity: materlID.FOFPW_FoFWallConduitingInternalFittingsLongPlug15MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Tefloe Tap', materailquantity: materlID.FOFPW_FoFWallConduitingInternalFittingsTefloeTapQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Concealed Tank', materailquantity: materlID.FOFPW_FoFWallConduitingInternalFittingsConcealedTankQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Wash Basin Tap Tpye', materailquantity: materlID.FOFPW_FoFWallConduitingInternalFittingsWashBasinTapTypeQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Diverter', materailquantity: materlID.FOFPW_FoFWallConduitingInternalFittingsDiverterQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Thermostat', materailquantity: materlID.FOFPW_FoFWallConduitingInternalFittingsThermostatQuantity, materailUnit: 'NOS.' },

                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === "FoF -Wall Conduting + Internal Fittings") {

                                        const dataArranew = [
                                            {},
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Lay. + Hei.', NormalHeadingThree: 'Con. + Pipe', NormalHeadingfoure: 'Fit. + Cover' },
                                            {},
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }



                                    if (newDatanew.subactivityname === "FoF -Waterproofing") {

                                        const dataArranew = [
                                            { materailname: 'Fiber Reinforced Elastomeric Liquid', materailquantity: materlID.FOFPW_FoFWaterproofingFiberReinforcedElastomericLiquidQuantity, materailUnit: 'Liter' },
                                            { materailname: 'Polymer for internal Wall', materailquantity: materlID.FOFPW_FoFWaterproofingPolymerForInternalWallQuantity, materailUnit: 'KG' },

                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }






                                    if (newDatanew.subactivityname === 'FoF - Pipe Work below Floor Level') {

                                        const dataArranew = [
                                            { checksHeading: 'Co-Ordination and Role of Water-Proofing Agency - Pre Work ', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Sunken floor check', checksdescription: 'Sunken floor should be plastered with C.M. 1:4 with a water-proofing compound and tested for water tightness.' },
                                            { checksHeading: 'Waterproofing Toilet Floor check', checksdescription: 'The first coat of water-proofing should be done before fixing sanitary traps, in case of water closets (W.C.) and toilets.' },
                                            { checksHeading: 'Waterproofing Terrace Floor', checksdescription: 'The first coat of water-proofing and brickbat Coba coat should be done before fixing the bends of rainwater lines at the terrace level.' },
                                            { checksHeading: 'Rainwater pipe check', checksdescription: 'In the case of terrace rainwater pipes, the joint near the bend should be neatly finished with cement mortar, to prevent leakages.' },
                                            { checksHeading: 'Co-Ordination and Role of Masonry Plaster Agency - Pre Work', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Outlets and traps check', checksdescription: 'Generally, all outlets are fixed and taken out from the building face, or sleeves are provided before the external plaster, Traps should be well embedded in cement mortar at the junction.' },
                                            { checksHeading: 'Chasing check', checksdescription: 'The walls of the W.C. and bathroom should be strong enough for the chasing of grooves for concealed pipes. Masonry of these walls must be done with the correctly specified ' },
                                            { checksHeading: 'Trap joints check', checksdescription: 'All the trap joints should be properly finished to avoid any leakage problems in the future. ' },
                                            { checksHeading: 'Bend check', checksdescription: 'In the case of terrace rainwater pipes, the joint near the bend should be neatly finished with cement mortar, to prevent leakages.' },
                                            { checksHeading: 'Line and level check', checksdescription: 'Hence duct plaster must be done in perfect plumb, line, and level. engineers contractors.' },
                                            { checksHeading: 'Co-Ordination and Role of Masonry Plaster Agency - Pre Work', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Levels Check', checksdescription: 'Levels should be given by the flooring person, for the pipe fitting as per drawing ' },
                                            { checksHeading: '', checksdescription: 'This causes the pipes to choke up and may lead to repairing/replacing the pipes. To prevent this, the tile powder slurry should be collected and disposed of manually. In addition, the following points should be observed-' },
                                            { checksHeading: 'Opening check', checksdescription: 'The opening of I.W.C. should be filled with sand, gunny bags, and the top layer should be covered with a thick layer of P.O.P.' },
                                            { checksHeading: 'Nahani trap check', checksdescription: 'Nahani trap hole should be made in the flooring tile after the completion of the polishing work.' },
                                            { checksHeading: 'Co-Ordination and Role of  Electrification Agency - Pre Work ', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Concelaed pipes check', checksdescription: 'Concealed plumbing and concealed electrification work are inter-linked activities, as far as bathrooms and toilets are concerned.' },
                                            { checksHeading: 'Concelaed pipes check', checksdescription: 'Since, both activities run simultaneously, pipes should be laid very carefully.' },
                                            { checksHeading: 'Electrical conduits check', checksdescription: 'Electrical conduits should not cross the plumbing pipes, so as to prevent any short circuits.' },
                                            { checksHeading: 'Co-Ordination and Role of  Painting Agency - Pre Work ', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Painting check', checksdescription: 'Painting is the final finishing item and starts after 90% of the plumbing work is over.' },
                                            { checksHeading: 'Painting check', checksdescription: 'Painters should not wash the used paint tins in bathroom washbasins. The sediments of the paints can cause choking up of the plumbing lines' },
                                            { checksHeading: 'General Care to be Taken By Plumber', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Handling check', checksdescription: 'Plumbers themselves should exercise precautions, since handling all agencies at a time is difficult.' },
                                            { checksHeading: 'Trap check', checksdescription: 'Plumbers should seal all the traps with gunny bags and a layer of plaster of Paris at the top, to minimize the choke-up problem.' },
                                            { checksHeading: 'Seal Check', checksdescription: 'Remove these seals at the time of testing.' },
                                        ];

                                        async function PlumbingChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PlumbingChacks();
                                    }



                                    if (newDatanew.subactivityname === "FoF - Pipe Work below Floor Level") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Layout', headingforshortingTwo: 'Pipeline' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Layout', NormalHeadingThree: 'Trap Locat.', NormalHeadingfoure: 'Base Prep.' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Pipe Laying', NormalHeadingThree: 'Covering', NormalHeadingfoure: 'Curing' },
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'FoF - Sunken Filling - COBA |Waste') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Assign the plumber for the work' },
                                            { subtaskdescription: 'Explain all the drawings to the plumber and ask him to carry out the work as per the drawings' },
                                            { subtaskdescription: 'Stormwater drawing' },
                                            { subtaskdescription: 'Drainage drawing' },
                                            { subtaskdescription: 'Water supply lines' },
                                            { subtaskdescription: 'Septic tank' },
                                            { subtaskdescription: 'O.H.W.T. - clear understanding of the supply system and other additioanl things if needed to be sorted with client if needed' },
                                            { subtaskdescription: 'U.G.W.T. - As per the client requirement, if connection is from society or Munical Corporation then how they want ki water is to be taken to overhead' },
                                            { subtaskdescription: 'Terrace level distribution - water slope on the terrace, Pipe, at the level of floor in case if the flooring is not done till the time, Flooring level is to be mention ' },
                                            { subtaskdescription: 'Internal plumbing work details' },
                                            { subtaskdescription: 'Swimming pool (if provided), details regarding plumbing requirements/filtration plant' },
                                            { subtaskdescription: 'Ask the Plumber to have a initial review and check if any interdepencies occur' },
                                            { subtaskdescription: 'Ask the Plumber to clear the interdepencies and coordinate with the other agencies' },
                                            { subtaskdescription: 'Inform the Plumber not to cut beam or column' },
                                            { subtaskdescription: 'Indicate the plumbing lines ie, sanitary and drainage line to the plumber' },
                                            { subtaskdescription: 'Take the quantity of materials  from the plumber and give to purchase manager' },
                                            { subtaskdescription: 'Ask the purchase manager to arrange the materials at site' },
                                            { subtaskdescription: 'Ask the plumber to check the materials which has been delivered' },
                                            { subtaskdescription: 'Internal washroom drawing, please confrm once with the clinet meet on site for the final head ups if needed' },
                                        ];

                                        async function PlumbingfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PlumbingfunCall();
                                    }
                                    if (newDatanew.subactivityname === 'FoF - Sunken Filling - COBA |Waste') {

                                        const dataArranew = [
                                            { checksHeading: 'Co-Ordination and Role of Water-Proofing Agency - Pre Work ', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Sunken floor check', checksdescription: 'Sunken floor should be plastered with C.M. 1:4 with a water-proofing compound and tested for water tightness.' },
                                            { checksHeading: 'Waterproofing Toilet Floor check', checksdescription: 'The first coat of water-proofing should be done before fixing sanitary traps, in case of water closets (W.C.) and toilets.' },
                                            { checksHeading: 'Waterproofing Terrace Floor', checksdescription: 'The first coat of water-proofing and brickbat Coba coat should be done before fixing the bends of rainwater lines at the terrace level.' },
                                            { checksHeading: 'Rainwater pipe check', checksdescription: 'In the case of terrace rainwater pipes, the joint near the bend should be neatly finished with cement mortar, to prevent leakages.' },
                                            { checksHeading: 'Co-Ordination and Role of Masonry Plaster Agency - Pre Work', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Outlets and traps check', checksdescription: 'Generally, all outlets are fixed and taken out from the building face, or sleeves are provided before the external plaster, Traps should be well embedded in cement mortar at the junction.' },
                                            { checksHeading: 'Chasing check', checksdescription: 'The walls of the W.C. and bathroom should be strong enough for the chasing of grooves for concealed pipes. Masonry of these walls must be done with the correctly specified ' },
                                            { checksHeading: 'Trap joints check', checksdescription: 'All the trap joints should be properly finished to avoid any leakage problems in the future. ' },
                                            { checksHeading: 'Bend check', checksdescription: 'In the case of terrace rainwater pipes, the joint near the bend should be neatly finished with cement mortar, to prevent leakages.' },
                                            { checksHeading: 'Line and level check', checksdescription: 'Hence duct plaster must be done in perfect plumb, line, and level. engineers contractors.' },
                                            { checksHeading: 'Co-Ordination and Role of Masonry Plaster Agency - Pre Work', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Levels Check', checksdescription: 'Levels should be given by the flooring person, for the pipe fitting as per drawing ' },
                                            { checksHeading: '', checksdescription: 'This causes the pipes to choke up and may lead to repairing/replacing the pipes. To prevent this, the tile powder slurry should be collected and disposed of manually. In addition, the following points should be observed-' },
                                            { checksHeading: 'Opening check', checksdescription: 'The opening of I.W.C. should be filled with sand, gunny bags, and the top layer should be covered with a thick layer of P.O.P.' },
                                            { checksHeading: 'Nahani trap check', checksdescription: 'Nahani trap hole should be made in the flooring tile after the completion of the polishing work.' },
                                            { checksHeading: 'Co-Ordination and Role of  Electrification Agency - Pre Work ', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Concelaed pipes check', checksdescription: 'Concealed plumbing and concealed electrification work are inter-linked activities, as far as bathrooms and toilets are concerned.' },
                                            { checksHeading: 'Concelaed pipes check', checksdescription: 'Since, both activities run simultaneously, pipes should be laid very carefully.' },
                                            { checksHeading: 'Electrical conduits check', checksdescription: 'Electrical conduits should not cross the plumbing pipes, so as to prevent any short circuits.' },
                                            { checksHeading: 'Co-Ordination and Role of  Painting Agency - Pre Work ', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Painting check', checksdescription: 'Painting is the final finishing item and starts after 90% of the plumbing work is over.' },
                                            { checksHeading: 'Painting check', checksdescription: 'Painters should not wash the used paint tins in bathroom washbasins. The sediments of the paints can cause choking up of the plumbing lines' },
                                            { checksHeading: 'General Care to be Taken By Plumber', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Handling check', checksdescription: 'Plumbers themselves should exercise precautions, since handling all agencies at a time is difficult.' },
                                            { checksHeading: 'Trap check', checksdescription: 'Plumbers should seal all the traps with gunny bags and a layer of plaster of Paris at the top, to minimize the choke-up problem.' },
                                            { checksHeading: 'Seal Check', checksdescription: 'Remove these seals at the time of testing.' },
                                        ];

                                        async function PlumbingChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PlumbingChacks();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'Tower - Pipe Work below Floor Level') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Assign the plumber for the work' },
                                            { subtaskdescription: 'Explain all the drawings to the plumber and ask him to carry out the work as per the drawings' },
                                            { subtaskdescription: 'Stormwater drawing' },
                                            { subtaskdescription: 'Drainage drawing' },
                                            { subtaskdescription: 'Water supply lines' },
                                            { subtaskdescription: 'Septic tank' },
                                            { subtaskdescription: 'O.H.W.T. - clear understanding of the supply system and other additioanl things if needed to be sorted with client if needed' },
                                            { subtaskdescription: 'U.G.W.T. - As per the client requirement, if connection is from society or Munical Corporation then how they want ki water is to be taken to overhead' },
                                            { subtaskdescription: 'Terrace level distribution - water slope on the terrace, Pipe, at the level of floor in case if the flooring is not done till the time, Flooring level is to be mention ' },
                                            { subtaskdescription: 'Internal plumbing work details' },
                                            { subtaskdescription: 'Swimming pool (if provided), details regarding plumbing requirements/filtration plant' },
                                            { subtaskdescription: 'Ask the Plumber to have a initial review and check if any interdepencies occur' },
                                            { subtaskdescription: 'Ask the Plumber to clear the interdepencies and coordinate with the other agencies' },
                                            { subtaskdescription: 'Inform the Plumber not to cut beam or column' },
                                            { subtaskdescription: 'Indicate the plumbing lines ie, sanitary and drainage line to the plumber' },
                                            { subtaskdescription: 'Take the quantity of materials  from the plumber and give to purchase manager' },
                                            { subtaskdescription: 'Ask the purchase manager to arrange the materials at site' },
                                            { subtaskdescription: 'Ask the plumber to check the materials which has been delivered' },
                                            { subtaskdescription: 'Internal washroom drawing, please confrm once with the clinet meet on site for the final head ups if needed' },
                                        ];

                                        async function PlumbingfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PlumbingfunCall();
                                    }



                                    if (newDatanew.subactivityname === "Tower - Pipe Work below Floor Level") {

                                        const dataArranew = [
                                            { materailname: '100 MM Pipe', materailquantity: materlID.TPW_TowerPipeWorkBelowFloorLevelPipe100MMQuantity, materailUnit: 'RUFT' },
                                            { materailname: '75 MM Pipe', materailquantity: materlID.TPW_TowerPipeWorkBelowFloorLevelPipe75MMQuantity, materailUnit: 'RUFT' },
                                            { materailname: 'Solent', materailquantity: materlID.TPW_TowerPipeWorkBelowFloorLevelSolentQuantity, materailUnit: 'Container' },
                                            { materailname: 'Traps', materailquantity: materlID.TPW_TowerPipeWorkBelowFloorLevelTrapsQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Connector', materailquantity: materlID.TPW_TowerPipeWorkBelowFloorLevelConnectorQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Portland Cement', materailquantity: materlID.TPW_TowerPipeWorkBelowFloorLevelPortlandCementQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Course Sand', materailquantity: materlID.TPW_TowerPipeWorkBelowFloorLevelCourseSandQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Stone Aggregate (20 MM)', materailquantity: materlID.TPW_TowerPipeWorkBelowFloorLevelStoneAggregate20MMQuantity, materailUnit: 'NOS.' },


                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }



                                    if (newDatanew.subactivityname === "Tower - Sunken Filling - COBA |Waste") {

                                        const dataArranew = [
                                            { materailname: 'Brick Bats', materailquantity: materlID.TPW_TowerSunkenFillingCOBAWasteBrickBatsQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Cement', materailquantity: materlID.TPW_TowerSunkenFillingCOBAWasteCementQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Sand', materailquantity: materlID.TPW_TowerSunkenFillingCOBAWasteSandQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Waterproofing', materailquantity: materlID.TPW_TowerSunkenFillingCOBAWasteWaterproofingQuantity, materailUnit: 'KG' },
                                            { materailname: 'Filling - Malba', materailquantity: materlID.TPW_TowerSunkenFillingCOBAWasteFillingMalbaQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Filling  - Cement', materailquantity: materlID.TPW_TowerSunkenFillingCOBAWasteFillingCementQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Filling  - Ploymer Cementious Coat', materailquantity: materlID.TPW_TowerSunkenFillingCOBAWasteFillingPolymerCementiousCoatQuantity, materailUnit: 'SQFT' },

                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === "Tower -Wall Conduting + Internal Fittings") {

                                        const dataArranew = [
                                            { materailname: '20 MM 11 SDR Pipe', materailquantity: materlID.TPW_TowerWallConduitingInternalFittingsPipe20MM11SDRQuantity, materailUnit: 'NOS.' },
                                            { materailname: '32 MM 11 SDR Pipe', materailquantity: materlID.TPW_TowerWallConduitingInternalFittingsPipe32MM11SDRQuantity, materailUnit: 'NOS.' },
                                            { materailname: '40 MM 11 SDR Pipe', materailquantity: materlID.TPW_TowerWallConduitingInternalFittingsPipe40MM11SDRQuantity, materailUnit: 'NOS.' },
                                            { materailname: '110 MM 11 SDR Pipe', materailquantity: materlID.TPW_TowerWallConduitingInternalFittingsPipe110MM11SDRQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Elbow - 20 MM', materailquantity: materlID.TPW_TowerWallConduitingInternalFittingsElbow20MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Elbow - 32 MM', materailquantity: materlID.TPW_TowerWallConduitingInternalFittingsElbow32MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Elbow - 40 MM', materailquantity: materlID.TPW_TowerWallConduitingInternalFittingsElbow40MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Elbow - 110 MM', materailquantity: materlID.TPW_TowerWallConduitingInternalFittingsElbow110MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Shu Elbow - 20 MM', materailquantity: materlID.TPW_TowerWallConduitingInternalFittingsShuElbow20MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Shu Elbow - 32 MM', materailquantity: materlID.TPW_TowerWallConduitingInternalFittingsShuElbow32MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Shu Elbow - 40 MM', materailquantity: materlID.TPW_TowerWallConduitingInternalFittingsShuElbow40MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Shu Elbow - 110 MM', materailquantity: materlID.TPW_TowerWallConduitingInternalFittingsShuElbow110MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Tee - 32 MM', materailquantity: materlID.TPW_TowerWallConduitingInternalFittingsTee32MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Tee - 110 MM', materailquantity: materlID.TPW_TowerWallConduitingInternalFittingsTee110MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Door Tee - 110 MM', materailquantity: materlID.TPW_TowerWallConduitingInternalFittingsDoorTee110MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Coupler - 20 MM', materailquantity: materlID.TPW_TowerWallConduitingInternalFittingsCoupler20MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Coupler - 32 MM', materailquantity: materlID.TPW_TowerWallConduitingInternalFittingsCoupler32MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Union - 20 MM', materailquantity: materlID.TPW_TowerWallConduitingInternalFittingsUnion20MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Union - 32 MM', materailquantity: materlID.TPW_TowerWallConduitingInternalFittingsUnion32MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Step over bend - 20 MM', materailquantity: materlID.TPW_TowerWallConduitingInternalFittingsStepOverBend20MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Tank Nippal Plain - 32 MM', materailquantity: materlID.TPW_TowerWallConduitingInternalFittingsTankNippalPlain32MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Endcap - 20 MM', materailquantity: materlID.TPW_TowerWallConduitingInternalFittingsEndcap20MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Endcap - 32 MM', materailquantity: materlID.TPW_TowerWallConduitingInternalFittingsEndcap32MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Endcap - 40 MM', materailquantity: materlID.TPW_TowerWallConduitingInternalFittingsEndcap40MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Endcap - 110 MM', materailquantity: materlID.TPW_TowerWallConduitingInternalFittingsEndcap110MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Ball Valve - 20 MM', materailquantity: materlID.TPW_TowerWallConduitingInternalFittingsBallValve20MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Ball Valve - 32 MM', materailquantity: materlID.TPW_TowerWallConduitingInternalFittingsBallValve32MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'NRV - 32 MM', materailquantity: materlID.TPW_TowerWallConduitingInternalFittingsNRV32MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Single Y (Tee) - 110 MM', materailquantity: materlID.TPW_TowerWallConduitingInternalFittingsSingleYTee110MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Nahani Trap -  - 110 MM', materailquantity: materlID.TPW_TowerWallConduitingInternalFittingsNahaniTrap110MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Vent Cowl  - 110 MM', materailquantity: materlID.TPW_TowerWallConduitingInternalFittingsVentCowl110MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Brass Elbow - 20 MM (20 x 15)', materailquantity: materlID.TPW_TowerWallConduitingInternalFittingsBrassElbow20MM2015Quantity, materailUnit: 'NOS.' },
                                            { materailname: 'Brass Tee 20 MM - (20 x 15)', materailquantity: materlID.TPW_TowerWallConduitingInternalFittingsBrassTee20MM2015Quantity, materailUnit: 'NOS.' },
                                            { materailname: 'MTA 20 MM - (20 x 15)', materailquantity: materlID.TPW_TPW_TowerWallConduitingInternalFittingsMTA20MM2015Quantity, materailUnit: 'NOS.' },
                                            { materailname: 'FTA 20 MM - (20 x 15)', materailquantity: materlID.TPW_TowerWallConduitingInternalFittingsFTA20MM2015Quantity, materailUnit: 'NOS.' },
                                            { materailname: 'Bush - 32 x 20', materailquantity: materlID.TPW_TowerWallConduitingInternalFittingsBush32x20Quantity, materailUnit: 'NOS.' },
                                            { materailname: 'P Trap - 125 x 110', materailquantity: materlID.TPW_TowerWallConduitingInternalFittingsPTrap125x110Quantity, materailUnit: 'NOS.' },
                                            { materailname: 'P Trap - 110 x 110', materailquantity: materlID.TPW_TowerWallConduitingInternalFittingsPTrap110x110Quantity, materailUnit: 'NOS.' },
                                            { materailname: 'Solvent - 118 ML', materailquantity: materlID.TPW_TowerWallConduitingInternalFittingsSolvent118MLQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Solvent - 237 ML', materailquantity: materlID.TPW_TowerWallConduitingInternalFittingsSolvent237MLQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Solvent - 250 ML', materailquantity: materlID.TPW_TowerWallConduitingInternalFittingsSolvent250MLQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Rubber Lubricants - 250 GM', materailquantity: materlID.TPW_TowerWallConduitingInternalFittingsRubberLubricants250GMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Long Plug - 15 MM', materailquantity: materlID.TPW_TowerWallConduitingInternalFittingsLongPlug15MMQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Tefloe Tap', materailquantity: materlID.TPW_TowerWallConduitingInternalFittingsTefloeTapQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Concealed Tank', materailquantity: materlID.TPW_TowerWallConduitingInternalFittingsConcealedTankQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Wash Basin Tap Tpye', materailquantity: materlID.TPW_TowerWallConduitingInternalFittingsWashBasinTapTypeQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Diverter', materailquantity: materlID.TPW_TowerWallConduitingInternalFittingsDiverterQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Thermostat', materailquantity: materlID.TPW_TowerWallConduitingInternalFittingsThermostatQuantity, materailUnit: 'NOS.' },

                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === "Tower -Wall Conduting + Internal Fittings") {

                                        const dataArranew = [
                                            {},
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Lay. + Hei.', NormalHeadingThree: 'Con. + Pipe', NormalHeadingfoure: 'Fit. + Cover' },
                                            {},
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }


                                    if (newDatanew.subactivityname === "Tower -Waterproofing") {

                                        const dataArranew = [
                                            { materailname: 'Fiber Reinforced Elastomeric Liquid', materailquantity: materlID.TPW_TowerWaterproofingFiberReinforcedElastomericLiquidQuantity, materailUnit: 'Liter' },
                                            { materailname: 'Polymer for internal Wall', materailquantity: materlID.TPW_TowerWaterproofingPolymerForInternalWallQuantity, materailUnit: 'KG' },

                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === 'Tower - Pipe Work below Floor Level') {

                                        const dataArranew = [
                                            { checksHeading: 'Co-Ordination and Role of Water-Proofing Agency - Pre Work ', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Sunken floor check', checksdescription: 'Sunken floor should be plastered with C.M. 1:4 with a water-proofing compound and tested for water tightness.' },
                                            { checksHeading: 'Waterproofing Toilet Floor check', checksdescription: 'The first coat of water-proofing should be done before fixing sanitary traps, in case of water closets (W.C.) and toilets.' },
                                            { checksHeading: 'Waterproofing Terrace Floor', checksdescription: 'The first coat of water-proofing and brickbat Coba coat should be done before fixing the bends of rainwater lines at the terrace level.' },
                                            { checksHeading: 'Rainwater pipe check', checksdescription: 'In the case of terrace rainwater pipes, the joint near the bend should be neatly finished with cement mortar, to prevent leakages.' },
                                            { checksHeading: 'Co-Ordination and Role of Masonry Plaster Agency - Pre Work', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Outlets and traps check', checksdescription: 'Generally, all outlets are fixed and taken out from the building face, or sleeves are provided before the external plaster, Traps should be well embedded in cement mortar at the junction.' },
                                            { checksHeading: 'Chasing check', checksdescription: 'The walls of the W.C. and bathroom should be strong enough for the chasing of grooves for concealed pipes. Masonry of these walls must be done with the correctly specified ' },
                                            { checksHeading: 'Trap joints check', checksdescription: 'All the trap joints should be properly finished to avoid any leakage problems in the future. ' },
                                            { checksHeading: 'Bend check', checksdescription: 'In the case of terrace rainwater pipes, the joint near the bend should be neatly finished with cement mortar, to prevent leakages.' },
                                            { checksHeading: 'Line and level check', checksdescription: 'Hence duct plaster must be done in perfect plumb, line, and level. engineers contractors.' },
                                            { checksHeading: 'Co-Ordination and Role of Masonry Plaster Agency - Pre Work', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Levels Check', checksdescription: 'Levels should be given by the flooring person, for the pipe fitting as per drawing ' },
                                            { checksHeading: '', checksdescription: 'This causes the pipes to choke up and may lead to repairing/replacing the pipes. To prevent this, the tile powder slurry should be collected and disposed of manually. In addition, the following points should be observed-' },
                                            { checksHeading: 'Opening check', checksdescription: 'The opening of I.W.C. should be filled with sand, gunny bags, and the top layer should be covered with a thick layer of P.O.P.' },
                                            { checksHeading: 'Nahani trap check', checksdescription: 'Nahani trap hole should be made in the flooring tile after the completion of the polishing work.' },
                                            { checksHeading: 'Co-Ordination and Role of  Electrification Agency - Pre Work ', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Concelaed pipes check', checksdescription: 'Concealed plumbing and concealed electrification work are inter-linked activities, as far as bathrooms and toilets are concerned.' },
                                            { checksHeading: 'Concelaed pipes check', checksdescription: 'Since, both activities run simultaneously, pipes should be laid very carefully.' },
                                            { checksHeading: 'Electrical conduits check', checksdescription: 'Electrical conduits should not cross the plumbing pipes, so as to prevent any short circuits.' },
                                            { checksHeading: 'Co-Ordination and Role of  Painting Agency - Pre Work ', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Painting check', checksdescription: 'Painting is the final finishing item and starts after 90% of the plumbing work is over.' },
                                            { checksHeading: 'Painting check', checksdescription: 'Painters should not wash the used paint tins in bathroom washbasins. The sediments of the paints can cause choking up of the plumbing lines' },
                                            { checksHeading: 'General Care to be Taken By Plumber', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Handling check', checksdescription: 'Plumbers themselves should exercise precautions, since handling all agencies at a time is difficult.' },
                                            { checksHeading: 'Trap check', checksdescription: 'Plumbers should seal all the traps with gunny bags and a layer of plaster of Paris at the top, to minimize the choke-up problem.' },
                                            { checksHeading: 'Seal Check', checksdescription: 'Remove these seals at the time of testing.' },
                                        ];

                                        async function PlumbingChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PlumbingChacks();
                                    }

                                    if (newDatanew.subactivityname === "Tower - Pipe Work below Floor Level") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Layout', headingforshortingTwo: 'Pipeline' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Layout', NormalHeadingThree: 'Trap Locat.', NormalHeadingfoure: 'Base Prep.' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Pipe Laying', NormalHeadingThree: 'Covering', NormalHeadingfoure: 'Curing' },
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }

                                    //Anuj
                                    if (newDatanew.subactivityname === 'Tower - Sunken Filling - COBA |Waste') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Assign the plumber for the work' },
                                            { subtaskdescription: 'Explain all the drawings to the plumber and ask him to carry out the work as per the drawings' },
                                            { subtaskdescription: 'Stormwater drawing' },
                                            { subtaskdescription: 'Drainage drawing' },
                                            { subtaskdescription: 'Water supply lines' },
                                            { subtaskdescription: 'Septic tank' },
                                            { subtaskdescription: 'O.H.W.T. - clear understanding of the supply system and other additioanl things if needed to be sorted with client if needed' },
                                            { subtaskdescription: 'U.G.W.T. - As per the client requirement, if connection is from society or Munical Corporation then how they want ki water is to be taken to overhead' },
                                            { subtaskdescription: 'Terrace level distribution - water slope on the terrace, Pipe, at the level of floor in case if the flooring is not done till the time, Flooring level is to be mention ' },
                                            { subtaskdescription: 'Internal plumbing work details' },
                                            { subtaskdescription: 'Swimming pool (if provided), details regarding plumbing requirements/filtration plant' },
                                            { subtaskdescription: 'Ask the Plumber to have a initial review and check if any interdepencies occur' },
                                            { subtaskdescription: 'Ask the Plumber to clear the interdepencies and coordinate with the other agencies' },
                                            { subtaskdescription: 'Inform the Plumber not to cut beam or column' },
                                            { subtaskdescription: 'Indicate the plumbing lines ie, sanitary and drainage line to the plumber' },
                                            { subtaskdescription: 'Take the quantity of materials  from the plumber and give to purchase manager' },
                                            { subtaskdescription: 'Ask the purchase manager to arrange the materials at site' },
                                            { subtaskdescription: 'Ask the plumber to check the materials which has been delivered' },
                                            { subtaskdescription: 'Internal washroom drawing, please confrm once with the clinet meet on site for the final head ups if needed' },
                                        ];

                                        async function PlumbingfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PlumbingfunCall();
                                    }
                                    if (newDatanew.subactivityname === 'Tower - Sunken Filling - COBA |Waste') {

                                        const dataArranew = [
                                            { checksHeading: 'Co-Ordination and Role of Water-Proofing Agency - Pre Work ', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Sunken floor check', checksdescription: 'Sunken floor should be plastered with C.M. 1:4 with a water-proofing compound and tested for water tightness.' },
                                            { checksHeading: 'Waterproofing Toilet Floor check', checksdescription: 'The first coat of water-proofing should be done before fixing sanitary traps, in case of water closets (W.C.) and toilets.' },
                                            { checksHeading: 'Waterproofing Terrace Floor', checksdescription: 'The first coat of water-proofing and brickbat Coba coat should be done before fixing the bends of rainwater lines at the terrace level.' },
                                            { checksHeading: 'Rainwater pipe check', checksdescription: 'In the case of terrace rainwater pipes, the joint near the bend should be neatly finished with cement mortar, to prevent leakages.' },
                                            { checksHeading: 'Co-Ordination and Role of Masonry Plaster Agency - Pre Work', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Outlets and traps check', checksdescription: 'Generally, all outlets are fixed and taken out from the building face, or sleeves are provided before the external plaster, Traps should be well embedded in cement mortar at the junction.' },
                                            { checksHeading: 'Chasing check', checksdescription: 'The walls of the W.C. and bathroom should be strong enough for the chasing of grooves for concealed pipes. Masonry of these walls must be done with the correctly specified ' },
                                            { checksHeading: 'Trap joints check', checksdescription: 'All the trap joints should be properly finished to avoid any leakage problems in the future. ' },
                                            { checksHeading: 'Bend check', checksdescription: 'In the case of terrace rainwater pipes, the joint near the bend should be neatly finished with cement mortar, to prevent leakages.' },
                                            { checksHeading: 'Line and level check', checksdescription: 'Hence duct plaster must be done in perfect plumb, line, and level. engineers contractors.' },
                                            { checksHeading: 'Co-Ordination and Role of Masonry Plaster Agency - Pre Work', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Levels Check', checksdescription: 'Levels should be given by the flooring person, for the pipe fitting as per drawing ' },
                                            { checksHeading: '', checksdescription: 'This causes the pipes to choke up and may lead to repairing/replacing the pipes. To prevent this, the tile powder slurry should be collected and disposed of manually. In addition, the following points should be observed-' },
                                            { checksHeading: 'Opening check', checksdescription: 'The opening of I.W.C. should be filled with sand, gunny bags, and the top layer should be covered with a thick layer of P.O.P.' },
                                            { checksHeading: 'Nahani trap check', checksdescription: 'Nahani trap hole should be made in the flooring tile after the completion of the polishing work.' },
                                            { checksHeading: 'Co-Ordination and Role of  Electrification Agency - Pre Work ', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Concelaed pipes check', checksdescription: 'Concealed plumbing and concealed electrification work are inter-linked activities, as far as bathrooms and toilets are concerned.' },
                                            { checksHeading: 'Concelaed pipes check', checksdescription: 'Since, both activities run simultaneously, pipes should be laid very carefully.' },
                                            { checksHeading: 'Electrical conduits check', checksdescription: 'Electrical conduits should not cross the plumbing pipes, so as to prevent any short circuits.' },
                                            { checksHeading: 'Co-Ordination and Role of  Painting Agency - Pre Work ', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Painting check', checksdescription: 'Painting is the final finishing item and starts after 90% of the plumbing work is over.' },
                                            { checksHeading: 'Painting check', checksdescription: 'Painters should not wash the used paint tins in bathroom washbasins. The sediments of the paints can cause choking up of the plumbing lines' },
                                            { checksHeading: 'General Care to be Taken By Plumber', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Handling check', checksdescription: 'Plumbers themselves should exercise precautions, since handling all agencies at a time is difficult.' },
                                            { checksHeading: 'Trap check', checksdescription: 'Plumbers should seal all the traps with gunny bags and a layer of plaster of Paris at the top, to minimize the choke-up problem.' },
                                            { checksHeading: 'Seal Check', checksdescription: 'Remove these seals at the time of testing.' },
                                        ];

                                        async function PlumbingChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PlumbingChacks();
                                    }


                                    if (newDatanew.subactivityname === 'Reverse Line') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Ensure that all fixtures like bibcocks, mixers etc. are fixed properly.' },
                                            { subtaskdescription: 'Confirm that there is no leakage from cocks/ other C.P. fixtures.' },
                                            { subtaskdescription: 'Confirm that there is proper pressure to all the cocks / other C.P. fixtures.' },
                                            { subtaskdescription: 'Ensure that the half turn flush cock is operating properly.' },
                                            { subtaskdescription: 'Ensure that there is not any choke up in W.C. after continuous flow of water from half turn flush cock.' },
                                            { subtaskdescription: 'Confirm that there not any cement lump observed in P-trap of W.C.' },
                                            { subtaskdescription: 'Ensure that there is not any choke up of Nahani trap of bath room after continuous flow of water for five minutes.' },
                                            { subtaskdescription: 'Ensure that the hot & cold water mixer is operating properly.' },
                                            { subtaskdescription: 'Ensure that the boiler connections are properly plugged .' },
                                            { subtaskdescription: 'Ensure that the low level water tank of E.W.C. is operating properly.' },
                                            { subtaskdescription: 'Confirm that the seat cover of E.W.C. fixed properly.' },
                                            { subtaskdescription: 'Ensure that proper cleaning is done for all sanitary fixtures.' },
                                            { subtaskdescription: 'Confirm that the brackets of W.H.B. are painted with oil paint.' },
                                            { subtaskdescription: 'Confirm that open G.I. pipes fitting connected to E.W.C.are painted.' },
                                            { subtaskdescription: 'W.H.B. is fitted properly. ( It should not shake).' },
                                            { subtaskdescription: 'Check the cracks/ breakages for any of the sanitary fittings.' },
                                            { subtaskdescription: 'Confirm that there is no leakage from G.I. lines in duct after continuous water flow for fifteen minutes.' },
                                            { subtaskdescription: 'Confirm that the fixing of G.I. / C.I./ P.V.C. lines in plumb and with proper clamping.' },
                                            { subtaskdescription: 'Confirm that there is no leakage in the drainage chambers.' },
                                            { subtaskdescription: 'Confirm that there are no cracks on white cement filled between wash basin and wall.' },
                                            { subtaskdescription: 'Confirm that there is no leakage in the main inlet and outlet G.I. lines or water tanks.' },
                                            { subtaskdescription: 'Ensure that the C.P.V.C. outlet pipes for wash hand basin and kitchen sink are fixed properly.' },
                                        ];

                                        async function BeamSlabShutteringReinforcementRCCfuction() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteringReinforcementRCCfuction();
                                    }



                                    if (newDatanew.subactivityname === "Reverse Line") {

                                        const dataArranew = [
                                            { materailname: '3/4" PIpe', materailquantity: materlID.RL_REVERSELINEPipe34InchQuantity, materailUnit: 'Nos.' },
                                            { materailname: '1" Pipe', materailquantity: materlID.RL_REVERSELINEPipe1InchQuantity, materailUnit: 'Nos.' },
                                            { materailname: 'Elbow - 3/4"', materailquantity: materlID.RL_REVERSELINEElbow34InchQuantity, materailUnit: 'Nos.' },
                                            { materailname: 'Elbow - 1"', materailquantity: materlID.RL_REVERSELINEElbow1InchQuantity, materailUnit: 'Nos.' },
                                            { materailname: 'Shoe 3/4"', materailquantity: materlID.RL_REVERSELINEShoe34InchQuantity, materailUnit: 'Nos.' },
                                            { materailname: 'Shoe 1"', materailquantity: materlID.RL_REVERSELINEShoe1InchQuantity, materailUnit: 'Nos.' },
                                            { materailname: 'Tee 3/4"', materailquantity: materlID.RL_REVERSELINETee34InchQuantity, materailUnit: 'Nos.' },
                                            { materailname: 'Tee 1"', materailquantity: materlID.RL_REVERSELINETee1InchQuantity, materailUnit: 'Nos.' },
                                            { materailname: 'Socks 3/4"', materailquantity: materlID.RL_REVERSELINESocks34InchQuantity, materailUnit: 'Nos.' },
                                            { materailname: 'Socks 1"', materailquantity: materlID.RL_REVERSELINESocks1InchQuantity, materailUnit: 'Nos.' },
                                            { materailname: 'Union 3/4"', materailquantity: materlID.RL_REVERSELINEUnion34InchQuantity, materailUnit: 'Nos.' },
                                            { materailname: 'Union 1"', materailquantity: materlID.RL_REVERSELINEUnion1InchQuantity, materailUnit: 'Nos.' },
                                            { materailname: 'Stop Bend 3/4"', materailquantity: materlID.RL_REVERSELINEStopBend34InchQuantity, materailUnit: 'Nos.' },
                                            { materailname: 'Stop Bend 1"', materailquantity: materlID.RL_REVERSELINEStopBend1InchQuantity, materailUnit: 'Nos.' },
                                            { materailname: 'End Cap 3/4"', materailquantity: materlID.RL_REVERSELINEEndCap34InchQuantity, materailUnit: 'Nos.' },
                                            { materailname: 'End Cap 1"', materailquantity: materlID.RL_REVERSELINEEndCap1InchQuantity, materailUnit: 'Nos.' },
                                            { materailname: '3/4" Valve', materailquantity: materlID.RL_REVERSELINEValve34InchQuantity, materailUnit: 'Nos.' },
                                            { materailname: '1" Valve', materailquantity: materlID.RL_REVERSELINEValve1InchQuantity, materailUnit: 'Nos.' },
                                            { materailname: 'NRV 3/4"', materailquantity: materlID.RL_REVERSELINENRV34InchQuantity, materailUnit: 'Nos.' },
                                            { materailname: 'NRV 1"', materailquantity: materlID.RL_REVERSELINENRV1InchQuantity, materailUnit: 'Nos.' },
                                            { materailname: 'NRV 1.25"', materailquantity: materlID.RL_REVERSELINENRV125InchQuantity, materailUnit: 'Nos.' },
                                            { materailname: 'Poros 1"', materailquantity: materlID.RL_REVERSELINEPoros1InchQuantity, materailUnit: 'Nos.' },
                                            { materailname: 'Solvent PVC', materailquantity: materlID.RL_REVERSELINESolventPVC1Quantity, materailUnit: 'Nos.' },
                                            { materailname: 'Solvent PVC', materailquantity: materlID.RL_REVERSELINESolventPVC2Quantity, materailUnit: 'Nos.' },

                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }

                                    if (newDatanew.subactivityname === "Rain Water Harvesting") {

                                        const dataArranew = [
                                            { materailname: 'PVC Pipe', materailquantity: materlID.RWH_RainWaterHarvestingPVCPipeQuantity, materailUnit: 'RUFT' },
                                            { materailname: 'Clips', materailquantity: materlID.RWH_RainWaterHarvestingClipsQuantity, materailUnit: 'Nos.' },
                                            { materailname: 'Solvent', materailquantity: materlID.RWH_RainWaterHarvestingSolventQuantity, materailUnit: 'CONTAINER' },
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === "Seperate | Individual Line per Floor") {

                                        const dataArranew = [
                                            { materailname: '32 MM CPVC Pipe', materailquantity: materlID.SL_SeperateIndividualLineperFloorCPVCPipe32MMQuantity, materailUnit: 'Nos' },
                                            { materailname: '32 Elbow', materailquantity: materlID.SL_SeperateIndividualLineperFloorElbow32MMQuantity, materailUnit: 'Nos' },
                                            { materailname: '32 Tee', materailquantity: materlID.SL_SeperateIndividualLineperFloorTee32MMQuantity, materailUnit: 'Nos' },
                                            { materailname: '32 Socket', materailquantity: materlID.SL_SeperateIndividualLineperFloorSocket32MMQuantity, materailUnit: 'Nos' },
                                            { materailname: '32 Valve', materailquantity: materlID.SL_SeperateIndividualLineperFloorValve32MMQuantity, materailUnit: 'Nos' },
                                            { materailname: '20 MM CPVC Pipe', materailquantity: materlID.SL_SeperateIndividualLineperFloorCPVCPipe20MMQuantity, materailUnit: 'Nos' },
                                            { materailname: '20 Elbow', materailquantity: materlID.SL_SeperateIndividualLineperFloorElbow20MMQuantity, materailUnit: 'Nos' },
                                            { materailname: '20 Socket', materailquantity: materlID.SL_SeperateIndividualLineperFloorSocket20MMQuantity, materailUnit: 'Nos' },
                                            { materailname: '25 MM CPVC Pipe', materailquantity: materlID.SL_SeperateIndividualLineperFloorCPVCPipe25MMQuantity, materailUnit: 'Nos' },
                                            { materailname: '25 Elbow', materailquantity: materlID.SL_SeperateIndividualLineperFloorElbow25MMQuantity, materailUnit: 'Nos' },
                                            { materailname: 'CPVC Solvent 237 ML', materailquantity: materlID.SL_SeperateIndividualLineperFloorCPVCSolvent237MLQuantity, materailUnit: 'Nos' },
                                            { materailname: '30 MM Shu Elbow', materailquantity: materlID.SL_SeperateIndividualLineperFloorShuElbow30MMQuantity, materailUnit: 'Nos' }
                                        ]


                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === "Seperate | Individual Line per Floor") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Layout', headingforshortingTwo: 'Pipeline' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Explain', NormalHeadingThree: 'Layout', NormalHeadingfoure: 'Conduit' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Pipeline', NormalHeadingThree: 'Clamping', NormalHeadingfoure: 'Covering' },
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }


                                    if (newDatanew.subactivityname === "AC") {

                                        const dataArranew = [
                                            { materailname: 'Pipe', materailquantity: materlID.ACPIpeQuantity, materailUnit: 'RMT' },

                                        ]


                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }



                                    if (newDatanew.subactivityname === "AC") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Layout', headingforshortingTwo: 'AC Line' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Lay. + Hei.', NormalHeadingThree: 'Con. + Line', NormalHeadingfoure: 'Drain + Co.' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Lay. + Hei.', NormalHeadingThree: 'Con. + Line', NormalHeadingfoure: 'Drain + Co.' },
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }



                                    if (newDatanew.subactivityname === "Solar Heater | Geyser Line") {

                                        const dataArranew = [
                                            { materailname: '3/4" PIpe', materailquantity: materlID.SolarHeaterGeyserLinePipe34InchQuantity, materailUnit: 'Nos.' },
                                            { materailname: '1" Pipe', materailquantity: materlID.SolarHeaterGeyserLinePipe1InchQuantity, materailUnit: 'Nos.' },
                                            { materailname: 'Elbow - 3/4"', materailquantity: materlID.SolarHeaterGeyserLineElbow34InchQuantity, materailUnit: 'Nos.' },
                                            { materailname: 'Elbow - 1"', materailquantity: materlID.SolarHeaterGeyserLineElbow1InchQuantity, materailUnit: 'Nos.' },
                                            { materailname: 'Shoe 3/4"', materailquantity: materlID.SolarHeaterGeyserLineShoe34InchQuantity, materailUnit: 'Nos.' },
                                            { materailname: 'Shoe 1"', materailquantity: materlID.SolarHeaterGeyserLineShoe1InchQuantity, materailUnit: 'Nos.' },
                                            { materailname: 'Tee 3/4"', materailquantity: materlID.SolarHeaterGeyserLineTee34InchQuantity, materailUnit: 'Nos.' },
                                            { materailname: 'Tee 1"', materailquantity: materlID.SolarHeaterGeyserLineTee1InchQuantity, materailUnit: 'Nos.' },
                                            { materailname: 'Socks 3/4"', materailquantity: materlID.SolarHeaterGeyserLineSocks34InchQuantity, materailUnit: 'Nos.' },
                                            { materailname: 'Socks 1"', materailquantity: materlID.SolarHeaterGeyserLineSocks1InchQuantity, materailUnit: 'Nos.' },
                                            { materailname: 'Union 3/4"', materailquantity: materlID.SolarHeaterGeyserLineUnion34InchQuantity, materailUnit: 'Nos.' },
                                            { materailname: 'Union 1"', materailquantity: materlID.SolarHeaterGeyserLineUnion1InchQuantity, materailUnit: 'Nos.' },
                                            { materailname: 'Stop Bend 3/4"', materailquantity: materlID.SolarHeaterGeyserLineStopBend34InchQuantity, materailUnit: 'Nos.' },
                                            { materailname: 'Stop Bend 1"', materailquantity: materlID.SolarHeaterGeyserLineStopBend1InchQuantity, materailUnit: 'Nos.' },
                                            { materailname: 'End Cap 3/4"', materailquantity: materlID.SolarHeaterGeyserLineEndCap34InchQuantity, materailUnit: 'Nos.' },
                                            { materailname: 'End Cap 1"', materailquantity: materlID.SolarHeaterGeyserLineEndCap1InchQuantity, materailUnit: 'Nos.' },
                                            { materailname: '3/4" Valve', materailquantity: materlID.SolarHeaterGeyserLineValve34InchQuantity, materailUnit: 'Nos.' },
                                            { materailname: '1" Valve', materailquantity: materlID.SolarHeaterGeyserLineValve1InchQuantity, materailUnit: 'Nos.' },
                                            { materailname: 'NRV 3/4"', materailquantity: materlID.SolarHeaterGeyserLineNRV34InchQuantity, materailUnit: 'Nos.' },
                                            { materailname: 'NRV 1"', materailquantity: materlID.SolarHeaterGeyserLineNRV1InchQuantity, materailUnit: 'Nos.' },
                                            { materailname: 'NRV 1.25"', materailquantity: materlID.SolarHeaterGeyserLineNRV125InchQuantity, materailUnit: 'Nos.' },
                                            { materailname: 'Poros 1"', materailquantity: materlID.SolarHeaterGeyserLinePoros1InchQuantity, materailUnit: 'Nos.' },
                                            { materailname: 'Solvent PVC', materailquantity: materlID.SolarHeaterGeyserLineSolventPVC1Quantity, materailUnit: 'Nos.' },
                                            { materailname: 'Solvent PVC', materailquantity: materlID.SolarHeaterGeyserLineSolventPVC2Quantity, materailUnit: 'Nos.' },

                                        ];


                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }




                                    if (newDatanew.subactivityname === "Reverse Line") {

                                        const dataArranew = [
                                            {},
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Explain', NormalHeadingThree: 'Pipeline', NormalHeadingfoure: 'Conduit' },
                                            {},
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }








                                    if (newDatanew.subactivityname === 'Reverse Line') {

                                        const dataArranew = [
                                            { checksHeading: 'Distribution Systems from U.G. Tank to O.H. Water Tank', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Delivery pipe check', checksdescription: 'The delivery pipe coming out of the pump room should be taken below ground and then to individual buildings.' },
                                            { checksHeading: 'Bends check', checksdescription: 'The pipe used should be of ‘C’ class and precautions should be taken to avoid leakages, due to faulty connections, etc. All bends used for the connections should belong ' },
                                            { checksHeading: 'GI tees check', checksdescription: 'G.I. tees are provided to take out the branches from the mainline near each building.' },
                                            { checksHeading: 'Line and level check', checksdescription: 'All necessary care should be taken to fix the line in a straight line and plumb. It should be properly clamped.' },
                                            { checksHeading: 'Freeboard check', checksdescription: 'The inlet to O.H. Tank should be provided considering the proper freeboard in the tank.' },
                                            { checksHeading: 'Ball cock check', checksdescription: 'Ball cock arrangement should be provided at inlet to stop the flow of incoming water when it reaches the freeboard level.' },
                                            { checksHeading: 'Gate valve check', checksdescription: 'A separate gate valve should be provided at about 0.9m (3′) which can be used to prevent the water from going to that particular O.H. tank on the same main line.' },
                                            { checksHeading: 'Pump system check', checksdescription: 'A suitable pump controlling system should be used as per the requirements of the project.' },
                                            { checksHeading: 'Distribution from Overhead Water Tank to Individual Units', phaseHeadingShow: 'Yes' },
                                            { checksHeading: '', checksdescription: 'To place the inlet, outlet, and wash out pipes in position, the provision should be made while centering, by providing the necessary holes and placing the pipes of G.I. pipes ' },
                                            { checksHeading: 'Opening check', checksdescription: 'An opening of size 60cm x 90cm is provided in O.H.W.T. top slab for a manhole cover.' },
                                            { checksHeading: 'Gate valve check', checksdescription: 'Gate valves for each outlet, i.e., bath/W.C. line and kitchen line should be provided on the terrace parapet, for easy maintenance or replacement.' },
                                            { checksHeading: 'Freeboard check', checksdescription: 'The minimum freeboard should be 150mm.' },
                                            { checksHeading: 'Overflow check', checksdescription: 'The overflow should be provided 25mm to 50mm below the inlet. The size should be a little larger than the inlet pipe.' },
                                            { checksHeading: 'Outlet check', checksdescription: 'Outlets should be 10cm to 15cm above the finished bottom of the tank.' },
                                            { checksHeading: 'Washout check', checksdescription: 'Washout should be in flush with the finished floor and plugged properly when not in operation.' },
                                            { checksHeading: 'Ohwt pipline check', checksdescription: 'The pipeline from the O.H.W.T. to individual units should have a minimum length of run and bends (turns).' },
                                            { checksHeading: 'Gate valve check', checksdescription: 'Gate valve for each outlet should be provided, at a height of 3.0m from the finished terrace level, for easy maintenance of the lines.' },
                                            { checksHeading: 'Gate valve check', checksdescription: 'A gate valve provided to the water line at the entry of each flat facilitates the maintenance of individual flat without affecting the water supply to other flats.' },
                                            { checksHeading: 'Leakage test', checksdescription: 'All joints should be checked for any leakages with pressure testing equipment.' },
                                            { checksHeading: 'Ball valve check', checksdescription: 'Make proper ball valve arrangement for inlets of O.H. and U.G, water tank.' },
                                        ];

                                        async function GradNewChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        GradNewChacks();
                                    }









                                    if (newDatanew.subactivityname === "B1 - Sunken Filling - COBA |Waste") {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1 Terrace Waterproofing', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Cleaning check', checksdescription: '1. Remove extra mortar accumulated on terrace and clean the surface clean with water.' },
                                            { checksHeading: 'Application check', checksdescription: '2. Mix and apply cement slurry on terrace.' },
                                            { checksHeading: 'Bottom level check', checksdescription: '3. Leave sufficient margin (approx. 150mm) w/p from terrace door bottom level.' },
                                            { checksHeading: 'Level check', checksdescription: '4. Mark the levels on parapet wall all round.' },
                                            { checksHeading: 'Rain water pipe check', checksdescription: '5. Provide rain water pipe outlet bend in correct position.' },
                                            { checksHeading: 'Soaking check', checksdescription: '6. Make available well burnt brick bats, properly soaked in water.' },
                                            { checksHeading: 'Phase 2 Terrace Waterproofing', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Level check', checksdescription: '1. Check for levels & proper slope towards, rain water pipe outlet.' },
                                            { checksHeading: 'Slope check', checksdescription: '2. Fix the bricks & fill the joints of brick bats with C.M. 1:6 and maintain a slope of 1:150 with waterproofing compound.' },
                                            { checksHeading: 'Shape Check', checksdescription: '3. Proper round shape to the mortar near water pipe.' },
                                            { checksHeading: 'Curing check', checksdescription: '4. Curing of brickbat coba for 7 days.' },
                                            { checksHeading: 'Mortar check', checksdescription: '1. Spread the cement mortar of 1:4 proportion along with waterproofing compound over brick bat coba.' },
                                            { checksHeading: 'Finish check', checksdescription: '2. Apply cement slurry over the surface along with waterproofing compound for smooth finish.' },
                                            { checksHeading: 'Line check', checksdescription: '3. Mark lines on polished surface.' },
                                            { checksHeading: 'Edges check', checksdescription: '4. Construct projected edge between the parapet & the watta on the next day.' },
                                            { checksHeading: 'Curing check', checksdescription: '5. Clean & cure the final coat atleast 21 days by ponding 150mm high water, standing on it.' },
                                        ];

                                        async function WaterProffingSlabChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        WaterProffingSlabChacks();
                                    }






                                    if (newDatanew.subactivityname === "B1 - Sunken Filling - COBA |Waste") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1 Terrace Waterproofing', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Assign the contractor and labour  for waterproofing' },
                                            { subtaskdescription: 'Arrange the  the material/chemical for water proofing ' },
                                            { subtaskdescription: 'Arrange the  the gi/pvc pipe  at site' },
                                            { subtaskdescription: 'Arrange the the Brick bat made available in site in case of brick bat coba type waterproofing' },
                                            { subtaskdescription: 'Ask the contractor to mark the level  for the waterproofing' },
                                            { subtaskdescription: 'Ask the contractor to fill all the holes before waterproofing' },
                                            { subtaskdescription: 'Phase 2 Terrace Waterproofing', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the guard for curing of the waterproofed surface' },
                                            { subtaskdescription: 'Ask the contractor to check the waterproofed area for leakage' },
                                        ];

                                        async function BeamSlabShutteerNewfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteerNewfunCall();
                                    }






                                    if (newDatanew.subactivityname === "B2 - Sunken Filling - COBA |Waste") {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1 Terrace Waterproofing', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Cleaning check', checksdescription: '1. Remove extra mortar accumulated on terrace and clean the surface clean with water.' },
                                            { checksHeading: 'Application check', checksdescription: '2. Mix and apply cement slurry on terrace.' },
                                            { checksHeading: 'Bottom level check', checksdescription: '3. Leave sufficient margin (approx. 150mm) w/p from terrace door bottom level.' },
                                            { checksHeading: 'Level check', checksdescription: '4. Mark the levels on parapet wall all round.' },
                                            { checksHeading: 'Rain water pipe check', checksdescription: '5. Provide rain water pipe outlet bend in correct position.' },
                                            { checksHeading: 'Soaking check', checksdescription: '6. Make available well burnt brick bats, properly soaked in water.' },
                                            { checksHeading: 'Phase 2 Terrace Waterproofing', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Level check', checksdescription: '1. Check for levels & proper slope towards, rain water pipe outlet.' },
                                            { checksHeading: 'Slope check', checksdescription: '2. Fix the bricks & fill the joints of brick bats with C.M. 1:6 and maintain a slope of 1:150 with waterproofing compound.' },
                                            { checksHeading: 'Shape Check', checksdescription: '3. Proper round shape to the mortar near water pipe.' },
                                            { checksHeading: 'Curing check', checksdescription: '4. Curing of brickbat coba for 7 days.' },
                                            { checksHeading: 'Mortar check', checksdescription: '1. Spread the cement mortar of 1:4 proportion along with waterproofing compound over brick bat coba.' },
                                            { checksHeading: 'Finish check', checksdescription: '2. Apply cement slurry over the surface along with waterproofing compound for smooth finish.' },
                                            { checksHeading: 'Line check', checksdescription: '3. Mark lines on polished surface.' },
                                            { checksHeading: 'Edges check', checksdescription: '4. Construct projected edge between the parapet & the watta on the next day.' },
                                            { checksHeading: 'Curing check', checksdescription: '5. Clean & cure the final coat atleast 21 days by ponding 150mm high water, standing on it.' },
                                        ];

                                        async function WaterProffingSlabChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        WaterProffingSlabChacks();
                                    }






                                    if (newDatanew.subactivityname === "B2 - Sunken Filling - COBA |Waste") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1 Terrace Waterproofing', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Assign the contractor and labour  for waterproofing' },
                                            { subtaskdescription: 'Arrange the  the material/chemical for water proofing ' },
                                            { subtaskdescription: 'Arrange the  the gi/pvc pipe  at site' },
                                            { subtaskdescription: 'Arrange the the Brick bat made available in site in case of brick bat coba type waterproofing' },
                                            { subtaskdescription: 'Ask the contractor to mark the level  for the waterproofing' },
                                            { subtaskdescription: 'Ask the contractor to fill all the holes before waterproofing' },
                                            { subtaskdescription: 'Phase 2 Terrace Waterproofing', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the guard for curing of the waterproofed surface' },
                                            { subtaskdescription: 'Ask the contractor to check the waterproofed area for leakage' },
                                        ];

                                        async function BeamSlabShutteerNewfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteerNewfunCall();
                                    }



                                    if (newDatanew.subactivityname === "B3 - Sunken Filling - COBA |Waste") {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1 Terrace Waterproofing', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Cleaning check', checksdescription: '1. Remove extra mortar accumulated on terrace and clean the surface clean with water.' },
                                            { checksHeading: 'Application check', checksdescription: '2. Mix and apply cement slurry on terrace.' },
                                            { checksHeading: 'Bottom level check', checksdescription: '3. Leave sufficient margin (approx. 150mm) w/p from terrace door bottom level.' },
                                            { checksHeading: 'Level check', checksdescription: '4. Mark the levels on parapet wall all round.' },
                                            { checksHeading: 'Rain water pipe check', checksdescription: '5. Provide rain water pipe outlet bend in correct position.' },
                                            { checksHeading: 'Soaking check', checksdescription: '6. Make available well burnt brick bats, properly soaked in water.' },
                                            { checksHeading: 'Phase 2 Terrace Waterproofing', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Level check', checksdescription: '1. Check for levels & proper slope towards, rain water pipe outlet.' },
                                            { checksHeading: 'Slope check', checksdescription: '2. Fix the bricks & fill the joints of brick bats with C.M. 1:6 and maintain a slope of 1:150 with waterproofing compound.' },
                                            { checksHeading: 'Shape Check', checksdescription: '3. Proper round shape to the mortar near water pipe.' },
                                            { checksHeading: 'Curing check', checksdescription: '4. Curing of brickbat coba for 7 days.' },
                                            { checksHeading: 'Mortar check', checksdescription: '1. Spread the cement mortar of 1:4 proportion along with waterproofing compound over brick bat coba.' },
                                            { checksHeading: 'Finish check', checksdescription: '2. Apply cement slurry over the surface along with waterproofing compound for smooth finish.' },
                                            { checksHeading: 'Line check', checksdescription: '3. Mark lines on polished surface.' },
                                            { checksHeading: 'Edges check', checksdescription: '4. Construct projected edge between the parapet & the watta on the next day.' },
                                            { checksHeading: 'Curing check', checksdescription: '5. Clean & cure the final coat atleast 21 days by ponding 150mm high water, standing on it.' },
                                        ];

                                        async function WaterProffingSlabChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        WaterProffingSlabChacks();
                                    }






                                    if (newDatanew.subactivityname === "B3 - Sunken Filling - COBA |Waste") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1 Terrace Waterproofing', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Assign the contractor and labour  for waterproofing' },
                                            { subtaskdescription: 'Arrange the  the material/chemical for water proofing ' },
                                            { subtaskdescription: 'Arrange the  the gi/pvc pipe  at site' },
                                            { subtaskdescription: 'Arrange the the Brick bat made available in site in case of brick bat coba type waterproofing' },
                                            { subtaskdescription: 'Ask the contractor to mark the level  for the waterproofing' },
                                            { subtaskdescription: 'Ask the contractor to fill all the holes before waterproofing' },
                                            { subtaskdescription: 'Phase 2 Terrace Waterproofing', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the guard for curing of the waterproofed surface' },
                                            { subtaskdescription: 'Ask the contractor to check the waterproofed area for leakage' },
                                        ];

                                        async function BeamSlabShutteerNewfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteerNewfunCall();
                                    }



                                    if (newDatanew.subactivityname === "B4 - Sunken Filling - COBA |Waste") {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1 Terrace Waterproofing', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Cleaning check', checksdescription: '1. Remove extra mortar accumulated on terrace and clean the surface clean with water.' },
                                            { checksHeading: 'Application check', checksdescription: '2. Mix and apply cement slurry on terrace.' },
                                            { checksHeading: 'Bottom level check', checksdescription: '3. Leave sufficient margin (approx. 150mm) w/p from terrace door bottom level.' },
                                            { checksHeading: 'Level check', checksdescription: '4. Mark the levels on parapet wall all round.' },
                                            { checksHeading: 'Rain water pipe check', checksdescription: '5. Provide rain water pipe outlet bend in correct position.' },
                                            { checksHeading: 'Soaking check', checksdescription: '6. Make available well burnt brick bats, properly soaked in water.' },
                                            { checksHeading: 'Phase 2 Terrace Waterproofing', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Level check', checksdescription: '1. Check for levels & proper slope towards, rain water pipe outlet.' },
                                            { checksHeading: 'Slope check', checksdescription: '2. Fix the bricks & fill the joints of brick bats with C.M. 1:6 and maintain a slope of 1:150 with waterproofing compound.' },
                                            { checksHeading: 'Shape Check', checksdescription: '3. Proper round shape to the mortar near water pipe.' },
                                            { checksHeading: 'Curing check', checksdescription: '4. Curing of brickbat coba for 7 days.' },
                                            { checksHeading: 'Mortar check', checksdescription: '1. Spread the cement mortar of 1:4 proportion along with waterproofing compound over brick bat coba.' },
                                            { checksHeading: 'Finish check', checksdescription: '2. Apply cement slurry over the surface along with waterproofing compound for smooth finish.' },
                                            { checksHeading: 'Line check', checksdescription: '3. Mark lines on polished surface.' },
                                            { checksHeading: 'Edges check', checksdescription: '4. Construct projected edge between the parapet & the watta on the next day.' },
                                            { checksHeading: 'Curing check', checksdescription: '5. Clean & cure the final coat atleast 21 days by ponding 150mm high water, standing on it.' },
                                        ];

                                        async function WaterProffingSlabChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        WaterProffingSlabChacks();
                                    }






                                    if (newDatanew.subactivityname === "B4 - Sunken Filling - COBA |Waste") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1 Terrace Waterproofing', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Assign the contractor and labour  for waterproofing' },
                                            { subtaskdescription: 'Arrange the  the material/chemical for water proofing ' },
                                            { subtaskdescription: 'Arrange the  the gi/pvc pipe  at site' },
                                            { subtaskdescription: 'Arrange the the Brick bat made available in site in case of brick bat coba type waterproofing' },
                                            { subtaskdescription: 'Ask the contractor to mark the level  for the waterproofing' },
                                            { subtaskdescription: 'Ask the contractor to fill all the holes before waterproofing' },
                                            { subtaskdescription: 'Phase 2 Terrace Waterproofing', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the guard for curing of the waterproofed surface' },
                                            { subtaskdescription: 'Ask the contractor to check the waterproofed area for leakage' },
                                        ];

                                        async function BeamSlabShutteerNewfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteerNewfunCall();
                                    }



                                    if (newDatanew.subactivityname === "GF - Sunken Filling - COBA |Waste") {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1 Terrace Waterproofing', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Cleaning check', checksdescription: '1. Remove extra mortar accumulated on terrace and clean the surface clean with water.' },
                                            { checksHeading: 'Application check', checksdescription: '2. Mix and apply cement slurry on terrace.' },
                                            { checksHeading: 'Bottom level check', checksdescription: '3. Leave sufficient margin (approx. 150mm) w/p from terrace door bottom level.' },
                                            { checksHeading: 'Level check', checksdescription: '4. Mark the levels on parapet wall all round.' },
                                            { checksHeading: 'Rain water pipe check', checksdescription: '5. Provide rain water pipe outlet bend in correct position.' },
                                            { checksHeading: 'Soaking check', checksdescription: '6. Make available well burnt brick bats, properly soaked in water.' },
                                            { checksHeading: 'Phase 2 Terrace Waterproofing', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Level check', checksdescription: '1. Check for levels & proper slope towards, rain water pipe outlet.' },
                                            { checksHeading: 'Slope check', checksdescription: '2. Fix the bricks & fill the joints of brick bats with C.M. 1:6 and maintain a slope of 1:150 with waterproofing compound.' },
                                            { checksHeading: 'Shape Check', checksdescription: '3. Proper round shape to the mortar near water pipe.' },
                                            { checksHeading: 'Curing check', checksdescription: '4. Curing of brickbat coba for 7 days.' },
                                            { checksHeading: 'Mortar check', checksdescription: '1. Spread the cement mortar of 1:4 proportion along with waterproofing compound over brick bat coba.' },
                                            { checksHeading: 'Finish check', checksdescription: '2. Apply cement slurry over the surface along with waterproofing compound for smooth finish.' },
                                            { checksHeading: 'Line check', checksdescription: '3. Mark lines on polished surface.' },
                                            { checksHeading: 'Edges check', checksdescription: '4. Construct projected edge between the parapet & the watta on the next day.' },
                                            { checksHeading: 'Curing check', checksdescription: '5. Clean & cure the final coat atleast 21 days by ponding 150mm high water, standing on it.' },
                                        ];

                                        async function WaterProffingSlabChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        WaterProffingSlabChacks();
                                    }






                                    if (newDatanew.subactivityname === "GF - Sunken Filling - COBA |Waste") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1 Terrace Waterproofing', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Assign the contractor and labour  for waterproofing' },
                                            { subtaskdescription: 'Arrange the  the material/chemical for water proofing ' },
                                            { subtaskdescription: 'Arrange the  the gi/pvc pipe  at site' },
                                            { subtaskdescription: 'Arrange the the Brick bat made available in site in case of brick bat coba type waterproofing' },
                                            { subtaskdescription: 'Ask the contractor to mark the level  for the waterproofing' },
                                            { subtaskdescription: 'Ask the contractor to fill all the holes before waterproofing' },
                                            { subtaskdescription: 'Phase 2 Terrace Waterproofing', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the guard for curing of the waterproofed surface' },
                                            { subtaskdescription: 'Ask the contractor to check the waterproofed area for leakage' },
                                        ];

                                        async function BeamSlabShutteerNewfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteerNewfunCall();
                                    }

                                    if (newDatanew.subactivityname === "GF - Sunken Filling - COBA |Waste") {

                                        const dataArranew = [
                                            {},
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Lvl. | Base', NormalHeadingThree: 'Filling', NormalHeadingfoure: 'Final Coat' },
                                            {},
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }

                                    if (newDatanew.subactivityname === "FF - Sunken Filling - COBA |Waste") {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1 Terrace Waterproofing', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Cleaning check', checksdescription: '1. Remove extra mortar accumulated on terrace and clean the surface clean with water.' },
                                            { checksHeading: 'Application check', checksdescription: '2. Mix and apply cement slurry on terrace.' },
                                            { checksHeading: 'Bottom level check', checksdescription: '3. Leave sufficient margin (approx. 150mm) w/p from terrace door bottom level.' },
                                            { checksHeading: 'Level check', checksdescription: '4. Mark the levels on parapet wall all round.' },
                                            { checksHeading: 'Rain water pipe check', checksdescription: '5. Provide rain water pipe outlet bend in correct position.' },
                                            { checksHeading: 'Soaking check', checksdescription: '6. Make available well burnt brick bats, properly soaked in water.' },
                                            { checksHeading: 'Phase 2 Terrace Waterproofing', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Level check', checksdescription: '1. Check for levels & proper slope towards, rain water pipe outlet.' },
                                            { checksHeading: 'Slope check', checksdescription: '2. Fix the bricks & fill the joints of brick bats with C.M. 1:6 and maintain a slope of 1:150 with waterproofing compound.' },
                                            { checksHeading: 'Shape Check', checksdescription: '3. Proper round shape to the mortar near water pipe.' },
                                            { checksHeading: 'Curing check', checksdescription: '4. Curing of brickbat coba for 7 days.' },
                                            { checksHeading: 'Mortar check', checksdescription: '1. Spread the cement mortar of 1:4 proportion along with waterproofing compound over brick bat coba.' },
                                            { checksHeading: 'Finish check', checksdescription: '2. Apply cement slurry over the surface along with waterproofing compound for smooth finish.' },
                                            { checksHeading: 'Line check', checksdescription: '3. Mark lines on polished surface.' },
                                            { checksHeading: 'Edges check', checksdescription: '4. Construct projected edge between the parapet & the watta on the next day.' },
                                            { checksHeading: 'Curing check', checksdescription: '5. Clean & cure the final coat atleast 21 days by ponding 150mm high water, standing on it.' },
                                        ];

                                        async function WaterProffingSlabChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        WaterProffingSlabChacks();
                                    }






                                    if (newDatanew.subactivityname === "FF - Sunken Filling - COBA |Waste") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1 Terrace Waterproofing', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Assign the contractor and labour  for waterproofing' },
                                            { subtaskdescription: 'Arrange the  the material/chemical for water proofing ' },
                                            { subtaskdescription: 'Arrange the  the gi/pvc pipe  at site' },
                                            { subtaskdescription: 'Arrange the the Brick bat made available in site in case of brick bat coba type waterproofing' },
                                            { subtaskdescription: 'Ask the contractor to mark the level  for the waterproofing' },
                                            { subtaskdescription: 'Ask the contractor to fill all the holes before waterproofing' },
                                            { subtaskdescription: 'Phase 2 Terrace Waterproofing', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the guard for curing of the waterproofed surface' },
                                            { subtaskdescription: 'Ask the contractor to check the waterproofed area for leakage' },
                                        ];

                                        async function BeamSlabShutteerNewfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteerNewfunCall();
                                    }

                                    if (newDatanew.subactivityname === "FF - Sunken Filling - COBA |Waste") {

                                        const dataArranew = [
                                            {},
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Lvl. | Base', NormalHeadingThree: 'Filling', NormalHeadingfoure: 'Final Coat' },
                                            {},
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }

                                    if (newDatanew.subactivityname === "SF - Sunken Filling - COBA |Waste") {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1 Terrace Waterproofing', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Cleaning check', checksdescription: '1. Remove extra mortar accumulated on terrace and clean the surface clean with water.' },
                                            { checksHeading: 'Application check', checksdescription: '2. Mix and apply cement slurry on terrace.' },
                                            { checksHeading: 'Bottom level check', checksdescription: '3. Leave sufficient margin (approx. 150mm) w/p from terrace door bottom level.' },
                                            { checksHeading: 'Level check', checksdescription: '4. Mark the levels on parapet wall all round.' },
                                            { checksHeading: 'Rain water pipe check', checksdescription: '5. Provide rain water pipe outlet bend in correct position.' },
                                            { checksHeading: 'Soaking check', checksdescription: '6. Make available well burnt brick bats, properly soaked in water.' },
                                            { checksHeading: 'Phase 2 Terrace Waterproofing', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Level check', checksdescription: '1. Check for levels & proper slope towards, rain water pipe outlet.' },
                                            { checksHeading: 'Slope check', checksdescription: '2. Fix the bricks & fill the joints of brick bats with C.M. 1:6 and maintain a slope of 1:150 with waterproofing compound.' },
                                            { checksHeading: 'Shape Check', checksdescription: '3. Proper round shape to the mortar near water pipe.' },
                                            { checksHeading: 'Curing check', checksdescription: '4. Curing of brickbat coba for 7 days.' },
                                            { checksHeading: 'Mortar check', checksdescription: '1. Spread the cement mortar of 1:4 proportion along with waterproofing compound over brick bat coba.' },
                                            { checksHeading: 'Finish check', checksdescription: '2. Apply cement slurry over the surface along with waterproofing compound for smooth finish.' },
                                            { checksHeading: 'Line check', checksdescription: '3. Mark lines on polished surface.' },
                                            { checksHeading: 'Edges check', checksdescription: '4. Construct projected edge between the parapet & the watta on the next day.' },
                                            { checksHeading: 'Curing check', checksdescription: '5. Clean & cure the final coat atleast 21 days by ponding 150mm high water, standing on it.' },
                                        ];

                                        async function WaterProffingSlabChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        WaterProffingSlabChacks();
                                    }






                                    if (newDatanew.subactivityname === "SF - Sunken Filling - COBA |Waste") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1 Terrace Waterproofing', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Assign the contractor and labour  for waterproofing' },
                                            { subtaskdescription: 'Arrange the  the material/chemical for water proofing ' },
                                            { subtaskdescription: 'Arrange the  the gi/pvc pipe  at site' },
                                            { subtaskdescription: 'Arrange the the Brick bat made available in site in case of brick bat coba type waterproofing' },
                                            { subtaskdescription: 'Ask the contractor to mark the level  for the waterproofing' },
                                            { subtaskdescription: 'Ask the contractor to fill all the holes before waterproofing' },
                                            { subtaskdescription: 'Phase 2 Terrace Waterproofing', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the guard for curing of the waterproofed surface' },
                                            { subtaskdescription: 'Ask the contractor to check the waterproofed area for leakage' },
                                        ];

                                        async function BeamSlabShutteerNewfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteerNewfunCall();
                                    }

                                    if (newDatanew.subactivityname === "SF - Sunken Filling - COBA |Waste") {

                                        const dataArranew = [
                                            {},
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Lvl. | Base', NormalHeadingThree: 'Filling', NormalHeadingfoure: 'Final Coat' },
                                            {},
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }

                                    if (newDatanew.subactivityname === "TF - Sunken Filling - COBA |Waste") {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1 Terrace Waterproofing', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Cleaning check', checksdescription: '1. Remove extra mortar accumulated on terrace and clean the surface clean with water.' },
                                            { checksHeading: 'Application check', checksdescription: '2. Mix and apply cement slurry on terrace.' },
                                            { checksHeading: 'Bottom level check', checksdescription: '3. Leave sufficient margin (approx. 150mm) w/p from terrace door bottom level.' },
                                            { checksHeading: 'Level check', checksdescription: '4. Mark the levels on parapet wall all round.' },
                                            { checksHeading: 'Rain water pipe check', checksdescription: '5. Provide rain water pipe outlet bend in correct position.' },
                                            { checksHeading: 'Soaking check', checksdescription: '6. Make available well burnt brick bats, properly soaked in water.' },
                                            { checksHeading: 'Phase 2 Terrace Waterproofing', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Level check', checksdescription: '1. Check for levels & proper slope towards, rain water pipe outlet.' },
                                            { checksHeading: 'Slope check', checksdescription: '2. Fix the bricks & fill the joints of brick bats with C.M. 1:6 and maintain a slope of 1:150 with waterproofing compound.' },
                                            { checksHeading: 'Shape Check', checksdescription: '3. Proper round shape to the mortar near water pipe.' },
                                            { checksHeading: 'Curing check', checksdescription: '4. Curing of brickbat coba for 7 days.' },
                                            { checksHeading: 'Mortar check', checksdescription: '1. Spread the cement mortar of 1:4 proportion along with waterproofing compound over brick bat coba.' },
                                            { checksHeading: 'Finish check', checksdescription: '2. Apply cement slurry over the surface along with waterproofing compound for smooth finish.' },
                                            { checksHeading: 'Line check', checksdescription: '3. Mark lines on polished surface.' },
                                            { checksHeading: 'Edges check', checksdescription: '4. Construct projected edge between the parapet & the watta on the next day.' },
                                            { checksHeading: 'Curing check', checksdescription: '5. Clean & cure the final coat atleast 21 days by ponding 150mm high water, standing on it.' },
                                        ];

                                        async function WaterProffingSlabChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        WaterProffingSlabChacks();
                                    }






                                    if (newDatanew.subactivityname === "TF - Sunken Filling - COBA |Waste") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1 Terrace Waterproofing', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Assign the contractor and labour  for waterproofing' },
                                            { subtaskdescription: 'Arrange the  the material/chemical for water proofing ' },
                                            { subtaskdescription: 'Arrange the  the gi/pvc pipe  at site' },
                                            { subtaskdescription: 'Arrange the the Brick bat made available in site in case of brick bat coba type waterproofing' },
                                            { subtaskdescription: 'Ask the contractor to mark the level  for the waterproofing' },
                                            { subtaskdescription: 'Ask the contractor to fill all the holes before waterproofing' },
                                            { subtaskdescription: 'Phase 2 Terrace Waterproofing', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the guard for curing of the waterproofed surface' },
                                            { subtaskdescription: 'Ask the contractor to check the waterproofed area for leakage' },
                                        ];

                                        async function BeamSlabShutteerNewfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteerNewfunCall();
                                    }

                                    if (newDatanew.subactivityname === "TF - Sunken Filling - COBA |Waste") {

                                        const dataArranew = [
                                            {},
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Lvl. | Base', NormalHeadingThree: 'Filling', NormalHeadingfoure: 'Final Coat' },
                                            {},
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }

                                    if (newDatanew.subactivityname === "FoF - Sunken Filling - COBA |Waste") {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1 Terrace Waterproofing', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Cleaning check', checksdescription: '1. Remove extra mortar accumulated on terrace and clean the surface clean with water.' },
                                            { checksHeading: 'Application check', checksdescription: '2. Mix and apply cement slurry on terrace.' },
                                            { checksHeading: 'Bottom level check', checksdescription: '3. Leave sufficient margin (approx. 150mm) w/p from terrace door bottom level.' },
                                            { checksHeading: 'Level check', checksdescription: '4. Mark the levels on parapet wall all round.' },
                                            { checksHeading: 'Rain water pipe check', checksdescription: '5. Provide rain water pipe outlet bend in correct position.' },
                                            { checksHeading: 'Soaking check', checksdescription: '6. Make available well burnt brick bats, properly soaked in water.' },
                                            { checksHeading: 'Phase 2 Terrace Waterproofing', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Level check', checksdescription: '1. Check for levels & proper slope towards, rain water pipe outlet.' },
                                            { checksHeading: 'Slope check', checksdescription: '2. Fix the bricks & fill the joints of brick bats with C.M. 1:6 and maintain a slope of 1:150 with waterproofing compound.' },
                                            { checksHeading: 'Shape Check', checksdescription: '3. Proper round shape to the mortar near water pipe.' },
                                            { checksHeading: 'Curing check', checksdescription: '4. Curing of brickbat coba for 7 days.' },
                                            { checksHeading: 'Mortar check', checksdescription: '1. Spread the cement mortar of 1:4 proportion along with waterproofing compound over brick bat coba.' },
                                            { checksHeading: 'Finish check', checksdescription: '2. Apply cement slurry over the surface along with waterproofing compound for smooth finish.' },
                                            { checksHeading: 'Line check', checksdescription: '3. Mark lines on polished surface.' },
                                            { checksHeading: 'Edges check', checksdescription: '4. Construct projected edge between the parapet & the watta on the next day.' },
                                            { checksHeading: 'Curing check', checksdescription: '5. Clean & cure the final coat atleast 21 days by ponding 150mm high water, standing on it.' },
                                        ];

                                        async function WaterProffingSlabChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        WaterProffingSlabChacks();
                                    }






                                    if (newDatanew.subactivityname === "FoF - Sunken Filling - COBA |Waste") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1 Terrace Waterproofing', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Assign the contractor and labour  for waterproofing' },
                                            { subtaskdescription: 'Arrange the  the material/chemical for water proofing ' },
                                            { subtaskdescription: 'Arrange the  the gi/pvc pipe  at site' },
                                            { subtaskdescription: 'Arrange the the Brick bat made available in site in case of brick bat coba type waterproofing' },
                                            { subtaskdescription: 'Ask the contractor to mark the level  for the waterproofing' },
                                            { subtaskdescription: 'Ask the contractor to fill all the holes before waterproofing' },
                                            { subtaskdescription: 'Phase 2 Terrace Waterproofing', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the guard for curing of the waterproofed surface' },
                                            { subtaskdescription: 'Ask the contractor to check the waterproofed area for leakage' },
                                        ];

                                        async function BeamSlabShutteerNewfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteerNewfunCall();
                                    }

                                    if (newDatanew.subactivityname === "FoF - Sunken Filling - COBA |Waste") {

                                        const dataArranew = [
                                            {},
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Lvl. | Base', NormalHeadingThree: 'Filling', NormalHeadingfoure: 'Final Coat' },
                                            {},
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }

                                    if (newDatanew.subactivityname === "Tower - Sunken Filling - COBA |Waste") {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1 Terrace Waterproofing', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Cleaning check', checksdescription: '1. Remove extra mortar accumulated on terrace and clean the surface clean with water.' },
                                            { checksHeading: 'Application check', checksdescription: '2. Mix and apply cement slurry on terrace.' },
                                            { checksHeading: 'Bottom level check', checksdescription: '3. Leave sufficient margin (approx. 150mm) w/p from terrace door bottom level.' },
                                            { checksHeading: 'Level check', checksdescription: '4. Mark the levels on parapet wall all round.' },
                                            { checksHeading: 'Rain water pipe check', checksdescription: '5. Provide rain water pipe outlet bend in correct position.' },
                                            { checksHeading: 'Soaking check', checksdescription: '6. Make available well burnt brick bats, properly soaked in water.' },
                                            { checksHeading: 'Phase 2 Terrace Waterproofing', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Level check', checksdescription: '1. Check for levels & proper slope towards, rain water pipe outlet.' },
                                            { checksHeading: 'Slope check', checksdescription: '2. Fix the bricks & fill the joints of brick bats with C.M. 1:6 and maintain a slope of 1:150 with waterproofing compound.' },
                                            { checksHeading: 'Shape Check', checksdescription: '3. Proper round shape to the mortar near water pipe.' },
                                            { checksHeading: 'Curing check', checksdescription: '4. Curing of brickbat coba for 7 days.' },
                                            { checksHeading: 'Mortar check', checksdescription: '1. Spread the cement mortar of 1:4 proportion along with waterproofing compound over brick bat coba.' },
                                            { checksHeading: 'Finish check', checksdescription: '2. Apply cement slurry over the surface along with waterproofing compound for smooth finish.' },
                                            { checksHeading: 'Line check', checksdescription: '3. Mark lines on polished surface.' },
                                            { checksHeading: 'Edges check', checksdescription: '4. Construct projected edge between the parapet & the watta on the next day.' },
                                            { checksHeading: 'Curing check', checksdescription: '5. Clean & cure the final coat atleast 21 days by ponding 150mm high water, standing on it.' },
                                        ];

                                        async function WaterProffingSlabChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        WaterProffingSlabChacks();
                                    }






                                    if (newDatanew.subactivityname === "Tower - Sunken Filling - COBA |Waste") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1 Terrace Waterproofing', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Assign the contractor and labour  for waterproofing' },
                                            { subtaskdescription: 'Arrange the  the material/chemical for water proofing ' },
                                            { subtaskdescription: 'Arrange the  the gi/pvc pipe  at site' },
                                            { subtaskdescription: 'Arrange the the Brick bat made available in site in case of brick bat coba type waterproofing' },
                                            { subtaskdescription: 'Ask the contractor to mark the level  for the waterproofing' },
                                            { subtaskdescription: 'Ask the contractor to fill all the holes before waterproofing' },
                                            { subtaskdescription: 'Phase 2 Terrace Waterproofing', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the guard for curing of the waterproofed surface' },
                                            { subtaskdescription: 'Ask the contractor to check the waterproofed area for leakage' },
                                        ];

                                        async function BeamSlabShutteerNewfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteerNewfunCall();
                                    }



                                    if (newDatanew.subactivityname === "Tower - Sunken Filling - COBA |Waste") {

                                        const dataArranew = [
                                            {},
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Lvl. | Base', NormalHeadingThree: 'Filling', NormalHeadingfoure: 'Final Coat' },
                                            {},
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }











































                                    if (newDatanew.subactivityname === "B1 -Waterproofing") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Assign the contractor and labour  for waterproofing' },
                                            { subtaskdescription: 'Arrange the  the material/chemical for water proofing ' },
                                            { subtaskdescription: 'Arrange the  the gi/pvc pipe  at site' },
                                            { subtaskdescription: 'Arrange the the Brick bat made available in site in case of brick bat coba type waterproofing' },
                                            { subtaskdescription: 'Ask the contractor to mark the level  for the waterproofing' },
                                            { subtaskdescription: 'Ask the contractor to fill all the holes before waterproofing' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the guard for curing of the waterproofed surface' },
                                            { subtaskdescription: 'Ask the contractor to check the waterproofed area for leakage' },
                                            { subtaskdescription: 'Ask the contractor to mark the levels on the wall' },

                                        ];

                                        async function WaterproofingfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        WaterproofingfunCall();
                                    }







                                    if (newDatanew.subactivityname === "B1 -Waterproofing") {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Plaster Check', checksdescription: '1. Internal plaster of walls, leaving margin of 450mm from the final floor level be completed.' },
                                            { checksHeading: 'Chasing Check', checksdescription: '2. Grooving / chasing for concealed G.I. piping / electrical conduit pipe be completed.' },
                                            { checksHeading: 'Concealed work check', checksdescription: '3. All concealed G.I. & Electrical work in bathroom / toilet be completed.' },
                                            { checksHeading: 'Cleaning check', checksdescription: '4. Removal of all debris from toilet/ bathroom & chiseling of extra mortar, if any, to expose the slab.' },
                                            { checksHeading: 'Nahani trap check', checksdescription: '5. Completion of making holes in external walls for connecting nahani trap, p trap etc. to external drainage line.' },
                                            { checksHeading: 'Cleaning check', checksdescription: '6. Thorough cleaning of bathroom/ toilet with sufficient quantity of water is done.' },
                                            { checksHeading: 'Level check', checksdescription: '7. Marking levels on walls with respect to floor level.' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Leakage check', checksdescription: '1. Any leakage in base slab.' },
                                            { checksHeading: 'Slope check', checksdescription: '2. Maintain slope of 1:100 from entrance door towards water escape pipe (drainage pipe) with cement mortar 1:4, thickness 25 mm to 40 mm.' },
                                            { checksHeading: 'Base coat check', checksdescription: '3. Complete the base coat on walls up to height of 300 mm above toilet finish floor level covering all beam top junction etc. properly.' },
                                            { checksHeading: 'Curing check', checksdescription: '4. Flood the base coat with water, upto slab drop top, for minimum 4 days for curing & testing of leakage, if any.' },
                                            { checksHeading: 'Outlet check', checksdescription: '5. Provide 25 mm G.I. / P.V.C. pipe for water escape outlet just above the base coat of W.C./Bath/Toilet.' },
                                            { checksHeading: 'Layer Check', checksdescription: '6. Check the layers applying as per the design & instruction' },
                                            { checksHeading: 'Phase 3 : Checklist for Topping Coat for Toilet/ Bathroom Waterproofing', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Slope check', checksdescription: '1. Topping with 1:4 cement mortar with waterproofing compound and maintain proper slope from entrance to nahani trap & finish with neat cement slurry.' },
                                            { checksHeading: 'Curing check', checksdescription: '2. Provide curing for minimum 7 days with water. Minimum 7.5 cm depth of water to be maintained.' },
                                        ];

                                        async function WaterproofingChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        WaterproofingChacks();
                                    }





                                    if (newDatanew.subactivityname === "B2 -Waterproofing") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Assign the contractor and labour  for waterproofing' },
                                            { subtaskdescription: 'Arrange the  the material/chemical for water proofing ' },
                                            { subtaskdescription: 'Arrange the  the gi/pvc pipe  at site' },
                                            { subtaskdescription: 'Arrange the the Brick bat made available in site in case of brick bat coba type waterproofing' },
                                            { subtaskdescription: 'Ask the contractor to mark the level  for the waterproofing' },
                                            { subtaskdescription: 'Ask the contractor to fill all the holes before waterproofing' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the guard for curing of the waterproofed surface' },
                                            { subtaskdescription: 'Ask the contractor to check the waterproofed area for leakage' },
                                            { subtaskdescription: 'Ask the contractor to mark the levels on the wall' },

                                        ];

                                        async function WaterproofingfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        WaterproofingfunCall();
                                    }







                                    if (newDatanew.subactivityname === "B2 -Waterproofing") {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Plaster Check', checksdescription: '1. Internal plaster of walls, leaving margin of 450mm from the final floor level be completed.' },
                                            { checksHeading: 'Chasing Check', checksdescription: '2. Grooving / chasing for concealed G.I. piping / electrical conduit pipe be completed.' },
                                            { checksHeading: 'Concealed work check', checksdescription: '3. All concealed G.I. & Electrical work in bathroom / toilet be completed.' },
                                            { checksHeading: 'Cleaning check', checksdescription: '4. Removal of all debris from toilet/ bathroom & chiseling of extra mortar, if any, to expose the slab.' },
                                            { checksHeading: 'Nahani trap check', checksdescription: '5. Completion of making holes in external walls for connecting nahani trap, p trap etc. to external drainage line.' },
                                            { checksHeading: 'Cleaning check', checksdescription: '6. Thorough cleaning of bathroom/ toilet with sufficient quantity of water is done.' },
                                            { checksHeading: 'Level check', checksdescription: '7. Marking levels on walls with respect to floor level.' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Leakage check', checksdescription: '1. Any leakage in base slab.' },
                                            { checksHeading: 'Slope check', checksdescription: '2. Maintain slope of 1:100 from entrance door towards water escape pipe (drainage pipe) with cement mortar 1:4, thickness 25 mm to 40 mm.' },
                                            { checksHeading: 'Base coat check', checksdescription: '3. Complete the base coat on walls up to height of 300 mm above toilet finish floor level covering all beam top junction etc. properly.' },
                                            { checksHeading: 'Curing check', checksdescription: '4. Flood the base coat with water, upto slab drop top, for minimum 4 days for curing & testing of leakage, if any.' },
                                            { checksHeading: 'Outlet check', checksdescription: '5. Provide 25 mm G.I. / P.V.C. pipe for water escape outlet just above the base coat of W.C./Bath/Toilet.' },
                                            { checksHeading: 'Layer Check', checksdescription: '6. Check the layers applying as per the design & instruction' },
                                            { checksHeading: 'Phase 3 : Checklist for Topping Coat for Toilet/ Bathroom Waterproofing', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Slope check', checksdescription: '1. Topping with 1:4 cement mortar with waterproofing compound and maintain proper slope from entrance to nahani trap & finish with neat cement slurry.' },
                                            { checksHeading: 'Curing check', checksdescription: '2. Provide curing for minimum 7 days with water. Minimum 7.5 cm depth of water to be maintained.' },
                                        ];

                                        async function WaterproofingChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        WaterproofingChacks();
                                    }



                                    if (newDatanew.subactivityname === "B3 -Waterproofing") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Assign the contractor and labour  for waterproofing' },
                                            { subtaskdescription: 'Arrange the  the material/chemical for water proofing ' },
                                            { subtaskdescription: 'Arrange the  the gi/pvc pipe  at site' },
                                            { subtaskdescription: 'Arrange the the Brick bat made available in site in case of brick bat coba type waterproofing' },
                                            { subtaskdescription: 'Ask the contractor to mark the level  for the waterproofing' },
                                            { subtaskdescription: 'Ask the contractor to fill all the holes before waterproofing' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the guard for curing of the waterproofed surface' },
                                            { subtaskdescription: 'Ask the contractor to check the waterproofed area for leakage' },
                                            { subtaskdescription: 'Ask the contractor to mark the levels on the wall' },

                                        ];

                                        async function WaterproofingfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        WaterproofingfunCall();
                                    }







                                    if (newDatanew.subactivityname === "B3 -Waterproofing") {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Plaster Check', checksdescription: '1. Internal plaster of walls, leaving margin of 450mm from the final floor level be completed.' },
                                            { checksHeading: 'Chasing Check', checksdescription: '2. Grooving / chasing for concealed G.I. piping / electrical conduit pipe be completed.' },
                                            { checksHeading: 'Concealed work check', checksdescription: '3. All concealed G.I. & Electrical work in bathroom / toilet be completed.' },
                                            { checksHeading: 'Cleaning check', checksdescription: '4. Removal of all debris from toilet/ bathroom & chiseling of extra mortar, if any, to expose the slab.' },
                                            { checksHeading: 'Nahani trap check', checksdescription: '5. Completion of making holes in external walls for connecting nahani trap, p trap etc. to external drainage line.' },
                                            { checksHeading: 'Cleaning check', checksdescription: '6. Thorough cleaning of bathroom/ toilet with sufficient quantity of water is done.' },
                                            { checksHeading: 'Level check', checksdescription: '7. Marking levels on walls with respect to floor level.' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Leakage check', checksdescription: '1. Any leakage in base slab.' },
                                            { checksHeading: 'Slope check', checksdescription: '2. Maintain slope of 1:100 from entrance door towards water escape pipe (drainage pipe) with cement mortar 1:4, thickness 25 mm to 40 mm.' },
                                            { checksHeading: 'Base coat check', checksdescription: '3. Complete the base coat on walls up to height of 300 mm above toilet finish floor level covering all beam top junction etc. properly.' },
                                            { checksHeading: 'Curing check', checksdescription: '4. Flood the base coat with water, upto slab drop top, for minimum 4 days for curing & testing of leakage, if any.' },
                                            { checksHeading: 'Outlet check', checksdescription: '5. Provide 25 mm G.I. / P.V.C. pipe for water escape outlet just above the base coat of W.C./Bath/Toilet.' },
                                            { checksHeading: 'Layer Check', checksdescription: '6. Check the layers applying as per the design & instruction' },
                                            { checksHeading: 'Phase 3 : Checklist for Topping Coat for Toilet/ Bathroom Waterproofing', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Slope check', checksdescription: '1. Topping with 1:4 cement mortar with waterproofing compound and maintain proper slope from entrance to nahani trap & finish with neat cement slurry.' },
                                            { checksHeading: 'Curing check', checksdescription: '2. Provide curing for minimum 7 days with water. Minimum 7.5 cm depth of water to be maintained.' },
                                        ];

                                        async function WaterproofingChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        WaterproofingChacks();
                                    }



                                    if (newDatanew.subactivityname === "B4 -Waterproofing") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Assign the contractor and labour  for waterproofing' },
                                            { subtaskdescription: 'Arrange the  the material/chemical for water proofing ' },
                                            { subtaskdescription: 'Arrange the  the gi/pvc pipe  at site' },
                                            { subtaskdescription: 'Arrange the the Brick bat made available in site in case of brick bat coba type waterproofing' },
                                            { subtaskdescription: 'Ask the contractor to mark the level  for the waterproofing' },
                                            { subtaskdescription: 'Ask the contractor to fill all the holes before waterproofing' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the guard for curing of the waterproofed surface' },
                                            { subtaskdescription: 'Ask the contractor to check the waterproofed area for leakage' },
                                            { subtaskdescription: 'Ask the contractor to mark the levels on the wall' },

                                        ];

                                        async function WaterproofingfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        WaterproofingfunCall();
                                    }







                                    if (newDatanew.subactivityname === "B4 -Waterproofing") {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Plaster Check', checksdescription: '1. Internal plaster of walls, leaving margin of 450mm from the final floor level be completed.' },
                                            { checksHeading: 'Chasing Check', checksdescription: '2. Grooving / chasing for concealed G.I. piping / electrical conduit pipe be completed.' },
                                            { checksHeading: 'Concealed work check', checksdescription: '3. All concealed G.I. & Electrical work in bathroom / toilet be completed.' },
                                            { checksHeading: 'Cleaning check', checksdescription: '4. Removal of all debris from toilet/ bathroom & chiseling of extra mortar, if any, to expose the slab.' },
                                            { checksHeading: 'Nahani trap check', checksdescription: '5. Completion of making holes in external walls for connecting nahani trap, p trap etc. to external drainage line.' },
                                            { checksHeading: 'Cleaning check', checksdescription: '6. Thorough cleaning of bathroom/ toilet with sufficient quantity of water is done.' },
                                            { checksHeading: 'Level check', checksdescription: '7. Marking levels on walls with respect to floor level.' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Leakage check', checksdescription: '1. Any leakage in base slab.' },
                                            { checksHeading: 'Slope check', checksdescription: '2. Maintain slope of 1:100 from entrance door towards water escape pipe (drainage pipe) with cement mortar 1:4, thickness 25 mm to 40 mm.' },
                                            { checksHeading: 'Base coat check', checksdescription: '3. Complete the base coat on walls up to height of 300 mm above toilet finish floor level covering all beam top junction etc. properly.' },
                                            { checksHeading: 'Curing check', checksdescription: '4. Flood the base coat with water, upto slab drop top, for minimum 4 days for curing & testing of leakage, if any.' },
                                            { checksHeading: 'Outlet check', checksdescription: '5. Provide 25 mm G.I. / P.V.C. pipe for water escape outlet just above the base coat of W.C./Bath/Toilet.' },
                                            { checksHeading: 'Layer Check', checksdescription: '6. Check the layers applying as per the design & instruction' },
                                            { checksHeading: 'Phase 3 : Checklist for Topping Coat for Toilet/ Bathroom Waterproofing', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Slope check', checksdescription: '1. Topping with 1:4 cement mortar with waterproofing compound and maintain proper slope from entrance to nahani trap & finish with neat cement slurry.' },
                                            { checksHeading: 'Curing check', checksdescription: '2. Provide curing for minimum 7 days with water. Minimum 7.5 cm depth of water to be maintained.' },
                                        ];

                                        async function WaterproofingChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        WaterproofingChacks();
                                    }



                                    if (newDatanew.subactivityname === "GF -Waterproofing") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Assign the contractor and labour  for waterproofing' },
                                            { subtaskdescription: 'Arrange the  the material/chemical for water proofing ' },
                                            { subtaskdescription: 'Arrange the  the gi/pvc pipe  at site' },
                                            { subtaskdescription: 'Arrange the the Brick bat made available in site in case of brick bat coba type waterproofing' },
                                            { subtaskdescription: 'Ask the contractor to mark the level  for the waterproofing' },
                                            { subtaskdescription: 'Ask the contractor to fill all the holes before waterproofing' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the guard for curing of the waterproofed surface' },
                                            { subtaskdescription: 'Ask the contractor to check the waterproofed area for leakage' },
                                            { subtaskdescription: 'Ask the contractor to mark the levels on the wall' },

                                        ];

                                        async function WaterproofingfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        WaterproofingfunCall();
                                    }







                                    if (newDatanew.subactivityname === "GF -Waterproofing") {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Plaster Check', checksdescription: '1. Internal plaster of walls, leaving margin of 450mm from the final floor level be completed.' },
                                            { checksHeading: 'Chasing Check', checksdescription: '2. Grooving / chasing for concealed G.I. piping / electrical conduit pipe be completed.' },
                                            { checksHeading: 'Concealed work check', checksdescription: '3. All concealed G.I. & Electrical work in bathroom / toilet be completed.' },
                                            { checksHeading: 'Cleaning check', checksdescription: '4. Removal of all debris from toilet/ bathroom & chiseling of extra mortar, if any, to expose the slab.' },
                                            { checksHeading: 'Nahani trap check', checksdescription: '5. Completion of making holes in external walls for connecting nahani trap, p trap etc. to external drainage line.' },
                                            { checksHeading: 'Cleaning check', checksdescription: '6. Thorough cleaning of bathroom/ toilet with sufficient quantity of water is done.' },
                                            { checksHeading: 'Level check', checksdescription: '7. Marking levels on walls with respect to floor level.' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Leakage check', checksdescription: '1. Any leakage in base slab.' },
                                            { checksHeading: 'Slope check', checksdescription: '2. Maintain slope of 1:100 from entrance door towards water escape pipe (drainage pipe) with cement mortar 1:4, thickness 25 mm to 40 mm.' },
                                            { checksHeading: 'Base coat check', checksdescription: '3. Complete the base coat on walls up to height of 300 mm above toilet finish floor level covering all beam top junction etc. properly.' },
                                            { checksHeading: 'Curing check', checksdescription: '4. Flood the base coat with water, upto slab drop top, for minimum 4 days for curing & testing of leakage, if any.' },
                                            { checksHeading: 'Outlet check', checksdescription: '5. Provide 25 mm G.I. / P.V.C. pipe for water escape outlet just above the base coat of W.C./Bath/Toilet.' },
                                            { checksHeading: 'Layer Check', checksdescription: '6. Check the layers applying as per the design & instruction' },
                                            { checksHeading: 'Phase 3 : Checklist for Topping Coat for Toilet/ Bathroom Waterproofing', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Slope check', checksdescription: '1. Topping with 1:4 cement mortar with waterproofing compound and maintain proper slope from entrance to nahani trap & finish with neat cement slurry.' },
                                            { checksHeading: 'Curing check', checksdescription: '2. Provide curing for minimum 7 days with water. Minimum 7.5 cm depth of water to be maintained.' },
                                        ];

                                        async function WaterproofingChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        WaterproofingChacks();
                                    }


                                    if (newDatanew.subactivityname === "GF -Waterproofing") {

                                        const dataArranew = [
                                            {},
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Base Coat', NormalHeadingThree: 'First Coat', NormalHeadingfoure: 'Final Coat' },
                                            {},
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }


                                    if (newDatanew.subactivityname === "FF -Waterproofing") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Assign the contractor and labour  for waterproofing' },
                                            { subtaskdescription: 'Arrange the  the material/chemical for water proofing ' },
                                            { subtaskdescription: 'Arrange the  the gi/pvc pipe  at site' },
                                            { subtaskdescription: 'Arrange the the Brick bat made available in site in case of brick bat coba type waterproofing' },
                                            { subtaskdescription: 'Ask the contractor to mark the level  for the waterproofing' },
                                            { subtaskdescription: 'Ask the contractor to fill all the holes before waterproofing' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the guard for curing of the waterproofed surface' },
                                            { subtaskdescription: 'Ask the contractor to check the waterproofed area for leakage' },
                                            { subtaskdescription: 'Ask the contractor to mark the levels on the wall' },

                                        ];

                                        async function WaterproofingfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        WaterproofingfunCall();
                                    }







                                    if (newDatanew.subactivityname === "FF -Waterproofing") {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Plaster Check', checksdescription: '1. Internal plaster of walls, leaving margin of 450mm from the final floor level be completed.' },
                                            { checksHeading: 'Chasing Check', checksdescription: '2. Grooving / chasing for concealed G.I. piping / electrical conduit pipe be completed.' },
                                            { checksHeading: 'Concealed work check', checksdescription: '3. All concealed G.I. & Electrical work in bathroom / toilet be completed.' },
                                            { checksHeading: 'Cleaning check', checksdescription: '4. Removal of all debris from toilet/ bathroom & chiseling of extra mortar, if any, to expose the slab.' },
                                            { checksHeading: 'Nahani trap check', checksdescription: '5. Completion of making holes in external walls for connecting nahani trap, p trap etc. to external drainage line.' },
                                            { checksHeading: 'Cleaning check', checksdescription: '6. Thorough cleaning of bathroom/ toilet with sufficient quantity of water is done.' },
                                            { checksHeading: 'Level check', checksdescription: '7. Marking levels on walls with respect to floor level.' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Leakage check', checksdescription: '1. Any leakage in base slab.' },
                                            { checksHeading: 'Slope check', checksdescription: '2. Maintain slope of 1:100 from entrance door towards water escape pipe (drainage pipe) with cement mortar 1:4, thickness 25 mm to 40 mm.' },
                                            { checksHeading: 'Base coat check', checksdescription: '3. Complete the base coat on walls up to height of 300 mm above toilet finish floor level covering all beam top junction etc. properly.' },
                                            { checksHeading: 'Curing check', checksdescription: '4. Flood the base coat with water, upto slab drop top, for minimum 4 days for curing & testing of leakage, if any.' },
                                            { checksHeading: 'Outlet check', checksdescription: '5. Provide 25 mm G.I. / P.V.C. pipe for water escape outlet just above the base coat of W.C./Bath/Toilet.' },
                                            { checksHeading: 'Layer Check', checksdescription: '6. Check the layers applying as per the design & instruction' },
                                            { checksHeading: 'Phase 3 : Checklist for Topping Coat for Toilet/ Bathroom Waterproofing', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Slope check', checksdescription: '1. Topping with 1:4 cement mortar with waterproofing compound and maintain proper slope from entrance to nahani trap & finish with neat cement slurry.' },
                                            { checksHeading: 'Curing check', checksdescription: '2. Provide curing for minimum 7 days with water. Minimum 7.5 cm depth of water to be maintained.' },
                                        ];

                                        async function WaterproofingChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        WaterproofingChacks();
                                    }

                                    if (newDatanew.subactivityname === "FF -Waterproofing") {

                                        const dataArranew = [
                                            {},
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Base Coat', NormalHeadingThree: 'First Coat', NormalHeadingfoure: 'Final Coat' },
                                            {},
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }


                                    if (newDatanew.subactivityname === "SF -Waterproofing") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Assign the contractor and labour  for waterproofing' },
                                            { subtaskdescription: 'Arrange the  the material/chemical for water proofing ' },
                                            { subtaskdescription: 'Arrange the  the gi/pvc pipe  at site' },
                                            { subtaskdescription: 'Arrange the the Brick bat made available in site in case of brick bat coba type waterproofing' },
                                            { subtaskdescription: 'Ask the contractor to mark the level  for the waterproofing' },
                                            { subtaskdescription: 'Ask the contractor to fill all the holes before waterproofing' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the guard for curing of the waterproofed surface' },
                                            { subtaskdescription: 'Ask the contractor to check the waterproofed area for leakage' },
                                            { subtaskdescription: 'Ask the contractor to mark the levels on the wall' },

                                        ];

                                        async function WaterproofingfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        WaterproofingfunCall();
                                    }







                                    if (newDatanew.subactivityname === "SF -Waterproofing") {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Plaster Check', checksdescription: '1. Internal plaster of walls, leaving margin of 450mm from the final floor level be completed.' },
                                            { checksHeading: 'Chasing Check', checksdescription: '2. Grooving / chasing for concealed G.I. piping / electrical conduit pipe be completed.' },
                                            { checksHeading: 'Concealed work check', checksdescription: '3. All concealed G.I. & Electrical work in bathroom / toilet be completed.' },
                                            { checksHeading: 'Cleaning check', checksdescription: '4. Removal of all debris from toilet/ bathroom & chiseling of extra mortar, if any, to expose the slab.' },
                                            { checksHeading: 'Nahani trap check', checksdescription: '5. Completion of making holes in external walls for connecting nahani trap, p trap etc. to external drainage line.' },
                                            { checksHeading: 'Cleaning check', checksdescription: '6. Thorough cleaning of bathroom/ toilet with sufficient quantity of water is done.' },
                                            { checksHeading: 'Level check', checksdescription: '7. Marking levels on walls with respect to floor level.' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Leakage check', checksdescription: '1. Any leakage in base slab.' },
                                            { checksHeading: 'Slope check', checksdescription: '2. Maintain slope of 1:100 from entrance door towards water escape pipe (drainage pipe) with cement mortar 1:4, thickness 25 mm to 40 mm.' },
                                            { checksHeading: 'Base coat check', checksdescription: '3. Complete the base coat on walls up to height of 300 mm above toilet finish floor level covering all beam top junction etc. properly.' },
                                            { checksHeading: 'Curing check', checksdescription: '4. Flood the base coat with water, upto slab drop top, for minimum 4 days for curing & testing of leakage, if any.' },
                                            { checksHeading: 'Outlet check', checksdescription: '5. Provide 25 mm G.I. / P.V.C. pipe for water escape outlet just above the base coat of W.C./Bath/Toilet.' },
                                            { checksHeading: 'Layer Check', checksdescription: '6. Check the layers applying as per the design & instruction' },
                                            { checksHeading: 'Phase 3 : Checklist for Topping Coat for Toilet/ Bathroom Waterproofing', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Slope check', checksdescription: '1. Topping with 1:4 cement mortar with waterproofing compound and maintain proper slope from entrance to nahani trap & finish with neat cement slurry.' },
                                            { checksHeading: 'Curing check', checksdescription: '2. Provide curing for minimum 7 days with water. Minimum 7.5 cm depth of water to be maintained.' },
                                        ];

                                        async function WaterproofingChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        WaterproofingChacks();
                                    }

                                    if (newDatanew.subactivityname === "SF -Waterproofing") {

                                        const dataArranew = [
                                            {},
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Base Coat', NormalHeadingThree: 'First Coat', NormalHeadingfoure: 'Final Coat' },
                                            {},
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }

                                    if (newDatanew.subactivityname === "TF -Waterproofing") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Assign the contractor and labour  for waterproofing' },
                                            { subtaskdescription: 'Arrange the  the material/chemical for water proofing ' },
                                            { subtaskdescription: 'Arrange the  the gi/pvc pipe  at site' },
                                            { subtaskdescription: 'Arrange the the Brick bat made available in site in case of brick bat coba type waterproofing' },
                                            { subtaskdescription: 'Ask the contractor to mark the level  for the waterproofing' },
                                            { subtaskdescription: 'Ask the contractor to fill all the holes before waterproofing' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the guard for curing of the waterproofed surface' },
                                            { subtaskdescription: 'Ask the contractor to check the waterproofed area for leakage' },
                                            { subtaskdescription: 'Ask the contractor to mark the levels on the wall' },

                                        ];

                                        async function WaterproofingfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        WaterproofingfunCall();
                                    }







                                    if (newDatanew.subactivityname === "TF -Waterproofing") {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Plaster Check', checksdescription: '1. Internal plaster of walls, leaving margin of 450mm from the final floor level be completed.' },
                                            { checksHeading: 'Chasing Check', checksdescription: '2. Grooving / chasing for concealed G.I. piping / electrical conduit pipe be completed.' },
                                            { checksHeading: 'Concealed work check', checksdescription: '3. All concealed G.I. & Electrical work in bathroom / toilet be completed.' },
                                            { checksHeading: 'Cleaning check', checksdescription: '4. Removal of all debris from toilet/ bathroom & chiseling of extra mortar, if any, to expose the slab.' },
                                            { checksHeading: 'Nahani trap check', checksdescription: '5. Completion of making holes in external walls for connecting nahani trap, p trap etc. to external drainage line.' },
                                            { checksHeading: 'Cleaning check', checksdescription: '6. Thorough cleaning of bathroom/ toilet with sufficient quantity of water is done.' },
                                            { checksHeading: 'Level check', checksdescription: '7. Marking levels on walls with respect to floor level.' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Leakage check', checksdescription: '1. Any leakage in base slab.' },
                                            { checksHeading: 'Slope check', checksdescription: '2. Maintain slope of 1:100 from entrance door towards water escape pipe (drainage pipe) with cement mortar 1:4, thickness 25 mm to 40 mm.' },
                                            { checksHeading: 'Base coat check', checksdescription: '3. Complete the base coat on walls up to height of 300 mm above toilet finish floor level covering all beam top junction etc. properly.' },
                                            { checksHeading: 'Curing check', checksdescription: '4. Flood the base coat with water, upto slab drop top, for minimum 4 days for curing & testing of leakage, if any.' },
                                            { checksHeading: 'Outlet check', checksdescription: '5. Provide 25 mm G.I. / P.V.C. pipe for water escape outlet just above the base coat of W.C./Bath/Toilet.' },
                                            { checksHeading: 'Layer Check', checksdescription: '6. Check the layers applying as per the design & instruction' },
                                            { checksHeading: 'Phase 3 : Checklist for Topping Coat for Toilet/ Bathroom Waterproofing', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Slope check', checksdescription: '1. Topping with 1:4 cement mortar with waterproofing compound and maintain proper slope from entrance to nahani trap & finish with neat cement slurry.' },
                                            { checksHeading: 'Curing check', checksdescription: '2. Provide curing for minimum 7 days with water. Minimum 7.5 cm depth of water to be maintained.' },
                                        ];

                                        async function WaterproofingChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        WaterproofingChacks();
                                    }


                                    if (newDatanew.subactivityname === "TF -Waterproofing") {

                                        const dataArranew = [
                                            {},
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Base Coat', NormalHeadingThree: 'First Coat', NormalHeadingfoure: 'Final Coat' },
                                            {},
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }


                                    if (newDatanew.subactivityname === "FoF -Waterproofing") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Assign the contractor and labour  for waterproofing' },
                                            { subtaskdescription: 'Arrange the  the material/chemical for water proofing ' },
                                            { subtaskdescription: 'Arrange the  the gi/pvc pipe  at site' },
                                            { subtaskdescription: 'Arrange the the Brick bat made available in site in case of brick bat coba type waterproofing' },
                                            { subtaskdescription: 'Ask the contractor to mark the level  for the waterproofing' },
                                            { subtaskdescription: 'Ask the contractor to fill all the holes before waterproofing' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the guard for curing of the waterproofed surface' },
                                            { subtaskdescription: 'Ask the contractor to check the waterproofed area for leakage' },
                                            { subtaskdescription: 'Ask the contractor to mark the levels on the wall' },

                                        ];

                                        async function WaterproofingfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        WaterproofingfunCall();
                                    }







                                    if (newDatanew.subactivityname === "FoF -Waterproofing") {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Plaster Check', checksdescription: '1. Internal plaster of walls, leaving margin of 450mm from the final floor level be completed.' },
                                            { checksHeading: 'Chasing Check', checksdescription: '2. Grooving / chasing for concealed G.I. piping / electrical conduit pipe be completed.' },
                                            { checksHeading: 'Concealed work check', checksdescription: '3. All concealed G.I. & Electrical work in bathroom / toilet be completed.' },
                                            { checksHeading: 'Cleaning check', checksdescription: '4. Removal of all debris from toilet/ bathroom & chiseling of extra mortar, if any, to expose the slab.' },
                                            { checksHeading: 'Nahani trap check', checksdescription: '5. Completion of making holes in external walls for connecting nahani trap, p trap etc. to external drainage line.' },
                                            { checksHeading: 'Cleaning check', checksdescription: '6. Thorough cleaning of bathroom/ toilet with sufficient quantity of water is done.' },
                                            { checksHeading: 'Level check', checksdescription: '7. Marking levels on walls with respect to floor level.' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Leakage check', checksdescription: '1. Any leakage in base slab.' },
                                            { checksHeading: 'Slope check', checksdescription: '2. Maintain slope of 1:100 from entrance door towards water escape pipe (drainage pipe) with cement mortar 1:4, thickness 25 mm to 40 mm.' },
                                            { checksHeading: 'Base coat check', checksdescription: '3. Complete the base coat on walls up to height of 300 mm above toilet finish floor level covering all beam top junction etc. properly.' },
                                            { checksHeading: 'Curing check', checksdescription: '4. Flood the base coat with water, upto slab drop top, for minimum 4 days for curing & testing of leakage, if any.' },
                                            { checksHeading: 'Outlet check', checksdescription: '5. Provide 25 mm G.I. / P.V.C. pipe for water escape outlet just above the base coat of W.C./Bath/Toilet.' },
                                            { checksHeading: 'Layer Check', checksdescription: '6. Check the layers applying as per the design & instruction' },
                                            { checksHeading: 'Phase 3 : Checklist for Topping Coat for Toilet/ Bathroom Waterproofing', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Slope check', checksdescription: '1. Topping with 1:4 cement mortar with waterproofing compound and maintain proper slope from entrance to nahani trap & finish with neat cement slurry.' },
                                            { checksHeading: 'Curing check', checksdescription: '2. Provide curing for minimum 7 days with water. Minimum 7.5 cm depth of water to be maintained.' },
                                        ];

                                        async function WaterproofingChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        WaterproofingChacks();
                                    }



                                    
                                    if (newDatanew.subactivityname === "FoF -Waterproofing") {

                                        const dataArranew = [
                                            {},
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Base Coat', NormalHeadingThree: 'First Coat', NormalHeadingfoure: 'Final Coat' },
                                            {},
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }

                                    if (newDatanew.subactivityname === "Tower -Waterproofing") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Assign the contractor and labour  for waterproofing' },
                                            { subtaskdescription: 'Arrange the  the material/chemical for water proofing ' },
                                            { subtaskdescription: 'Arrange the  the gi/pvc pipe  at site' },
                                            { subtaskdescription: 'Arrange the the Brick bat made available in site in case of brick bat coba type waterproofing' },
                                            { subtaskdescription: 'Ask the contractor to mark the level  for the waterproofing' },
                                            { subtaskdescription: 'Ask the contractor to fill all the holes before waterproofing' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the guard for curing of the waterproofed surface' },
                                            { subtaskdescription: 'Ask the contractor to check the waterproofed area for leakage' },
                                            { subtaskdescription: 'Ask the contractor to mark the levels on the wall' },

                                        ];

                                        async function WaterproofingfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        WaterproofingfunCall();
                                    }







                                    if (newDatanew.subactivityname === "Tower -Waterproofing") {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Plaster Check', checksdescription: '1. Internal plaster of walls, leaving margin of 450mm from the final floor level be completed.' },
                                            { checksHeading: 'Chasing Check', checksdescription: '2. Grooving / chasing for concealed G.I. piping / electrical conduit pipe be completed.' },
                                            { checksHeading: 'Concealed work check', checksdescription: '3. All concealed G.I. & Electrical work in bathroom / toilet be completed.' },
                                            { checksHeading: 'Cleaning check', checksdescription: '4. Removal of all debris from toilet/ bathroom & chiseling of extra mortar, if any, to expose the slab.' },
                                            { checksHeading: 'Nahani trap check', checksdescription: '5. Completion of making holes in external walls for connecting nahani trap, p trap etc. to external drainage line.' },
                                            { checksHeading: 'Cleaning check', checksdescription: '6. Thorough cleaning of bathroom/ toilet with sufficient quantity of water is done.' },
                                            { checksHeading: 'Level check', checksdescription: '7. Marking levels on walls with respect to floor level.' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Leakage check', checksdescription: '1. Any leakage in base slab.' },
                                            { checksHeading: 'Slope check', checksdescription: '2. Maintain slope of 1:100 from entrance door towards water escape pipe (drainage pipe) with cement mortar 1:4, thickness 25 mm to 40 mm.' },
                                            { checksHeading: 'Base coat check', checksdescription: '3. Complete the base coat on walls up to height of 300 mm above toilet finish floor level covering all beam top junction etc. properly.' },
                                            { checksHeading: 'Curing check', checksdescription: '4. Flood the base coat with water, upto slab drop top, for minimum 4 days for curing & testing of leakage, if any.' },
                                            { checksHeading: 'Outlet check', checksdescription: '5. Provide 25 mm G.I. / P.V.C. pipe for water escape outlet just above the base coat of W.C./Bath/Toilet.' },
                                            { checksHeading: 'Layer Check', checksdescription: '6. Check the layers applying as per the design & instruction' },
                                            { checksHeading: 'Phase 3 : Checklist for Topping Coat for Toilet/ Bathroom Waterproofing', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Slope check', checksdescription: '1. Topping with 1:4 cement mortar with waterproofing compound and maintain proper slope from entrance to nahani trap & finish with neat cement slurry.' },
                                            { checksHeading: 'Curing check', checksdescription: '2. Provide curing for minimum 7 days with water. Minimum 7.5 cm depth of water to be maintained.' },
                                        ];

                                        async function WaterproofingChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        WaterproofingChacks();
                                    }


                                    if (newDatanew.subactivityname === "Tower -Waterproofing") {

                                        const dataArranew = [
                                            {},
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Base Coat', NormalHeadingThree: 'First Coat', NormalHeadingfoure: 'Final Coat' },
                                            {},
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }




                                    await Activities.updateOne(
                                        { _id: newss },
                                        {
                                            $push: {
                                                subactivitiesID: objID
                                            }
                                        }
                                    )
                                    // console.log('Data saved:', savedData);
                                } catch (error) {
                                    // console.error('Error saving data:', error);
                                }
                            }
                        }
                        miscellenousCalling();
                    }






                    if (newData.categoryname === "Plaster") {

                        const dataArranew = [
                            { subactivityname: 'B1 - Plaster Work', activityID: newData._id, projectID: objectproID, estimateDays: b1PlasterWork_ESTD, TempID: 11 },
                            { subactivityname: 'B2 - Plaster Work', activityID: newData._id, projectID: objectproID, estimateDays: b2PlasterWork_ESTD, TempID: 22 },
                            { subactivityname: 'B3 - Plaster Work', activityID: newData._id, projectID: objectproID, estimateDays: b3PlasterWork_ESTD, TempID: 33 },
                            { subactivityname: 'B4 - Plaster Work', activityID: newData._id, projectID: objectproID, estimateDays: b4PlasterWork_ESTD, TempID: 44 },
                            { subactivityname: 'GF - Plaster Work', activityID: newData._id, projectID: objectproID, estimateDays: gfPlasterWork_ESTD },
                            { subactivityname: 'FF - Plaster Work', activityID: newData._id, projectID: objectproID, estimateDays: ffPlasterWork_ESTD, TempID: 1 },
                            { subactivityname: 'SF - Plaster Work', activityID: newData._id, projectID: objectproID, estimateDays: sfPlasterWork_ESTD, TempID: 2 },
                            { subactivityname: 'TF - Plaster Work', activityID: newData._id, projectID: objectproID, estimateDays: tfPlasterWork_ESTD, TempID: 3 },
                            { subactivityname: 'FoF - Plaster Work', activityID: newData._id, projectID: objectproID, estimateDays: fofPlasterWork_ESTD, TempID: 4 },
                            { subactivityname: 'Tower - Plaster Work', activityID: newData._id, projectID: objectproID, estimateDays: towerPlasterWork_ESTD },
                            { subactivityname: 'Ceiling Plaster', activityID: newData._id, projectID: objectproID, estimateDays: ceilingPlaster_ESTD },
                            { subactivityname: 'Non Elevation Side', activityID: newData._id, projectID: objectproID, estimateDays: nonElevationSide_ESTD },
                            { subactivityname: 'Weather Board', activityID: newData._id, projectID: objectproID, estimateDays: weatherBoard_ESTD },
                            { subactivityname: 'Elevation Side', activityID: newData._id, projectID: objectproID, estimateDays: elevationSide_ESTD },
                            { subactivityname: 'Punning', activityID: newData._id, projectID: objectproID, estimateDays: punning_ESTD }
                        ];

                        async function miscellenousCalling() {
                            for (let i = 0; i < dataArranew.length; i++) {
                                if (dataArranew[i].TempID === 1 && NumbersOfFlorrs < 1 || dataArranew[i].TempID === 2 && NumbersOfFlorrs < 2 || dataArranew[i].TempID === 3 && NumbersOfFlorrs < 3 || dataArranew[i].TempID === 4 && NumbersOfFlorrs < 4 || dataArranew[i].TempID === 11 && NumbersOfBasemetFloor === 0 || dataArranew[i].TempID === 22 && NumbersOfBasemetFloor === 0 || dataArranew[i].TempID === 33 && NumbersOfBasemetFloor === 0 || dataArranew[i].TempID === 44 && NumbersOfBasemetFloor === 0) {
                                    continue; // Skip this iteration
                                }
                                try {
                                    const newDatanew = new SubActivities(dataArranew[i]);
                                    const savedData = await newDatanew.save();

                                    let objID = new mongoose.Types.ObjectId(newDatanew.id)
                                    let newss = new mongoose.Types.ObjectId(newData._id)
                                    // console.log(objID);



                                    if (newDatanew.subactivityname === "B1 - Plaster Work") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Arrange  the  sand  cement and chicken mesh  at site' },
                                            { subtaskdescription: 'Assign the contractor for the plaster work' },
                                            { subtaskdescription: 'Make the electricity and Water arrangements at site' },
                                            { subtaskdescription: 'Ask the contractor to arrange the scaffholding material at site' },
                                            { subtaskdescription: 'Ask the contractor for proper hacking of column before plaster' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the contractor to make the level dots before plaster' },
                                            { subtaskdescription: 'Ask the contractor to keep the plaster in plumb' },
                                            { subtaskdescription: 'Ask the contractor to properly finish the corners and edges' },
                                            { subtaskdescription: 'Ask the contractors to fill the holes properly' },
                                            { subtaskdescription: 'Ask the contractor to maintain 3-4 days gap between two coats of plaster' },
                                            { subtaskdescription: 'Ask the contractor to fix chicken mesh in Brick-RCC joints' },
                                            { subtaskdescription: 'Ask the contractor to lay the cement bags below the wall which is being plastered' },
                                            { subtaskdescription: 'Phase 3', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the guard to do proper curing of the plaster' },
                                        ];

                                        async function PlasterWorkfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PlasterWorkfunCall();
                                    }

                                    if (newDatanew.subactivityname === "B1 - Plaster Work") {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Services check', checksdescription: 'Service line like electrical & plumbing line chasing & filling of voids.' },
                                            { checksHeading: 'Hacking check', checksdescription: 'Has Sufficient hacking (tacha) been done to to all R.C.C. work.' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Cleaning of all R.C.C. & masonry surfaces.' },
                                            { checksHeading: 'Material check', checksdescription: 'Is the sand and cement used for plaster of good quality and as per the specifications' },
                                            { checksHeading: 'Watering check', checksdescription: 'Watering of surface before one day of plastering.' },
                                            { checksHeading: 'Covering check', checksdescription: 'Covering of electrical boxes by dummy plates.' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Thickness check', checksdescription: 'Check if the thickness of the plaster is as per the specifications' },
                                            { checksHeading: 'Phase 3', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Cleaning of plastered surface,windows,doors after plastering' },
                                            { checksHeading: 'Curing check', checksdescription: 'Curing for minimum 10 days.' },
                                        ];

                                        async function PlasterWorkChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PlasterWorkChacks();
                                    }

                                    if (newDatanew.subactivityname === "B2 - Plaster Work") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Arrange  the  sand  cement and chicken mesh  at site' },
                                            { subtaskdescription: 'Assign the contractor for the plaster work' },
                                            { subtaskdescription: 'Make the electricity and Water arrangements at site' },
                                            { subtaskdescription: 'Ask the contractor to arrange the scaffholding material at site' },
                                            { subtaskdescription: 'Ask the contractor for proper hacking of column before plaster' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the contractor to make the level dots before plaster' },
                                            { subtaskdescription: 'Ask the contractor to keep the plaster in plumb' },
                                            { subtaskdescription: 'Ask the contractor to properly finish the corners and edges' },
                                            { subtaskdescription: 'Ask the contractors to fill the holes properly' },
                                            { subtaskdescription: 'Ask the contractor to maintain 3-4 days gap between two coats of plaster' },
                                            { subtaskdescription: 'Ask the contractor to fix chicken mesh in Brick-RCC joints' },
                                            { subtaskdescription: 'Ask the contractor to lay the cement bags below the wall which is being plastered' },
                                            { subtaskdescription: 'Phase 3', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the guard to do proper curing of the plaster' },
                                        ];

                                        async function PlasterWorkfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PlasterWorkfunCall();
                                    }

                                    if (newDatanew.subactivityname === "B2 - Plaster Work") {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Services check', checksdescription: 'Service line like electrical & plumbing line chasing & filling of voids.' },
                                            { checksHeading: 'Hacking check', checksdescription: 'Has Sufficient hacking (tacha) been done to to all R.C.C. work.' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Cleaning of all R.C.C. & masonry surfaces.' },
                                            { checksHeading: 'Material check', checksdescription: 'Is the sand and cement used for plaster of good quality and as per the specifications' },
                                            { checksHeading: 'Watering check', checksdescription: 'Watering of surface before one day of plastering.' },
                                            { checksHeading: 'Covering check', checksdescription: 'Covering of electrical boxes by dummy plates.' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Thickness check', checksdescription: 'Check if the thickness of the plaster is as per the specifications' },
                                            { checksHeading: 'Phase 3', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Cleaning of plastered surface,windows,doors after plastering' },
                                            { checksHeading: 'Curing check', checksdescription: 'Curing for minimum 10 days.' },
                                        ];

                                        async function PlasterWorkChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PlasterWorkChacks();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === "B3 - Plaster Work") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Arrange  the  sand  cement and chicken mesh  at site' },
                                            { subtaskdescription: 'Assign the contractor for the plaster work' },
                                            { subtaskdescription: 'Make the electricity and Water arrangements at site' },
                                            { subtaskdescription: 'Ask the contractor to arrange the scaffholding material at site' },
                                            { subtaskdescription: 'Ask the contractor for proper hacking of column before plaster' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the contractor to make the level dots before plaster' },
                                            { subtaskdescription: 'Ask the contractor to keep the plaster in plumb' },
                                            { subtaskdescription: 'Ask the contractor to properly finish the corners and edges' },
                                            { subtaskdescription: 'Ask the contractors to fill the holes properly' },
                                            { subtaskdescription: 'Ask the contractor to maintain 3-4 days gap between two coats of plaster' },
                                            { subtaskdescription: 'Ask the contractor to fix chicken mesh in Brick-RCC joints' },
                                            { subtaskdescription: 'Ask the contractor to lay the cement bags below the wall which is being plastered' },
                                            { subtaskdescription: 'Phase 3', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the guard to do proper curing of the plaster' },
                                        ];

                                        async function PlasterWorkfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PlasterWorkfunCall();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === "B3 - Plaster Work") {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Services check', checksdescription: 'Service line like electrical & plumbing line chasing & filling of voids.' },
                                            { checksHeading: 'Hacking check', checksdescription: 'Has Sufficient hacking (tacha) been done to to all R.C.C. work.' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Cleaning of all R.C.C. & masonry surfaces.' },
                                            { checksHeading: 'Material check', checksdescription: 'Is the sand and cement used for plaster of good quality and as per the specifications' },
                                            { checksHeading: 'Watering check', checksdescription: 'Watering of surface before one day of plastering.' },
                                            { checksHeading: 'Covering check', checksdescription: 'Covering of electrical boxes by dummy plates.' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Thickness check', checksdescription: 'Check if the thickness of the plaster is as per the specifications' },
                                            { checksHeading: 'Phase 3', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Cleaning of plastered surface,windows,doors after plastering' },
                                            { checksHeading: 'Curing check', checksdescription: 'Curing for minimum 10 days.' },
                                        ];

                                        async function PlasterWorkChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PlasterWorkChacks();
                                    }
                                    if (newDatanew.subactivityname === "B4 - Plaster Work") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Arrange  the  sand  cement and chicken mesh  at site' },
                                            { subtaskdescription: 'Assign the contractor for the plaster work' },
                                            { subtaskdescription: 'Make the electricity and Water arrangements at site' },
                                            { subtaskdescription: 'Ask the contractor to arrange the scaffholding material at site' },
                                            { subtaskdescription: 'Ask the contractor for proper hacking of column before plaster' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the contractor to make the level dots before plaster' },
                                            { subtaskdescription: 'Ask the contractor to keep the plaster in plumb' },
                                            { subtaskdescription: 'Ask the contractor to properly finish the corners and edges' },
                                            { subtaskdescription: 'Ask the contractors to fill the holes properly' },
                                            { subtaskdescription: 'Ask the contractor to maintain 3-4 days gap between two coats of plaster' },
                                            { subtaskdescription: 'Ask the contractor to fix chicken mesh in Brick-RCC joints' },
                                            { subtaskdescription: 'Ask the contractor to lay the cement bags below the wall which is being plastered' },
                                            { subtaskdescription: 'Phase 3', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the guard to do proper curing of the plaster' },
                                        ];

                                        async function PlasterWorkfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PlasterWorkfunCall();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === "B4 - Plaster Work") {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Services check', checksdescription: 'Service line like electrical & plumbing line chasing & filling of voids.' },
                                            { checksHeading: 'Hacking check', checksdescription: 'Has Sufficient hacking (tacha) been done to to all R.C.C. work.' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Cleaning of all R.C.C. & masonry surfaces.' },
                                            { checksHeading: 'Material check', checksdescription: 'Is the sand and cement used for plaster of good quality and as per the specifications' },
                                            { checksHeading: 'Watering check', checksdescription: 'Watering of surface before one day of plastering.' },
                                            { checksHeading: 'Covering check', checksdescription: 'Covering of electrical boxes by dummy plates.' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Thickness check', checksdescription: 'Check if the thickness of the plaster is as per the specifications' },
                                            { checksHeading: 'Phase 3', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Cleaning of plastered surface,windows,doors after plastering' },
                                            { checksHeading: 'Curing check', checksdescription: 'Curing for minimum 10 days.' },
                                        ];

                                        async function PlasterWorkChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PlasterWorkChacks();
                                    }
                                    if (newDatanew.subactivityname === "GF - Plaster Work") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Arrange  the  sand  cement and chicken mesh  at site' },
                                            { subtaskdescription: 'Assign the contractor for the plaster work' },
                                            { subtaskdescription: 'Make the electricity and Water arrangements at site' },
                                            { subtaskdescription: 'Ask the contractor to arrange the scaffholding material at site' },
                                            { subtaskdescription: 'Ask the contractor for proper hacking of column before plaster' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the contractor to make the level dots before plaster' },
                                            { subtaskdescription: 'Ask the contractor to keep the plaster in plumb' },
                                            { subtaskdescription: 'Ask the contractor to properly finish the corners and edges' },
                                            { subtaskdescription: 'Ask the contractors to fill the holes properly' },
                                            { subtaskdescription: 'Ask the contractor to maintain 3-4 days gap between two coats of plaster' },
                                            { subtaskdescription: 'Ask the contractor to fix chicken mesh in Brick-RCC joints' },
                                            { subtaskdescription: 'Ask the contractor to lay the cement bags below the wall which is being plastered' },
                                            { subtaskdescription: 'Phase 3', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the guard to do proper curing of the plaster' },
                                        ];

                                        async function PlasterWorkfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PlasterWorkfunCall();
                                    }





                                    if (newDatanew.subactivityname === "GF - Plaster Work") {

                                        if (InternalPlaster === "GYPSUM PLASTER") {
                                            var dataArGGFN = [
                                                { materailname: 'Gypsum Plaster', materailquantity: materlID.GFGypsumPlasterQuantity, materailUnit: 'BAG - 20 kg' },
                                            ]
                                        } else {
                                            var dataArGGFN = [
                                                { materailname: 'Cement', materailquantity: materlID.GFPlasterWorkCementQuantity, materailUnit: 'BAG' },
                                                { materailname: 'Sand', materailquantity: materlID.GFPlasterWorkSandQuantity, materailUnit: 'CUFT' },
                                                { materailname: 'Chicken Mesh', materailquantity: materlID.GFPlasterWorkChickenMeshQuantity, materailUnit: '150  RUFT' },
                                                { materailname: 'Waterproofing', materailquantity: materlID.GFPlasterWorkWaterproofingQuantity, materailUnit: 'LITER' },

                                            ]
                                        }

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArGGFN.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArGGFN[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }




                                    if (newDatanew.subactivityname === "GF - Plaster Work") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Surface Prep.', headingforshortingTwo: 'Surface Chk.', headingforshortingThree: 'Final Finish' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Condu. Co.', NormalHeadingThree: 'Open(D|W)', NormalHeadingfoure: 'Chi. Mesh' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Surface Lvl', NormalHeadingThree: 'Water|Ghol', NormalHeadingfoure: 'Ele. Box Co.' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Plaster', NormalHeadingThree: 'SLevelling', NormalHeadingfoure: 'Curing' },
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }


                                    if (newDatanew.subactivityname === "FF - Plaster Work") {


                                        if (InternalPlaster === "GYPSUM PLASTER") {
                                            var dataArNMBV = [
                                                { materailname: 'Gypsum Plaster', materailquantity: materlID.FFGypsumPlasterQuantity, materailUnit: 'BAG - 20 kg' },
                                            ]
                                        } else {
                                            var dataArNMBV = [
                                                { materailname: 'Cement', materailquantity: materlID.FFPlasterWorkCementQuantity, materailUnit: 'BAG' },
                                                { materailname: 'Sand', materailquantity: materlID.FFPlasterWorkSandQuantity, materailUnit: 'CUFT' },
                                                { materailname: 'Chicken Mesh', materailquantity: materlID.FFPlasterWorkChickenMeshQuantity, materailUnit: '150  RUFT' },
                                                { materailname: 'Waterproofing', materailquantity: materlID.FFPlasterWorkWaterproofingQuantity, materailUnit: 'LITER' },

                                            ]
                                        }


                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArNMBV.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArNMBV[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }





                                    if (newDatanew.subactivityname === "FF - Plaster Work") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Surface Prep.', headingforshortingTwo: 'Surface Chk.', headingforshortingThree: 'Final Finish' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Condu. Co.', NormalHeadingThree: 'Open(D|W)', NormalHeadingfoure: 'Chi. Mesh' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Surface Lvl', NormalHeadingThree: 'Water|Ghol', NormalHeadingfoure: 'Ele. Box Co.' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Plaster', NormalHeadingThree: 'SLevelling', NormalHeadingfoure: 'Curing' },
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }


                                    if (newDatanew.subactivityname === "SF - Plaster Work") {


                                        if (InternalPlaster === "GYPSUM PLASTER") {
                                            var dataAPOIUU = [
                                                { materailname: 'Gypsum Plaster', materailquantity: materlID.SFGypsumPlasterQuantity, materailUnit: 'BAG - 20 kg' },
                                            ]
                                        } else {
                                            var dataAPOIUU = [
                                                { materailname: 'Cement', materailquantity: materlID.SFPlasterWorkCementQuantity, materailUnit: 'BAG' },
                                                { materailname: 'Sand', materailquantity: materlID.SFPlasterWorkSandQuantity, materailUnit: 'CUFT' },
                                                { materailname: 'Chicken Mesh', materailquantity: materlID.SFPlasterWorkChickenMeshQuantity, materailUnit: '150  RUFT' },
                                                { materailname: 'Waterproofing', materailquantity: materlID.SFPlasterWorkWaterproofingQuantity, materailUnit: 'LITER' },

                                            ]
                                        }


                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataAPOIUU.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataAPOIUU[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }



                                    if (newDatanew.subactivityname === "SF - Plaster Work") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Surface Prep.', headingforshortingTwo: 'Surface Chk.', headingforshortingThree: 'Final Finish' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Condu. Co.', NormalHeadingThree: 'Open(D|W)', NormalHeadingfoure: 'Chi. Mesh' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Surface Lvl', NormalHeadingThree: 'Water|Ghol', NormalHeadingfoure: 'Ele. Box Co.' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Plaster', NormalHeadingThree: 'SLevelling', NormalHeadingfoure: 'Curing' },
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }


                                    if (newDatanew.subactivityname === "TF - Plaster Work") {

                                        if (InternalPlaster === "GYPSUM PLASTER") {
                                            var dataARRTYUIO = [
                                                { materailname: 'Gypsum Plaster', materailquantity: materlID.TFGypsumPlasterQuantity, materailUnit: 'BAG - 20 kg' },
                                            ]
                                        } else {

                                            var dataARRTYUIO = [
                                                { materailname: 'Cement', materailquantity: materlID.TFPlasterWorkCementQuantity, materailUnit: 'BAG' },
                                                { materailname: 'Sand', materailquantity: materlID.TFPlasterWorkSandQuantity, materailUnit: 'CUFT' },
                                                { materailname: 'Chicken Mesh', materailquantity: materlID.TFPlasterWorkChickenMeshQuantity, materailUnit: '150  RUFT' },
                                                { materailname: 'Waterproofing', materailquantity: materlID.TFPlasterWorkWaterproofingQuantity, materailUnit: 'LITER' },

                                            ]
                                        }


                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataARRTYUIO.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataARRTYUIO[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === "TF - Plaster Work") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Surface Prep.', headingforshortingTwo: 'Surface Chk.', headingforshortingThree: 'Final Finish' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Condu. Co.', NormalHeadingThree: 'Open(D|W)', NormalHeadingfoure: 'Chi. Mesh' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Surface Lvl', NormalHeadingThree: 'Water|Ghol', NormalHeadingfoure: 'Ele. Box Co.' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Plaster', NormalHeadingThree: 'SLevelling', NormalHeadingfoure: 'Curing' },
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }


                                    if (newDatanew.subactivityname === "FoF - Plaster Work") {


                                        if (InternalPlaster === "GYPSUM PLASTER") {
                                            var dataArVBGHN = [
                                                { materailname: 'Gypsum Plaster', materailquantity: materlID.FoFGypsumPlasterQuantity, materailUnit: 'BAG - 20 kg' },
                                            ]
                                        } else {
                                            var dataArVBGHN = [
                                                { materailname: 'Cement', materailquantity: materlID.FoFPlasterWorkCementQuantity, materailUnit: 'BAG' },
                                                { materailname: 'Sand', materailquantity: materlID.FoFPlasterWorkSandQuantity, materailUnit: 'CUFT' },
                                                { materailname: 'Chicken Mesh', materailquantity: materlID.FoFPlasterWorkChickenMeshQuantity, materailUnit: '150  RUFT' },
                                                { materailname: 'Waterproofing', materailquantity: materlID.FoFPlasterWorkWaterproofingQuantity, materailUnit: 'LITER' },

                                            ]
                                        }





                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArVBGHN.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArVBGHN[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }



                                    if (newDatanew.subactivityname === "FoF - Plaster Work") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Surface Prep.', headingforshortingTwo: 'Surface Chk.', headingforshortingThree: 'Final Finish' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Condu. Co.', NormalHeadingThree: 'Open(D|W)', NormalHeadingfoure: 'Chi. Mesh' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Surface Lvl', NormalHeadingThree: 'Water|Ghol', NormalHeadingfoure: 'Ele. Box Co.' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Plaster', NormalHeadingThree: 'SLevelling', NormalHeadingfoure: 'Curing' },
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }


                                    if (newDatanew.subactivityname === "Tower - Plaster Work") {


                                        if (InternalPlaster === "GYPSUM PLASTER") {
                                            var dataArLKJHBNM = [
                                                { materailname: 'Gypsum Plaster', materailquantity: materlID.TowerPlasterWorCementQuantity, materailUnit: 'BAG - 20 kg' },
                                            ]
                                        } else {

                                            var dataArLKJHBNM = [
                                                { materailname: 'Cement', materailquantity: materlID.TowerPlasterWorkCementQuantity, materailUnit: 'BAG' },
                                                { materailname: 'Sand', materailquantity: materlID.TowerPlasterWorkSandQuantity, materailUnit: 'CUFT' },
                                                { materailname: 'Chicken Mesh', materailquantity: materlID.TowerPlasterWorkChickenMeshQuantity, materailUnit: '150  RUFT' },
                                                { materailname: 'Waterproofing', materailquantity: materlID.TowerPlasterWorkWaterproofingQuantity, materailUnit: 'LITER' },

                                            ]
                                        }



                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArLKJHBNM.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArLKJHBNM[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }

                                    if (newDatanew.subactivityname === "Tower - Plaster Work") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Surface Prep.', headingforshortingTwo: 'Surface Chk.', headingforshortingThree: 'Final Finish' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Condu. Co.', NormalHeadingThree: 'Open(D|W)', NormalHeadingfoure: 'Chi. Mesh' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Surface Lvl', NormalHeadingThree: 'Water|Ghol', NormalHeadingfoure: 'Ele. Box Co.' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Plaster', NormalHeadingThree: 'SLevelling', NormalHeadingfoure: 'Curing' },
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }



                                    if (newDatanew.subactivityname === "Ceiling Plaster") {

                                        const dataArranew = [
                                            { materailname: 'Cement', materailquantity: materlID.OPW_CeilingPlasterCementQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Sand', materailquantity: materlID.OPW_CeilingPlasterSandQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Waterproofing', materailquantity: materlID.OPW_CeilingPlasterWaterproofingQuantity, materailUnit: 'LITER' },
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === "Ceiling Plaster") {

                                        const dataArranew = [
                                            {},
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Surf. Clear', NormalHeadingThree: 'Hekking', NormalHeadingfoure: 'Plaster' },
                                            {},
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }

                                    if (newDatanew.subactivityname === "Non Elevation Side") {

                                        const dataArranew = [
                                            { materailname: 'Cement', materailquantity: materlID.OPW_NonElevationSideCementQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Sand', materailquantity: materlID.OPW_NonElevationSideSandQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Chicken Mesh', materailquantity: materlID.OPW_NonElevationSideChickenMeshQuantity, materailUnit: '150  RUFT' },
                                            { materailname: 'Waterproofing', materailquantity: materlID.OPW_NonElevationSideWaterproofingQuantity, materailUnit: 'LITER' },
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }



                                    if (newDatanew.subactivityname === "Weather Board") {

                                        const dataArranew = [
                                            { materailname: 'Cement', materailquantity: materlID.OPW_WeatherBoardCementQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Sand', materailquantity: materlID.OPW_WeatherBoardSandQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Chicken Mesh', materailquantity: materlID.OPW_WeatherBoardChickenMeshQuantity, materailUnit: 'BUNDEL' },
                                            { materailname: 'Reinforcment TMT', materailquantity: materlID.OPW_WeatherBoardReinforcementTMTQuantity, materailUnit: 'KG' },
                                            { materailname: 'Binding Wire', materailquantity: materlID.OPW_WeatherBoardBindingWireQuantity, materailUnit: 'KG' },
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }



                                    if (newDatanew.subactivityname === "Elevation Side") {

                                        const dataArranew = [
                                            { materailname: 'Cement', materailquantity: materlID.OPW_ElevationWorkCementQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Sand', materailquantity: materlID.OPW_ElevationWorkSandQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Chicken Mesh', materailquantity: materlID.OPW_ElevationWorkChickenMeshQuantity, materailUnit: '150  RUFT' },
                                            { materailname: 'Waterproofing', materailquantity: materlID.OPW_ElevationWorkWaterproofingQuantity, materailUnit: 'LITER' },
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }



                                    if (newDatanew.subactivityname === "Punning") {

                                        const dataArranew = [
                                            { materailname: 'Gypsum Plaster', materailquantity: materlID.OPW_PunningGypsumPlasterQuantity, materailUnit: 'BAG' },

                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }

                                    if (newDatanew.subactivityname === "Punning") {

                                        const dataArranew = [
                                            {},
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Surf. Check', NormalHeadingThree: 'Corner Ch.', NormalHeadingfoure: 'Applicatio.' },
                                            {},
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }

                                    if (newDatanew.subactivityname === "GF - Plaster Work") {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Services check', checksdescription: 'Service line like electrical & plumbing line chasing & filling of voids.' },
                                            { checksHeading: 'Hacking check', checksdescription: 'Has Sufficient hacking (tacha) been done to to all R.C.C. work.' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Cleaning of all R.C.C. & masonry surfaces.' },
                                            { checksHeading: 'Material check', checksdescription: 'Is the sand and cement used for plaster of good quality and as per the specifications' },
                                            { checksHeading: 'Watering check', checksdescription: 'Watering of surface before one day of plastering.' },
                                            { checksHeading: 'Covering check', checksdescription: 'Covering of electrical boxes by dummy plates.' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Thickness check', checksdescription: 'Check if the thickness of the plaster is as per the specifications' },
                                            { checksHeading: 'Phase 3', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Cleaning of plastered surface,windows,doors after plastering' },
                                            { checksHeading: 'Curing check', checksdescription: 'Curing for minimum 10 days.' },
                                        ];

                                        async function PlasterWorkChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PlasterWorkChacks();
                                    }
                                    if (newDatanew.subactivityname === "FF - Plaster Work") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Arrange  the  sand  cement and chicken mesh  at site' },
                                            { subtaskdescription: 'Assign the contractor for the plaster work' },
                                            { subtaskdescription: 'Make the electricity and Water arrangements at site' },
                                            { subtaskdescription: 'Ask the contractor to arrange the scaffholding material at site' },
                                            { subtaskdescription: 'Ask the contractor for proper hacking of column before plaster' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the contractor to make the level dots before plaster' },
                                            { subtaskdescription: 'Ask the contractor to keep the plaster in plumb' },
                                            { subtaskdescription: 'Ask the contractor to properly finish the corners and edges' },
                                            { subtaskdescription: 'Ask the contractors to fill the holes properly' },
                                            { subtaskdescription: 'Ask the contractor to maintain 3-4 days gap between two coats of plaster' },
                                            { subtaskdescription: 'Ask the contractor to fix chicken mesh in Brick-RCC joints' },
                                            { subtaskdescription: 'Ask the contractor to lay the cement bags below the wall which is being plastered' },
                                            { subtaskdescription: 'Phase 3', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the guard to do proper curing of the plaster' },
                                        ];

                                        async function PlasterWorkfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PlasterWorkfunCall();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === "FF - Plaster Work") {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Services check', checksdescription: 'Service line like electrical & plumbing line chasing & filling of voids.' },
                                            { checksHeading: 'Hacking check', checksdescription: 'Has Sufficient hacking (tacha) been done to to all R.C.C. work.' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Cleaning of all R.C.C. & masonry surfaces.' },
                                            { checksHeading: 'Material check', checksdescription: 'Is the sand and cement used for plaster of good quality and as per the specifications' },
                                            { checksHeading: 'Watering check', checksdescription: 'Watering of surface before one day of plastering.' },
                                            { checksHeading: 'Covering check', checksdescription: 'Covering of electrical boxes by dummy plates.' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Thickness check', checksdescription: 'Check if the thickness of the plaster is as per the specifications' },
                                            { checksHeading: 'Phase 3', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Cleaning of plastered surface,windows,doors after plastering' },
                                            { checksHeading: 'Curing check', checksdescription: 'Curing for minimum 10 days.' },
                                        ];

                                        async function PlasterWorkChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PlasterWorkChacks();
                                    }
                                    if (newDatanew.subactivityname === "SF - Plaster Work") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Arrange  the  sand  cement and chicken mesh  at site' },
                                            { subtaskdescription: 'Assign the contractor for the plaster work' },
                                            { subtaskdescription: 'Make the electricity and Water arrangements at site' },
                                            { subtaskdescription: 'Ask the contractor to arrange the scaffholding material at site' },
                                            { subtaskdescription: 'Ask the contractor for proper hacking of column before plaster' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the contractor to make the level dots before plaster' },
                                            { subtaskdescription: 'Ask the contractor to keep the plaster in plumb' },
                                            { subtaskdescription: 'Ask the contractor to properly finish the corners and edges' },
                                            { subtaskdescription: 'Ask the contractors to fill the holes properly' },
                                            { subtaskdescription: 'Ask the contractor to maintain 3-4 days gap between two coats of plaster' },
                                            { subtaskdescription: 'Ask the contractor to fix chicken mesh in Brick-RCC joints' },
                                            { subtaskdescription: 'Ask the contractor to lay the cement bags below the wall which is being plastered' },
                                            { subtaskdescription: 'Phase 3', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the guard to do proper curing of the plaster' },
                                        ];

                                        async function PlasterWorkfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PlasterWorkfunCall();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'SF - Plaster Work') {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Services check', checksdescription: 'Service line like electrical & plumbing line chasing & filling of voids.' },
                                            { checksHeading: 'Hacking check', checksdescription: 'Has Sufficient hacking (tacha) been done to to all R.C.C. work.' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Cleaning of all R.C.C. & masonry surfaces.' },
                                            { checksHeading: 'Material check', checksdescription: 'Is the sand and cement used for plaster of good quality and as per the specifications' },
                                            { checksHeading: 'Watering check', checksdescription: 'Watering of surface before one day of plastering.' },
                                            { checksHeading: 'Covering check', checksdescription: 'Covering of electrical boxes by dummy plates.' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Thickness check', checksdescription: 'Check if the thickness of the plaster is as per the specifications' },
                                            { checksHeading: 'Phase 3', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Cleaning of plastered surface,windows,doors after plastering' },
                                            { checksHeading: 'Curing check', checksdescription: 'Curing for minimum 10 days.' },
                                        ];

                                        async function PlasterWorkChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PlasterWorkChacks();
                                    }
                                    if (newDatanew.subactivityname === "TF - Plaster Work") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Arrange  the  sand  cement and chicken mesh  at site' },
                                            { subtaskdescription: 'Assign the contractor for the plaster work' },
                                            { subtaskdescription: 'Make the electricity and Water arrangements at site' },
                                            { subtaskdescription: 'Ask the contractor to arrange the scaffholding material at site' },
                                            { subtaskdescription: 'Ask the contractor for proper hacking of column before plaster' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the contractor to make the level dots before plaster' },
                                            { subtaskdescription: 'Ask the contractor to keep the plaster in plumb' },
                                            { subtaskdescription: 'Ask the contractor to properly finish the corners and edges' },
                                            { subtaskdescription: 'Ask the contractors to fill the holes properly' },
                                            { subtaskdescription: 'Ask the contractor to maintain 3-4 days gap between two coats of plaster' },
                                            { subtaskdescription: 'Ask the contractor to fix chicken mesh in Brick-RCC joints' },
                                            { subtaskdescription: 'Ask the contractor to lay the cement bags below the wall which is being plastered' },
                                            { subtaskdescription: 'Phase 3', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the guard to do proper curing of the plaster' },
                                        ];

                                        async function PlasterWorkfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PlasterWorkfunCall();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'TF - Plaster Work') {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Services check', checksdescription: 'Service line like electrical & plumbing line chasing & filling of voids.' },
                                            { checksHeading: 'Hacking check', checksdescription: 'Has Sufficient hacking (tacha) been done to to all R.C.C. work.' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Cleaning of all R.C.C. & masonry surfaces.' },
                                            { checksHeading: 'Material check', checksdescription: 'Is the sand and cement used for plaster of good quality and as per the specifications' },
                                            { checksHeading: 'Watering check', checksdescription: 'Watering of surface before one day of plastering.' },
                                            { checksHeading: 'Covering check', checksdescription: 'Covering of electrical boxes by dummy plates.' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Thickness check', checksdescription: 'Check if the thickness of the plaster is as per the specifications' },
                                            { checksHeading: 'Phase 3', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Cleaning of plastered surface,windows,doors after plastering' },
                                            { checksHeading: 'Curing check', checksdescription: 'Curing for minimum 10 days.' },
                                        ];

                                        async function PlasterWorkChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PlasterWorkChacks();
                                    }
                                    if (newDatanew.subactivityname === "FoF - Plaster Work") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Arrange  the  sand  cement and chicken mesh  at site' },
                                            { subtaskdescription: 'Assign the contractor for the plaster work' },
                                            { subtaskdescription: 'Make the electricity and Water arrangements at site' },
                                            { subtaskdescription: 'Ask the contractor to arrange the scaffholding material at site' },
                                            { subtaskdescription: 'Ask the contractor for proper hacking of column before plaster' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the contractor to make the level dots before plaster' },
                                            { subtaskdescription: 'Ask the contractor to keep the plaster in plumb' },
                                            { subtaskdescription: 'Ask the contractor to properly finish the corners and edges' },
                                            { subtaskdescription: 'Ask the contractors to fill the holes properly' },
                                            { subtaskdescription: 'Ask the contractor to maintain 3-4 days gap between two coats of plaster' },
                                            { subtaskdescription: 'Ask the contractor to fix chicken mesh in Brick-RCC joints' },
                                            { subtaskdescription: 'Ask the contractor to lay the cement bags below the wall which is being plastered' },
                                            { subtaskdescription: 'Phase 3', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the guard to do proper curing of the plaster' },
                                        ];

                                        async function PlasterWorkfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PlasterWorkfunCall();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'FoF - Plaster Work') {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Services check', checksdescription: 'Service line like electrical & plumbing line chasing & filling of voids.' },
                                            { checksHeading: 'Hacking check', checksdescription: 'Has Sufficient hacking (tacha) been done to to all R.C.C. work.' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Cleaning of all R.C.C. & masonry surfaces.' },
                                            { checksHeading: 'Material check', checksdescription: 'Is the sand and cement used for plaster of good quality and as per the specifications' },
                                            { checksHeading: 'Watering check', checksdescription: 'Watering of surface before one day of plastering.' },
                                            { checksHeading: 'Covering check', checksdescription: 'Covering of electrical boxes by dummy plates.' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Thickness check', checksdescription: 'Check if the thickness of the plaster is as per the specifications' },
                                            { checksHeading: 'Phase 3', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Cleaning of plastered surface,windows,doors after plastering' },
                                            { checksHeading: 'Curing check', checksdescription: 'Curing for minimum 10 days.' },
                                        ];

                                        async function PlasterWorkChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PlasterWorkChacks();
                                    }
                                    if (newDatanew.subactivityname === "Tower - Plaster Work") {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Arrange  the  sand  cement and chicken mesh  at site' },
                                            { subtaskdescription: 'Assign the contractor for the plaster work' },
                                            { subtaskdescription: 'Make the electricity and Water arrangements at site' },
                                            { subtaskdescription: 'Ask the contractor to arrange the scaffholding material at site' },
                                            { subtaskdescription: 'Ask the contractor for proper hacking of column before plaster' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the contractor to make the level dots before plaster' },
                                            { subtaskdescription: 'Ask the contractor to keep the plaster in plumb' },
                                            { subtaskdescription: 'Ask the contractor to properly finish the corners and edges' },
                                            { subtaskdescription: 'Ask the contractors to fill the holes properly' },
                                            { subtaskdescription: 'Ask the contractor to maintain 3-4 days gap between two coats of plaster' },
                                            { subtaskdescription: 'Ask the contractor to fix chicken mesh in Brick-RCC joints' },
                                            { subtaskdescription: 'Ask the contractor to lay the cement bags below the wall which is being plastered' },
                                            { subtaskdescription: 'Phase 3', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the guard to do proper curing of the plaster' },
                                        ];

                                        async function PlasterWorkfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PlasterWorkfunCall();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'Tower - Plaster Work') {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Services check', checksdescription: 'Service line like electrical & plumbing line chasing & filling of voids.' },
                                            { checksHeading: 'Hacking check', checksdescription: 'Has Sufficient hacking (tacha) been done to to all R.C.C. work.' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Cleaning of all R.C.C. & masonry surfaces.' },
                                            { checksHeading: 'Material check', checksdescription: 'Is the sand and cement used for plaster of good quality and as per the specifications' },
                                            { checksHeading: 'Watering check', checksdescription: 'Watering of surface before one day of plastering.' },
                                            { checksHeading: 'Covering check', checksdescription: 'Covering of electrical boxes by dummy plates.' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Thickness check', checksdescription: 'Check if the thickness of the plaster is as per the specifications' },
                                            { checksHeading: 'Phase 3', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Cleaning of plastered surface,windows,doors after plastering' },
                                            { checksHeading: 'Curing check', checksdescription: 'Curing for minimum 10 days.' },
                                        ];

                                        async function PlasterWorkChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PlasterWorkChacks();
                                    }
                                    //Anuj                                    
                                    if (newDatanew.subactivityname === 'Non Elevation Side') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1 External Plaster', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the contractor to bring good qualities of bamboos for scaffholding' },
                                            { subtaskdescription: 'Ask the contractor to tie the scaffholding properly' },
                                            { subtaskdescription: 'Ask the contractors to fill the holes properly' },
                                            { subtaskdescription: 'Phase 2 External Plaster', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the contractor to make the level dots before plaster' },
                                            { subtaskdescription: 'Ask the contractor to keep the plaster in plumb' },
                                            { subtaskdescription: 'Ask the contractor to properly finish the corners and edges' },
                                            { subtaskdescription: 'Ask the contractors to fill the holes properly' },
                                            { subtaskdescription: 'Ask the contractor to maintain 3-4 days gap between two coats of plaster' },
                                            { subtaskdescription: 'Ask the contractor to fix chicken mesh in Brick-RCC joints' },
                                            { subtaskdescription: 'Ask the contractor to lay the cement bags below the wall which is being plastered' },
                                            { subtaskdescription: 'Phase 3 External Plaster', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the guard to do proper curing of the plaster' },
                                        ];

                                        async function BeamSlabShutteringReinforcementRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteringReinforcementRCCfunCall();
                                    }
                                    if (newDatanew.subactivityname === "Non Elevation Side") {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 01 : Scaffolding of External Plaster', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Material check', checksdescription: 'Bamboos  & wooden planks should not be old & weak, so as to avoid probable accidents.' },
                                            { checksHeading: 'Hard surface check', checksdescription: 'Erect the base bamboos on hard & firm ground, with a minimum anchorage of 45cm (1’6″) in-ground.' },
                                            { checksHeading: 'Plumb check', checksdescription: 'See that the scaffolding is in plumb & not inclined, Ensure that every junction of the scaffolding is well tied.' },
                                            { checksHeading: 'Scaffholding check', checksdescription: 'Scaffolding erection should be carried out with the help of skilled workmen so that the structure possesses the required stability.' },
                                            { checksHeading: 'Opening check', checksdescription: 'Locate the holes/openings for taking mortar ghamelas from room to outside at the skirting level.' },
                                            { checksHeading: 'Scaffholding check', checksdescription: 'Ensure that the scaffolding is used within a week after its erection.' },
                                            { checksHeading: 'Scaffholding check', checksdescription: 'Scaffolding should be removed step by step, from top to bottom, as the work finishes.' },
                                            { checksHeading: 'Scaffholding check', checksdescription: 'Keep 90cm (3’0″) distance between the scaffolding and the wall to be plastered, for sufficient working space for the mason.' },
                                            { checksHeading: 'Supports check', checksdescription: 'Ensure that all the supporting bamboo are passed through the wall & tied internally, with other vertical & horizontal bamboos. Half anchorage in the wall for support should ' },
                                            { checksHeading: 'Tightening chec', checksdescription: 'Proper wedges in the masonry hole, for the tightness of bamboo, should be provided.' },
                                            { checksHeading: 'Safety check', checksdescription: 'While removing the scaffolding, ensure that no one is working under that particular area, so as to avoid accidents.' },
                                            { checksHeading: 'Phase 2 External Plaster', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Smoothness check', checksdescription: 'Smoothness of concrete surface hacked with tacha.' },
                                            { checksHeading: 'Watering check', checksdescription: 'Water the surface to be plastered one day in advance.' },
                                            { checksHeading: 'Gaps check', checksdescription: 'The cement sand mortar between junction of bottom beam & the last layer of masonry shall be filled well in advance before plastering.' },
                                            { checksHeading: 'Parapet wall check', checksdescription: 'For parapet wall, leave a margin of 0.15m ht. in plaster at bottom level from terrace side.' },
                                            { checksHeading: 'Time Check', checksdescription: '3 to 4 days gap between two successive coats for double coat plaster.' },
                                            { checksHeading: 'Finishing check', checksdescription: 'Finishing of scaffolding holes properly & immediately.' },
                                            { checksHeading: 'Phase 3 External Plaster', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Clean the terrace after plastering work.' },
                                            { checksHeading: 'Curing check', checksdescription: 'Curing the plaster for minimum 15 days.' },
                                        ];

                                        async function ExternalPlasterNewChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        ExternalPlasterNewChacks();
                                    }


                                    if (newDatanew.subactivityname === "Non Elevation Side") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Surface Prep.', headingforshortingTwo: 'Plastering', headingforshortingThree: 'Final Finish' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Scaffolding', NormalHeadingThree: 'Surface Lvl', NormalHeadingfoure: 'Chic. Mesh' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Water|Ghol', NormalHeadingThree: 'Base Coat', NormalHeadingfoure: 'Grooving' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Final Coat', NormalHeadingThree: 'Hole Cover', NormalHeadingfoure: 'Curing' },
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }
                                    //Anuj                                    
                                    if (newDatanew.subactivityname === 'Elevation Side') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1 External Plaster', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the contractor to bring good qualities of bamboos for scaffholding' },
                                            { subtaskdescription: 'Ask the contractor to tie the scaffholding properly' },
                                            { subtaskdescription: 'Ask the contractors to fill the holes properly' },
                                            { subtaskdescription: 'Phase 2 External Plaster', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the contractor to make the level dots before plaster' },
                                            { subtaskdescription: 'Ask the contractor to keep the plaster in plumb' },
                                            { subtaskdescription: 'Ask the contractor to properly finish the corners and edges' },
                                            { subtaskdescription: 'Ask the contractors to fill the holes properly' },
                                            { subtaskdescription: 'Ask the contractor to maintain 3-4 days gap between two coats of plaster' },
                                            { subtaskdescription: 'Ask the contractor to fix chicken mesh in Brick-RCC joints' },
                                            { subtaskdescription: 'Ask the contractor to lay the cement bags below the wall which is being plastered' },
                                            { subtaskdescription: 'Phase 3 External Plaster', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the guard to do proper curing of the plaster' },
                                        ];

                                        async function BeamSlabShutteringReinforcementRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteringReinforcementRCCfunCall();
                                    }
                                    if (newDatanew.subactivityname === "Elevation Side") {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 01 : Scaffolding of External Plaster', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Material check', checksdescription: 'Bamboos  & wooden planks should not be old & weak, so as to avoid probable accidents.' },
                                            { checksHeading: 'Hard surface check', checksdescription: 'Erect the base bamboos on hard & firm ground, with a minimum anchorage of 45cm (1’6″) in-ground.' },
                                            { checksHeading: 'Plumb check', checksdescription: 'See that the scaffolding is in plumb & not inclined, Ensure that every junction of the scaffolding is well tied.' },
                                            { checksHeading: 'Scaffholding check', checksdescription: 'Scaffolding erection should be carried out with the help of skilled workmen so that the structure possesses the required stability.' },
                                            { checksHeading: 'Opening check', checksdescription: 'Locate the holes/openings for taking mortar ghamelas from room to outside at the skirting level.' },
                                            { checksHeading: 'Scaffholding check', checksdescription: 'Ensure that the scaffolding is used within a week after its erection.' },
                                            { checksHeading: 'Scaffholding check', checksdescription: 'Scaffolding should be removed step by step, from top to bottom, as the work finishes.' },
                                            { checksHeading: 'Scaffholding check', checksdescription: 'Keep 90cm (3’0″) distance between the scaffolding and the wall to be plastered, for sufficient working space for the mason.' },
                                            { checksHeading: 'Supports check', checksdescription: 'Ensure that all the supporting bamboo are passed through the wall & tied internally, with other vertical & horizontal bamboos. Half anchorage in the wall for support should ' },
                                            { checksHeading: 'Tightening chec', checksdescription: 'Proper wedges in the masonry hole, for the tightness of bamboo, should be provided.' },
                                            { checksHeading: 'Safety check', checksdescription: 'While removing the scaffolding, ensure that no one is working under that particular area, so as to avoid accidents.' },
                                            { checksHeading: 'Phase 2 External Plaster', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Smoothness check', checksdescription: 'Smoothness of concrete surface hacked with tacha.' },
                                            { checksHeading: 'Watering check', checksdescription: 'Water the surface to be plastered one day in advance.' },
                                            { checksHeading: 'Gaps check', checksdescription: 'The cement sand mortar between junction of bottom beam & the last layer of masonry shall be filled well in advance before plastering.' },
                                            { checksHeading: 'Parapet wall check', checksdescription: 'For parapet wall, leave a margin of 0.15m ht. in plaster at bottom level from terrace side.' },
                                            { checksHeading: 'Time Check', checksdescription: '3 to 4 days gap between two successive coats for double coat plaster.' },
                                            { checksHeading: 'Finishing check', checksdescription: 'Finishing of scaffolding holes properly & immediately.' },
                                            { checksHeading: 'Phase 3 External Plaster', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Clean the terrace after plastering work.' },
                                            { checksHeading: 'Curing check', checksdescription: 'Curing the plaster for minimum 15 days.' },
                                        ];

                                        async function ExternalPlasterNewChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        ExternalPlasterNewChacks();
                                    }


                                    await Activities.updateOne(
                                        { _id: newss },
                                        {
                                            $push: {
                                                subactivitiesID: objID
                                            }
                                        }
                                    )
                                    // console.log('Data saved:', savedData);
                                } catch (error) {
                                    // console.error('Error saving data:', error);
                                }
                            }
                        }
                        miscellenousCalling();
                    }








                    if (newData.categoryname === "Chowkat Work - Wooden | Granite") {
                        const dataArranew = [
                            { subactivityname: 'B1 - Chowkat Stone', activityID: newData._id, projectID: objectproID, estimateDays: b1ChowkatStone_ESTD, TempID: 11 },
                            { subactivityname: 'B2 - Chowkat Stone', activityID: newData._id, projectID: objectproID, estimateDays: b2ChowkatStone_ESTD, TempID: 22 },
                            { subactivityname: 'B3 - Chowkat Stone', activityID: newData._id, projectID: objectproID, estimateDays: b3ChowkatStone_ESTD, TempID: 33 },
                            { subactivityname: 'B4 - Chowkat Stone', activityID: newData._id, projectID: objectproID, estimateDays: b4ChowkatStone_ESTD, TempID: 44 },
                            { subactivityname: 'GF - Chowkat Stone', activityID: newData._id, projectID: objectproID, estimateDays: gfChowkatStone_ESTD },
                            { subactivityname: 'FF - Chowkat Stone', activityID: newData._id, projectID: objectproID, estimateDays: ffChowkatStone_ESTD, TempID: 1 },
                            { subactivityname: 'SF - Chowkat Stone', activityID: newData._id, projectID: objectproID, estimateDays: sfChowkatStone_ESTD, TempID: 2 },
                            { subactivityname: 'TF - Chowkat Stone', activityID: newData._id, projectID: objectproID, estimateDays: tfChowkatStone_ESTD, TempID: 3 },
                            { subactivityname: 'FoF - Chowkat Stone', activityID: newData._id, projectID: objectproID, estimateDays: fofChowkatStone_ESTD, TempID: 4 },
                            { subactivityname: 'Tower - Chowkat Stone', activityID: newData._id, projectID: objectproID, estimateDays: towerChowkatStone_ESTD },
                            { subactivityname: 'Parapet Work + Railing + Boundary Wall', activityID: newData._id, projectID: objectproID, estimateDays: parapetWorkRailingBoundaryWall_ESTD },
                            { subactivityname: 'Grill MS Work', activityID: newData._id, projectID: objectproID, estimateDays: grillMSWork_ESTD },
                            { subactivityname: 'Main Gate', activityID: newData._id, projectID: objectproID, estimateDays: mainGate_ESTD },
                            { subactivityname: 'Back Side Cover', activityID: newData._id, projectID: objectproID, estimateDays: backSideCover_ESTD },
                            { subactivityname: 'Back Duct Cover', activityID: newData._id, projectID: objectproID, estimateDays: backDuctCover_ESTD },
                            { subactivityname: 'Cut Out Cover', activityID: newData._id, projectID: objectproID, estimateDays: cutOutCover_ESTD },
                            { subactivityname: 'Elevation', activityID: newData._id, projectID: objectproID, estimateDays: elevation_ESTD },
                            { subactivityname: 'Gazeebo', activityID: newData._id, projectID: objectproID, estimateDays: gazeebo_ESTD },

                        ];

                        async function miscellenousCalling() {
                            for (let i = 0; i < dataArranew.length; i++) {
                                if (dataArranew[i].TempID === 1 && NumbersOfFlorrs < 1 || dataArranew[i].TempID === 2 && NumbersOfFlorrs < 2 || dataArranew[i].TempID === 3 && NumbersOfFlorrs < 3 || dataArranew[i].TempID === 4 && NumbersOfFlorrs < 4 || dataArranew[i].TempID === 11 && NumbersOfBasemetFloor === 0 || dataArranew[i].TempID === 22 && NumbersOfBasemetFloor === 0 || dataArranew[i].TempID === 33 && NumbersOfBasemetFloor === 0 || dataArranew[i].TempID === 44 && NumbersOfBasemetFloor === 0) {
                                    continue; // Skip this iteration
                                }
                                try {
                                    const newDatanew = new SubActivities(dataArranew[i]);
                                    const savedData = await newDatanew.save();

                                    let objID = new mongoose.Types.ObjectId(newDatanew.id)
                                    let newss = new mongoose.Types.ObjectId(newData._id)
                                    // console.log(objID);


                                    //Anuj
                                    if (newDatanew.subactivityname === 'B1 - Chowkat Stone') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Material Calculation as per on Site Final Measurement of Door, Windows, Staricase & Other Areas' },
                                            { subtaskdescription: 'Type of framing work in Door & Windows' },
                                            { subtaskdescription: 'FInal confirmation of panel sizes after reducing frame thickness' },
                                            { subtaskdescription: 'Inform contracotr | labour for cutting, chamfer & polish for final heads up' },
                                            { subtaskdescription: 'Adhesive choosing as per span wise' },
                                            { subtaskdescription: 'In terms of framing, any detailing in terms of detailing in the chamfer or polish, it should be informed to the contractor as per drawing ' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Granite | Stone coming out of the plaster surface should be equally coming out of the wall' },
                                            { subtaskdescription: 'Final areas of framing type - Single or Double should be informed as per drawing' },
                                            { subtaskdescription: 'Ratio of adhesive & cement mortor should be informed to  contractor ' },
                                            { subtaskdescription: 'Granite Joint at 45 Degree at corner to match and not overlapping ' },
                                            { subtaskdescription: 'Phase 3', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Hammer check of the granite & wall joint ' },
                                        ];

                                        async function BeamSlabShutteringReinforcementRCCfunctionNewCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteringReinforcementRCCfunctionNewCall();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'B1 - Chowkat Stone') {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Right Angel Check', checksdescription: 'Do check opening size and its right angle.' },
                                            { checksHeading: 'Pre Work Check', checksdescription: 'If any correction needs to be done it shall be done prior commencement of work.' },
                                            { checksHeading: 'Cutting Methodology', checksdescription: 'Do cut the frame members from single slab of granite to ensure the uniformity of visual effect.' },
                                            { checksHeading: 'Polish Check', checksdescription: 'Edges of frame members cut from slab should be polished / chamfered as specified in approved drawing.' },
                                            { checksHeading: 'Chamfer Check', checksdescription: 'Frame shall have a 450 chamfer joint on all visible corners of frame.' },
                                            { checksHeading: 'Adhesive Application Check', checksdescription: 'With the help of Resin hardener adhesive make the back of frame rough to ensure bonding with bedding mortar. Apply resin hardener adhesive on back of granite and sprinkle sand on it to form a key.' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Frame Position Check', checksdescription: 'Frame should be fixed in position according to approved drawing and as per adjacent finishes.' },
                                            { checksHeading: 'Frame Visibility Check', checksdescription: 'Full thickness of frame should be visible from all side for window and from sides and top for door frame.' },
                                            { checksHeading: 'Mortor Check', checksdescription: 'With cement mortar of 1:4, fix the verticals of frame in position and check for its alignment with keeping top and bottom member in place.' },
                                            { checksHeading: 'Adhesive Check', checksdescription: 'With the help of resin hardener fix the top member in place.' },
                                            { checksHeading: 'Joint Filling Check', checksdescription: 'Do fill void above top frame member with cement mortar.' },
                                            { checksHeading: 'Curing check', checksdescription: 'Cure the mortar for minimum 7 days.' },
                                            { checksHeading: 'Verticality Check', checksdescription: 'After 3 days fix the Pentagon nylon frame fixing screws 10 x 125 mm and recheck the verticality. Screws should be counter sunk by 5mm.' },
                                            { checksHeading: 'Oil Coating', checksdescription: 'Do apply light coat of clear oil on granite face for protection.' },
                                            { checksHeading: 'Grout Fill Check', checksdescription: 'After first coat of paint, fill the screw hole with Tmax and matching grout mix.' },
                                            { checksHeading: 'Phase 3', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'FInal Opening Dim. Check', checksdescription: 'Do check for opening dimensions, line, level and plumb.' },
                                            { checksHeading: 'Granite Cornor Joint Check', checksdescription: 'Do check corner joints and granite to granite joint, there should not be any gap.' },
                                            { checksHeading: 'Final Check', checksdescription: 'Do check for any visible defect.' },
                                        ];

                                        async function GradeSlabAggrigateChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        GradeSlabAggrigateChacks();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'B2 - Chowkat Stone') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Material Calculation as per on Site Final Measurement of Door, Windows, Staricase & Other Areas' },
                                            { subtaskdescription: 'Type of framing work in Door & Windows' },
                                            { subtaskdescription: 'FInal confirmation of panel sizes after reducing frame thickness' },
                                            { subtaskdescription: 'Inform contracotr | labour for cutting, chamfer & polish for final heads up' },
                                            { subtaskdescription: 'Adhesive choosing as per span wise' },
                                            { subtaskdescription: 'In terms of framing, any detailing in terms of detailing in the chamfer or polish, it should be informed to the contractor as per drawing ' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Granite | Stone coming out of the plaster surface should be equally coming out of the wall' },
                                            { subtaskdescription: 'Final areas of framing type - Single or Double should be informed as per drawing' },
                                            { subtaskdescription: 'Ratio of adhesive & cement mortor should be informed to  contractor ' },
                                            { subtaskdescription: 'Granite Joint at 45 Degree at corner to match and not overlapping ' },
                                            { subtaskdescription: 'Phase 3', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Hammer check of the granite & wall joint ' },
                                        ];

                                        async function BeamSlabShutteringReinforcementRCCfunctionNewCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteringReinforcementRCCfunctionNewCall();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'B2 - Chowkat Stone') {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Right Angel Check', checksdescription: 'Do check opening size and its right angle.' },
                                            { checksHeading: 'Pre Work Check', checksdescription: 'If any correction needs to be done it shall be done prior commencement of work.' },
                                            { checksHeading: 'Cutting Methodology', checksdescription: 'Do cut the frame members from single slab of granite to ensure the uniformity of visual effect.' },
                                            { checksHeading: 'Polish Check', checksdescription: 'Edges of frame members cut from slab should be polished / chamfered as specified in approved drawing.' },
                                            { checksHeading: 'Chamfer Check', checksdescription: 'Frame shall have a 450 chamfer joint on all visible corners of frame.' },
                                            { checksHeading: 'Adhesive Application Check', checksdescription: 'With the help of Resin hardener adhesive make the back of frame rough to ensure bonding with bedding mortar. Apply resin hardener adhesive on back of granite and sprinkle sand on it to form a key.' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Frame Position Check', checksdescription: 'Frame should be fixed in position according to approved drawing and as per adjacent finishes.' },
                                            { checksHeading: 'Frame Visibility Check', checksdescription: 'Full thickness of frame should be visible from all side for window and from sides and top for door frame.' },
                                            { checksHeading: 'Mortor Check', checksdescription: 'With cement mortar of 1:4, fix the verticals of frame in position and check for its alignment with keeping top and bottom member in place.' },
                                            { checksHeading: 'Adhesive Check', checksdescription: 'With the help of resin hardener fix the top member in place.' },
                                            { checksHeading: 'Joint Filling Check', checksdescription: 'Do fill void above top frame member with cement mortar.' },
                                            { checksHeading: 'Curing check', checksdescription: 'Cure the mortar for minimum 7 days.' },
                                            { checksHeading: 'Verticality Check', checksdescription: 'After 3 days fix the Pentagon nylon frame fixing screws 10 x 125 mm and recheck the verticality. Screws should be counter sunk by 5mm.' },
                                            { checksHeading: 'Oil Coating', checksdescription: 'Do apply light coat of clear oil on granite face for protection.' },
                                            { checksHeading: 'Grout Fill Check', checksdescription: 'After first coat of paint, fill the screw hole with Tmax and matching grout mix.' },
                                            { checksHeading: 'Phase 3', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'FInal Opening Dim. Check', checksdescription: 'Do check for opening dimensions, line, level and plumb.' },
                                            { checksHeading: 'Granite Cornor Joint Check', checksdescription: 'Do check corner joints and granite to granite joint, there should not be any gap.' },
                                            { checksHeading: 'Final Check', checksdescription: 'Do check for any visible defect.' },
                                        ];

                                        async function GradeSlabAggrigateChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        GradeSlabAggrigateChacks();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'B3 - Chowkat Stone') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Material Calculation as per on Site Final Measurement of Door, Windows, Staricase & Other Areas' },
                                            { subtaskdescription: 'Type of framing work in Door & Windows' },
                                            { subtaskdescription: 'FInal confirmation of panel sizes after reducing frame thickness' },
                                            { subtaskdescription: 'Inform contracotr | labour for cutting, chamfer & polish for final heads up' },
                                            { subtaskdescription: 'Adhesive choosing as per span wise' },
                                            { subtaskdescription: 'In terms of framing, any detailing in terms of detailing in the chamfer or polish, it should be informed to the contractor as per drawing ' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Granite | Stone coming out of the plaster surface should be equally coming out of the wall' },
                                            { subtaskdescription: 'Final areas of framing type - Single or Double should be informed as per drawing' },
                                            { subtaskdescription: 'Ratio of adhesive & cement mortor should be informed to  contractor ' },
                                            { subtaskdescription: 'Granite Joint at 45 Degree at corner to match and not overlapping ' },
                                            { subtaskdescription: 'Phase 3', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Hammer check of the granite & wall joint ' },
                                        ];

                                        async function BeamSlabShutteringReinforcementRCCfunctionNewCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteringReinforcementRCCfunctionNewCall();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'B3 - Chowkat Stone') {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Right Angel Check', checksdescription: 'Do check opening size and its right angle.' },
                                            { checksHeading: 'Pre Work Check', checksdescription: 'If any correction needs to be done it shall be done prior commencement of work.' },
                                            { checksHeading: 'Cutting Methodology', checksdescription: 'Do cut the frame members from single slab of granite to ensure the uniformity of visual effect.' },
                                            { checksHeading: 'Polish Check', checksdescription: 'Edges of frame members cut from slab should be polished / chamfered as specified in approved drawing.' },
                                            { checksHeading: 'Chamfer Check', checksdescription: 'Frame shall have a 450 chamfer joint on all visible corners of frame.' },
                                            { checksHeading: 'Adhesive Application Check', checksdescription: 'With the help of Resin hardener adhesive make the back of frame rough to ensure bonding with bedding mortar. Apply resin hardener adhesive on back of granite and sprinkle sand on it to form a key.' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Frame Position Check', checksdescription: 'Frame should be fixed in position according to approved drawing and as per adjacent finishes.' },
                                            { checksHeading: 'Frame Visibility Check', checksdescription: 'Full thickness of frame should be visible from all side for window and from sides and top for door frame.' },
                                            { checksHeading: 'Mortor Check', checksdescription: 'With cement mortar of 1:4, fix the verticals of frame in position and check for its alignment with keeping top and bottom member in place.' },
                                            { checksHeading: 'Adhesive Check', checksdescription: 'With the help of resin hardener fix the top member in place.' },
                                            { checksHeading: 'Joint Filling Check', checksdescription: 'Do fill void above top frame member with cement mortar.' },
                                            { checksHeading: 'Curing check', checksdescription: 'Cure the mortar for minimum 7 days.' },
                                            { checksHeading: 'Verticality Check', checksdescription: 'After 3 days fix the Pentagon nylon frame fixing screws 10 x 125 mm and recheck the verticality. Screws should be counter sunk by 5mm.' },
                                            { checksHeading: 'Oil Coating', checksdescription: 'Do apply light coat of clear oil on granite face for protection.' },
                                            { checksHeading: 'Grout Fill Check', checksdescription: 'After first coat of paint, fill the screw hole with Tmax and matching grout mix.' },
                                            { checksHeading: 'Phase 3', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'FInal Opening Dim. Check', checksdescription: 'Do check for opening dimensions, line, level and plumb.' },
                                            { checksHeading: 'Granite Cornor Joint Check', checksdescription: 'Do check corner joints and granite to granite joint, there should not be any gap.' },
                                            { checksHeading: 'Final Check', checksdescription: 'Do check for any visible defect.' },
                                        ];

                                        async function GradeSlabAggrigateChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        GradeSlabAggrigateChacks();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'B4 - Chowkat Stone') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Material Calculation as per on Site Final Measurement of Door, Windows, Staricase & Other Areas' },
                                            { subtaskdescription: 'Type of framing work in Door & Windows' },
                                            { subtaskdescription: 'FInal confirmation of panel sizes after reducing frame thickness' },
                                            { subtaskdescription: 'Inform contracotr | labour for cutting, chamfer & polish for final heads up' },
                                            { subtaskdescription: 'Adhesive choosing as per span wise' },
                                            { subtaskdescription: 'In terms of framing, any detailing in terms of detailing in the chamfer or polish, it should be informed to the contractor as per drawing ' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Granite | Stone coming out of the plaster surface should be equally coming out of the wall' },
                                            { subtaskdescription: 'Final areas of framing type - Single or Double should be informed as per drawing' },
                                            { subtaskdescription: 'Ratio of adhesive & cement mortor should be informed to  contractor ' },
                                            { subtaskdescription: 'Granite Joint at 45 Degree at corner to match and not overlapping ' },
                                            { subtaskdescription: 'Phase 3', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Hammer check of the granite & wall joint ' },
                                        ];

                                        async function BeamSlabShutteringReinforcementRCCfunctionNewCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteringReinforcementRCCfunctionNewCall();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'B4 - Chowkat Stone') {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Right Angel Check', checksdescription: 'Do check opening size and its right angle.' },
                                            { checksHeading: 'Pre Work Check', checksdescription: 'If any correction needs to be done it shall be done prior commencement of work.' },
                                            { checksHeading: 'Cutting Methodology', checksdescription: 'Do cut the frame members from single slab of granite to ensure the uniformity of visual effect.' },
                                            { checksHeading: 'Polish Check', checksdescription: 'Edges of frame members cut from slab should be polished / chamfered as specified in approved drawing.' },
                                            { checksHeading: 'Chamfer Check', checksdescription: 'Frame shall have a 450 chamfer joint on all visible corners of frame.' },
                                            { checksHeading: 'Adhesive Application Check', checksdescription: 'With the help of Resin hardener adhesive make the back of frame rough to ensure bonding with bedding mortar. Apply resin hardener adhesive on back of granite and sprinkle sand on it to form a key.' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Frame Position Check', checksdescription: 'Frame should be fixed in position according to approved drawing and as per adjacent finishes.' },
                                            { checksHeading: 'Frame Visibility Check', checksdescription: 'Full thickness of frame should be visible from all side for window and from sides and top for door frame.' },
                                            { checksHeading: 'Mortor Check', checksdescription: 'With cement mortar of 1:4, fix the verticals of frame in position and check for its alignment with keeping top and bottom member in place.' },
                                            { checksHeading: 'Adhesive Check', checksdescription: 'With the help of resin hardener fix the top member in place.' },
                                            { checksHeading: 'Joint Filling Check', checksdescription: 'Do fill void above top frame member with cement mortar.' },
                                            { checksHeading: 'Curing check', checksdescription: 'Cure the mortar for minimum 7 days.' },
                                            { checksHeading: 'Verticality Check', checksdescription: 'After 3 days fix the Pentagon nylon frame fixing screws 10 x 125 mm and recheck the verticality. Screws should be counter sunk by 5mm.' },
                                            { checksHeading: 'Oil Coating', checksdescription: 'Do apply light coat of clear oil on granite face for protection.' },
                                            { checksHeading: 'Grout Fill Check', checksdescription: 'After first coat of paint, fill the screw hole with Tmax and matching grout mix.' },
                                            { checksHeading: 'Phase 3', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'FInal Opening Dim. Check', checksdescription: 'Do check for opening dimensions, line, level and plumb.' },
                                            { checksHeading: 'Granite Cornor Joint Check', checksdescription: 'Do check corner joints and granite to granite joint, there should not be any gap.' },
                                            { checksHeading: 'Final Check', checksdescription: 'Do check for any visible defect.' },
                                        ];

                                        async function GradeSlabAggrigateChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        GradeSlabAggrigateChacks();
                                    }


                                    if (newDatanew.subactivityname === 'GF - Chowkat Stone') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Material Calculation as per on Site Final Measurement of Door, Windows, Staricase & Other Areas' },
                                            { subtaskdescription: 'Type of framing work in Door & Windows' },
                                            { subtaskdescription: 'FInal confirmation of panel sizes after reducing frame thickness' },
                                            { subtaskdescription: 'Inform contracotr | labour for cutting, chamfer & polish for final heads up' },
                                            { subtaskdescription: 'Adhesive choosing as per span wise' },
                                            { subtaskdescription: 'In terms of framing, any detailing in terms of detailing in the chamfer or polish, it should be informed to the contractor as per drawing ' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Granite | Stone coming out of the plaster surface should be equally coming out of the wall' },
                                            { subtaskdescription: 'Final areas of framing type - Single or Double should be informed as per drawing' },
                                            { subtaskdescription: 'Ratio of adhesive & cement mortor should be informed to  contractor ' },
                                            { subtaskdescription: 'Granite Joint at 45 Degree at corner to match and not overlapping ' },
                                            { subtaskdescription: 'Phase 3', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Hammer check of the granite & wall joint ' },
                                        ];

                                        async function BeamSlabShutteringReinforcementRCCfunctionNewCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteringReinforcementRCCfunctionNewCall();
                                    }


                                    if (newDatanew.subactivityname === "GF - Chowkat Stone") {

                                        const dataArranew = [
                                            { materailname: 'Granite', materailquantity: materlID.GFChowkatStoneGraniteQuantity, materailUnit: 'SQFT' },
                                            { materailname: 'Adhesive', materailquantity: materlID.GFChowkatStoneAdhesiveQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Cement', materailquantity: materlID.GFChowkatStoneCementQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Sand', materailquantity: materlID.GFChowkatStoneSandQuantity, materailUnit: 'CUFT' },
                                            { materailname: '18 MM Ply', materailquantity: materlID.GFChowkatStonePly18MMQuantity, materailUnit: 'SQFT' },
                                            { materailname: '12 MM Ply', materailquantity: materlID.GFChowkatStonePly12MMQuantity, materailUnit: 'SQFT' },
                                            { materailname: 'MICA | Veener', materailquantity: materlID.GFChowkatStoneMICAVeenerQuantity, materailUnit: 'SQFT' },
                                            { materailname: 'Fevicol', materailquantity: materlID.GFChowkatStoneFevicolQuantity, materailUnit: 'KG' },
                                            { materailname: 'Other Accessories', materailquantity: materlID.GFChowkatStoneOtherAccessoriesQuantity, materailUnit: 'LUMPSUM' },
                                            { materailname: 'WPC', materailquantity: materlID.GFChowkatStoneWPCQuantity, materailUnit: 'RUFT' },
                                            { materailname: 'Screw', materailquantity: materlID.GFChowkatStoneScrewQuantity, materailUnit: 'NOS' },

                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }




                                    if (newDatanew.subactivityname === "GF - Chowkat Stone") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Opening', headingforshortingTwo: 'Cutting', headingforshortingThree: 'Fixing & Finish' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Inter. Dim.', NormalHeadingThree: 'Alignment', NormalHeadingfoure: 'Plast. Fini.' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Rough Surf.', NormalHeadingThree: 'Chamfer', NormalHeadingfoure: 'Polish' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Adhesive', NormalHeadingThree: 'Intern. Dim.', NormalHeadingfoure: 'Grouting' },
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }


                                    if (newDatanew.subactivityname === "FF - Chowkat Stone") {

                                        const dataArranew = [
                                            { materailname: 'Granite', materailquantity: materlID.FFChowkatStoneGraniteQuantity, materailUnit: 'SQFT' },
                                            { materailname: 'Adhesive', materailquantity: materlID.FFChowkatStoneAdhesiveQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Cement', materailquantity: materlID.FFChowkatStoneCementQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Sand', materailquantity: materlID.FFChowkatStoneSandQuantity, materailUnit: 'CUFT' },
                                            { materailname: '18 MM Ply', materailquantity: materlID.FFChowkatStonePly18MMQuantity, materailUnit: 'SQFT' },
                                            { materailname: '12 MM Ply', materailquantity: materlID.FFChowkatStonePly12MMQuantity, materailUnit: 'SQFT' },
                                            { materailname: 'MICA | Veener', materailquantity: materlID.FFChowkatStoneMICAVeenerQuantity, materailUnit: 'SQFT' },
                                            { materailname: 'Fevicol', materailquantity: materlID.FFChowkatStoneFevicolQuantity, materailUnit: 'KG' },
                                            { materailname: 'Other Accessories', materailquantity: materlID.FFChowkatStoneOtherAccessoriesQuantity, materailUnit: 'LUMPSUM' },
                                            { materailname: 'WPC', materailquantity: materlID.FFChowkatStoneWPCQuantity, materailUnit: 'RUFT' },
                                            { materailname: 'Screw', materailquantity: materlID.FFChowkatStoneScrewQuantity, materailUnit: 'NOS' },

                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }

                                    if (newDatanew.subactivityname === "FF - Chowkat Stone") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Opening', headingforshortingTwo: 'Cutting', headingforshortingThree: 'Fixing & Finish' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Inter. Dim.', NormalHeadingThree: 'Alignment', NormalHeadingfoure: 'Plast. Fini.' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Rough Surf.', NormalHeadingThree: 'Chamfer', NormalHeadingfoure: 'Polish' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Adhesive', NormalHeadingThree: 'Intern. Dim.', NormalHeadingfoure: 'Grouting' },
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }



                                    if (newDatanew.subactivityname === "SF - Chowkat Stone") {

                                        const dataArranew = [
                                            { materailname: 'Granite', materailquantity: materlID.SFChowkatStoneGraniteQuantity, materailUnit: 'SQFT' },
                                            { materailname: 'Adhesive', materailquantity: materlID.SFChowkatStoneAdhesiveQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Cement', materailquantity: materlID.SFChowkatStoneCementQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Sand', materailquantity: materlID.SFChowkatStoneSandQuantity, materailUnit: 'CUFT' },
                                            { materailname: '18 MM Ply', materailquantity: materlID.SFChowkatStonePly18MMQuantity, materailUnit: 'SQFT' },
                                            { materailname: '12 MM Ply', materailquantity: materlID.SFChowkatStonePly12MMQuantity, materailUnit: 'SQFT' },
                                            { materailname: 'MICA | Veener', materailquantity: materlID.SFChowkatStoneMICAVeenerQuantity, materailUnit: 'SQFT' },
                                            { materailname: 'Fevicol', materailquantity: materlID.SFChowkatStoneFevicolQuantity, materailUnit: 'KG' },
                                            { materailname: 'Other Accessories', materailquantity: materlID.SFChowkatStoneOtherAccessoriesQuantity, materailUnit: 'LUMPSUM' },
                                            { materailname: 'WPC', materailquantity: materlID.SFChowkatStoneWPCQuantity, materailUnit: 'RUFT' },
                                            { materailname: 'Screw', materailquantity: materlID.SFChowkatStoneScrewQuantity, materailUnit: 'NOS' },

                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === "SF - Chowkat Stone") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Opening', headingforshortingTwo: 'Cutting', headingforshortingThree: 'Fixing & Finish' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Inter. Dim.', NormalHeadingThree: 'Alignment', NormalHeadingfoure: 'Plast. Fini.' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Rough Surf.', NormalHeadingThree: 'Chamfer', NormalHeadingfoure: 'Polish' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Adhesive', NormalHeadingThree: 'Intern. Dim.', NormalHeadingfoure: 'Grouting' },
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }


                                    if (newDatanew.subactivityname === "TF - Chowkat Stone") {

                                        const dataArranew = [
                                            { materailname: 'Granite', materailquantity: materlID.TFChowkatStoneGraniteQuantity, materailUnit: 'SQFT' },
                                            { materailname: 'Adhesive', materailquantity: materlID.TFChowkatStoneAdhesiveQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Cement', materailquantity: materlID.TFChowkatStoneCementQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Sand', materailquantity: materlID.TFChowkatStoneSandQuantity, materailUnit: 'CUFT' },
                                            { materailname: '18 MM Ply', materailquantity: materlID.TFChowkatStonePly18MMQuantity, materailUnit: 'SQFT' },
                                            { materailname: '12 MM Ply', materailquantity: materlID.TFChowkatStonePly12MMQuantity, materailUnit: 'SQFT' },
                                            { materailname: 'MICA | Veener', materailquantity: materlID.TFChowkatStoneMICAVeenerQuantity, materailUnit: 'SQFT' },
                                            { materailname: 'Fevicol', materailquantity: materlID.TFChowkatStoneFevicolQuantity, materailUnit: 'KG' },
                                            { materailname: 'Other Accessories', materailquantity: materlID.TFChowkatStoneOtherAccessoriesQuantity, materailUnit: 'LUMPSUM' },
                                            { materailname: 'WPC', materailquantity: materlID.TFChowkatStoneWPCQuantity, materailUnit: 'RUFT' },
                                            { materailname: 'Screw', materailquantity: materlID.TFChowkatStoneScrewQuantity, materailUnit: 'NOS' },

                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === "TF - Chowkat Stone") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Opening', headingforshortingTwo: 'Cutting', headingforshortingThree: 'Fixing & Finish' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Inter. Dim.', NormalHeadingThree: 'Alignment', NormalHeadingfoure: 'Plast. Fini.' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Rough Surf.', NormalHeadingThree: 'Chamfer', NormalHeadingfoure: 'Polish' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Adhesive', NormalHeadingThree: 'Intern. Dim.', NormalHeadingfoure: 'Grouting' },
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }

                                    if (newDatanew.subactivityname === "FoF - Chowkat Stone") {

                                        const dataArranew = [
                                            { materailname: 'Granite', materailquantity: materlID.FoFChowkatStoneGraniteQuantity, materailUnit: 'SQFT' },
                                            { materailname: 'Adhesive', materailquantity: materlID.FoFChowkatStoneAdhesiveQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Cement', materailquantity: materlID.FoFChowkatStoneCementQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Sand', materailquantity: materlID.FoFChowkatStoneSandQuantity, materailUnit: 'CUFT' },
                                            { materailname: '18 MM Ply', materailquantity: materlID.FoFChowkatStonePly18MMQuantity, materailUnit: 'SQFT' },
                                            { materailname: '12 MM Ply', materailquantity: materlID.FoFChowkatStonePly12MMQuantity, materailUnit: 'SQFT' },
                                            { materailname: 'MICA | Veener', materailquantity: materlID.FoFChowkatStoneMICAVeenerQuantity, materailUnit: 'SQFT' },
                                            { materailname: 'Fevicol', materailquantity: materlID.FoFChowkatStoneFevicolQuantity, materailUnit: 'KG' },
                                            { materailname: 'Other Accessories', materailquantity: materlID.FoFChowkatStoneOtherAccessoriesQuantity, materailUnit: 'LUMPSUM' },
                                            { materailname: 'WPC', materailquantity: materlID.FoFChowkatStoneWPCQuantity, materailUnit: 'RUFT' },
                                            { materailname: 'Screw', materailquantity: materlID.FoFChowkatStoneScrewQuantity, materailUnit: 'NOS' },

                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }

                                    if (newDatanew.subactivityname === "FoF - Chowkat Stone") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Opening', headingforshortingTwo: 'Cutting', headingforshortingThree: 'Fixing & Finish' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Inter. Dim.', NormalHeadingThree: 'Alignment', NormalHeadingfoure: 'Plast. Fini.' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Rough Surf.', NormalHeadingThree: 'Chamfer', NormalHeadingfoure: 'Polish' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Adhesive', NormalHeadingThree: 'Intern. Dim.', NormalHeadingfoure: 'Grouting' },
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }

                                    if (newDatanew.subactivityname === "Tower - Chowkat Stone") {

                                        const dataArranew = [
                                            { materailname: 'Granite', materailquantity: materlID.TowerChowkatStoneGraniteQuantity, materailUnit: 'SQFT' },
                                            { materailname: 'Adhesive', materailquantity: materlID.TowerChowkatStoneAdhesiveQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Cement', materailquantity: materlID.TowerChowkatStoneCementQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Sand', materailquantity: materlID.TowerChowkatStoneSandQuantity, materailUnit: 'CUFT' },
                                            { materailname: '18 MM Ply', materailquantity: materlID.TowerChowkatStonePly18MMQuantity, materailUnit: 'SQFT' },
                                            { materailname: '12 MM Ply', materailquantity: materlID.TowerChowkatStonePly12MMQuantity, materailUnit: 'SQFT' },
                                            { materailname: 'MICA | Veener', materailquantity: materlID.TowerChowkatStoneMICAVeenerQuantity, materailUnit: 'SQFT' },
                                            { materailname: 'Fevicol', materailquantity: materlID.TowerChowkatStoneFevicolQuantity, materailUnit: 'KG' },
                                            { materailname: 'Other Accessories', materailquantity: materlID.TowerChowkatStoneOtherAccessoriesQuantity, materailUnit: 'LUMPSUM' },
                                            { materailname: 'WPC', materailquantity: materlID.TowerChowkatStoneWPCQuantity, materailUnit: 'RUFT' },
                                            { materailname: 'Screw', materailquantity: materlID.TowerChowkatStoneScrewQuantity, materailUnit: 'NOS' },

                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }



                                    if (newDatanew.subactivityname === "Tower - Chowkat Stone") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Opening', headingforshortingTwo: 'Cutting', headingforshortingThree: 'Fixing & Finish' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Inter. Dim.', NormalHeadingThree: 'Alignment', NormalHeadingfoure: 'Plast. Fini.' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Rough Surf.', NormalHeadingThree: 'Chamfer', NormalHeadingfoure: 'Polish' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Adhesive', NormalHeadingThree: 'Intern. Dim.', NormalHeadingfoure: 'Grouting' },
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }


                                    if (newDatanew.subactivityname === "Parapet Work + Railing + Boundary Wall") {

                                        const dataArranew = [
                                            { materailname: 'Granite', materailquantity: materlID.ParapetGraniteQuantity, materailUnit: 'SQFT' },
                                            { materailname: 'Adhesive', materailquantity: materlID.ParapetAdhesiveQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Cement', materailquantity: materlID.ParapetCementQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Sand', materailquantity: materlID.ParapetSandQuantity, materailUnit: 'CUFT' },

                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }

                                    if (newDatanew.subactivityname === "Back Side Cover") {

                                        const dataArranew = [
                                            { materailname: 'MS Section', materailquantity: materlID.MSW_BackSideCoverMSSectionQuantity, materailUnit: 'KG' },
                                            { materailname: 'Paint', materailquantity: materlID.MSW_BackSideCoverPaintQuantity, materailUnit: 'LITRE' },
                                            { materailname: 'Metal Primer', materailquantity: materlID.MSW_BackSideCoverMetalPrimerQuantity, materailUnit: 'LITRE' },
                                            { materailname: 'Covering Work - Sheet', materailquantity: materlID.MSW_BackSideCoverCoveringWorkSheetQuantity, materailUnit: 'SQFT' },

                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === "Back Duct Cover") {

                                        const dataArranew = [
                                            { materailname: 'MS Section', materailquantity: materlID.MSW_BackTopCoverMSSectionQuantity, materailUnit: 'KG' },
                                            { materailname: 'Paint', materailquantity: materlID.MSW_BackTopCoverPaintQuantity, materailUnit: 'KG' },
                                            { materailname: 'Metal Primer', materailquantity: materlID.MSW_BackTopCoverMetalPrimerQuantity, materailUnit: 'LITRE' },
                                            { materailname: 'Covering Work - Sheet', materailquantity: materlID.MSW_BackTopCoverCoveringWorkSheetQuantity, materailUnit: 'SQFT' },
                                            { materailname: 'Wire Mesh Work', materailquantity: materlID.MSW_BackTopCoverWireMeshWorkQuantity, materailUnit: 'BUNDEL' },
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }



                                    if (newDatanew.subactivityname === "Cut Out Cover") {

                                        const dataArranew = [
                                            { materailname: 'MS Section', materailquantity: materlID.MSW_CutOutCoverMSSectionQuantity, materailUnit: 'KG' },
                                            { materailname: 'Paint', materailquantity: materlID.MSW_CutOutCoverPaintQuantity, materailUnit: 'KG' },
                                            { materailname: 'Metal Primer', materailquantity: materlID.MSW_CutOutCoverMetalPrimerQuantity, materailUnit: 'LITRE' },
                                            { materailname: 'Covering Work - Sheet', materailquantity: materlID.MSW_CutOutCoverCoveringWorkSheetQuantity, materailUnit: 'SQFT' },
                                            { materailname: 'Wire Mesh Work', materailquantity: materlID.MSW_CutOutCoverWireMeshWorkQuantity, materailUnit: 'BUNDEL' },
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === "Elevation") {

                                        const dataArranew = [
                                            { materailname: 'MS Section', materailquantity: materlID.MSW_ElevationalMSSectionQuantity, materailUnit: 'KG' },
                                            { materailname: 'Paint', materailquantity: materlID.MSW_ElevationalPaintQuantity, materailUnit: 'LITRE' },
                                            { materailname: 'Metal Primer', materailquantity: materlID.MSW_ElevationalMetalPrimerQuantity, materailUnit: 'LITRE' },

                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }




                                    if (newDatanew.subactivityname === "Gazeebo") {

                                        const dataArranew = [
                                            { materailname: 'MS Section', materailquantity: materlID.MSW_GazeeboMSSectionQuantity, materailUnit: 'KG' },
                                            { materailname: 'Paint', materailquantity: materlID.MSW_GazeeboPaintQuantity, materailUnit: 'LITRE' },
                                            { materailname: 'Metal Primer', materailquantity: materlID.MSW_GazeeboMetalPrimerQuantity, materailUnit: 'LITRE' },
                                            { materailname: 'Covering Top', materailquantity: materlID.MSW_GazeeboCoveringTopQuantity, materailUnit: 'SQFT' },
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }

                                    if (newDatanew.subactivityname === "Main Gate") {

                                        const dataArranew = [
                                            { materailname: 'MS Section', materailquantity: materlID.MSW_MainGateMSSectionQuantity, materailUnit: 'KG' },
                                            { materailname: 'Paint', materailquantity: materlID.MSW_MainGatePaintQuantity, materailUnit: 'LITRE' },
                                            { materailname: 'Metal Primer', materailquantity: materlID.MSW_MainGateMetalPrimerQuantity, materailUnit: 'LITRE' },

                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === "Grill MS Work") {

                                        const dataArranew = [
                                            { materailname: 'MS', materailquantity: materlID.MSW_GrillWorkMSSectionQuantity, materailUnit: 'KG' },
                                            { materailname: 'Paint', materailquantity: materlID.MSW_GrillWorkPaintQuantity, materailUnit: 'LITRE' },
                                            { materailname: 'Metal Primer', materailquantity: materlID.MSW_GrillWorkMetalPrimerQuantity, materailUnit: 'LITRE' },

                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }



                                    if (newDatanew.subactivityname === "Grill MS Work") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Dimension', headingforshortingTwo: 'Application' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Alignment', NormalHeadingThree: 'Intern. Dim.', NormalHeadingfoure: 'Hole Posit.' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Holing', NormalHeadingThree: 'MS Fixing', NormalHeadingfoure: 'Grouting' },
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }




                                    if (newDatanew.subactivityname === 'GF - Chowkat Stone') {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Right Angel Check', checksdescription: 'Do check opening size and its right angle.' },
                                            { checksHeading: 'Pre Work Check', checksdescription: 'If any correction needs to be done it shall be done prior commencement of work.' },
                                            { checksHeading: 'Cutting Methodology', checksdescription: 'Do cut the frame members from single slab of granite to ensure the uniformity of visual effect.' },
                                            { checksHeading: 'Polish Check', checksdescription: 'Edges of frame members cut from slab should be polished / chamfered as specified in approved drawing.' },
                                            { checksHeading: 'Chamfer Check', checksdescription: 'Frame shall have a 450 chamfer joint on all visible corners of frame.' },
                                            { checksHeading: 'Adhesive Application Check', checksdescription: 'With the help of Resin hardener adhesive make the back of frame rough to ensure bonding with bedding mortar. Apply resin hardener adhesive on back of granite and sprinkle sand on it to form a key.' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Frame Position Check', checksdescription: 'Frame should be fixed in position according to approved drawing and as per adjacent finishes.' },
                                            { checksHeading: 'Frame Visibility Check', checksdescription: 'Full thickness of frame should be visible from all side for window and from sides and top for door frame.' },
                                            { checksHeading: 'Mortor Check', checksdescription: 'With cement mortar of 1:4, fix the verticals of frame in position and check for its alignment with keeping top and bottom member in place.' },
                                            { checksHeading: 'Adhesive Check', checksdescription: 'With the help of resin hardener fix the top member in place.' },
                                            { checksHeading: 'Joint Filling Check', checksdescription: 'Do fill void above top frame member with cement mortar.' },
                                            { checksHeading: 'Curing check', checksdescription: 'Cure the mortar for minimum 7 days.' },
                                            { checksHeading: 'Verticality Check', checksdescription: 'After 3 days fix the Pentagon nylon frame fixing screws 10 x 125 mm and recheck the verticality. Screws should be counter sunk by 5mm.' },
                                            { checksHeading: 'Oil Coating', checksdescription: 'Do apply light coat of clear oil on granite face for protection.' },
                                            { checksHeading: 'Grout Fill Check', checksdescription: 'After first coat of paint, fill the screw hole with Tmax and matching grout mix.' },
                                            { checksHeading: 'Phase 3', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'FInal Opening Dim. Check', checksdescription: 'Do check for opening dimensions, line, level and plumb.' },
                                            { checksHeading: 'Granite Cornor Joint Check', checksdescription: 'Do check corner joints and granite to granite joint, there should not be any gap.' },
                                            { checksHeading: 'Final Check', checksdescription: 'Do check for any visible defect.' },
                                        ];

                                        async function GradeSlabAggrigateChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        GradeSlabAggrigateChacks();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'FF - Chowkat Stone') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Material Calculation as per on Site Final Measurement of Door, Windows, Staricase & Other Areas' },
                                            { subtaskdescription: 'Type of framing work in Door & Windows' },
                                            { subtaskdescription: 'FInal confirmation of panel sizes after reducing frame thickness' },
                                            { subtaskdescription: 'Inform contracotr | labour for cutting, chamfer & polish for final heads up' },
                                            { subtaskdescription: 'Adhesive choosing as per span wise' },
                                            { subtaskdescription: 'In terms of framing, any detailing in terms of detailing in the chamfer or polish, it should be informed to the contractor as per drawing ' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Granite | Stone coming out of the plaster surface should be equally coming out of the wall' },
                                            { subtaskdescription: 'Final areas of framing type - Single or Double should be informed as per drawing' },
                                            { subtaskdescription: 'Ratio of adhesive & cement mortor should be informed to  contractor ' },
                                            { subtaskdescription: 'Granite Joint at 45 Degree at corner to match and not overlapping ' },
                                            { subtaskdescription: 'Phase 3', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Hammer check of the granite & wall joint ' },
                                        ];

                                        async function BeamSlabShutteringReinforcementRCCfunctionNewCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteringReinforcementRCCfunctionNewCall();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'FF - Chowkat Stone') {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Right Angel Check', checksdescription: 'Do check opening size and its right angle.' },
                                            { checksHeading: 'Pre Work Check', checksdescription: 'If any correction needs to be done it shall be done prior commencement of work.' },
                                            { checksHeading: 'Cutting Methodology', checksdescription: 'Do cut the frame members from single slab of granite to ensure the uniformity of visual effect.' },
                                            { checksHeading: 'Polish Check', checksdescription: 'Edges of frame members cut from slab should be polished / chamfered as specified in approved drawing.' },
                                            { checksHeading: 'Chamfer Check', checksdescription: 'Frame shall have a 450 chamfer joint on all visible corners of frame.' },
                                            { checksHeading: 'Adhesive Application Check', checksdescription: 'With the help of Resin hardener adhesive make the back of frame rough to ensure bonding with bedding mortar. Apply resin hardener adhesive on back of granite and sprinkle sand on it to form a key.' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Frame Position Check', checksdescription: 'Frame should be fixed in position according to approved drawing and as per adjacent finishes.' },
                                            { checksHeading: 'Frame Visibility Check', checksdescription: 'Full thickness of frame should be visible from all side for window and from sides and top for door frame.' },
                                            { checksHeading: 'Mortor Check', checksdescription: 'With cement mortar of 1:4, fix the verticals of frame in position and check for its alignment with keeping top and bottom member in place.' },
                                            { checksHeading: 'Adhesive Check', checksdescription: 'With the help of resin hardener fix the top member in place.' },
                                            { checksHeading: 'Joint Filling Check', checksdescription: 'Do fill void above top frame member with cement mortar.' },
                                            { checksHeading: 'Curing check', checksdescription: 'Cure the mortar for minimum 7 days.' },
                                            { checksHeading: 'Verticality Check', checksdescription: 'After 3 days fix the Pentagon nylon frame fixing screws 10 x 125 mm and recheck the verticality. Screws should be counter sunk by 5mm.' },
                                            { checksHeading: 'Oil Coating', checksdescription: 'Do apply light coat of clear oil on granite face for protection.' },
                                            { checksHeading: 'Grout Fill Check', checksdescription: 'After first coat of paint, fill the screw hole with Tmax and matching grout mix.' },
                                            { checksHeading: 'Phase 3', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'FInal Opening Dim. Check', checksdescription: 'Do check for opening dimensions, line, level and plumb.' },
                                            { checksHeading: 'Granite Cornor Joint Check', checksdescription: 'Do check corner joints and granite to granite joint, there should not be any gap.' },
                                            { checksHeading: 'Final Check', checksdescription: 'Do check for any visible defect.' },
                                        ];

                                        async function GradeSlabAggrigateChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        GradeSlabAggrigateChacks();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'SF - Chowkat Stone') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Material Calculation as per on Site Final Measurement of Door, Windows, Staricase & Other Areas' },
                                            { subtaskdescription: 'Type of framing work in Door & Windows' },
                                            { subtaskdescription: 'FInal confirmation of panel sizes after reducing frame thickness' },
                                            { subtaskdescription: 'Inform contracotr | labour for cutting, chamfer & polish for final heads up' },
                                            { subtaskdescription: 'Adhesive choosing as per span wise' },
                                            { subtaskdescription: 'In terms of framing, any detailing in terms of detailing in the chamfer or polish, it should be informed to the contractor as per drawing ' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Granite | Stone coming out of the plaster surface should be equally coming out of the wall' },
                                            { subtaskdescription: 'Final areas of framing type - Single or Double should be informed as per drawing' },
                                            { subtaskdescription: 'Ratio of adhesive & cement mortor should be informed to  contractor ' },
                                            { subtaskdescription: 'Granite Joint at 45 Degree at corner to match and not overlapping ' },
                                            { subtaskdescription: 'Phase 3', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Hammer check of the granite & wall joint ' },
                                        ];

                                        async function BeamSlabShutteringReinforcementRCCfunctionNewCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteringReinforcementRCCfunctionNewCall();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'SF - Chowkat Stone') {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Right Angel Check', checksdescription: 'Do check opening size and its right angle.' },
                                            { checksHeading: 'Pre Work Check', checksdescription: 'If any correction needs to be done it shall be done prior commencement of work.' },
                                            { checksHeading: 'Cutting Methodology', checksdescription: 'Do cut the frame members from single slab of granite to ensure the uniformity of visual effect.' },
                                            { checksHeading: 'Polish Check', checksdescription: 'Edges of frame members cut from slab should be polished / chamfered as specified in approved drawing.' },
                                            { checksHeading: 'Chamfer Check', checksdescription: 'Frame shall have a 450 chamfer joint on all visible corners of frame.' },
                                            { checksHeading: 'Adhesive Application Check', checksdescription: 'With the help of Resin hardener adhesive make the back of frame rough to ensure bonding with bedding mortar. Apply resin hardener adhesive on back of granite and sprinkle sand on it to form a key.' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Frame Position Check', checksdescription: 'Frame should be fixed in position according to approved drawing and as per adjacent finishes.' },
                                            { checksHeading: 'Frame Visibility Check', checksdescription: 'Full thickness of frame should be visible from all side for window and from sides and top for door frame.' },
                                            { checksHeading: 'Mortor Check', checksdescription: 'With cement mortar of 1:4, fix the verticals of frame in position and check for its alignment with keeping top and bottom member in place.' },
                                            { checksHeading: 'Adhesive Check', checksdescription: 'With the help of resin hardener fix the top member in place.' },
                                            { checksHeading: 'Joint Filling Check', checksdescription: 'Do fill void above top frame member with cement mortar.' },
                                            { checksHeading: 'Curing check', checksdescription: 'Cure the mortar for minimum 7 days.' },
                                            { checksHeading: 'Verticality Check', checksdescription: 'After 3 days fix the Pentagon nylon frame fixing screws 10 x 125 mm and recheck the verticality. Screws should be counter sunk by 5mm.' },
                                            { checksHeading: 'Oil Coating', checksdescription: 'Do apply light coat of clear oil on granite face for protection.' },
                                            { checksHeading: 'Grout Fill Check', checksdescription: 'After first coat of paint, fill the screw hole with Tmax and matching grout mix.' },
                                            { checksHeading: 'Phase 3', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'FInal Opening Dim. Check', checksdescription: 'Do check for opening dimensions, line, level and plumb.' },
                                            { checksHeading: 'Granite Cornor Joint Check', checksdescription: 'Do check corner joints and granite to granite joint, there should not be any gap.' },
                                            { checksHeading: 'Final Check', checksdescription: 'Do check for any visible defect.' },
                                        ];

                                        async function GradeSlabAggrigateChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        GradeSlabAggrigateChacks();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'TF - Chowkat Stone') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Material Calculation as per on Site Final Measurement of Door, Windows, Staricase & Other Areas' },
                                            { subtaskdescription: 'Type of framing work in Door & Windows' },
                                            { subtaskdescription: 'FInal confirmation of panel sizes after reducing frame thickness' },
                                            { subtaskdescription: 'Inform contracotr | labour for cutting, chamfer & polish for final heads up' },
                                            { subtaskdescription: 'Adhesive choosing as per span wise' },
                                            { subtaskdescription: 'In terms of framing, any detailing in terms of detailing in the chamfer or polish, it should be informed to the contractor as per drawing ' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Granite | Stone coming out of the plaster surface should be equally coming out of the wall' },
                                            { subtaskdescription: 'Final areas of framing type - Single or Double should be informed as per drawing' },
                                            { subtaskdescription: 'Ratio of adhesive & cement mortor should be informed to  contractor ' },
                                            { subtaskdescription: 'Granite Joint at 45 Degree at corner to match and not overlapping ' },
                                            { subtaskdescription: 'Phase 3', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Hammer check of the granite & wall joint ' },
                                        ];

                                        async function BeamSlabShutteringReinforcementRCCfunctionNewCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteringReinforcementRCCfunctionNewCall();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'TF - Chowkat Stone') {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Right Angel Check', checksdescription: 'Do check opening size and its right angle.' },
                                            { checksHeading: 'Pre Work Check', checksdescription: 'If any correction needs to be done it shall be done prior commencement of work.' },
                                            { checksHeading: 'Cutting Methodology', checksdescription: 'Do cut the frame members from single slab of granite to ensure the uniformity of visual effect.' },
                                            { checksHeading: 'Polish Check', checksdescription: 'Edges of frame members cut from slab should be polished / chamfered as specified in approved drawing.' },
                                            { checksHeading: 'Chamfer Check', checksdescription: 'Frame shall have a 450 chamfer joint on all visible corners of frame.' },
                                            { checksHeading: 'Adhesive Application Check', checksdescription: 'With the help of Resin hardener adhesive make the back of frame rough to ensure bonding with bedding mortar. Apply resin hardener adhesive on back of granite and sprinkle sand on it to form a key.' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Frame Position Check', checksdescription: 'Frame should be fixed in position according to approved drawing and as per adjacent finishes.' },
                                            { checksHeading: 'Frame Visibility Check', checksdescription: 'Full thickness of frame should be visible from all side for window and from sides and top for door frame.' },
                                            { checksHeading: 'Mortor Check', checksdescription: 'With cement mortar of 1:4, fix the verticals of frame in position and check for its alignment with keeping top and bottom member in place.' },
                                            { checksHeading: 'Adhesive Check', checksdescription: 'With the help of resin hardener fix the top member in place.' },
                                            { checksHeading: 'Joint Filling Check', checksdescription: 'Do fill void above top frame member with cement mortar.' },
                                            { checksHeading: 'Curing check', checksdescription: 'Cure the mortar for minimum 7 days.' },
                                            { checksHeading: 'Verticality Check', checksdescription: 'After 3 days fix the Pentagon nylon frame fixing screws 10 x 125 mm and recheck the verticality. Screws should be counter sunk by 5mm.' },
                                            { checksHeading: 'Oil Coating', checksdescription: 'Do apply light coat of clear oil on granite face for protection.' },
                                            { checksHeading: 'Grout Fill Check', checksdescription: 'After first coat of paint, fill the screw hole with Tmax and matching grout mix.' },
                                            { checksHeading: 'Phase 3', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'FInal Opening Dim. Check', checksdescription: 'Do check for opening dimensions, line, level and plumb.' },
                                            { checksHeading: 'Granite Cornor Joint Check', checksdescription: 'Do check corner joints and granite to granite joint, there should not be any gap.' },
                                            { checksHeading: 'Final Check', checksdescription: 'Do check for any visible defect.' },
                                        ];

                                        async function GradeSlabAggrigateChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        GradeSlabAggrigateChacks();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'FoF - Chowkat Stone') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Material Calculation as per on Site Final Measurement of Door, Windows, Staricase & Other Areas' },
                                            { subtaskdescription: 'Type of framing work in Door & Windows' },
                                            { subtaskdescription: 'FInal confirmation of panel sizes after reducing frame thickness' },
                                            { subtaskdescription: 'Inform contracotr | labour for cutting, chamfer & polish for final heads up' },
                                            { subtaskdescription: 'Adhesive choosing as per span wise' },
                                            { subtaskdescription: 'In terms of framing, any detailing in terms of detailing in the chamfer or polish, it should be informed to the contractor as per drawing ' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Granite | Stone coming out of the plaster surface should be equally coming out of the wall' },
                                            { subtaskdescription: 'Final areas of framing type - Single or Double should be informed as per drawing' },
                                            { subtaskdescription: 'Ratio of adhesive & cement mortor should be informed to  contractor ' },
                                            { subtaskdescription: 'Granite Joint at 45 Degree at corner to match and not overlapping ' },
                                            { subtaskdescription: 'Phase 3', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Hammer check of the granite & wall joint ' },
                                        ];

                                        async function BeamSlabShutteringReinforcementRCCfunctionNewCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteringReinforcementRCCfunctionNewCall();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'FoF - Chowkat Stone') {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Right Angel Check', checksdescription: 'Do check opening size and its right angle.' },
                                            { checksHeading: 'Pre Work Check', checksdescription: 'If any correction needs to be done it shall be done prior commencement of work.' },
                                            { checksHeading: 'Cutting Methodology', checksdescription: 'Do cut the frame members from single slab of granite to ensure the uniformity of visual effect.' },
                                            { checksHeading: 'Polish Check', checksdescription: 'Edges of frame members cut from slab should be polished / chamfered as specified in approved drawing.' },
                                            { checksHeading: 'Chamfer Check', checksdescription: 'Frame shall have a 450 chamfer joint on all visible corners of frame.' },
                                            { checksHeading: 'Adhesive Application Check', checksdescription: 'With the help of Resin hardener adhesive make the back of frame rough to ensure bonding with bedding mortar. Apply resin hardener adhesive on back of granite and sprinkle sand on it to form a key.' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Frame Position Check', checksdescription: 'Frame should be fixed in position according to approved drawing and as per adjacent finishes.' },
                                            { checksHeading: 'Frame Visibility Check', checksdescription: 'Full thickness of frame should be visible from all side for window and from sides and top for door frame.' },
                                            { checksHeading: 'Mortor Check', checksdescription: 'With cement mortar of 1:4, fix the verticals of frame in position and check for its alignment with keeping top and bottom member in place.' },
                                            { checksHeading: 'Adhesive Check', checksdescription: 'With the help of resin hardener fix the top member in place.' },
                                            { checksHeading: 'Joint Filling Check', checksdescription: 'Do fill void above top frame member with cement mortar.' },
                                            { checksHeading: 'Curing check', checksdescription: 'Cure the mortar for minimum 7 days.' },
                                            { checksHeading: 'Verticality Check', checksdescription: 'After 3 days fix the Pentagon nylon frame fixing screws 10 x 125 mm and recheck the verticality. Screws should be counter sunk by 5mm.' },
                                            { checksHeading: 'Oil Coating', checksdescription: 'Do apply light coat of clear oil on granite face for protection.' },
                                            { checksHeading: 'Grout Fill Check', checksdescription: 'After first coat of paint, fill the screw hole with Tmax and matching grout mix.' },
                                            { checksHeading: 'Phase 3', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'FInal Opening Dim. Check', checksdescription: 'Do check for opening dimensions, line, level and plumb.' },
                                            { checksHeading: 'Granite Cornor Joint Check', checksdescription: 'Do check corner joints and granite to granite joint, there should not be any gap.' },
                                            { checksHeading: 'Final Check', checksdescription: 'Do check for any visible defect.' },
                                        ];

                                        async function GradeSlabAggrigateChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        GradeSlabAggrigateChacks();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'Tower - Chowkat Stone') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Material Calculation as per on Site Final Measurement of Door, Windows, Staricase & Other Areas' },
                                            { subtaskdescription: 'Type of framing work in Door & Windows' },
                                            { subtaskdescription: 'FInal confirmation of panel sizes after reducing frame thickness' },
                                            { subtaskdescription: 'Inform contracotr | labour for cutting, chamfer & polish for final heads up' },
                                            { subtaskdescription: 'Adhesive choosing as per span wise' },
                                            { subtaskdescription: 'In terms of framing, any detailing in terms of detailing in the chamfer or polish, it should be informed to the contractor as per drawing ' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Granite | Stone coming out of the plaster surface should be equally coming out of the wall' },
                                            { subtaskdescription: 'Final areas of framing type - Single or Double should be informed as per drawing' },
                                            { subtaskdescription: 'Ratio of adhesive & cement mortor should be informed to  contractor ' },
                                            { subtaskdescription: 'Granite Joint at 45 Degree at corner to match and not overlapping ' },
                                            { subtaskdescription: 'Phase 3', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Hammer check of the granite & wall joint ' },
                                        ];

                                        async function BeamSlabShutteringReinforcementRCCfunctionNewCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteringReinforcementRCCfunctionNewCall();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'Tower - Chowkat Stone') {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Right Angel Check', checksdescription: 'Do check opening size and its right angle.' },
                                            { checksHeading: 'Pre Work Check', checksdescription: 'If any correction needs to be done it shall be done prior commencement of work.' },
                                            { checksHeading: 'Cutting Methodology', checksdescription: 'Do cut the frame members from single slab of granite to ensure the uniformity of visual effect.' },
                                            { checksHeading: 'Polish Check', checksdescription: 'Edges of frame members cut from slab should be polished / chamfered as specified in approved drawing.' },
                                            { checksHeading: 'Chamfer Check', checksdescription: 'Frame shall have a 450 chamfer joint on all visible corners of frame.' },
                                            { checksHeading: 'Adhesive Application Check', checksdescription: 'With the help of Resin hardener adhesive make the back of frame rough to ensure bonding with bedding mortar. Apply resin hardener adhesive on back of granite and sprinkle sand on it to form a key.' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Frame Position Check', checksdescription: 'Frame should be fixed in position according to approved drawing and as per adjacent finishes.' },
                                            { checksHeading: 'Frame Visibility Check', checksdescription: 'Full thickness of frame should be visible from all side for window and from sides and top for door frame.' },
                                            { checksHeading: 'Mortor Check', checksdescription: 'With cement mortar of 1:4, fix the verticals of frame in position and check for its alignment with keeping top and bottom member in place.' },
                                            { checksHeading: 'Adhesive Check', checksdescription: 'With the help of resin hardener fix the top member in place.' },
                                            { checksHeading: 'Joint Filling Check', checksdescription: 'Do fill void above top frame member with cement mortar.' },
                                            { checksHeading: 'Curing check', checksdescription: 'Cure the mortar for minimum 7 days.' },
                                            { checksHeading: 'Verticality Check', checksdescription: 'After 3 days fix the Pentagon nylon frame fixing screws 10 x 125 mm and recheck the verticality. Screws should be counter sunk by 5mm.' },
                                            { checksHeading: 'Oil Coating', checksdescription: 'Do apply light coat of clear oil on granite face for protection.' },
                                            { checksHeading: 'Grout Fill Check', checksdescription: 'After first coat of paint, fill the screw hole with Tmax and matching grout mix.' },
                                            { checksHeading: 'Phase 3', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'FInal Opening Dim. Check', checksdescription: 'Do check for opening dimensions, line, level and plumb.' },
                                            { checksHeading: 'Granite Cornor Joint Check', checksdescription: 'Do check corner joints and granite to granite joint, there should not be any gap.' },
                                            { checksHeading: 'Final Check', checksdescription: 'Do check for any visible defect.' },
                                        ];

                                        async function GradeSlabAggrigateChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        GradeSlabAggrigateChacks();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'Parapet Work + Railing + Boundary Wall') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Material Calculation as per on Site Final Measurement of Door, Windows, Staricase & Other Areas' },
                                            { subtaskdescription: 'Type of framing work in Door & Windows' },
                                            { subtaskdescription: 'FInal confirmation of panel sizes after reducing frame thickness' },
                                            { subtaskdescription: 'Inform contracotr | labour for cutting, chamfer & polish for final heads up' },
                                            { subtaskdescription: 'Adhesive choosing as per span wise' },
                                            { subtaskdescription: 'In terms of framing, any detailing in terms of detailing in the chamfer or polish, it should be informed to the contractor as per drawing ' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Granite | Stone coming out of the plaster surface should be equally coming out of the wall' },
                                            { subtaskdescription: 'Final areas of framing type - Single or Double should be informed as per drawing' },
                                            { subtaskdescription: 'Ratio of adhesive & cement mortor should be informed to  contractor ' },
                                            { subtaskdescription: 'Granite Joint at 45 Degree at corner to match and not overlapping ' },
                                            { subtaskdescription: 'Phase 3', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Hammer check of the granite & wall joint ' },
                                        ];

                                        async function BeamSlabShutteringReinforcementRCCfunctionNewCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteringReinforcementRCCfunctionNewCall();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'Parapet Work + Railing + Boundary Wall') {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Right Angel Check', checksdescription: 'Do check opening size and its right angle.' },
                                            { checksHeading: 'Pre Work Check', checksdescription: 'If any correction needs to be done it shall be done prior commencement of work.' },
                                            { checksHeading: 'Cutting Methodology', checksdescription: 'Do cut the frame members from single slab of granite to ensure the uniformity of visual effect.' },
                                            { checksHeading: 'Polish Check', checksdescription: 'Edges of frame members cut from slab should be polished / chamfered as specified in approved drawing.' },
                                            { checksHeading: 'Chamfer Check', checksdescription: 'Frame shall have a 450 chamfer joint on all visible corners of frame.' },
                                            { checksHeading: 'Adhesive Application Check', checksdescription: 'With the help of Resin hardener adhesive make the back of frame rough to ensure bonding with bedding mortar. Apply resin hardener adhesive on back of granite and sprinkle sand on it to form a key.' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Frame Position Check', checksdescription: 'Frame should be fixed in position according to approved drawing and as per adjacent finishes.' },
                                            { checksHeading: 'Frame Visibility Check', checksdescription: 'Full thickness of frame should be visible from all side for window and from sides and top for door frame.' },
                                            { checksHeading: 'Mortor Check', checksdescription: 'With cement mortar of 1:4, fix the verticals of frame in position and check for its alignment with keeping top and bottom member in place.' },
                                            { checksHeading: 'Adhesive Check', checksdescription: 'With the help of resin hardener fix the top member in place.' },
                                            { checksHeading: 'Joint Filling Check', checksdescription: 'Do fill void above top frame member with cement mortar.' },
                                            { checksHeading: 'Curing check', checksdescription: 'Cure the mortar for minimum 7 days.' },
                                            { checksHeading: 'Verticality Check', checksdescription: 'After 3 days fix the Pentagon nylon frame fixing screws 10 x 125 mm and recheck the verticality. Screws should be counter sunk by 5mm.' },
                                            { checksHeading: 'Oil Coating', checksdescription: 'Do apply light coat of clear oil on granite face for protection.' },
                                            { checksHeading: 'Grout Fill Check', checksdescription: 'After first coat of paint, fill the screw hole with Tmax and matching grout mix.' },
                                            { checksHeading: 'Phase 3', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'FInal Opening Dim. Check', checksdescription: 'Do check for opening dimensions, line, level and plumb.' },
                                            { checksHeading: 'Granite Cornor Joint Check', checksdescription: 'Do check corner joints and granite to granite joint, there should not be any gap.' },
                                            { checksHeading: 'Final Check', checksdescription: 'Do check for any visible defect.' },
                                        ];

                                        async function GradeSlabAggrigateChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        GradeSlabAggrigateChacks();
                                    }



                                    await Activities.updateOne(
                                        { _id: newss },
                                        {
                                            $push: {
                                                subactivitiesID: objID
                                            }
                                        }
                                    )
                                    // console.log('Data saved:', savedData);
                                } catch (error) {
                                    // console.error('Error saving data:', error);
                                }
                            }
                        }
                        miscellenousCalling();
                    }








                    if (newData.categoryname === "POP Framing") {
                        const dataArranew = [
                            { subactivityname: 'B1 - POP Framing', activityID: newData._id, projectID: objectproID, estimateDays: b1PopFraming_ESTD, TempID: 11 },
                            { subactivityname: 'B2 - POP Framing', activityID: newData._id, projectID: objectproID, estimateDays: b2PopFraming_ESTD, TempID: 22 },
                            { subactivityname: 'B3 - POP Framing', activityID: newData._id, projectID: objectproID, estimateDays: b3PopFraming_ESTD, TempID: 33 },
                            { subactivityname: 'B4 - POP Framing', activityID: newData._id, projectID: objectproID, estimateDays: b4PopFraming_ESTD, TempID: 44 },
                            { subactivityname: 'GF - POP Framing', activityID: newData._id, projectID: objectproID, estimateDays: gfPopFraming_ESTD },
                            { subactivityname: 'FF - POP Framing', activityID: newData._id, projectID: objectproID, estimateDays: ffPopFraming_ESTD, TempID: 1 },
                            { subactivityname: 'SF - POP Framing', activityID: newData._id, projectID: objectproID, estimateDays: sfPopFraming_ESTD, TempID: 2 },
                            { subactivityname: 'TF - POP Framing', activityID: newData._id, projectID: objectproID, estimateDays: tfPopFraming_ESTD, TempID: 3 },
                            { subactivityname: 'FoF - POP Framing', activityID: newData._id, projectID: objectproID, estimateDays: fofPopFraming_ESTD, TempID: 4 },
                            { subactivityname: 'Tower - POP Framing', activityID: newData._id, projectID: objectproID, estimateDays: towerPopFraming_ESTD },
                            { subactivityname: 'Balcony - PVC', activityID: newData._id, projectID: objectproID, estimateDays: OnebalconyPVC_ESTD },
                            { subactivityname: 'Parking - PVC', activityID: newData._id, projectID: objectproID, estimateDays: OneparkingPVC_ESTD },
                            { subactivityname: 'Washroom - PVC', activityID: newData._id, projectID: objectproID, estimateDays: OnewashroomPVC_ESTD },
                        ];

                        async function miscellenousCalling() {
                            for (let i = 0; i < dataArranew.length; i++) {
                                if (dataArranew[i].TempID === 1 && NumbersOfFlorrs < 1 || dataArranew[i].TempID === 2 && NumbersOfFlorrs < 2 || dataArranew[i].TempID === 3 && NumbersOfFlorrs < 3 || dataArranew[i].TempID === 4 && NumbersOfFlorrs < 4 || dataArranew[i].TempID === 11 && NumbersOfBasemetFloor === 0 || dataArranew[i].TempID === 22 && NumbersOfBasemetFloor === 0 || dataArranew[i].TempID === 33 && NumbersOfBasemetFloor === 0 || dataArranew[i].TempID === 44 && NumbersOfBasemetFloor === 0) {
                                    continue; // Skip this iteration
                                }
                                try {
                                    const newDatanew = new SubActivities(dataArranew[i]);
                                    const savedData = await newDatanew.save();

                                    let objID = new mongoose.Types.ObjectId(newDatanew.id)
                                    let newss = new mongoose.Types.ObjectId(newData._id)
                                    // console.log(objID);

                                    //Anuj
                                    if (newDatanew.subactivityname === 'B1 - POP Framing') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Confirm the cealing application area, location & type of false ceiling' },
                                            { subtaskdescription: 'Align the scheudle with contractor after receiving the drawings  to explain them' },
                                            { subtaskdescription: 'While marking the levels, it should be clearly marked on wall ' },
                                            { subtaskdescription: 'Assure from the plaster team, they have done with ceiling plaster in case if the ceiling in not implemented in that room' },
                                            { subtaskdescription: 'In case of any obstruciton or any openinig mentioned in drawing should be clearly infomred to the contractor' },
                                        ];

                                        async function SlabBeamShutteringReinforcementRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SlabBeamShutteringReinforcementRCCfunCall();
                                    }
                                    if (newDatanew.subactivityname === 'B1 - POP Framing') {

                                        const dataArranew = [
                                            { checksHeading: 'Plaster Check', checksdescription: 'Uniform thinckness & range should be check ' },
                                            { checksHeading: 'Ceiling Type', checksdescription: 'Check for the Type of false ceiling to be executed.  (Gypsum board ceiling / Wire Mesh / PVC Board' },
                                            { checksHeading: 'Working Methodology', checksdescription: 'Check for approval of work methodology in terms of material type for fixing of false ceiling' },
                                            { checksHeading: 'Drawing Check', checksdescription: 'Check the shape & size of the GI sections for framing work as per drawing' },
                                            { checksHeading: 'Mateiral Check', checksdescription: 'Check for type of hanging system to be executed. (GI section/Wire with gripe)' },
                                            { checksHeading: 'Bottom Levels', checksdescription: 'Check for the bottom level of the ceiling is marked on the wall' },
                                            { checksHeading: 'Mateiral Check', checksdescription: 'Check for the inspection of incoming materials w.r.t. approved specification' },
                                            { checksHeading: 'Dependencies', checksdescription: 'Check for completion of preceding activities like electrical installation, HVAC Installation, Plastering & Dado of walls etc.' },
                                            { checksHeading: 'Channel Installation', checksdescription: 'Check for installation of wall channels as shown in drawings.' },
                                            { checksHeading: 'Levels Check', checksdescription: 'Check for marking of suspended ceiling level on walls as per drawing.' },
                                            { checksHeading: 'GI | Reep Installation Check', checksdescription: 'Check for fixing of suspenders (GI section / Wire) as per specifications.' },
                                            { checksHeading: 'Spacing Check', checksdescription: 'Check for the spacing of suspender & GI section as per drawing.' },
                                            { checksHeading: 'Alighment Check', checksdescription: 'Check for rigidity & alignment of framework of false ceiling.' },
                                            { checksHeading: 'Panel Fixing', checksdescription: 'Check for fixing of panels as shown in drawings.' },
                                            { checksHeading: 'Screw Spacing', checksdescription: 'Check for screw spacing as per requirement' },
                                            { checksHeading: 'Obstruction Check', checksdescription: 'Check provision for fixing of A/C grills, electrical fittings, sprinkler, smoke detector & trap doors etc.' },
                                        ];

                                        async function GradeSlabfillowingChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        GradeSlabfillowingChacks();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'B2 - POP Framing') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Confirm the cealing application area, location & type of false ceiling' },
                                            { subtaskdescription: 'Align the scheudle with contractor after receiving the drawings  to explain them' },
                                            { subtaskdescription: 'While marking the levels, it should be clearly marked on wall ' },
                                            { subtaskdescription: 'Assure from the plaster team, they have done with ceiling plaster in case if the ceiling in not implemented in that room' },
                                            { subtaskdescription: 'In case of any obstruciton or any openinig mentioned in drawing should be clearly infomred to the contractor' },
                                        ];

                                        async function SlabBeamShutteringReinforcementRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SlabBeamShutteringReinforcementRCCfunCall();
                                    }
                                    if (newDatanew.subactivityname === 'B2 - POP Framing') {

                                        const dataArranew = [
                                            { checksHeading: 'Plaster Check', checksdescription: 'Uniform thinckness & range should be check ' },
                                            { checksHeading: 'Ceiling Type', checksdescription: 'Check for the Type of false ceiling to be executed.  (Gypsum board ceiling / Wire Mesh / PVC Board' },
                                            { checksHeading: 'Working Methodology', checksdescription: 'Check for approval of work methodology in terms of material type for fixing of false ceiling' },
                                            { checksHeading: 'Drawing Check', checksdescription: 'Check the shape & size of the GI sections for framing work as per drawing' },
                                            { checksHeading: 'Mateiral Check', checksdescription: 'Check for type of hanging system to be executed. (GI section/Wire with gripe)' },
                                            { checksHeading: 'Bottom Levels', checksdescription: 'Check for the bottom level of the ceiling is marked on the wall' },
                                            { checksHeading: 'Mateiral Check', checksdescription: 'Check for the inspection of incoming materials w.r.t. approved specification' },
                                            { checksHeading: 'Dependencies', checksdescription: 'Check for completion of preceding activities like electrical installation, HVAC Installation, Plastering & Dado of walls etc.' },
                                            { checksHeading: 'Channel Installation', checksdescription: 'Check for installation of wall channels as shown in drawings.' },
                                            { checksHeading: 'Levels Check', checksdescription: 'Check for marking of suspended ceiling level on walls as per drawing.' },
                                            { checksHeading: 'GI | Reep Installation Check', checksdescription: 'Check for fixing of suspenders (GI section / Wire) as per specifications.' },
                                            { checksHeading: 'Spacing Check', checksdescription: 'Check for the spacing of suspender & GI section as per drawing.' },
                                            { checksHeading: 'Alighment Check', checksdescription: 'Check for rigidity & alignment of framework of false ceiling.' },
                                            { checksHeading: 'Panel Fixing', checksdescription: 'Check for fixing of panels as shown in drawings.' },
                                            { checksHeading: 'Screw Spacing', checksdescription: 'Check for screw spacing as per requirement' },
                                            { checksHeading: 'Obstruction Check', checksdescription: 'Check provision for fixing of A/C grills, electrical fittings, sprinkler, smoke detector & trap doors etc.' },
                                        ];

                                        async function GradeSlabfillowingChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        GradeSlabfillowingChacks();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'B3 - POP Framing') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Confirm the cealing application area, location & type of false ceiling' },
                                            { subtaskdescription: 'Align the scheudle with contractor after receiving the drawings  to explain them' },
                                            { subtaskdescription: 'While marking the levels, it should be clearly marked on wall ' },
                                            { subtaskdescription: 'Assure from the plaster team, they have done with ceiling plaster in case if the ceiling in not implemented in that room' },
                                            { subtaskdescription: 'In case of any obstruciton or any openinig mentioned in drawing should be clearly infomred to the contractor' },
                                        ];

                                        async function SlabBeamShutteringReinforcementRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SlabBeamShutteringReinforcementRCCfunCall();
                                    }
                                    if (newDatanew.subactivityname === 'B3 - POP Framing') {

                                        const dataArranew = [
                                            { checksHeading: 'Plaster Check', checksdescription: 'Uniform thinckness & range should be check ' },
                                            { checksHeading: 'Ceiling Type', checksdescription: 'Check for the Type of false ceiling to be executed.  (Gypsum board ceiling / Wire Mesh / PVC Board' },
                                            { checksHeading: 'Working Methodology', checksdescription: 'Check for approval of work methodology in terms of material type for fixing of false ceiling' },
                                            { checksHeading: 'Drawing Check', checksdescription: 'Check the shape & size of the GI sections for framing work as per drawing' },
                                            { checksHeading: 'Mateiral Check', checksdescription: 'Check for type of hanging system to be executed. (GI section/Wire with gripe)' },
                                            { checksHeading: 'Bottom Levels', checksdescription: 'Check for the bottom level of the ceiling is marked on the wall' },
                                            { checksHeading: 'Mateiral Check', checksdescription: 'Check for the inspection of incoming materials w.r.t. approved specification' },
                                            { checksHeading: 'Dependencies', checksdescription: 'Check for completion of preceding activities like electrical installation, HVAC Installation, Plastering & Dado of walls etc.' },
                                            { checksHeading: 'Channel Installation', checksdescription: 'Check for installation of wall channels as shown in drawings.' },
                                            { checksHeading: 'Levels Check', checksdescription: 'Check for marking of suspended ceiling level on walls as per drawing.' },
                                            { checksHeading: 'GI | Reep Installation Check', checksdescription: 'Check for fixing of suspenders (GI section / Wire) as per specifications.' },
                                            { checksHeading: 'Spacing Check', checksdescription: 'Check for the spacing of suspender & GI section as per drawing.' },
                                            { checksHeading: 'Alighment Check', checksdescription: 'Check for rigidity & alignment of framework of false ceiling.' },
                                            { checksHeading: 'Panel Fixing', checksdescription: 'Check for fixing of panels as shown in drawings.' },
                                            { checksHeading: 'Screw Spacing', checksdescription: 'Check for screw spacing as per requirement' },
                                            { checksHeading: 'Obstruction Check', checksdescription: 'Check provision for fixing of A/C grills, electrical fittings, sprinkler, smoke detector & trap doors etc.' },
                                        ];

                                        async function GradeSlabfillowingChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        GradeSlabfillowingChacks();
                                    }

                                    //Anuj
                                    if (newDatanew.subactivityname === 'B4 - POP Framing') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Confirm the cealing application area, location & type of false ceiling' },
                                            { subtaskdescription: 'Align the scheudle with contractor after receiving the drawings  to explain them' },
                                            { subtaskdescription: 'While marking the levels, it should be clearly marked on wall ' },
                                            { subtaskdescription: 'Assure from the plaster team, they have done with ceiling plaster in case if the ceiling in not implemented in that room' },
                                            { subtaskdescription: 'In case of any obstruciton or any openinig mentioned in drawing should be clearly infomred to the contractor' },
                                        ];

                                        async function SlabBeamShutteringReinforcementRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SlabBeamShutteringReinforcementRCCfunCall();
                                    }
                                    if (newDatanew.subactivityname === 'B4 - POP Framing') {

                                        const dataArranew = [
                                            { checksHeading: 'Plaster Check', checksdescription: 'Uniform thinckness & range should be check ' },
                                            { checksHeading: 'Ceiling Type', checksdescription: 'Check for the Type of false ceiling to be executed.  (Gypsum board ceiling / Wire Mesh / PVC Board' },
                                            { checksHeading: 'Working Methodology', checksdescription: 'Check for approval of work methodology in terms of material type for fixing of false ceiling' },
                                            { checksHeading: 'Drawing Check', checksdescription: 'Check the shape & size of the GI sections for framing work as per drawing' },
                                            { checksHeading: 'Mateiral Check', checksdescription: 'Check for type of hanging system to be executed. (GI section/Wire with gripe)' },
                                            { checksHeading: 'Bottom Levels', checksdescription: 'Check for the bottom level of the ceiling is marked on the wall' },
                                            { checksHeading: 'Mateiral Check', checksdescription: 'Check for the inspection of incoming materials w.r.t. approved specification' },
                                            { checksHeading: 'Dependencies', checksdescription: 'Check for completion of preceding activities like electrical installation, HVAC Installation, Plastering & Dado of walls etc.' },
                                            { checksHeading: 'Channel Installation', checksdescription: 'Check for installation of wall channels as shown in drawings.' },
                                            { checksHeading: 'Levels Check', checksdescription: 'Check for marking of suspended ceiling level on walls as per drawing.' },
                                            { checksHeading: 'GI | Reep Installation Check', checksdescription: 'Check for fixing of suspenders (GI section / Wire) as per specifications.' },
                                            { checksHeading: 'Spacing Check', checksdescription: 'Check for the spacing of suspender & GI section as per drawing.' },
                                            { checksHeading: 'Alighment Check', checksdescription: 'Check for rigidity & alignment of framework of false ceiling.' },
                                            { checksHeading: 'Panel Fixing', checksdescription: 'Check for fixing of panels as shown in drawings.' },
                                            { checksHeading: 'Screw Spacing', checksdescription: 'Check for screw spacing as per requirement' },
                                            { checksHeading: 'Obstruction Check', checksdescription: 'Check provision for fixing of A/C grills, electrical fittings, sprinkler, smoke detector & trap doors etc.' },
                                        ];

                                        async function GradeSlabfillowingChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        GradeSlabfillowingChacks();
                                    }

                                    //Anuj
                                    if (newDatanew.subactivityname === 'GF - POP Framing') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Confirm the cealing application area, location & type of false ceiling' },
                                            { subtaskdescription: 'Align the scheudle with contractor after receiving the drawings  to explain them' },
                                            { subtaskdescription: 'While marking the levels, it should be clearly marked on wall ' },
                                            { subtaskdescription: 'Assure from the plaster team, they have done with ceiling plaster in case if the ceiling in not implemented in that room' },
                                            { subtaskdescription: 'In case of any obstruciton or any openinig mentioned in drawing should be clearly infomred to the contractor' },
                                        ];

                                        async function SlabBeamShutteringReinforcementRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SlabBeamShutteringReinforcementRCCfunCall();
                                    }





                                    if (newDatanew.subactivityname === "GF - POP Framing") {

                                        const dataArranew = [
                                            { materailname: 'GS Ceiling Section', materailquantity: materlID.GFPOPFramingGSCeilingSectionQuantity, materailUnit: 'METER' },
                                            { materailname: 'GS Perimeter Channel', materailquantity: materlID.GFPOPFramingGSPerimeterChannelQuantity, materailUnit: 'METER' },
                                            { materailname: 'GS Intermidiate Channel', materailquantity: materlID.GFPOPFramingGSIntermediateChannelQuantity, materailUnit: 'METER' },
                                            { materailname: 'GS Angel Hanger', materailquantity: materlID.GFPOPFramingGSAngelHangerQuantity, materailUnit: 'METER' },
                                            { materailname: 'GS Connecting Clips', materailquantity: materlID.GFPOPFramingGSConnectingClipsQuantity, materailUnit: 'EACH' },
                                            { materailname: 'GS Nuts & Bolts', materailquantity: materlID.GFPOPFramingGSNutsBoltsQuantity, materailUnit: '10 NOS' },
                                            { materailname: 'GS Soffit Cleat', materailquantity: materlID.GFPOPFramingGSSoffitCleatQuantity, materailUnit: 'EACH' },
                                            { materailname: 'All Drive Screws', materailquantity: materlID.GFPOPFramingAllDriveScrewsQuantity, materailUnit: '10 NOS' },
                                            { materailname: 'Dash Hold Faster', materailquantity: materlID.GFPOPFramingDashHoldFasterQuantity, materailUnit: 'EACH' }
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === "GF - POP Framing") {

                                        const dataArranew = [
                                            {},
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Plaster Chk', NormalHeadingThree: 'Draw. | Bot.', NormalHeadingfoure: 'Installation' },
                                            {},
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }



                                    if (newDatanew.subactivityname === "FF - POP Framing") {

                                        const dataArranew = [
                                            { materailname: 'GS Ceiling Section', materailquantity: materlID.FFPOPFramingGSCeilingSectionQuantity, materailUnit: 'METER' },
                                            { materailname: 'GS Perimeter Channel', materailquantity: materlID.FFPOPFramingGSPerimeterChannelQuantity, materailUnit: 'METER' },
                                            { materailname: 'GS Intermidiate Channel', materailquantity: materlID.FFPOPFramingGSIntermediateChannelQuantity, materailUnit: 'METER' },
                                            { materailname: 'GS Angel Hanger', materailquantity: materlID.FFPOPFramingGSAngelHangerQuantity, materailUnit: 'METER' },
                                            { materailname: 'GS Connecting Clips', materailquantity: materlID.FFPOPFramingGSConnectingClipsQuantity, materailUnit: 'EACH' },
                                            { materailname: 'GS Nuts & Bolts', materailquantity: materlID.FFPOPFramingGSNutsBoltsQuantity, materailUnit: '10 NOS' },
                                            { materailname: 'GS Soffit Cleat', materailquantity: materlID.FFPOPFramingGSSoffitCleatQuantity, materailUnit: 'EACH' },
                                            { materailname: 'All Drive Screws', materailquantity: materlID.FFPOPFramingAllDriveScrewsQuantity, materailUnit: '10 NOS' },
                                            { materailname: 'Dash Hold Faster', materailquantity: materlID.FFPOPFramingDashHoldFasterQuantity, materailUnit: 'EACH' }
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }

                                    if (newDatanew.subactivityname === "FF - POP Framing") {

                                        const dataArranew = [
                                            {},
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Plaster Chk', NormalHeadingThree: 'Draw. | Bot.', NormalHeadingfoure: 'Installation' },
                                            {},
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }

                                    if (newDatanew.subactivityname === "SF - POP Framing") {

                                        const dataArranew = [
                                            { materailname: 'GS Ceiling Section', materailquantity: materlID.SFPOPFramingGSCeilingSectionQuantity, materailUnit: 'METER' },
                                            { materailname: 'GS Perimeter Channel', materailquantity: materlID.SFPOPFramingGSPerimeterChannelQuantity, materailUnit: 'METER' },
                                            { materailname: 'GS Intermidiate Channel', materailquantity: materlID.SFPOPFramingGSIntermediateChannelQuantity, materailUnit: 'METER' },
                                            { materailname: 'GS Angel Hanger', materailquantity: materlID.SFPOPFramingGSAngelHangerQuantity, materailUnit: 'METER' },
                                            { materailname: 'GS Connecting Clips', materailquantity: materlID.SFPOPFramingGSConnectingClipsQuantity, materailUnit: 'EACH' },
                                            { materailname: 'GS Nuts & Bolts', materailquantity: materlID.SFPOPFramingGSNutsBoltsQuantity, materailUnit: '10 NOS' },
                                            { materailname: 'GS Soffit Cleat', materailquantity: materlID.SFPOPFramingGSSoffitCleatQuantity, materailUnit: 'EACH' },
                                            { materailname: 'All Drive Screws', materailquantity: materlID.SFPOPFramingAllDriveScrewsQuantity, materailUnit: '10 NOS' },
                                            { materailname: 'Dash Hold Faster', materailquantity: materlID.SFPOPFramingDashHoldFasterQuantity, materailUnit: 'EACH' }
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }



                                    if (newDatanew.subactivityname === "SF - POP Framing") {

                                        const dataArranew = [
                                            {},
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Plaster Chk', NormalHeadingThree: 'Draw. | Bot.', NormalHeadingfoure: 'Installation' },
                                            {},
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }

                                    if (newDatanew.subactivityname === "TF - POP Framing") {

                                        const dataArranew = [
                                            { materailname: 'GS Ceiling Section', materailquantity: materlID.TFPOPFramingGSCeilingSectionQuantity, materailUnit: 'METER' },
                                            { materailname: 'GS Perimeter Channel', materailquantity: materlID.TFPOPFramingGSPerimeterChannelQuantity, materailUnit: 'METER' },
                                            { materailname: 'GS Intermidiate Channel', materailquantity: materlID.TFPOPFramingGSIntermediateChannelQuantity, materailUnit: 'METER' },
                                            { materailname: 'GS Angel Hanger', materailquantity: materlID.TFPOPFramingGSAngelHangerQuantity, materailUnit: 'METER' },
                                            { materailname: 'GS Connecting Clips', materailquantity: materlID.TFPOPFramingGSConnectingClipsQuantity, materailUnit: 'EACH' },
                                            { materailname: 'GS Nuts & Bolts', materailquantity: materlID.TFPOPFramingGSNutsBoltsQuantity, materailUnit: '10 NOS' },
                                            { materailname: 'GS Soffit Cleat', materailquantity: materlID.TFPOPFramingGSSoffitCleatQuantity, materailUnit: 'EACH' },
                                            { materailname: 'All Drive Screws', materailquantity: materlID.TFPOPFramingAllDriveScrewsQuantity, materailUnit: '10 NOS' },
                                            { materailname: 'Dash Hold Faster', materailquantity: materlID.TFPOPFramingDashHoldFasterQuantity, materailUnit: 'EACH' }
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }

                                    if (newDatanew.subactivityname === "TF - POP Framing") {

                                        const dataArranew = [
                                            {},
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Plaster Chk', NormalHeadingThree: 'Draw. | Bot.', NormalHeadingfoure: 'Installation' },
                                            {},
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }


                                    if (newDatanew.subactivityname === "FoF - POP Framing") {

                                        const dataArranew = [
                                            { materailname: 'GS Ceiling Section', materailquantity: materlID.FoFPOPFramingGSCeilingSectionQuantity, materailUnit: 'METER' },
                                            { materailname: 'GS Perimeter Channel', materailquantity: materlID.FoFPOPFramingGSPerimeterChannelQuantity, materailUnit: 'METER' },
                                            { materailname: 'GS Intermidiate Channel', materailquantity: materlID.FoFPOPFramingGSIntermediateChannelQuantity, materailUnit: 'METER' },
                                            { materailname: 'GS Angel Hanger', materailquantity: materlID.FoFPOPFramingGSAngelHangerQuantity, materailUnit: 'METER' },
                                            { materailname: 'GS Connecting Clips', materailquantity: materlID.FoFPOPFramingGSConnectingClipsQuantity, materailUnit: 'EACH' },
                                            { materailname: 'GS Nuts & Bolts', materailquantity: materlID.FoFPOPFramingGSNutsBoltsQuantity, materailUnit: '10 NOS' },
                                            { materailname: 'GS Soffit Cleat', materailquantity: materlID.FoFPOPFramingGSSoffitCleatQuantity, materailUnit: 'EACH' },
                                            { materailname: 'All Drive Screws', materailquantity: materlID.FoFPOPFramingAllDriveScrewsQuantity, materailUnit: '10 NOS' },
                                            { materailname: 'Dash Hold Faster', materailquantity: materlID.FoFPOPFramingDashHoldFasterQuantity, materailUnit: 'EACH' }
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }



                                    if (newDatanew.subactivityname === "FoF - POP Framing") {

                                        const dataArranew = [
                                            {},
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Plaster Chk', NormalHeadingThree: 'Draw. | Bot.', NormalHeadingfoure: 'Installation' },
                                            {},
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }

                                    if (newDatanew.subactivityname === "Tower - POP Framing") {

                                        const dataArranew = [
                                            { materailname: 'GS Ceiling Section', materailquantity: materlID.TowerPOPFramingGSCeilingSectionQuantity, materailUnit: 'METER' },
                                            { materailname: 'GS Perimeter Channel', materailquantity: materlID.TowerPOPFramingGSPerimeterChannelQuantity, materailUnit: 'METER' },
                                            { materailname: 'GS Intermidiate Channel', materailquantity: materlID.TowerPOPFramingGSIntermediateChannelQuantity, materailUnit: 'METER' },
                                            { materailname: 'GS Angel Hanger', materailquantity: materlID.TowerPOPFramingGSAngelHangerQuantity, materailUnit: 'METER' },
                                            { materailname: 'GS Connecting Clips', materailquantity: materlID.TowerPOPFramingGSConnectingClipsQuantity, materailUnit: 'EACH' },
                                            { materailname: 'GS Nuts & Bolts', materailquantity: materlID.TowerPOPFramingGSNutsBoltsQuantity, materailUnit: '10 NOS' },
                                            { materailname: 'GS Soffit Cleat', materailquantity: materlID.TowerPOPFramingGSSoffitCleatQuantity, materailUnit: 'EACH' },
                                            { materailname: 'All Drive Screws', materailquantity: materlID.TowerPOPFramingAllDriveScrewsQuantity, materailUnit: '10 NOS' },
                                            { materailname: 'Dash Hold Faster', materailquantity: materlID.TowerPOPFramingDashHoldFasterQuantity, materailUnit: 'EACH' }
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }

                                    if (newDatanew.subactivityname === "Tower - POP Framing") {

                                        const dataArranew = [
                                            {},
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Plaster Chk', NormalHeadingThree: 'Draw. | Bot.', NormalHeadingfoure: 'Installation' },
                                            {},
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }

                                    if (newDatanew.subactivityname === "Balcony - PVC") {

                                        const dataArranew = [
                                            { materailname: 'GS Ceiling Section', materailquantity: materlID.BalconyPVCGSCeilingSectionQuantity, materailUnit: 'METER' },
                                            { materailname: 'GS Perimeter Channel', materailquantity: materlID.BalconyPVCGSPerimeterChannelQuantity, materailUnit: 'METER' },
                                            { materailname: 'GS Intermidiate Channel', materailquantity: materlID.BalconyPVCGSIntermediateChannelQuantity, materailUnit: 'METER' },
                                            { materailname: 'GS Angel Hanger', materailquantity: materlID.BalconyPVCGSAngelHangerQuantity, materailUnit: 'METER' },
                                            { materailname: 'GS Connecting Clips', materailquantity: materlID.BalconyPVCGSConnectingClipsQuantity, materailUnit: 'EACH' },
                                            { materailname: 'GS Nuts & Bolts', materailquantity: materlID.BalconyPVCGSNutsBoltsQuantity, materailUnit: '10 NOS' },
                                            { materailname: 'GS Soffit Cleat', materailquantity: materlID.BalconyPVCGSSoffitCleatQuantity, materailUnit: 'EACH' },
                                            { materailname: 'All Drive Screws', materailquantity: materlID.BalconyPVCAllDriveScrewsQuantity, materailUnit: '10 NOS' },
                                            { materailname: 'Dash Hold Faster', materailquantity: materlID.BalconyPVCDashHoldFasterQuantity, materailUnit: 'EACH' }
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }

                                    if (newDatanew.subactivityname === "Balcony - PVC") {

                                        const dataArranew = [
                                            {},
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Plaster Chk', NormalHeadingThree: 'Draw. | Bot.', NormalHeadingfoure: 'Installation' },
                                            {},
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }

                                    if (newDatanew.subactivityname === "Parking - PVC") {

                                        const dataArranew = [
                                            { materailname: 'GS Ceiling Section', materailquantity: materlID.ParkingPVCGSCeilingSectionQuantity, materailUnit: 'METER' },
                                            { materailname: 'GS Perimeter Channel', materailquantity: materlID.ParkingPVCGSPerimeterChannelQuantity, materailUnit: 'METER' },
                                            { materailname: 'GS Intermidiate Channel', materailquantity: materlID.ParkingPVCGSIntermediateChannelQuantity, materailUnit: 'METER' },
                                            { materailname: 'GS Angel Hanger', materailquantity: materlID.ParkingPVCGSAngelHangerQuantity, materailUnit: 'METER' },
                                            { materailname: 'GS Connecting Clips', materailquantity: materlID.ParkingPVCGSConnectingClipsQuantity, materailUnit: 'EACH' },
                                            { materailname: 'GS Nuts & Bolts', materailquantity: materlID.ParkingPVCGSNutsBoltsQuantity, materailUnit: '10 NOS' },
                                            { materailname: 'GS Soffit Cleat', materailquantity: materlID.ParkingPVCGSSoffitCleatQuantity, materailUnit: 'EACH' },
                                            { materailname: 'All Drive Screws', materailquantity: materlID.ParkingPVCAllDriveScrewsQuantity, materailUnit: '10 NOS' },
                                            { materailname: 'Dash Hold Faster', materailquantity: materlID.ParkingPVCDashHoldFasterQuantity, materailUnit: 'EACH' }
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }

                                    if (newDatanew.subactivityname === "Parking - PVC") {

                                        const dataArranew = [
                                            {},
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Plaster Chk', NormalHeadingThree: 'Draw. | Bot.', NormalHeadingfoure: 'Installation' },
                                            {},
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }

                                    if (newDatanew.subactivityname === "Washroom - PVC") {

                                        const dataArranew = [
                                            { materailname: 'GS Ceiling Section', materailquantity: materlID.WashroomPVCGSCeilingSectionQuantity, materailUnit: 'METER' },
                                            { materailname: 'GS Perimeter Channel', materailquantity: materlID.WashroomPVCGSPerimeterChannelQuantity, materailUnit: 'METER' },
                                            { materailname: 'GS Intermidiate Channel', materailquantity: materlID.WashroomPVCGSIntermediateChannelQuantity, materailUnit: 'METER' },
                                            { materailname: 'GS Angel Hanger', materailquantity: materlID.WashroomPVCGSAngelHangerQuantity, materailUnit: 'METER' },
                                            { materailname: 'GS Connecting Clips', materailquantity: materlID.WashroomPVCGSConnectingClipsQuantity, materailUnit: 'EACH' },
                                            { materailname: 'GS Nuts & Bolts', materailquantity: materlID.WashroomPVCGSNutsBoltsQuantity, materailUnit: '10 NOS' },
                                            { materailname: 'GS Soffit Cleat', materailquantity: materlID.WashroomPVCGSSoffitCleatQuantity, materailUnit: 'EACH' },
                                            { materailname: 'All Drive Screws', materailquantity: materlID.WashroomPVCAllDriveScrewsQuantity, materailUnit: '10 NOS' },
                                            { materailname: 'Dash Hold Faster', materailquantity: materlID.WashroomPVCDashHoldFasterQuantity, materailUnit: 'EACH' }
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }

                                    if (newDatanew.subactivityname === "Washroom - PVC") {

                                        const dataArranew = [
                                            {},
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Plaster Chk', NormalHeadingThree: 'Draw. | Bot.', NormalHeadingfoure: 'Installation' },
                                            {},
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }

                                    if (newDatanew.subactivityname === 'GF - POP Framing') {

                                        const dataArranew = [
                                            { checksHeading: 'Plaster Check', checksdescription: 'Uniform thinckness & range should be check ' },
                                            { checksHeading: 'Ceiling Type', checksdescription: 'Check for the Type of false ceiling to be executed.  (Gypsum board ceiling / Wire Mesh / PVC Board' },
                                            { checksHeading: 'Working Methodology', checksdescription: 'Check for approval of work methodology in terms of material type for fixing of false ceiling' },
                                            { checksHeading: 'Drawing Check', checksdescription: 'Check the shape & size of the GI sections for framing work as per drawing' },
                                            { checksHeading: 'Mateiral Check', checksdescription: 'Check for type of hanging system to be executed. (GI section/Wire with gripe)' },
                                            { checksHeading: 'Bottom Levels', checksdescription: 'Check for the bottom level of the ceiling is marked on the wall' },
                                            { checksHeading: 'Mateiral Check', checksdescription: 'Check for the inspection of incoming materials w.r.t. approved specification' },
                                            { checksHeading: 'Dependencies', checksdescription: 'Check for completion of preceding activities like electrical installation, HVAC Installation, Plastering & Dado of walls etc.' },
                                            { checksHeading: 'Channel Installation', checksdescription: 'Check for installation of wall channels as shown in drawings.' },
                                            { checksHeading: 'Levels Check', checksdescription: 'Check for marking of suspended ceiling level on walls as per drawing.' },
                                            { checksHeading: 'GI | Reep Installation Check', checksdescription: 'Check for fixing of suspenders (GI section / Wire) as per specifications.' },
                                            { checksHeading: 'Spacing Check', checksdescription: 'Check for the spacing of suspender & GI section as per drawing.' },
                                            { checksHeading: 'Alighment Check', checksdescription: 'Check for rigidity & alignment of framework of false ceiling.' },
                                            { checksHeading: 'Panel Fixing', checksdescription: 'Check for fixing of panels as shown in drawings.' },
                                            { checksHeading: 'Screw Spacing', checksdescription: 'Check for screw spacing as per requirement' },
                                            { checksHeading: 'Obstruction Check', checksdescription: 'Check provision for fixing of A/C grills, electrical fittings, sprinkler, smoke detector & trap doors etc.' },
                                        ];

                                        async function GradeSlabfillowingChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        GradeSlabfillowingChacks();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'FF - POP Framing') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Confirm the cealing application area, location & type of false ceiling' },
                                            { subtaskdescription: 'Align the scheudle with contractor after receiving the drawings  to explain them' },
                                            { subtaskdescription: 'While marking the levels, it should be clearly marked on wall ' },
                                            { subtaskdescription: 'Assure from the plaster team, they have done with ceiling plaster in case if the ceiling in not implemented in that room' },
                                            { subtaskdescription: 'In case of any obstruciton or any openinig mentioned in drawing should be clearly infomred to the contractor' },
                                        ];

                                        async function SlabBeamShutteringReinforcementRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SlabBeamShutteringReinforcementRCCfunCall();
                                    }
                                    if (newDatanew.subactivityname === 'FF - POP Framing') {

                                        const dataArranew = [
                                            { checksHeading: 'Plaster Check', checksdescription: 'Uniform thinckness & range should be check ' },
                                            { checksHeading: 'Ceiling Type', checksdescription: 'Check for the Type of false ceiling to be executed.  (Gypsum board ceiling / Wire Mesh / PVC Board' },
                                            { checksHeading: 'Working Methodology', checksdescription: 'Check for approval of work methodology in terms of material type for fixing of false ceiling' },
                                            { checksHeading: 'Drawing Check', checksdescription: 'Check the shape & size of the GI sections for framing work as per drawing' },
                                            { checksHeading: 'Mateiral Check', checksdescription: 'Check for type of hanging system to be executed. (GI section/Wire with gripe)' },
                                            { checksHeading: 'Bottom Levels', checksdescription: 'Check for the bottom level of the ceiling is marked on the wall' },
                                            { checksHeading: 'Mateiral Check', checksdescription: 'Check for the inspection of incoming materials w.r.t. approved specification' },
                                            { checksHeading: 'Dependencies', checksdescription: 'Check for completion of preceding activities like electrical installation, HVAC Installation, Plastering & Dado of walls etc.' },
                                            { checksHeading: 'Channel Installation', checksdescription: 'Check for installation of wall channels as shown in drawings.' },
                                            { checksHeading: 'Levels Check', checksdescription: 'Check for marking of suspended ceiling level on walls as per drawing.' },
                                            { checksHeading: 'GI | Reep Installation Check', checksdescription: 'Check for fixing of suspenders (GI section / Wire) as per specifications.' },
                                            { checksHeading: 'Spacing Check', checksdescription: 'Check for the spacing of suspender & GI section as per drawing.' },
                                            { checksHeading: 'Alighment Check', checksdescription: 'Check for rigidity & alignment of framework of false ceiling.' },
                                            { checksHeading: 'Panel Fixing', checksdescription: 'Check for fixing of panels as shown in drawings.' },
                                            { checksHeading: 'Screw Spacing', checksdescription: 'Check for screw spacing as per requirement' },
                                            { checksHeading: 'Obstruction Check', checksdescription: 'Check provision for fixing of A/C grills, electrical fittings, sprinkler, smoke detector & trap doors etc.' },
                                        ];

                                        async function GradeSlabfillowingChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        GradeSlabfillowingChacks();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'SF - POP Framing') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Confirm the cealing application area, location & type of false ceiling' },
                                            { subtaskdescription: 'Align the scheudle with contractor after receiving the drawings  to explain them' },
                                            { subtaskdescription: 'While marking the levels, it should be clearly marked on wall ' },
                                            { subtaskdescription: 'Assure from the plaster team, they have done with ceiling plaster in case if the ceiling in not implemented in that room' },
                                            { subtaskdescription: 'In case of any obstruciton or any openinig mentioned in drawing should be clearly infomred to the contractor' },
                                        ];

                                        async function SlabBeamShutteringReinforcementRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SlabBeamShutteringReinforcementRCCfunCall();
                                    }
                                    if (newDatanew.subactivityname === 'SF - POP Framing') {

                                        const dataArranew = [
                                            { checksHeading: 'Plaster Check', checksdescription: 'Uniform thinckness & range should be check ' },
                                            { checksHeading: 'Ceiling Type', checksdescription: 'Check for the Type of false ceiling to be executed.  (Gypsum board ceiling / Wire Mesh / PVC Board' },
                                            { checksHeading: 'Working Methodology', checksdescription: 'Check for approval of work methodology in terms of material type for fixing of false ceiling' },
                                            { checksHeading: 'Drawing Check', checksdescription: 'Check the shape & size of the GI sections for framing work as per drawing' },
                                            { checksHeading: 'Mateiral Check', checksdescription: 'Check for type of hanging system to be executed. (GI section/Wire with gripe)' },
                                            { checksHeading: 'Bottom Levels', checksdescription: 'Check for the bottom level of the ceiling is marked on the wall' },
                                            { checksHeading: 'Mateiral Check', checksdescription: 'Check for the inspection of incoming materials w.r.t. approved specification' },
                                            { checksHeading: 'Dependencies', checksdescription: 'Check for completion of preceding activities like electrical installation, HVAC Installation, Plastering & Dado of walls etc.' },
                                            { checksHeading: 'Channel Installation', checksdescription: 'Check for installation of wall channels as shown in drawings.' },
                                            { checksHeading: 'Levels Check', checksdescription: 'Check for marking of suspended ceiling level on walls as per drawing.' },
                                            { checksHeading: 'GI | Reep Installation Check', checksdescription: 'Check for fixing of suspenders (GI section / Wire) as per specifications.' },
                                            { checksHeading: 'Spacing Check', checksdescription: 'Check for the spacing of suspender & GI section as per drawing.' },
                                            { checksHeading: 'Alighment Check', checksdescription: 'Check for rigidity & alignment of framework of false ceiling.' },
                                            { checksHeading: 'Panel Fixing', checksdescription: 'Check for fixing of panels as shown in drawings.' },
                                            { checksHeading: 'Screw Spacing', checksdescription: 'Check for screw spacing as per requirement' },
                                            { checksHeading: 'Obstruction Check', checksdescription: 'Check provision for fixing of A/C grills, electrical fittings, sprinkler, smoke detector & trap doors etc.' },
                                        ];

                                        async function GradeSlabfillowingChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        GradeSlabfillowingChacks();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'TF - POP Framing') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Confirm the cealing application area, location & type of false ceiling' },
                                            { subtaskdescription: 'Align the scheudle with contractor after receiving the drawings  to explain them' },
                                            { subtaskdescription: 'While marking the levels, it should be clearly marked on wall ' },
                                            { subtaskdescription: 'Assure from the plaster team, they have done with ceiling plaster in case if the ceiling in not implemented in that room' },
                                            { subtaskdescription: 'In case of any obstruciton or any openinig mentioned in drawing should be clearly infomred to the contractor' },
                                        ];

                                        async function SlabBeamShutteringReinforcementRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SlabBeamShutteringReinforcementRCCfunCall();
                                    }
                                    if (newDatanew.subactivityname === 'TF - POP Framing') {

                                        const dataArranew = [
                                            { checksHeading: 'Plaster Check', checksdescription: 'Uniform thinckness & range should be check ' },
                                            { checksHeading: 'Ceiling Type', checksdescription: 'Check for the Type of false ceiling to be executed.  (Gypsum board ceiling / Wire Mesh / PVC Board' },
                                            { checksHeading: 'Working Methodology', checksdescription: 'Check for approval of work methodology in terms of material type for fixing of false ceiling' },
                                            { checksHeading: 'Drawing Check', checksdescription: 'Check the shape & size of the GI sections for framing work as per drawing' },
                                            { checksHeading: 'Mateiral Check', checksdescription: 'Check for type of hanging system to be executed. (GI section/Wire with gripe)' },
                                            { checksHeading: 'Bottom Levels', checksdescription: 'Check for the bottom level of the ceiling is marked on the wall' },
                                            { checksHeading: 'Mateiral Check', checksdescription: 'Check for the inspection of incoming materials w.r.t. approved specification' },
                                            { checksHeading: 'Dependencies', checksdescription: 'Check for completion of preceding activities like electrical installation, HVAC Installation, Plastering & Dado of walls etc.' },
                                            { checksHeading: 'Channel Installation', checksdescription: 'Check for installation of wall channels as shown in drawings.' },
                                            { checksHeading: 'Levels Check', checksdescription: 'Check for marking of suspended ceiling level on walls as per drawing.' },
                                            { checksHeading: 'GI | Reep Installation Check', checksdescription: 'Check for fixing of suspenders (GI section / Wire) as per specifications.' },
                                            { checksHeading: 'Spacing Check', checksdescription: 'Check for the spacing of suspender & GI section as per drawing.' },
                                            { checksHeading: 'Alighment Check', checksdescription: 'Check for rigidity & alignment of framework of false ceiling.' },
                                            { checksHeading: 'Panel Fixing', checksdescription: 'Check for fixing of panels as shown in drawings.' },
                                            { checksHeading: 'Screw Spacing', checksdescription: 'Check for screw spacing as per requirement' },
                                            { checksHeading: 'Obstruction Check', checksdescription: 'Check provision for fixing of A/C grills, electrical fittings, sprinkler, smoke detector & trap doors etc.' },
                                        ];

                                        async function GradeSlabfillowingChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        GradeSlabfillowingChacks();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'FoF - POP Framing') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Confirm the cealing application area, location & type of false ceiling' },
                                            { subtaskdescription: 'Align the scheudle with contractor after receiving the drawings  to explain them' },
                                            { subtaskdescription: 'While marking the levels, it should be clearly marked on wall ' },
                                            { subtaskdescription: 'Assure from the plaster team, they have done with ceiling plaster in case if the ceiling in not implemented in that room' },
                                            { subtaskdescription: 'In case of any obstruciton or any openinig mentioned in drawing should be clearly infomred to the contractor' },
                                        ];

                                        async function SlabBeamShutteringReinforcementRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SlabBeamShutteringReinforcementRCCfunCall();
                                    }
                                    if (newDatanew.subactivityname === 'FoF - POP Framing') {

                                        const dataArranew = [
                                            { checksHeading: 'Plaster Check', checksdescription: 'Uniform thinckness & range should be check ' },
                                            { checksHeading: 'Ceiling Type', checksdescription: 'Check for the Type of false ceiling to be executed.  (Gypsum board ceiling / Wire Mesh / PVC Board' },
                                            { checksHeading: 'Working Methodology', checksdescription: 'Check for approval of work methodology in terms of material type for fixing of false ceiling' },
                                            { checksHeading: 'Drawing Check', checksdescription: 'Check the shape & size of the GI sections for framing work as per drawing' },
                                            { checksHeading: 'Mateiral Check', checksdescription: 'Check for type of hanging system to be executed. (GI section/Wire with gripe)' },
                                            { checksHeading: 'Bottom Levels', checksdescription: 'Check for the bottom level of the ceiling is marked on the wall' },
                                            { checksHeading: 'Mateiral Check', checksdescription: 'Check for the inspection of incoming materials w.r.t. approved specification' },
                                            { checksHeading: 'Dependencies', checksdescription: 'Check for completion of preceding activities like electrical installation, HVAC Installation, Plastering & Dado of walls etc.' },
                                            { checksHeading: 'Channel Installation', checksdescription: 'Check for installation of wall channels as shown in drawings.' },
                                            { checksHeading: 'Levels Check', checksdescription: 'Check for marking of suspended ceiling level on walls as per drawing.' },
                                            { checksHeading: 'GI | Reep Installation Check', checksdescription: 'Check for fixing of suspenders (GI section / Wire) as per specifications.' },
                                            { checksHeading: 'Spacing Check', checksdescription: 'Check for the spacing of suspender & GI section as per drawing.' },
                                            { checksHeading: 'Alighment Check', checksdescription: 'Check for rigidity & alignment of framework of false ceiling.' },
                                            { checksHeading: 'Panel Fixing', checksdescription: 'Check for fixing of panels as shown in drawings.' },
                                            { checksHeading: 'Screw Spacing', checksdescription: 'Check for screw spacing as per requirement' },
                                            { checksHeading: 'Obstruction Check', checksdescription: 'Check provision for fixing of A/C grills, electrical fittings, sprinkler, smoke detector & trap doors etc.' },
                                        ];

                                        async function GradeSlabfillowingChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        GradeSlabfillowingChacks();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'Tower - POP Framing') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Confirm the cealing application area, location & type of false ceiling' },
                                            { subtaskdescription: 'Align the scheudle with contractor after receiving the drawings  to explain them' },
                                            { subtaskdescription: 'While marking the levels, it should be clearly marked on wall ' },
                                            { subtaskdescription: 'Assure from the plaster team, they have done with ceiling plaster in case if the ceiling in not implemented in that room' },
                                            { subtaskdescription: 'In case of any obstruciton or any openinig mentioned in drawing should be clearly infomred to the contractor' },
                                        ];

                                        async function SlabBeamShutteringReinforcementRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SlabBeamShutteringReinforcementRCCfunCall();
                                    }
                                    if (newDatanew.subactivityname === 'Tower - POP Framing') {

                                        const dataArranew = [
                                            { checksHeading: 'Plaster Check', checksdescription: 'Uniform thinckness & range should be check ' },
                                            { checksHeading: 'Ceiling Type', checksdescription: 'Check for the Type of false ceiling to be executed.  (Gypsum board ceiling / Wire Mesh / PVC Board' },
                                            { checksHeading: 'Working Methodology', checksdescription: 'Check for approval of work methodology in terms of material type for fixing of false ceiling' },
                                            { checksHeading: 'Drawing Check', checksdescription: 'Check the shape & size of the GI sections for framing work as per drawing' },
                                            { checksHeading: 'Mateiral Check', checksdescription: 'Check for type of hanging system to be executed. (GI section/Wire with gripe)' },
                                            { checksHeading: 'Bottom Levels', checksdescription: 'Check for the bottom level of the ceiling is marked on the wall' },
                                            { checksHeading: 'Mateiral Check', checksdescription: 'Check for the inspection of incoming materials w.r.t. approved specification' },
                                            { checksHeading: 'Dependencies', checksdescription: 'Check for completion of preceding activities like electrical installation, HVAC Installation, Plastering & Dado of walls etc.' },
                                            { checksHeading: 'Channel Installation', checksdescription: 'Check for installation of wall channels as shown in drawings.' },
                                            { checksHeading: 'Levels Check', checksdescription: 'Check for marking of suspended ceiling level on walls as per drawing.' },
                                            { checksHeading: 'GI | Reep Installation Check', checksdescription: 'Check for fixing of suspenders (GI section / Wire) as per specifications.' },
                                            { checksHeading: 'Spacing Check', checksdescription: 'Check for the spacing of suspender & GI section as per drawing.' },
                                            { checksHeading: 'Alighment Check', checksdescription: 'Check for rigidity & alignment of framework of false ceiling.' },
                                            { checksHeading: 'Panel Fixing', checksdescription: 'Check for fixing of panels as shown in drawings.' },
                                            { checksHeading: 'Screw Spacing', checksdescription: 'Check for screw spacing as per requirement' },
                                            { checksHeading: 'Obstruction Check', checksdescription: 'Check provision for fixing of A/C grills, electrical fittings, sprinkler, smoke detector & trap doors etc.' },
                                        ];

                                        async function GradeSlabfillowingChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        GradeSlabfillowingChacks();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'Balcony - PVC') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Confirm the cealing application area, location & type of false ceiling' },
                                            { subtaskdescription: 'Align the scheudle with contractor after receiving the drawings  to explain them' },
                                            { subtaskdescription: 'While marking the levels, it should be clearly marked on wall ' },
                                            { subtaskdescription: 'Assure from the plaster team, they have done with ceiling plaster in case if the ceiling in not implemented in that room' },
                                            { subtaskdescription: 'In case of any obstruciton or any openinig mentioned in drawing should be clearly infomred to the contractor' },
                                        ];

                                        async function SlabBeamShutteringReinforcementRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SlabBeamShutteringReinforcementRCCfunCall();
                                    }
                                    if (newDatanew.subactivityname === 'Balcony - PVC') {

                                        const dataArranew = [
                                            { checksHeading: 'Plaster Check', checksdescription: 'Uniform thinckness & range should be check ' },
                                            { checksHeading: 'Ceiling Type', checksdescription: 'Check for the Type of false ceiling to be executed.  (Gypsum board ceiling / Wire Mesh / PVC Board' },
                                            { checksHeading: 'Working Methodology', checksdescription: 'Check for approval of work methodology in terms of material type for fixing of false ceiling' },
                                            { checksHeading: 'Drawing Check', checksdescription: 'Check the shape & size of the GI sections for framing work as per drawing' },
                                            { checksHeading: 'Mateiral Check', checksdescription: 'Check for type of hanging system to be executed. (GI section/Wire with gripe)' },
                                            { checksHeading: 'Bottom Levels', checksdescription: 'Check for the bottom level of the ceiling is marked on the wall' },
                                            { checksHeading: 'Mateiral Check', checksdescription: 'Check for the inspection of incoming materials w.r.t. approved specification' },
                                            { checksHeading: 'Dependencies', checksdescription: 'Check for completion of preceding activities like electrical installation, HVAC Installation, Plastering & Dado of walls etc.' },
                                            { checksHeading: 'Channel Installation', checksdescription: 'Check for installation of wall channels as shown in drawings.' },
                                            { checksHeading: 'Levels Check', checksdescription: 'Check for marking of suspended ceiling level on walls as per drawing.' },
                                            { checksHeading: 'GI | Reep Installation Check', checksdescription: 'Check for fixing of suspenders (GI section / Wire) as per specifications.' },
                                            { checksHeading: 'Spacing Check', checksdescription: 'Check for the spacing of suspender & GI section as per drawing.' },
                                            { checksHeading: 'Alighment Check', checksdescription: 'Check for rigidity & alignment of framework of false ceiling.' },
                                            { checksHeading: 'Panel Fixing', checksdescription: 'Check for fixing of panels as shown in drawings.' },
                                            { checksHeading: 'Screw Spacing', checksdescription: 'Check for screw spacing as per requirement' },
                                            { checksHeading: 'Obstruction Check', checksdescription: 'Check provision for fixing of A/C grills, electrical fittings, sprinkler, smoke detector & trap doors etc.' },
                                        ];

                                        async function GradeSlabfillowingChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        GradeSlabfillowingChacks();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'Parking - PVC') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Confirm the cealing application area, location & type of false ceiling' },
                                            { subtaskdescription: 'Align the scheudle with contractor after receiving the drawings  to explain them' },
                                            { subtaskdescription: 'While marking the levels, it should be clearly marked on wall ' },
                                            { subtaskdescription: 'Assure from the plaster team, they have done with ceiling plaster in case if the ceiling in not implemented in that room' },
                                            { subtaskdescription: 'In case of any obstruciton or any openinig mentioned in drawing should be clearly infomred to the contractor' },
                                        ];

                                        async function SlabBeamShutteringReinforcementRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SlabBeamShutteringReinforcementRCCfunCall();
                                    }
                                    if (newDatanew.subactivityname === 'Parking - PVC') {

                                        const dataArranew = [
                                            { checksHeading: 'Plaster Check', checksdescription: 'Uniform thinckness & range should be check ' },
                                            { checksHeading: 'Ceiling Type', checksdescription: 'Check for the Type of false ceiling to be executed.  (Gypsum board ceiling / Wire Mesh / PVC Board' },
                                            { checksHeading: 'Working Methodology', checksdescription: 'Check for approval of work methodology in terms of material type for fixing of false ceiling' },
                                            { checksHeading: 'Drawing Check', checksdescription: 'Check the shape & size of the GI sections for framing work as per drawing' },
                                            { checksHeading: 'Mateiral Check', checksdescription: 'Check for type of hanging system to be executed. (GI section/Wire with gripe)' },
                                            { checksHeading: 'Bottom Levels', checksdescription: 'Check for the bottom level of the ceiling is marked on the wall' },
                                            { checksHeading: 'Mateiral Check', checksdescription: 'Check for the inspection of incoming materials w.r.t. approved specification' },
                                            { checksHeading: 'Dependencies', checksdescription: 'Check for completion of preceding activities like electrical installation, HVAC Installation, Plastering & Dado of walls etc.' },
                                            { checksHeading: 'Channel Installation', checksdescription: 'Check for installation of wall channels as shown in drawings.' },
                                            { checksHeading: 'Levels Check', checksdescription: 'Check for marking of suspended ceiling level on walls as per drawing.' },
                                            { checksHeading: 'GI | Reep Installation Check', checksdescription: 'Check for fixing of suspenders (GI section / Wire) as per specifications.' },
                                            { checksHeading: 'Spacing Check', checksdescription: 'Check for the spacing of suspender & GI section as per drawing.' },
                                            { checksHeading: 'Alighment Check', checksdescription: 'Check for rigidity & alignment of framework of false ceiling.' },
                                            { checksHeading: 'Panel Fixing', checksdescription: 'Check for fixing of panels as shown in drawings.' },
                                            { checksHeading: 'Screw Spacing', checksdescription: 'Check for screw spacing as per requirement' },
                                            { checksHeading: 'Obstruction Check', checksdescription: 'Check provision for fixing of A/C grills, electrical fittings, sprinkler, smoke detector & trap doors etc.' },
                                        ];

                                        async function GradeSlabfillowingChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        GradeSlabfillowingChacks();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'Washroom - PVC') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Confirm the cealing application area, location & type of false ceiling' },
                                            { subtaskdescription: 'Align the scheudle with contractor after receiving the drawings  to explain them' },
                                            { subtaskdescription: 'While marking the levels, it should be clearly marked on wall ' },
                                            { subtaskdescription: 'Assure from the plaster team, they have done with ceiling plaster in case if the ceiling in not implemented in that room' },
                                            { subtaskdescription: 'In case of any obstruciton or any openinig mentioned in drawing should be clearly infomred to the contractor' },
                                        ];

                                        async function SlabBeamShutteringReinforcementRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SlabBeamShutteringReinforcementRCCfunCall();
                                    }
                                    if (newDatanew.subactivityname === 'Washroom - PVC') {

                                        const dataArranew = [
                                            { checksHeading: 'Plaster Check', checksdescription: 'Uniform thinckness & range should be check ' },
                                            { checksHeading: 'Ceiling Type', checksdescription: 'Check for the Type of false ceiling to be executed.  (Gypsum board ceiling / Wire Mesh / PVC Board' },
                                            { checksHeading: 'Working Methodology', checksdescription: 'Check for approval of work methodology in terms of material type for fixing of false ceiling' },
                                            { checksHeading: 'Drawing Check', checksdescription: 'Check the shape & size of the GI sections for framing work as per drawing' },
                                            { checksHeading: 'Mateiral Check', checksdescription: 'Check for type of hanging system to be executed. (GI section/Wire with gripe)' },
                                            { checksHeading: 'Bottom Levels', checksdescription: 'Check for the bottom level of the ceiling is marked on the wall' },
                                            { checksHeading: 'Mateiral Check', checksdescription: 'Check for the inspection of incoming materials w.r.t. approved specification' },
                                            { checksHeading: 'Dependencies', checksdescription: 'Check for completion of preceding activities like electrical installation, HVAC Installation, Plastering & Dado of walls etc.' },
                                            { checksHeading: 'Channel Installation', checksdescription: 'Check for installation of wall channels as shown in drawings.' },
                                            { checksHeading: 'Levels Check', checksdescription: 'Check for marking of suspended ceiling level on walls as per drawing.' },
                                            { checksHeading: 'GI | Reep Installation Check', checksdescription: 'Check for fixing of suspenders (GI section / Wire) as per specifications.' },
                                            { checksHeading: 'Spacing Check', checksdescription: 'Check for the spacing of suspender & GI section as per drawing.' },
                                            { checksHeading: 'Alighment Check', checksdescription: 'Check for rigidity & alignment of framework of false ceiling.' },
                                            { checksHeading: 'Panel Fixing', checksdescription: 'Check for fixing of panels as shown in drawings.' },
                                            { checksHeading: 'Screw Spacing', checksdescription: 'Check for screw spacing as per requirement' },
                                            { checksHeading: 'Obstruction Check', checksdescription: 'Check provision for fixing of A/C grills, electrical fittings, sprinkler, smoke detector & trap doors etc.' },
                                        ];

                                        async function GradeSlabfillowingChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        GradeSlabfillowingChacks();
                                    }



                                    await Activities.updateOne(
                                        { _id: newss },
                                        {
                                            $push: {
                                                subactivitiesID: objID
                                            }
                                        }
                                    )
                                    // console.log('Data saved:', savedData);
                                } catch (error) {
                                    // console.error('Error saving data:', error);
                                }
                            }
                        }
                        miscellenousCalling();
                    }





                    if (newData.categoryname === "Wiring") {
                        const dataArranew = [
                            { subactivityname: 'B1 - Wiring', activityID: newData._id, projectID: objectproID, estimateDays: 4, TempID: 11 },
                            { subactivityname: 'B2 - Wiring', activityID: newData._id, projectID: objectproID, estimateDays: 4, TempID: 22 },
                            { subactivityname: 'B3 - Wiring', activityID: newData._id, projectID: objectproID, estimateDays: 4, TempID: 33 },
                            { subactivityname: 'B4 - Wiring', activityID: newData._id, projectID: objectproID, estimateDays: 4, TempID: 44 },
                            { subactivityname: 'GF - Wiring', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                            { subactivityname: 'FF - Wiring', activityID: newData._id, projectID: objectproID, estimateDays: 4, TempID: 1 },
                            { subactivityname: 'SF - Wiring', activityID: newData._id, projectID: objectproID, estimateDays: 4, TempID: 2 },
                            { subactivityname: 'TF - Wiring', activityID: newData._id, projectID: objectproID, estimateDays: 4, TempID: 3 },
                            { subactivityname: 'FoF - Wiring', activityID: newData._id, projectID: objectproID, estimateDays: 4, TempID: 4 },
                            { subactivityname: 'Tower - Wiring', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                        ];

                        async function miscellenousCalling() {
                            for (let i = 0; i < dataArranew.length; i++) {
                                if (dataArranew[i].TempID === 1 && NumbersOfFlorrs < 1 || dataArranew[i].TempID === 2 && NumbersOfFlorrs < 2 || dataArranew[i].TempID === 3 && NumbersOfFlorrs < 3 || dataArranew[i].TempID === 4 && NumbersOfFlorrs < 4 || dataArranew[i].TempID === 11 && NumbersOfBasemetFloor === 0 || dataArranew[i].TempID === 22 && NumbersOfBasemetFloor === 0 || dataArranew[i].TempID === 33 && NumbersOfBasemetFloor === 0 || dataArranew[i].TempID === 44 && NumbersOfBasemetFloor === 0) {
                                    continue; // Skip this iteration
                                }
                                try {
                                    const newDatanew = new SubActivities(dataArranew[i]);
                                    const savedData = await newDatanew.save();

                                    let objID = new mongoose.Types.ObjectId(newDatanew.id)
                                    let newss = new mongoose.Types.ObjectId(newData._id)
                                    // console.log(objID);



                                    //Anuj
                                    if (newDatanew.subactivityname === 'B1 - Wiring') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Inform the contractor to Cover all the boxes with dummy plates | Thermalcol to prevent damage during plastering.' },
                                            { subtaskdescription: 'Inform the contractor to use color codes in wiring' },
                                            { subtaskdescription: 'Inform the contractor to Terminate the wires in accessories, considering an extra length for looping.' },
                                            { subtaskdescription: 'Inform the contractor to Connect the wires in the distribution board and main switch or M.C.B.' },
                                            { subtaskdescription: 'Check the internal connections inboard for phase and neutral distribution.' },
                                            { subtaskdescription: 'Check the color codes and sizes of the wire used for various points.' },
                                            { subtaskdescription: 'Check the operation of all the switches for smooth working.' },
                                            { subtaskdescription: 'Ensure that there is no gap between the batten and the wall.' },
                                            { subtaskdescription: 'Ensure that rust-proof clips are fixed.' },
                                            { subtaskdescription: 'Check the quality and tightening of all the screws with required spacing and with proper gripers Rawal plugs.' },
                                            { subtaskdescription: 'Check the earthing connections for effective working.' },
                                            { subtaskdescription: 'Check the supply for all the points by megger or test lamp and prepare the final testing report.' },
                                            { subtaskdescription: 'Check all the points in the staircase.' },
                                            { subtaskdescription: 'Check the wiring in the meter cabinet for quality, color codes of wires, a gauge of wire, switches, connections in bus bar, etc.' },
                                            { subtaskdescription: 'Ensure that the name of the flat owner is painted on the respective meter and the main switch.' },
                                            { subtaskdescription: 'Check the sizes of cables for the required capacity.' },
                                            { subtaskdescription: 'Check the main supply for sufficient voltage.' },
                                            { subtaskdescription: 'Check the parking, street lighting, and all common supply.' },
                                        ];

                                        async function BeamSlabShutteringReincementRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteringReincementRCCfunCall();
                                    }

                                    if (newDatanew.subactivityname === 'B1 - Wiring') {

                                        const dataArranew = [
                                            { checksHeading: 'GI wire Check', checksdescription: 'Before starting drop work, lay G.I. wire of 16 gauge in every conduit in the slab up to the concealed box. Keep an extra length of 15cm which is useful in pulling of wires' },
                                            { checksHeading: 'Drop check', checksdescription: 'Drop work should commence after the completion of masonry work and a satisfactory curing period.' },
                                            { checksHeading: 'Covering check', checksdescription: 'Cover all the boxes with dummy plates to prevent damage during plastering.' },
                                            { checksHeading: 'Cleaning Check', checksdescription: 'After completion of all plastering work, clean the concealed boxes.' },
                                            { checksHeading: 'Wiring Check', checksdescription: 'After plastering and curing, wiring work can start.' },
                                            { checksHeading: 'Quality check', checksdescription: 'Check the quality, gauge, and brand name of the wires, as per the approvals, before starting the work.' },
                                            { checksHeading: 'Color code check', checksdescription: 'Check the color code and specification of the wire for various points.' },
                                            { checksHeading: 'Line and Level Check', checksdescription: 'Fix the accessories on the boards, as required, with line and level.' },
                                            { checksHeading: 'Looping check', checksdescription: 'Terminate the wires in accessories, considering an extra length for looping.' },
                                            { checksHeading: 'Fuse wire Check', checksdescription: 'Put the fuse wire of the required current rating in the fuse box.' },
                                            { checksHeading: 'DB and MCB Check', checksdescription: 'Connect the wires in the distribution board and main switch or M.C.B.' },
                                            { checksHeading: 'Supply check', checksdescription: 'After starting the supply, switch on the main switch and check all the points with a megger or test lamp.' },
                                        ];

                                        async function ElecvtricalChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        ElecvtricalChacks();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'B2 - Wiring') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Inform the contractor to Cover all the boxes with dummy plates | Thermalcol to prevent damage during plastering.' },
                                            { subtaskdescription: 'Inform the contractor to use color codes in wiring' },
                                            { subtaskdescription: 'Inform the contractor to Terminate the wires in accessories, considering an extra length for looping.' },
                                            { subtaskdescription: 'Inform the contractor to Connect the wires in the distribution board and main switch or M.C.B.' },
                                            { subtaskdescription: 'Check the internal connections inboard for phase and neutral distribution.' },
                                            { subtaskdescription: 'Check the color codes and sizes of the wire used for various points.' },
                                            { subtaskdescription: 'Check the operation of all the switches for smooth working.' },
                                            { subtaskdescription: 'Ensure that there is no gap between the batten and the wall.' },
                                            { subtaskdescription: 'Ensure that rust-proof clips are fixed.' },
                                            { subtaskdescription: 'Check the quality and tightening of all the screws with required spacing and with proper gripers Rawal plugs.' },
                                            { subtaskdescription: 'Check the earthing connections for effective working.' },
                                            { subtaskdescription: 'Check the supply for all the points by megger or test lamp and prepare the final testing report.' },
                                            { subtaskdescription: 'Check all the points in the staircase.' },
                                            { subtaskdescription: 'Check the wiring in the meter cabinet for quality, color codes of wires, a gauge of wire, switches, connections in bus bar, etc.' },
                                            { subtaskdescription: 'Ensure that the name of the flat owner is painted on the respective meter and the main switch.' },
                                            { subtaskdescription: 'Check the sizes of cables for the required capacity.' },
                                            { subtaskdescription: 'Check the main supply for sufficient voltage.' },
                                            { subtaskdescription: 'Check the parking, street lighting, and all common supply.' },
                                        ];

                                        async function BeamSlabShutteringReincementRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteringReincementRCCfunCall();
                                    }

                                    if (newDatanew.subactivityname === 'B2 - Wiring') {

                                        const dataArranew = [
                                            { checksHeading: 'GI wire Check', checksdescription: 'Before starting drop work, lay G.I. wire of 16 gauge in every conduit in the slab up to the concealed box. Keep an extra length of 15cm which is useful in pulling of wires' },
                                            { checksHeading: 'Drop check', checksdescription: 'Drop work should commence after the completion of masonry work and a satisfactory curing period.' },
                                            { checksHeading: 'Covering check', checksdescription: 'Cover all the boxes with dummy plates to prevent damage during plastering.' },
                                            { checksHeading: 'Cleaning Check', checksdescription: 'After completion of all plastering work, clean the concealed boxes.' },
                                            { checksHeading: 'Wiring Check', checksdescription: 'After plastering and curing, wiring work can start.' },
                                            { checksHeading: 'Quality check', checksdescription: 'Check the quality, gauge, and brand name of the wires, as per the approvals, before starting the work.' },
                                            { checksHeading: 'Color code check', checksdescription: 'Check the color code and specification of the wire for various points.' },
                                            { checksHeading: 'Line and Level Check', checksdescription: 'Fix the accessories on the boards, as required, with line and level.' },
                                            { checksHeading: 'Looping check', checksdescription: 'Terminate the wires in accessories, considering an extra length for looping.' },
                                            { checksHeading: 'Fuse wire Check', checksdescription: 'Put the fuse wire of the required current rating in the fuse box.' },
                                            { checksHeading: 'DB and MCB Check', checksdescription: 'Connect the wires in the distribution board and main switch or M.C.B.' },
                                            { checksHeading: 'Supply check', checksdescription: 'After starting the supply, switch on the main switch and check all the points with a megger or test lamp.' },
                                        ];

                                        async function ElecvtricalChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        ElecvtricalChacks();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'B3 - Wiring') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Inform the contractor to Cover all the boxes with dummy plates | Thermalcol to prevent damage during plastering.' },
                                            { subtaskdescription: 'Inform the contractor to use color codes in wiring' },
                                            { subtaskdescription: 'Inform the contractor to Terminate the wires in accessories, considering an extra length for looping.' },
                                            { subtaskdescription: 'Inform the contractor to Connect the wires in the distribution board and main switch or M.C.B.' },
                                            { subtaskdescription: 'Check the internal connections inboard for phase and neutral distribution.' },
                                            { subtaskdescription: 'Check the color codes and sizes of the wire used for various points.' },
                                            { subtaskdescription: 'Check the operation of all the switches for smooth working.' },
                                            { subtaskdescription: 'Ensure that there is no gap between the batten and the wall.' },
                                            { subtaskdescription: 'Ensure that rust-proof clips are fixed.' },
                                            { subtaskdescription: 'Check the quality and tightening of all the screws with required spacing and with proper gripers Rawal plugs.' },
                                            { subtaskdescription: 'Check the earthing connections for effective working.' },
                                            { subtaskdescription: 'Check the supply for all the points by megger or test lamp and prepare the final testing report.' },
                                            { subtaskdescription: 'Check all the points in the staircase.' },
                                            { subtaskdescription: 'Check the wiring in the meter cabinet for quality, color codes of wires, a gauge of wire, switches, connections in bus bar, etc.' },
                                            { subtaskdescription: 'Ensure that the name of the flat owner is painted on the respective meter and the main switch.' },
                                            { subtaskdescription: 'Check the sizes of cables for the required capacity.' },
                                            { subtaskdescription: 'Check the main supply for sufficient voltage.' },
                                            { subtaskdescription: 'Check the parking, street lighting, and all common supply.' },
                                        ];

                                        async function BeamSlabShutteringReincementRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteringReincementRCCfunCall();
                                    }

                                    if (newDatanew.subactivityname === 'B3 - Wiring') {

                                        const dataArranew = [
                                            { checksHeading: 'GI wire Check', checksdescription: 'Before starting drop work, lay G.I. wire of 16 gauge in every conduit in the slab up to the concealed box. Keep an extra length of 15cm which is useful in pulling of wires' },
                                            { checksHeading: 'Drop check', checksdescription: 'Drop work should commence after the completion of masonry work and a satisfactory curing period.' },
                                            { checksHeading: 'Covering check', checksdescription: 'Cover all the boxes with dummy plates to prevent damage during plastering.' },
                                            { checksHeading: 'Cleaning Check', checksdescription: 'After completion of all plastering work, clean the concealed boxes.' },
                                            { checksHeading: 'Wiring Check', checksdescription: 'After plastering and curing, wiring work can start.' },
                                            { checksHeading: 'Quality check', checksdescription: 'Check the quality, gauge, and brand name of the wires, as per the approvals, before starting the work.' },
                                            { checksHeading: 'Color code check', checksdescription: 'Check the color code and specification of the wire for various points.' },
                                            { checksHeading: 'Line and Level Check', checksdescription: 'Fix the accessories on the boards, as required, with line and level.' },
                                            { checksHeading: 'Looping check', checksdescription: 'Terminate the wires in accessories, considering an extra length for looping.' },
                                            { checksHeading: 'Fuse wire Check', checksdescription: 'Put the fuse wire of the required current rating in the fuse box.' },
                                            { checksHeading: 'DB and MCB Check', checksdescription: 'Connect the wires in the distribution board and main switch or M.C.B.' },
                                            { checksHeading: 'Supply check', checksdescription: 'After starting the supply, switch on the main switch and check all the points with a megger or test lamp.' },
                                        ];

                                        async function ElecvtricalChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        ElecvtricalChacks();
                                    }

                                    //Anuj
                                    if (newDatanew.subactivityname === 'B4 - Wiring') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Inform the contractor to Cover all the boxes with dummy plates | Thermalcol to prevent damage during plastering.' },
                                            { subtaskdescription: 'Inform the contractor to use color codes in wiring' },
                                            { subtaskdescription: 'Inform the contractor to Terminate the wires in accessories, considering an extra length for looping.' },
                                            { subtaskdescription: 'Inform the contractor to Connect the wires in the distribution board and main switch or M.C.B.' },
                                            { subtaskdescription: 'Check the internal connections inboard for phase and neutral distribution.' },
                                            { subtaskdescription: 'Check the color codes and sizes of the wire used for various points.' },
                                            { subtaskdescription: 'Check the operation of all the switches for smooth working.' },
                                            { subtaskdescription: 'Ensure that there is no gap between the batten and the wall.' },
                                            { subtaskdescription: 'Ensure that rust-proof clips are fixed.' },
                                            { subtaskdescription: 'Check the quality and tightening of all the screws with required spacing and with proper gripers Rawal plugs.' },
                                            { subtaskdescription: 'Check the earthing connections for effective working.' },
                                            { subtaskdescription: 'Check the supply for all the points by megger or test lamp and prepare the final testing report.' },
                                            { subtaskdescription: 'Check all the points in the staircase.' },
                                            { subtaskdescription: 'Check the wiring in the meter cabinet for quality, color codes of wires, a gauge of wire, switches, connections in bus bar, etc.' },
                                            { subtaskdescription: 'Ensure that the name of the flat owner is painted on the respective meter and the main switch.' },
                                            { subtaskdescription: 'Check the sizes of cables for the required capacity.' },
                                            { subtaskdescription: 'Check the main supply for sufficient voltage.' },
                                            { subtaskdescription: 'Check the parking, street lighting, and all common supply.' },
                                        ];

                                        async function BeamSlabShutteringReincementRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteringReincementRCCfunCall();
                                    }

                                    if (newDatanew.subactivityname === 'B4 - Wiring') {

                                        const dataArranew = [
                                            { checksHeading: 'GI wire Check', checksdescription: 'Before starting drop work, lay G.I. wire of 16 gauge in every conduit in the slab up to the concealed box. Keep an extra length of 15cm which is useful in pulling of wires' },
                                            { checksHeading: 'Drop check', checksdescription: 'Drop work should commence after the completion of masonry work and a satisfactory curing period.' },
                                            { checksHeading: 'Covering check', checksdescription: 'Cover all the boxes with dummy plates to prevent damage during plastering.' },
                                            { checksHeading: 'Cleaning Check', checksdescription: 'After completion of all plastering work, clean the concealed boxes.' },
                                            { checksHeading: 'Wiring Check', checksdescription: 'After plastering and curing, wiring work can start.' },
                                            { checksHeading: 'Quality check', checksdescription: 'Check the quality, gauge, and brand name of the wires, as per the approvals, before starting the work.' },
                                            { checksHeading: 'Color code check', checksdescription: 'Check the color code and specification of the wire for various points.' },
                                            { checksHeading: 'Line and Level Check', checksdescription: 'Fix the accessories on the boards, as required, with line and level.' },
                                            { checksHeading: 'Looping check', checksdescription: 'Terminate the wires in accessories, considering an extra length for looping.' },
                                            { checksHeading: 'Fuse wire Check', checksdescription: 'Put the fuse wire of the required current rating in the fuse box.' },
                                            { checksHeading: 'DB and MCB Check', checksdescription: 'Connect the wires in the distribution board and main switch or M.C.B.' },
                                            { checksHeading: 'Supply check', checksdescription: 'After starting the supply, switch on the main switch and check all the points with a megger or test lamp.' },
                                        ];

                                        async function ElecvtricalChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        ElecvtricalChacks();
                                    }


                                    if (newDatanew.subactivityname === 'GF - Wiring') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Inform the contractor to Cover all the boxes with dummy plates | Thermalcol to prevent damage during plastering.' },
                                            { subtaskdescription: 'Inform the contractor to use color codes in wiring' },
                                            { subtaskdescription: 'Inform the contractor to Terminate the wires in accessories, considering an extra length for looping.' },
                                            { subtaskdescription: 'Inform the contractor to Connect the wires in the distribution board and main switch or M.C.B.' },
                                            { subtaskdescription: 'Check the internal connections inboard for phase and neutral distribution.' },
                                            { subtaskdescription: 'Check the color codes and sizes of the wire used for various points.' },
                                            { subtaskdescription: 'Check the operation of all the switches for smooth working.' },
                                            { subtaskdescription: 'Ensure that there is no gap between the batten and the wall.' },
                                            { subtaskdescription: 'Ensure that rust-proof clips are fixed.' },
                                            { subtaskdescription: 'Check the quality and tightening of all the screws with required spacing and with proper gripers Rawal plugs.' },
                                            { subtaskdescription: 'Check the earthing connections for effective working.' },
                                            { subtaskdescription: 'Check the supply for all the points by megger or test lamp and prepare the final testing report.' },
                                            { subtaskdescription: 'Check all the points in the staircase.' },
                                            { subtaskdescription: 'Check the wiring in the meter cabinet for quality, color codes of wires, a gauge of wire, switches, connections in bus bar, etc.' },
                                            { subtaskdescription: 'Ensure that the name of the flat owner is painted on the respective meter and the main switch.' },
                                            { subtaskdescription: 'Check the sizes of cables for the required capacity.' },
                                            { subtaskdescription: 'Check the main supply for sufficient voltage.' },
                                            { subtaskdescription: 'Check the parking, street lighting, and all common supply.' },
                                        ];

                                        async function BeamSlabShutteringReincementRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteringReincementRCCfunCall();
                                    }




                                    if (newDatanew.subactivityname === "GF - Wiring") {

                                        const dataArranew = [
                                            { materailname: '1.0 SQMM', materailquantity: materlID.GFWiringSQMM1Quantity, materailUnit: 'BUNDEL' },
                                            { materailname: '1.5 SQMM', materailquantity: materlID.GFWiringSQMM15Quantity, materailUnit: 'BUNDEL' },
                                            { materailname: '2.5 SQMM', materailquantity: materlID.GFWiringSQMM25Quantity, materailUnit: 'BUNDEL' },
                                            { materailname: '4.0 SQMM', materailquantity: materlID.GFWiringSQMM4Quantity, materailUnit: 'BUNDEL' },
                                            { materailname: '6.0 SQMM', materailquantity: materlID.GFWiringSQMM6Quantity, materailUnit: 'BUNDEL' },
                                            { materailname: '1.0 SQMM - Ceiling', materailquantity: materlID.GFWiringSQMM1CeilingQuantity, materailUnit: 'BUNDEL' },
                                            { materailname: '1.5 SQMM - Ceiling', materailquantity: materlID.GFWiringSQMM15CeilingQuantity, materailUnit: 'BUNDEL' },
                                            { materailname: '1.0 SQMM - Inverter', materailquantity: materlID.GFWiringSQMM1InverterQuantity, materailUnit: 'BUNDEL' },
                                            { materailname: '1.5 SQMM - Inverter', materailquantity: materlID.GFWiringSQMM15InverterQuantity, materailUnit: 'BUNDEL' }
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }

                                    if (newDatanew.subactivityname === "GF - Wiring") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Points', headingforshortingTwo: 'Wiring', headingforshortingThree: 'Others' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Switch Bo.', NormalHeadingThree: 'Looping', NormalHeadingfoure: 'False Ceili.' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Boa. Wiring', NormalHeadingThree: 'Inverter', NormalHeadingfoure: 'Earthing' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'AC', NormalHeadingThree: 'Solar', NormalHeadingfoure: 'LAN' },
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }


                                    if (newDatanew.subactivityname === "FF - Wiring") {

                                        const dataArranew = [
                                            { materailname: '1.0 SQMM', materailquantity: materlID.FFWiringSQMM1Quantity, materailUnit: 'BUNDEL' },
                                            { materailname: '1.5 SQMM', materailquantity: materlID.FFWiringSQMM15Quantity, materailUnit: 'BUNDEL' },
                                            { materailname: '2.5 SQMM', materailquantity: materlID.FFWiringSQMM25Quantity, materailUnit: 'BUNDEL' },
                                            { materailname: '4.0 SQMM', materailquantity: materlID.FFWiringSQMM4Quantity, materailUnit: 'BUNDEL' },
                                            { materailname: '6.0 SQMM', materailquantity: materlID.FFWiringSQMM6Quantity, materailUnit: 'BUNDEL' },
                                            { materailname: '1.0 SQMM - Ceiling', materailquantity: materlID.FFWiringSQMM1CeilingQuantity, materailUnit: 'BUNDEL' },
                                            { materailname: '1.5 SQMM - Ceiling', materailquantity: materlID.FFWiringSQMM15CeilingQuantity, materailUnit: 'BUNDEL' },
                                            { materailname: '1.0 SQMM - Inverter', materailquantity: materlID.FFWiringSQMM1InverterQuantity, materailUnit: 'BUNDEL' },
                                            { materailname: '1.5 SQMM - Inverter', materailquantity: materlID.FFWiringSQMM15InverterQuantity, materailUnit: 'BUNDEL' }
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }

                                    if (newDatanew.subactivityname === "FF - Wiring") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Points', headingforshortingTwo: 'Wiring', headingforshortingThree: 'Others' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Switch Bo.', NormalHeadingThree: 'Looping', NormalHeadingfoure: 'False Ceili.' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Boa. Wiring', NormalHeadingThree: 'Inverter', NormalHeadingfoure: 'Earthing' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'AC', NormalHeadingThree: 'Solar', NormalHeadingfoure: 'LAN' },
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }

                                    if (newDatanew.subactivityname === "SF - Wiring") {

                                        const dataArranew = [
                                            { materailname: '1.0 SQMM', materailquantity: materlID.SFWiringSQMM1Quantity, materailUnit: 'BUNDEL' },
                                            { materailname: '1.5 SQMM', materailquantity: materlID.SFWiringSQMM15Quantity, materailUnit: 'BUNDEL' },
                                            { materailname: '2.5 SQMM', materailquantity: materlID.SFWiringSQMM25Quantity, materailUnit: 'BUNDEL' },
                                            { materailname: '4.0 SQMM', materailquantity: materlID.SFWiringSQMM4Quantity, materailUnit: 'BUNDEL' },
                                            { materailname: '6.0 SQMM', materailquantity: materlID.SFWiringSQMM6Quantity, materailUnit: 'BUNDEL' },
                                            { materailname: '1.0 SQMM - Ceiling', materailquantity: materlID.SFWiringSQMM1CeilingQuantity, materailUnit: 'BUNDEL' },
                                            { materailname: '1.5 SQMM - Ceiling', materailquantity: materlID.SFWiringSQMM15CeilingQuantity, materailUnit: 'BUNDEL' },
                                            { materailname: '1.0 SQMM - Inverter', materailquantity: materlID.SFWiringSQMM1InverterQuantity, materailUnit: 'BUNDEL' },
                                            { materailname: '1.5 SQMM - Inverter', materailquantity: materlID.SFWiringSQMM15InverterQuantity, materailUnit: 'BUNDEL' }
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === "SF - Wiring") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Points', headingforshortingTwo: 'Wiring', headingforshortingThree: 'Others' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Switch Bo.', NormalHeadingThree: 'Looping', NormalHeadingfoure: 'False Ceili.' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Boa. Wiring', NormalHeadingThree: 'Inverter', NormalHeadingfoure: 'Earthing' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'AC', NormalHeadingThree: 'Solar', NormalHeadingfoure: 'LAN' },
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }



                                    if (newDatanew.subactivityname === "TF - Wiring") {

                                        const dataArranew = [
                                            { materailname: '1.0 SQMM', materailquantity: materlID.TFWiringSQMM1Quantity, materailUnit: 'BUNDEL' },
                                            { materailname: '1.5 SQMM', materailquantity: materlID.TFWiringSQMM15Quantity, materailUnit: 'BUNDEL' },
                                            { materailname: '2.5 SQMM', materailquantity: materlID.TFWiringSQMM25Quantity, materailUnit: 'BUNDEL' },
                                            { materailname: '4.0 SQMM', materailquantity: materlID.TFWiringSQMM4Quantity, materailUnit: 'BUNDEL' },
                                            { materailname: '6.0 SQMM', materailquantity: materlID.TFWiringSQMM6Quantity, materailUnit: 'BUNDEL' },
                                            { materailname: '1.0 SQMM - Ceiling', materailquantity: materlID.TFWiringSQMM1CeilingQuantity, materailUnit: 'BUNDEL' },
                                            { materailname: '1.5 SQMM - Ceiling', materailquantity: materlID.TFWiringSQMM15CeilingQuantity, materailUnit: 'BUNDEL' },
                                            { materailname: '1.0 SQMM - Inverter', materailquantity: materlID.TFWiringSQMM1InverterQuantity, materailUnit: 'BUNDEL' },
                                            { materailname: '1.5 SQMM - Inverter', materailquantity: materlID.TFWiringSQMM15InverterQuantity, materailUnit: 'BUNDEL' }
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }

                                    if (newDatanew.subactivityname === "TF - Wiring") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Points', headingforshortingTwo: 'Wiring', headingforshortingThree: 'Others' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Switch Bo.', NormalHeadingThree: 'Looping', NormalHeadingfoure: 'False Ceili.' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Boa. Wiring', NormalHeadingThree: 'Inverter', NormalHeadingfoure: 'Earthing' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'AC', NormalHeadingThree: 'Solar', NormalHeadingfoure: 'LAN' },
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }


                                    if (newDatanew.subactivityname === "FoF - Wiring") {

                                        const dataArranew = [
                                            { materailname: '1.0 SQMM', materailquantity: materlID.FoFWiringSQMM1Quantity, materailUnit: 'BUNDEL' },
                                            { materailname: '1.5 SQMM', materailquantity: materlID.FoFWiringSQMM15Quantity, materailUnit: 'BUNDEL' },
                                            { materailname: '2.5 SQMM', materailquantity: materlID.FoFWiringSQMM25Quantity, materailUnit: 'BUNDEL' },
                                            { materailname: '4.0 SQMM', materailquantity: materlID.FoFWiringSQMM4Quantity, materailUnit: 'BUNDEL' },
                                            { materailname: '6.0 SQMM', materailquantity: materlID.FoFWiringSQMM6Quantity, materailUnit: 'BUNDEL' },
                                            { materailname: '1.0 SQMM - Ceiling', materailquantity: materlID.FoFWiringSQMM1CeilingQuantity, materailUnit: 'BUNDEL' },
                                            { materailname: '1.5 SQMM - Ceiling', materailquantity: materlID.FoFWiringSQMM15CeilingQuantity, materailUnit: 'BUNDEL' },
                                            { materailname: '1.0 SQMM - Inverter', materailquantity: materlID.FoFWiringSQMM1InverterQuantity, materailUnit: 'BUNDEL' },
                                            { materailname: '1.5 SQMM - Inverter', materailquantity: materlID.FoFWiringSQMM15InverterQuantity, materailUnit: 'BUNDEL' }
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === "FoF - Wiring") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Points', headingforshortingTwo: 'Wiring', headingforshortingThree: 'Others' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Switch Bo.', NormalHeadingThree: 'Looping', NormalHeadingfoure: 'False Ceili.' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Boa. Wiring', NormalHeadingThree: 'Inverter', NormalHeadingfoure: 'Earthing' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'AC', NormalHeadingThree: 'Solar', NormalHeadingfoure: 'LAN' },
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }

                                    if (newDatanew.subactivityname === "Tower - Wiring") {

                                        const dataArranew = [
                                            { materailname: '1.0 SQMM', materailquantity: materlID.TowerWiringSQMM1Quantity, materailUnit: 'BUNDEL' },
                                            { materailname: '1.5 SQMM', materailquantity: materlID.TowerWiringSQMM15Quantity, materailUnit: 'BUNDEL' },
                                            { materailname: '2.5 SQMM', materailquantity: materlID.TowerWiringSQMM25Quantity, materailUnit: 'BUNDEL' },
                                            { materailname: '4.0 SQMM', materailquantity: materlID.TowerWiringSQMM4Quantity, materailUnit: 'BUNDEL' },
                                            { materailname: '6.0 SQMM', materailquantity: materlID.TowerWiringSQMM6Quantity, materailUnit: 'BUNDEL' },
                                            { materailname: '1.0 SQMM - Ceiling', materailquantity: materlID.TowerWiringSQMM1CeilingQuantity, materailUnit: 'BUNDEL' },
                                            { materailname: '1.5 SQMM - Ceiling', materailquantity: materlID.TowerWiringSQMM15CeilingQuantity, materailUnit: 'BUNDEL' },
                                            { materailname: '1.0 SQMM - Inverter', materailquantity: materlID.TowerWiringSQMM1InverterQuantity, materailUnit: 'BUNDEL' },
                                            { materailname: '1.5 SQMM - Inverter', materailquantity: materlID.TowerWiringSQMM15InverterQuantity, materailUnit: 'BUNDEL' }
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === "Tower - Wiring") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Points', headingforshortingTwo: 'Wiring', headingforshortingThree: 'Others' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Switch Bo.', NormalHeadingThree: 'Looping', NormalHeadingfoure: 'False Ceili.' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Boa. Wiring', NormalHeadingThree: 'Inverter', NormalHeadingfoure: 'Earthing' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'AC', NormalHeadingThree: 'Solar', NormalHeadingfoure: 'LAN' },
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }


                                    if (newDatanew.subactivityname === 'GF - Wiring') {

                                        const dataArranew = [
                                            { checksHeading: 'GI wire Check', checksdescription: 'Before starting drop work, lay G.I. wire of 16 gauge in every conduit in the slab up to the concealed box. Keep an extra length of 15cm which is useful in pulling of wires' },
                                            { checksHeading: 'Drop check', checksdescription: 'Drop work should commence after the completion of masonry work and a satisfactory curing period.' },
                                            { checksHeading: 'Covering check', checksdescription: 'Cover all the boxes with dummy plates to prevent damage during plastering.' },
                                            { checksHeading: 'Cleaning Check', checksdescription: 'After completion of all plastering work, clean the concealed boxes.' },
                                            { checksHeading: 'Wiring Check', checksdescription: 'After plastering and curing, wiring work can start.' },
                                            { checksHeading: 'Quality check', checksdescription: 'Check the quality, gauge, and brand name of the wires, as per the approvals, before starting the work.' },
                                            { checksHeading: 'Color code check', checksdescription: 'Check the color code and specification of the wire for various points.' },
                                            { checksHeading: 'Line and Level Check', checksdescription: 'Fix the accessories on the boards, as required, with line and level.' },
                                            { checksHeading: 'Looping check', checksdescription: 'Terminate the wires in accessories, considering an extra length for looping.' },
                                            { checksHeading: 'Fuse wire Check', checksdescription: 'Put the fuse wire of the required current rating in the fuse box.' },
                                            { checksHeading: 'DB and MCB Check', checksdescription: 'Connect the wires in the distribution board and main switch or M.C.B.' },
                                            { checksHeading: 'Supply check', checksdescription: 'After starting the supply, switch on the main switch and check all the points with a megger or test lamp.' },
                                        ];

                                        async function ElecvtricalChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        ElecvtricalChacks();
                                    }

                                    //Anuj
                                    if (newDatanew.subactivityname === 'FF - Wiring') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Inform the contractor to Cover all the boxes with dummy plates | Thermalcol to prevent damage during plastering.' },
                                            { subtaskdescription: 'Inform the contractor to use color codes in wiring' },
                                            { subtaskdescription: 'Inform the contractor to Terminate the wires in accessories, considering an extra length for looping.' },
                                            { subtaskdescription: 'Inform the contractor to Connect the wires in the distribution board and main switch or M.C.B.' },
                                            { subtaskdescription: 'Check the internal connections inboard for phase and neutral distribution.' },
                                            { subtaskdescription: 'Check the color codes and sizes of the wire used for various points.' },
                                            { subtaskdescription: 'Check the operation of all the switches for smooth working.' },
                                            { subtaskdescription: 'Ensure that there is no gap between the batten and the wall.' },
                                            { subtaskdescription: 'Ensure that rust-proof clips are fixed.' },
                                            { subtaskdescription: 'Check the quality and tightening of all the screws with required spacing and with proper gripers Rawal plugs.' },
                                            { subtaskdescription: 'Check the earthing connections for effective working.' },
                                            { subtaskdescription: 'Check the supply for all the points by megger or test lamp and prepare the final testing report.' },
                                            { subtaskdescription: 'Check all the points in the staircase.' },
                                            { subtaskdescription: 'Check the wiring in the meter cabinet for quality, color codes of wires, a gauge of wire, switches, connections in bus bar, etc.' },
                                            { subtaskdescription: 'Ensure that the name of the flat owner is painted on the respective meter and the main switch.' },
                                            { subtaskdescription: 'Check the sizes of cables for the required capacity.' },
                                            { subtaskdescription: 'Check the main supply for sufficient voltage.' },
                                            { subtaskdescription: 'Check the parking, street lighting, and all common supply.' },
                                        ];

                                        async function BeamSlabShutteringReincementRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteringReincementRCCfunCall();
                                    }

                                    if (newDatanew.subactivityname === 'FF - Wiring') {

                                        const dataArranew = [
                                            { checksHeading: 'GI wire Check', checksdescription: 'Before starting drop work, lay G.I. wire of 16 gauge in every conduit in the slab up to the concealed box. Keep an extra length of 15cm which is useful in pulling of wires' },
                                            { checksHeading: 'Drop check', checksdescription: 'Drop work should commence after the completion of masonry work and a satisfactory curing period.' },
                                            { checksHeading: 'Covering check', checksdescription: 'Cover all the boxes with dummy plates to prevent damage during plastering.' },
                                            { checksHeading: 'Cleaning Check', checksdescription: 'After completion of all plastering work, clean the concealed boxes.' },
                                            { checksHeading: 'Wiring Check', checksdescription: 'After plastering and curing, wiring work can start.' },
                                            { checksHeading: 'Quality check', checksdescription: 'Check the quality, gauge, and brand name of the wires, as per the approvals, before starting the work.' },
                                            { checksHeading: 'Color code check', checksdescription: 'Check the color code and specification of the wire for various points.' },
                                            { checksHeading: 'Line and Level Check', checksdescription: 'Fix the accessories on the boards, as required, with line and level.' },
                                            { checksHeading: 'Looping check', checksdescription: 'Terminate the wires in accessories, considering an extra length for looping.' },
                                            { checksHeading: 'Fuse wire Check', checksdescription: 'Put the fuse wire of the required current rating in the fuse box.' },
                                            { checksHeading: 'DB and MCB Check', checksdescription: 'Connect the wires in the distribution board and main switch or M.C.B.' },
                                            { checksHeading: 'Supply check', checksdescription: 'After starting the supply, switch on the main switch and check all the points with a megger or test lamp.' },
                                        ];

                                        async function ElecvtricalChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        ElecvtricalChacks();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'SF - Wiring') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Inform the contractor to Cover all the boxes with dummy plates | Thermalcol to prevent damage during plastering.' },
                                            { subtaskdescription: 'Inform the contractor to use color codes in wiring' },
                                            { subtaskdescription: 'Inform the contractor to Terminate the wires in accessories, considering an extra length for looping.' },
                                            { subtaskdescription: 'Inform the contractor to Connect the wires in the distribution board and main switch or M.C.B.' },
                                            { subtaskdescription: 'Check the internal connections inboard for phase and neutral distribution.' },
                                            { subtaskdescription: 'Check the color codes and sizes of the wire used for various points.' },
                                            { subtaskdescription: 'Check the operation of all the switches for smooth working.' },
                                            { subtaskdescription: 'Ensure that there is no gap between the batten and the wall.' },
                                            { subtaskdescription: 'Ensure that rust-proof clips are fixed.' },
                                            { subtaskdescription: 'Check the quality and tightening of all the screws with required spacing and with proper gripers Rawal plugs.' },
                                            { subtaskdescription: 'Check the earthing connections for effective working.' },
                                            { subtaskdescription: 'Check the supply for all the points by megger or test lamp and prepare the final testing report.' },
                                            { subtaskdescription: 'Check all the points in the staircase.' },
                                            { subtaskdescription: 'Check the wiring in the meter cabinet for quality, color codes of wires, a gauge of wire, switches, connections in bus bar, etc.' },
                                            { subtaskdescription: 'Ensure that the name of the flat owner is painted on the respective meter and the main switch.' },
                                            { subtaskdescription: 'Check the sizes of cables for the required capacity.' },
                                            { subtaskdescription: 'Check the main supply for sufficient voltage.' },
                                            { subtaskdescription: 'Check the parking, street lighting, and all common supply.' },
                                        ];

                                        async function BeamSlabShutteringReincementRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteringReincementRCCfunCall();
                                    }

                                    if (newDatanew.subactivityname === 'SF - Wiring') {

                                        const dataArranew = [
                                            { checksHeading: 'GI wire Check', checksdescription: 'Before starting drop work, lay G.I. wire of 16 gauge in every conduit in the slab up to the concealed box. Keep an extra length of 15cm which is useful in pulling of wires' },
                                            { checksHeading: 'Drop check', checksdescription: 'Drop work should commence after the completion of masonry work and a satisfactory curing period.' },
                                            { checksHeading: 'Covering check', checksdescription: 'Cover all the boxes with dummy plates to prevent damage during plastering.' },
                                            { checksHeading: 'Cleaning Check', checksdescription: 'After completion of all plastering work, clean the concealed boxes.' },
                                            { checksHeading: 'Wiring Check', checksdescription: 'After plastering and curing, wiring work can start.' },
                                            { checksHeading: 'Quality check', checksdescription: 'Check the quality, gauge, and brand name of the wires, as per the approvals, before starting the work.' },
                                            { checksHeading: 'Color code check', checksdescription: 'Check the color code and specification of the wire for various points.' },
                                            { checksHeading: 'Line and Level Check', checksdescription: 'Fix the accessories on the boards, as required, with line and level.' },
                                            { checksHeading: 'Looping check', checksdescription: 'Terminate the wires in accessories, considering an extra length for looping.' },
                                            { checksHeading: 'Fuse wire Check', checksdescription: 'Put the fuse wire of the required current rating in the fuse box.' },
                                            { checksHeading: 'DB and MCB Check', checksdescription: 'Connect the wires in the distribution board and main switch or M.C.B.' },
                                            { checksHeading: 'Supply check', checksdescription: 'After starting the supply, switch on the main switch and check all the points with a megger or test lamp.' },
                                        ];

                                        async function ElecvtricalChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        ElecvtricalChacks();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'TF - Wiring') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Inform the contractor to Cover all the boxes with dummy plates | Thermalcol to prevent damage during plastering.' },
                                            { subtaskdescription: 'Inform the contractor to use color codes in wiring' },
                                            { subtaskdescription: 'Inform the contractor to Terminate the wires in accessories, considering an extra length for looping.' },
                                            { subtaskdescription: 'Inform the contractor to Connect the wires in the distribution board and main switch or M.C.B.' },
                                            { subtaskdescription: 'Check the internal connections inboard for phase and neutral distribution.' },
                                            { subtaskdescription: 'Check the color codes and sizes of the wire used for various points.' },
                                            { subtaskdescription: 'Check the operation of all the switches for smooth working.' },
                                            { subtaskdescription: 'Ensure that there is no gap between the batten and the wall.' },
                                            { subtaskdescription: 'Ensure that rust-proof clips are fixed.' },
                                            { subtaskdescription: 'Check the quality and tightening of all the screws with required spacing and with proper gripers Rawal plugs.' },
                                            { subtaskdescription: 'Check the earthing connections for effective working.' },
                                            { subtaskdescription: 'Check the supply for all the points by megger or test lamp and prepare the final testing report.' },
                                            { subtaskdescription: 'Check all the points in the staircase.' },
                                            { subtaskdescription: 'Check the wiring in the meter cabinet for quality, color codes of wires, a gauge of wire, switches, connections in bus bar, etc.' },
                                            { subtaskdescription: 'Ensure that the name of the flat owner is painted on the respective meter and the main switch.' },
                                            { subtaskdescription: 'Check the sizes of cables for the required capacity.' },
                                            { subtaskdescription: 'Check the main supply for sufficient voltage.' },
                                            { subtaskdescription: 'Check the parking, street lighting, and all common supply.' },
                                        ];

                                        async function BeamSlabShutteringReincementRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteringReincementRCCfunCall();
                                    }

                                    if (newDatanew.subactivityname === 'TF - Wiring') {

                                        const dataArranew = [
                                            { checksHeading: 'GI wire Check', checksdescription: 'Before starting drop work, lay G.I. wire of 16 gauge in every conduit in the slab up to the concealed box. Keep an extra length of 15cm which is useful in pulling of wires' },
                                            { checksHeading: 'Drop check', checksdescription: 'Drop work should commence after the completion of masonry work and a satisfactory curing period.' },
                                            { checksHeading: 'Covering check', checksdescription: 'Cover all the boxes with dummy plates to prevent damage during plastering.' },
                                            { checksHeading: 'Cleaning Check', checksdescription: 'After completion of all plastering work, clean the concealed boxes.' },
                                            { checksHeading: 'Wiring Check', checksdescription: 'After plastering and curing, wiring work can start.' },
                                            { checksHeading: 'Quality check', checksdescription: 'Check the quality, gauge, and brand name of the wires, as per the approvals, before starting the work.' },
                                            { checksHeading: 'Color code check', checksdescription: 'Check the color code and specification of the wire for various points.' },
                                            { checksHeading: 'Line and Level Check', checksdescription: 'Fix the accessories on the boards, as required, with line and level.' },
                                            { checksHeading: 'Looping check', checksdescription: 'Terminate the wires in accessories, considering an extra length for looping.' },
                                            { checksHeading: 'Fuse wire Check', checksdescription: 'Put the fuse wire of the required current rating in the fuse box.' },
                                            { checksHeading: 'DB and MCB Check', checksdescription: 'Connect the wires in the distribution board and main switch or M.C.B.' },
                                            { checksHeading: 'Supply check', checksdescription: 'After starting the supply, switch on the main switch and check all the points with a megger or test lamp.' },
                                        ];

                                        async function ElecvtricalChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        ElecvtricalChacks();
                                    }

                                    //Anuj
                                    if (newDatanew.subactivityname === 'FoF - Wiring') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Inform the contractor to Cover all the boxes with dummy plates | Thermalcol to prevent damage during plastering.' },
                                            { subtaskdescription: 'Inform the contractor to use color codes in wiring' },
                                            { subtaskdescription: 'Inform the contractor to Terminate the wires in accessories, considering an extra length for looping.' },
                                            { subtaskdescription: 'Inform the contractor to Connect the wires in the distribution board and main switch or M.C.B.' },
                                            { subtaskdescription: 'Check the internal connections inboard for phase and neutral distribution.' },
                                            { subtaskdescription: 'Check the color codes and sizes of the wire used for various points.' },
                                            { subtaskdescription: 'Check the operation of all the switches for smooth working.' },
                                            { subtaskdescription: 'Ensure that there is no gap between the batten and the wall.' },
                                            { subtaskdescription: 'Ensure that rust-proof clips are fixed.' },
                                            { subtaskdescription: 'Check the quality and tightening of all the screws with required spacing and with proper gripers Rawal plugs.' },
                                            { subtaskdescription: 'Check the earthing connections for effective working.' },
                                            { subtaskdescription: 'Check the supply for all the points by megger or test lamp and prepare the final testing report.' },
                                            { subtaskdescription: 'Check all the points in the staircase.' },
                                            { subtaskdescription: 'Check the wiring in the meter cabinet for quality, color codes of wires, a gauge of wire, switches, connections in bus bar, etc.' },
                                            { subtaskdescription: 'Ensure that the name of the flat owner is painted on the respective meter and the main switch.' },
                                            { subtaskdescription: 'Check the sizes of cables for the required capacity.' },
                                            { subtaskdescription: 'Check the main supply for sufficient voltage.' },
                                            { subtaskdescription: 'Check the parking, street lighting, and all common supply.' },
                                        ];

                                        async function BeamSlabShutteringReincementRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteringReincementRCCfunCall();
                                    }

                                    if (newDatanew.subactivityname === 'FoF - Wiring') {

                                        const dataArranew = [
                                            { checksHeading: 'GI wire Check', checksdescription: 'Before starting drop work, lay G.I. wire of 16 gauge in every conduit in the slab up to the concealed box. Keep an extra length of 15cm which is useful in pulling of wires' },
                                            { checksHeading: 'Drop check', checksdescription: 'Drop work should commence after the completion of masonry work and a satisfactory curing period.' },
                                            { checksHeading: 'Covering check', checksdescription: 'Cover all the boxes with dummy plates to prevent damage during plastering.' },
                                            { checksHeading: 'Cleaning Check', checksdescription: 'After completion of all plastering work, clean the concealed boxes.' },
                                            { checksHeading: 'Wiring Check', checksdescription: 'After plastering and curing, wiring work can start.' },
                                            { checksHeading: 'Quality check', checksdescription: 'Check the quality, gauge, and brand name of the wires, as per the approvals, before starting the work.' },
                                            { checksHeading: 'Color code check', checksdescription: 'Check the color code and specification of the wire for various points.' },
                                            { checksHeading: 'Line and Level Check', checksdescription: 'Fix the accessories on the boards, as required, with line and level.' },
                                            { checksHeading: 'Looping check', checksdescription: 'Terminate the wires in accessories, considering an extra length for looping.' },
                                            { checksHeading: 'Fuse wire Check', checksdescription: 'Put the fuse wire of the required current rating in the fuse box.' },
                                            { checksHeading: 'DB and MCB Check', checksdescription: 'Connect the wires in the distribution board and main switch or M.C.B.' },
                                            { checksHeading: 'Supply check', checksdescription: 'After starting the supply, switch on the main switch and check all the points with a megger or test lamp.' },
                                        ];

                                        async function ElecvtricalChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        ElecvtricalChacks();
                                    }


                                    if (newDatanew.subactivityname === 'Tower - Wiring') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Inform the contractor to Cover all the boxes with dummy plates | Thermalcol to prevent damage during plastering.' },
                                            { subtaskdescription: 'Inform the contractor to use color codes in wiring' },
                                            { subtaskdescription: 'Inform the contractor to Terminate the wires in accessories, considering an extra length for looping.' },
                                            { subtaskdescription: 'Inform the contractor to Connect the wires in the distribution board and main switch or M.C.B.' },
                                            { subtaskdescription: 'Check the internal connections inboard for phase and neutral distribution.' },
                                            { subtaskdescription: 'Check the color codes and sizes of the wire used for various points.' },
                                            { subtaskdescription: 'Check the operation of all the switches for smooth working.' },
                                            { subtaskdescription: 'Ensure that there is no gap between the batten and the wall.' },
                                            { subtaskdescription: 'Ensure that rust-proof clips are fixed.' },
                                            { subtaskdescription: 'Check the quality and tightening of all the screws with required spacing and with proper gripers Rawal plugs.' },
                                            { subtaskdescription: 'Check the earthing connections for effective working.' },
                                            { subtaskdescription: 'Check the supply for all the points by megger or test lamp and prepare the final testing report.' },
                                            { subtaskdescription: 'Check all the points in the staircase.' },
                                            { subtaskdescription: 'Check the wiring in the meter cabinet for quality, color codes of wires, a gauge of wire, switches, connections in bus bar, etc.' },
                                            { subtaskdescription: 'Ensure that the name of the flat owner is painted on the respective meter and the main switch.' },
                                            { subtaskdescription: 'Check the sizes of cables for the required capacity.' },
                                            { subtaskdescription: 'Check the main supply for sufficient voltage.' },
                                            { subtaskdescription: 'Check the parking, street lighting, and all common supply.' },
                                        ];

                                        async function BeamSlabShutteringReincementRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteringReincementRCCfunCall();
                                    }

                                    if (newDatanew.subactivityname === 'Tower - Wiring') {

                                        const dataArranew = [
                                            { checksHeading: 'GI wire Check', checksdescription: 'Before starting drop work, lay G.I. wire of 16 gauge in every conduit in the slab up to the concealed box. Keep an extra length of 15cm which is useful in pulling of wires' },
                                            { checksHeading: 'Drop check', checksdescription: 'Drop work should commence after the completion of masonry work and a satisfactory curing period.' },
                                            { checksHeading: 'Covering check', checksdescription: 'Cover all the boxes with dummy plates to prevent damage during plastering.' },
                                            { checksHeading: 'Cleaning Check', checksdescription: 'After completion of all plastering work, clean the concealed boxes.' },
                                            { checksHeading: 'Wiring Check', checksdescription: 'After plastering and curing, wiring work can start.' },
                                            { checksHeading: 'Quality check', checksdescription: 'Check the quality, gauge, and brand name of the wires, as per the approvals, before starting the work.' },
                                            { checksHeading: 'Color code check', checksdescription: 'Check the color code and specification of the wire for various points.' },
                                            { checksHeading: 'Line and Level Check', checksdescription: 'Fix the accessories on the boards, as required, with line and level.' },
                                            { checksHeading: 'Looping check', checksdescription: 'Terminate the wires in accessories, considering an extra length for looping.' },
                                            { checksHeading: 'Fuse wire Check', checksdescription: 'Put the fuse wire of the required current rating in the fuse box.' },
                                            { checksHeading: 'DB and MCB Check', checksdescription: 'Connect the wires in the distribution board and main switch or M.C.B.' },
                                            { checksHeading: 'Supply check', checksdescription: 'After starting the supply, switch on the main switch and check all the points with a megger or test lamp.' },
                                        ];

                                        async function ElecvtricalChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        ElecvtricalChacks();
                                    }









                                    await Activities.updateOne(
                                        { _id: newss },
                                        {
                                            $push: {
                                                subactivitiesID: objID
                                            }
                                        }
                                    )
                                    // console.log('Data saved:', savedData);
                                } catch (error) {
                                    // console.error('Error saving data:', error);
                                }
                            }
                        }
                        miscellenousCalling();
                    }








                    if (newData.categoryname === "Flase Ceiling Covering Work") {



                        const dataArranew = [
                            { subactivityname: 'B1 - Boarding | POP', activityID: newData._id, projectID: objectproID, estimateDays: 4, TempID: 11 },
                            { subactivityname: 'B2 - Boarding | POP', activityID: newData._id, projectID: objectproID, estimateDays: 4, TempID: 22 },
                            { subactivityname: 'B3 - Boarding | POP', activityID: newData._id, projectID: objectproID, estimateDays: 4, TempID: 33 },
                            { subactivityname: 'B4 - Boarding | POP', activityID: newData._id, projectID: objectproID, estimateDays: 4, TempID: 44 },
                            { subactivityname: 'GF - Boarding | POP', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                            { subactivityname: 'FF - Boarding | POP', activityID: newData._id, projectID: objectproID, estimateDays: 4, TempID: 1 },
                            { subactivityname: 'SF - Boarding | POP', activityID: newData._id, projectID: objectproID, estimateDays: 4, TempID: 2 },
                            { subactivityname: 'TF - Boarding | POP', activityID: newData._id, projectID: objectproID, estimateDays: 4, TempID: 3 },
                            { subactivityname: 'FoF - Boarding | POP', activityID: newData._id, projectID: objectproID, estimateDays: 4, TempID: 4 },
                            { subactivityname: 'Tower - Boarding | POP', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                        ];

                        async function miscellenousCalling() {
                            for (let i = 0; i < dataArranew.length; i++) {

                                if (dataArranew[i].TempID === 1 && NumbersOfFlorrs < 1 || dataArranew[i].TempID === 2 && NumbersOfFlorrs < 2 || dataArranew[i].TempID === 3 && NumbersOfFlorrs < 3 || dataArranew[i].TempID === 4 && NumbersOfFlorrs < 4 || dataArranew[i].TempID === 11 && NumbersOfBasemetFloor === 0 || dataArranew[i].TempID === 22 && NumbersOfBasemetFloor === 0 || dataArranew[i].TempID === 33 && NumbersOfBasemetFloor === 0 || dataArranew[i].TempID === 44 && NumbersOfBasemetFloor === 0) {
                                    continue; // Skip this iteration
                                }

                                try {
                                    const newDatanew = new SubActivities(dataArranew[i]);
                                    const savedData = await newDatanew.save();

                                    let objID = new mongoose.Types.ObjectId(newDatanew.id)
                                    let newss = new mongoose.Types.ObjectId(newData._id)
                                    // console.log(objID);




                                    //Anuj 
                                    if (newDatanew.subactivityname === 'B1 - Boarding | POP') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Wiring point location as per the drawing ' },
                                            { subtaskdescription: 'Fan rod location as per the drawing' },
                                            { subtaskdescription: 'In case of if we have direct points on rcc ceiling wiring going along the plaster thickness' },
                                            { subtaskdescription: 'Joint fixing process & board with wall joint informed before ' },
                                            { subtaskdescription: 'Double Height working condition to be discussed initailly' },
                                            { subtaskdescription: 'If the wall is in range, the internal measurement, discuss with design team if needed' },
                                        ];

                                        async function BeamSlabReinforcementRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabReinforcementRCCfunCall();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'B1 - Boarding | POP') {

                                        const dataArranew = [
                                            { checksHeading: 'Joints Check', checksdescription: 'Check for matching of joints, closure of gaps & uniform finish' },
                                            { checksHeading: 'FInal Finish', checksdescription: 'Check for joints finish of ceiling panels.' },
                                            { checksHeading: 'Other Accessories Check', checksdescription: 'Check for the fixing of A/C grills, electrical fittings, sprinkler, smoke detector & trap doors etc. as per drawing location.' },
                                            { checksHeading: 'Final Paint Check', checksdescription: 'Check for the ceiling painting / white wash is completed. (if required.)' },
                                        ];

                                        async function GradeSlabBrickChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        GradeSlabBrickChacks();
                                    }
                                    //Anuj 
                                    if (newDatanew.subactivityname === 'B2 - Boarding | POP') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Wiring point location as per the drawing ' },
                                            { subtaskdescription: 'Fan rod location as per the drawing' },
                                            { subtaskdescription: 'In case of if we have direct points on rcc ceiling wiring going along the plaster thickness' },
                                            { subtaskdescription: 'Joint fixing process & board with wall joint informed before ' },
                                            { subtaskdescription: 'Double Height working condition to be discussed initailly' },
                                            { subtaskdescription: 'If the wall is in range, the internal measurement, discuss with design team if needed' },
                                        ];

                                        async function BeamSlabReinforcementRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabReinforcementRCCfunCall();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'B2 - Boarding | POP') {

                                        const dataArranew = [
                                            { checksHeading: 'Joints Check', checksdescription: 'Check for matching of joints, closure of gaps & uniform finish' },
                                            { checksHeading: 'FInal Finish', checksdescription: 'Check for joints finish of ceiling panels.' },
                                            { checksHeading: 'Other Accessories Check', checksdescription: 'Check for the fixing of A/C grills, electrical fittings, sprinkler, smoke detector & trap doors etc. as per drawing location.' },
                                            { checksHeading: 'Final Paint Check', checksdescription: 'Check for the ceiling painting / white wash is completed. (if required.)' },
                                        ];

                                        async function GradeSlabBrickChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        GradeSlabBrickChacks();
                                    }
                                    //Anuj 
                                    if (newDatanew.subactivityname === 'B3 - Boarding | POP') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Wiring point location as per the drawing ' },
                                            { subtaskdescription: 'Fan rod location as per the drawing' },
                                            { subtaskdescription: 'In case of if we have direct points on rcc ceiling wiring going along the plaster thickness' },
                                            { subtaskdescription: 'Joint fixing process & board with wall joint informed before ' },
                                            { subtaskdescription: 'Double Height working condition to be discussed initailly' },
                                            { subtaskdescription: 'If the wall is in range, the internal measurement, discuss with design team if needed' },
                                        ];

                                        async function BeamSlabReinforcementRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabReinforcementRCCfunCall();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'B3 - Boarding | POP') {

                                        const dataArranew = [
                                            { checksHeading: 'Joints Check', checksdescription: 'Check for matching of joints, closure of gaps & uniform finish' },
                                            { checksHeading: 'FInal Finish', checksdescription: 'Check for joints finish of ceiling panels.' },
                                            { checksHeading: 'Other Accessories Check', checksdescription: 'Check for the fixing of A/C grills, electrical fittings, sprinkler, smoke detector & trap doors etc. as per drawing location.' },
                                            { checksHeading: 'Final Paint Check', checksdescription: 'Check for the ceiling painting / white wash is completed. (if required.)' },
                                        ];

                                        async function GradeSlabBrickChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        GradeSlabBrickChacks();
                                    }
                                    //Anuj 
                                    if (newDatanew.subactivityname === 'B4 - Boarding | POP') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Wiring point location as per the drawing ' },
                                            { subtaskdescription: 'Fan rod location as per the drawing' },
                                            { subtaskdescription: 'In case of if we have direct points on rcc ceiling wiring going along the plaster thickness' },
                                            { subtaskdescription: 'Joint fixing process & board with wall joint informed before ' },
                                            { subtaskdescription: 'Double Height working condition to be discussed initailly' },
                                            { subtaskdescription: 'If the wall is in range, the internal measurement, discuss with design team if needed' },
                                        ];

                                        async function BeamSlabReinforcementRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabReinforcementRCCfunCall();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'B4 - Boarding | POP') {

                                        const dataArranew = [
                                            { checksHeading: 'Joints Check', checksdescription: 'Check for matching of joints, closure of gaps & uniform finish' },
                                            { checksHeading: 'FInal Finish', checksdescription: 'Check for joints finish of ceiling panels.' },
                                            { checksHeading: 'Other Accessories Check', checksdescription: 'Check for the fixing of A/C grills, electrical fittings, sprinkler, smoke detector & trap doors etc. as per drawing location.' },
                                            { checksHeading: 'Final Paint Check', checksdescription: 'Check for the ceiling painting / white wash is completed. (if required.)' },
                                        ];

                                        async function GradeSlabBrickChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        GradeSlabBrickChacks();
                                    }


                                    if (newDatanew.subactivityname === 'GF - Boarding | POP') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Wiring point location as per the drawing ' },
                                            { subtaskdescription: 'Fan rod location as per the drawing' },
                                            { subtaskdescription: 'In case of if we have direct points on rcc ceiling wiring going along the plaster thickness' },
                                            { subtaskdescription: 'Joint fixing process & board with wall joint informed before ' },
                                            { subtaskdescription: 'Double Height working condition to be discussed initailly' },
                                            { subtaskdescription: 'If the wall is in range, the internal measurement, discuss with design team if needed' },
                                        ];

                                        async function BeamSlabReinforcementRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabReinforcementRCCfunCall();
                                    }


                                    if (newDatanew.subactivityname === "GF - Boarding | POP") {


                                        if (FlaseCeilingTyHNR === "GYPSUM BOARD") {
                                            var dataArASWEDAS = [
                                                { materailname: 'Gypsum Board', materailquantity: materlID.FCGB_GFBoardingPOPGypsumBoardQuantity, materailUnit: 'SQM' },
                                                { materailname: 'Joint Filler', materailquantity: materlID.FCGB_GFBoardingPOPJointFillerQuantity, materailUnit: 'KG' },
                                                { materailname: 'Joint Finisher', materailquantity: materlID.FCGB_GFBoardingPOPJointFinisherQuantity, materailUnit: 'KG' },
                                                { materailname: 'Joint Tape Roll', materailquantity: materlID.FCGB_GFBoardingPOPJointTapeRollQuantity, materailUnit: 'ROLL' },
                                                { materailname: 'Primer', materailquantity: materlID.FCGB_GFBoardingPOPPrimerQuantity, materailUnit: 'LITER' }
                                            ];
                                        } else {
                                            var dataArASWEDAS = [
                                                { materailname: 'POP', materailquantity: materlID.FCPOP_GFBoardingPOPPOPQuantity, materailUnit: 'BAG - 20 kg' },
                                                { materailname: 'Wire Mesh', materailquantity: materlID.FCPOP_GFBoardingPOPWireMeshQuantity, materailUnit: 'BUNDEL' },
                                            ]
                                        }



                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArASWEDAS.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArASWEDAS[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }




                                    if (newDatanew.subactivityname === "GF - Boarding | POP") {

                                        const dataArranew = [
                                            {},
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Boa. | Mesh', NormalHeadingThree: 'Light Point', NormalHeadingfoure: 'Joint|Finish' },
                                            {},
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }







                                    if (newDatanew.subactivityname === "FF - Boarding | POP") {



                                        if (FlaseCeilingTyHNR === "GYPSUM BOARD") {
                                            var dataArraSWEDQAZCnew = [
                                                { materailname: 'Gypsum Board', materailquantity: materlID.FCGB_FFBoardingPOPGypsumBoardQuantity, materailUnit: 'SQM' },
                                                { materailname: 'Joint Filler', materailquantity: materlID.FCGB_FFBoardingPOPJointFillerQuantity, materailUnit: 'KG' },
                                                { materailname: 'Joint Finisher', materailquantity: materlID.FCGB_FFBoardingPOPJointFinisherQuantity, materailUnit: 'KG' },
                                                { materailname: 'Joint Tape Roll', materailquantity: materlID.FCGB_FFBoardingPOPJointTapeRollQuantity, materailUnit: 'ROLL' },
                                                { materailname: 'Primer', materailquantity: materlID.FCGB_FFBoardingPOPPrimerQuantity, materailUnit: 'LITER' }
                                            ];
                                        } else {
                                            var dataArraSWEDQAZCnew = [
                                                { materailname: 'POP', materailquantity: materlID.FCPOP_FFBoardingPOPPOPQuantity, materailUnit: 'BAG - 20 kg' },
                                                { materailname: 'Wire Mesh', materailquantity: materlID.FCPOP_FFBoardingPOPWireMeshQuantity, materailUnit: 'BUNDEL' },
                                            ]
                                        }



                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArraSWEDQAZCnew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArraSWEDQAZCnew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === "FF - Boarding | POP") {

                                        const dataArranew = [
                                            {},
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Boa. | Mesh', NormalHeadingThree: 'Light Point', NormalHeadingfoure: 'Joint|Finish' },
                                            {},
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }

                                    if (newDatanew.subactivityname === "SF - Boarding | POP") {


                                        if (FlaseCeilingTyHNR === "GYPSUM BOARD") {
                                            var dataArraneLKHGBBw = [
                                                { materailname: 'Gypsum Board', materailquantity: materlID.FCGB_SFBoardingPOPGypsumBoardQuantity, materailUnit: 'SQM' },
                                                { materailname: 'Joint Filler', materailquantity: materlID.FCGB_SFBoardingPOPJointFillerQuantity, materailUnit: 'KG' },
                                                { materailname: 'Joint Finisher', materailquantity: materlID.FCGB_SFBoardingPOPJointFinisherQuantity, materailUnit: 'KG' },
                                                { materailname: 'Joint Tape Roll', materailquantity: materlID.FCGB_SFBoardingPOPJointTapeRollQuantity, materailUnit: 'ROLL' },
                                                { materailname: 'Primer', materailquantity: materlID.FCGB_SFBoardingPOPPrimerQuantity, materailUnit: 'LITER' }
                                            ];
                                        } else {
                                            var dataArraneLKHGBBw = [
                                                { materailname: 'POP', materailquantity: materlID.FCPOP_SFBoardingPOPPOPQuantity, materailUnit: 'BAG - 20 kg' },
                                                { materailname: 'Wire Mesh', materailquantity: materlID.FCPOP_SFBoardingPOPWireMeshQuantity, materailUnit: 'BUNDEL' },
                                            ]
                                        }


                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArraneLKHGBBw.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArraneLKHGBBw[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === "SF - Boarding | POP") {

                                        const dataArranew = [
                                            {},
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Boa. | Mesh', NormalHeadingThree: 'Light Point', NormalHeadingfoure: 'Joint|Finish' },
                                            {},
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }

                                    if (newDatanew.subactivityname === "TF - Boarding | POP") {

                                        if (FlaseCeilingTyHNR === "GYPSUM BOARD") {
                                            var dataArrAPLKDFGanew = [
                                                { materailname: 'Gypsum Board', materailquantity: materlID.FCGB_TFBoardingPOPGypsumBoardQuantity, materailUnit: 'SQM' },
                                                { materailname: 'Joint Filler', materailquantity: materlID.FCGB_TFBoardingPOPJointFillerQuantity, materailUnit: 'KG' },
                                                { materailname: 'Joint Finisher', materailquantity: materlID.FCGB_TFBoardingPOPJointFinisherQuantity, materailUnit: 'KG' },
                                                { materailname: 'Joint Tape Roll', materailquantity: materlID.FCGB_TFBoardingPOPJointTapeRollQuantity, materailUnit: 'ROLL' },
                                                { materailname: 'Primer', materailquantity: materlID.FCGB_TFBoardingPOPPrimerQuantity, materailUnit: 'LITER' }
                                            ];
                                        } else {
                                            var dataArrAPLKDFGanew = [
                                                { materailname: 'POP', materailquantity: materlID.FCPOP_TFBoardingPOPPOPQuantity, materailUnit: 'BAG - 20 kg' },
                                                { materailname: 'Wire Mesh', materailquantity: materlID.FCPOP_TFBoardingPOPWireMeshQuantity, materailUnit: 'BUNDEL' },
                                            ]
                                        }


                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArrAPLKDFGanew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArrAPLKDFGanew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === "TF - Boarding | POP") {

                                        const dataArranew = [
                                            {},
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Boa. | Mesh', NormalHeadingThree: 'Light Point', NormalHeadingfoure: 'Joint|Finish' },
                                            {},
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }



                                    if (newDatanew.subactivityname === "FoF - Boarding | POP") {

                                        if (FlaseCeilingTyHNR === "GYPSUM BOARD") {
                                            var daQWyyhgtaArranew = [
                                                { materailname: 'Gypsum Board', materailquantity: materlID.FCGB_FoFBoardingPOPGypsumBoardQuantity, materailUnit: 'SQM' },
                                                { materailname: 'Joint Filler', materailquantity: materlID.FCGB_FoFBoardingPOPJointFillerQuantity, materailUnit: 'KG' },
                                                { materailname: 'Joint Finisher', materailquantity: materlID.FCGB_FoFBoardingPOPJointFinisherQuantity, materailUnit: 'KG' },
                                                { materailname: 'Joint Tape Roll', materailquantity: materlID.FCGB_FoFBoardingPOPJointTapeRollQuantity, materailUnit: 'ROLL' },
                                                { materailname: 'Primer', materailquantity: materlID.FCGB_FoFBoardingPOPPrimerQuantity, materailUnit: 'LITER' }
                                            ];
                                        } else {
                                            var daQWyyhgtaArranew = [
                                                { materailname: 'POP', materailquantity: materlID.FCPOP_FoFBoardingPOPPOPQuantity, materailUnit: 'BAG - 20 kg' },
                                                { materailname: 'Wire Mesh', materailquantity: materlID.FCPOP_FoFBoardingPOPWireMeshQuantity, materailUnit: 'BUNDEL' },
                                            ]
                                        }

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < daQWyyhgtaArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(daQWyyhgtaArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === "FoF - Boarding | POP") {

                                        const dataArranew = [
                                            {},
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Boa. | Mesh', NormalHeadingThree: 'Light Point', NormalHeadingfoure: 'Joint|Finish' },
                                            {},
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }



                                    if (newDatanew.subactivityname === "Tower - Boarding | POP") {

                                        if (FlaseCeilingTyHNR === "GYPSUM BOARD") {
                                            var dataTTTTTArranew = [
                                                { materailname: 'Gypsum Board', materailquantity: materlID.FCGB_TowerBoardingPOPGypsumBoardQuantity, materailUnit: 'SQM' },
                                                { materailname: 'Joint Filler', materailquantity: materlID.FCGB_TowerBoardingPOPJointFillerQuantity, materailUnit: 'KG' },
                                                { materailname: 'Joint Finisher', materailquantity: materlID.FCGB_TowerBoardingPOPJointFinisherQuantity, materailUnit: 'KG' },
                                                { materailname: 'Joint Tape Roll', materailquantity: materlID.FCGB_TowerBoardingPOPJointTapeRollQuantity, materailUnit: 'ROLL' },
                                                { materailname: 'Primer', materailquantity: materlID.FCGB_TowerBoardingPOPPrimerQuantity, materailUnit: 'LITER' }
                                            ];
                                        } else {
                                            var dataTTTTTArranew = [
                                                { materailname: 'POP', materailquantity: materlID.FCPOP_TowerBoardingPOPPOPQuantity, materailUnit: 'BAG - 20 kg' },
                                                { materailname: 'Wire Mesh', materailquantity: materlID.FCPOP_TowerBoardingPOPWireMeshQuantity, materailUnit: 'BUNDEL' },
                                            ]
                                        }



                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataTTTTTArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataTTTTTArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }

                                    if (newDatanew.subactivityname === "Tower - Boarding | POP") {

                                        const dataArranew = [
                                            {},
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Boa. | Mesh', NormalHeadingThree: 'Light Point', NormalHeadingfoure: 'Joint|Finish' },
                                            {},
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }




                                    if (newDatanew.subactivityname === 'GF - Boarding | POP') {

                                        const dataArranew = [
                                            { checksHeading: 'Joints Check', checksdescription: 'Check for matching of joints, closure of gaps & uniform finish' },
                                            { checksHeading: 'FInal Finish', checksdescription: 'Check for joints finish of ceiling panels.' },
                                            { checksHeading: 'Other Accessories Check', checksdescription: 'Check for the fixing of A/C grills, electrical fittings, sprinkler, smoke detector & trap doors etc. as per drawing location.' },
                                            { checksHeading: 'Final Paint Check', checksdescription: 'Check for the ceiling painting / white wash is completed. (if required.)' },
                                        ];

                                        async function GradeSlabBrickChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        GradeSlabBrickChacks();
                                    }
                                    //Anuj 
                                    if (newDatanew.subactivityname === 'FF - Boarding | POP') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Wiring point location as per the drawing ' },
                                            { subtaskdescription: 'Fan rod location as per the drawing' },
                                            { subtaskdescription: 'In case of if we have direct points on rcc ceiling wiring going along the plaster thickness' },
                                            { subtaskdescription: 'Joint fixing process & board with wall joint informed before ' },
                                            { subtaskdescription: 'Double Height working condition to be discussed initailly' },
                                            { subtaskdescription: 'If the wall is in range, the internal measurement, discuss with design team if needed' },
                                        ];

                                        async function BeamSlabReinforcementRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabReinforcementRCCfunCall();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'FF - Boarding | POP') {

                                        const dataArranew = [
                                            { checksHeading: 'Joints Check', checksdescription: 'Check for matching of joints, closure of gaps & uniform finish' },
                                            { checksHeading: 'FInal Finish', checksdescription: 'Check for joints finish of ceiling panels.' },
                                            { checksHeading: 'Other Accessories Check', checksdescription: 'Check for the fixing of A/C grills, electrical fittings, sprinkler, smoke detector & trap doors etc. as per drawing location.' },
                                            { checksHeading: 'Final Paint Check', checksdescription: 'Check for the ceiling painting / white wash is completed. (if required.)' },
                                        ];

                                        async function GradeSlabBrickChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        GradeSlabBrickChacks();
                                    }
                                    //Anuj 
                                    if (newDatanew.subactivityname === 'SF - Boarding | POP') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Wiring point location as per the drawing ' },
                                            { subtaskdescription: 'Fan rod location as per the drawing' },
                                            { subtaskdescription: 'In case of if we have direct points on rcc ceiling wiring going along the plaster thickness' },
                                            { subtaskdescription: 'Joint fixing process & board with wall joint informed before ' },
                                            { subtaskdescription: 'Double Height working condition to be discussed initailly' },
                                            { subtaskdescription: 'If the wall is in range, the internal measurement, discuss with design team if needed' },
                                        ];

                                        async function BeamSlabReinforcementRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabReinforcementRCCfunCall();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'SF - Boarding | POP') {

                                        const dataArranew = [
                                            { checksHeading: 'Joints Check', checksdescription: 'Check for matching of joints, closure of gaps & uniform finish' },
                                            { checksHeading: 'FInal Finish', checksdescription: 'Check for joints finish of ceiling panels.' },
                                            { checksHeading: 'Other Accessories Check', checksdescription: 'Check for the fixing of A/C grills, electrical fittings, sprinkler, smoke detector & trap doors etc. as per drawing location.' },
                                            { checksHeading: 'Final Paint Check', checksdescription: 'Check for the ceiling painting / white wash is completed. (if required.)' },
                                        ];

                                        async function GradeSlabBrickChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        GradeSlabBrickChacks();
                                    }
                                    //Anuj 
                                    if (newDatanew.subactivityname === 'TF - Boarding | POP') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Wiring point location as per the drawing ' },
                                            { subtaskdescription: 'Fan rod location as per the drawing' },
                                            { subtaskdescription: 'In case of if we have direct points on rcc ceiling wiring going along the plaster thickness' },
                                            { subtaskdescription: 'Joint fixing process & board with wall joint informed before ' },
                                            { subtaskdescription: 'Double Height working condition to be discussed initailly' },
                                            { subtaskdescription: 'If the wall is in range, the internal measurement, discuss with design team if needed' },
                                        ];

                                        async function BeamSlabReinforcementRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabReinforcementRCCfunCall();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'TF - Boarding | POP') {

                                        const dataArranew = [
                                            { checksHeading: 'Joints Check', checksdescription: 'Check for matching of joints, closure of gaps & uniform finish' },
                                            { checksHeading: 'FInal Finish', checksdescription: 'Check for joints finish of ceiling panels.' },
                                            { checksHeading: 'Other Accessories Check', checksdescription: 'Check for the fixing of A/C grills, electrical fittings, sprinkler, smoke detector & trap doors etc. as per drawing location.' },
                                            { checksHeading: 'Final Paint Check', checksdescription: 'Check for the ceiling painting / white wash is completed. (if required.)' },
                                        ];

                                        async function GradeSlabBrickChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        GradeSlabBrickChacks();
                                    }
                                    //Anuj 
                                    if (newDatanew.subactivityname === 'FoF - Boarding | POP') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Wiring point location as per the drawing ' },
                                            { subtaskdescription: 'Fan rod location as per the drawing' },
                                            { subtaskdescription: 'In case of if we have direct points on rcc ceiling wiring going along the plaster thickness' },
                                            { subtaskdescription: 'Joint fixing process & board with wall joint informed before ' },
                                            { subtaskdescription: 'Double Height working condition to be discussed initailly' },
                                            { subtaskdescription: 'If the wall is in range, the internal measurement, discuss with design team if needed' },
                                        ];

                                        async function BeamSlabReinforcementRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabReinforcementRCCfunCall();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'FoF - Boarding | POP') {

                                        const dataArranew = [
                                            { checksHeading: 'Joints Check', checksdescription: 'Check for matching of joints, closure of gaps & uniform finish' },
                                            { checksHeading: 'FInal Finish', checksdescription: 'Check for joints finish of ceiling panels.' },
                                            { checksHeading: 'Other Accessories Check', checksdescription: 'Check for the fixing of A/C grills, electrical fittings, sprinkler, smoke detector & trap doors etc. as per drawing location.' },
                                            { checksHeading: 'Final Paint Check', checksdescription: 'Check for the ceiling painting / white wash is completed. (if required.)' },
                                        ];

                                        async function GradeSlabBrickChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        GradeSlabBrickChacks();
                                    }
                                    //Anuj 
                                    if (newDatanew.subactivityname === 'Tower - Boarding | POP') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Wiring point location as per the drawing ' },
                                            { subtaskdescription: 'Fan rod location as per the drawing' },
                                            { subtaskdescription: 'In case of if we have direct points on rcc ceiling wiring going along the plaster thickness' },
                                            { subtaskdescription: 'Joint fixing process & board with wall joint informed before ' },
                                            { subtaskdescription: 'Double Height working condition to be discussed initailly' },
                                            { subtaskdescription: 'If the wall is in range, the internal measurement, discuss with design team if needed' },
                                        ];

                                        async function BeamSlabReinforcementRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabReinforcementRCCfunCall();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'Tower - Boarding | POP') {

                                        const dataArranew = [
                                            { checksHeading: 'Joints Check', checksdescription: 'Check for matching of joints, closure of gaps & uniform finish' },
                                            { checksHeading: 'FInal Finish', checksdescription: 'Check for joints finish of ceiling panels.' },
                                            { checksHeading: 'Other Accessories Check', checksdescription: 'Check for the fixing of A/C grills, electrical fittings, sprinkler, smoke detector & trap doors etc. as per drawing location.' },
                                            { checksHeading: 'Final Paint Check', checksdescription: 'Check for the ceiling painting / white wash is completed. (if required.)' },
                                        ];

                                        async function GradeSlabBrickChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        GradeSlabBrickChacks();
                                    }



                                    await Activities.updateOne(
                                        { _id: newss },
                                        {
                                            $push: {
                                                subactivitiesID: objID
                                            }
                                        }
                                    )
                                    // console.log('Data saved:', savedData);
                                } catch (error) {
                                    // console.error('Error saving data:', error);
                                }
                            }
                        }
                        miscellenousCalling();
                    }









                    if (newData.categoryname === "Internal White Wash Work") {
                        const dataArranew = [
                            { subactivityname: 'B1 - Putty Work & Primer Work', activityID: newData._id, projectID: objectproID, estimateDays: b1PuttyWorkPrimerWork_ESTD, TempID: 11 },
                            { subactivityname: 'B2 - Putty Work & Primer Work', activityID: newData._id, projectID: objectproID, estimateDays: b2PuttyWorkPrimerWork_ESTD, TempID: 22 },
                            { subactivityname: 'B3 - Putty Work & Primer Work', activityID: newData._id, projectID: objectproID, estimateDays: b3PuttyWorkPrimerWork_ESTD, TempID: 33 },
                            { subactivityname: 'B4 - Putty Work & Primer Work', activityID: newData._id, projectID: objectproID, estimateDays: b4PuttyWorkPrimerWork_ESTD, TempID: 44 },
                            { subactivityname: 'GF - Putty Work & Primer Work', activityID: newData._id, projectID: objectproID, estimateDays: gfPuttyWorkPrimerWork_ESTD },
                            { subactivityname: 'FF - Putty Work & Primer Work', activityID: newData._id, projectID: objectproID, estimateDays: ffPuttyWorkPrimerWork_ESTD, TempID: 1 },
                            { subactivityname: 'SF - Putty Work & Primer Work', activityID: newData._id, projectID: objectproID, estimateDays: sfPuttyWorkPrimerWork_ESTD, TempID: 2 },
                            { subactivityname: 'TF - Putty Work & Primer Work', activityID: newData._id, projectID: objectproID, estimateDays: tfPuttyWorkPrimerWork_ESTD, TempID: 3 },
                            { subactivityname: 'FoF - Putty Work & Primer Work', activityID: newData._id, projectID: objectproID, estimateDays: fofPuttyWorkPrimerWork_ESTD, TempID: 4 },
                            { subactivityname: 'Tower - Putty Work & Primer Work', activityID: newData._id, projectID: objectproID, estimateDays: towerPuttyWorkPrimerWork_ESTD },
                            { subactivityname: 'Balcony - PVC', activityID: newData._id, projectID: objectproID, estimateDays: balconyPVC_ESTD },
                            { subactivityname: 'Parking - PVC', activityID: newData._id, projectID: objectproID, estimateDays: parkingPVC_ESTD },
                            { subactivityname: 'Washroom - PVC', activityID: newData._id, projectID: objectproID, estimateDays: washroomPVC_ESTD }
                        ];

                        async function miscellenousCalling() {
                            for (let i = 0; i < dataArranew.length; i++) {
                                if (dataArranew[i].TempID === 1 && NumbersOfFlorrs < 1 || dataArranew[i].TempID === 2 && NumbersOfFlorrs < 2 || dataArranew[i].TempID === 3 && NumbersOfFlorrs < 3 || dataArranew[i].TempID === 4 && NumbersOfFlorrs < 4 || dataArranew[i].TempID === 11 && NumbersOfBasemetFloor === 0 || dataArranew[i].TempID === 22 && NumbersOfBasemetFloor === 0 || dataArranew[i].TempID === 33 && NumbersOfBasemetFloor === 0 || dataArranew[i].TempID === 44 && NumbersOfBasemetFloor === 0) {
                                    continue; // Skip this iteration
                                }
                                try {
                                    const newDatanew = new SubActivities(dataArranew[i]);
                                    const savedData = await newDatanew.save();

                                    let objID = new mongoose.Types.ObjectId(newDatanew.id)
                                    let newss = new mongoose.Types.ObjectId(newData._id)



                                    if (newDatanew.subactivityname === "Balcony - PVC") {

                                        const dataTCVFDArranew = [
                                            { materailname: 'PVC Baord', materailquantity: materlID.FCPVC_BalconyPVCPVCBoardQuantity, materailUnit: 'SQM' },
                                            { materailname: 'Screw', materailquantity: materlID.FCPVC_BalconyPVCScrewQuantity, materailUnit: 'NOS.' }
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataTCVFDArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataTCVFDArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === "Parking - PVC") {

                                        const dataTCVFDArranew = [
                                            { materailname: 'PVC Baord', materailquantity: materlID.FCPVC_ParkingPVCPVCBoardQuantity, materailUnit: 'SQM' },
                                            { materailname: 'Screw', materailquantity: materlID.FCPVC_ParkingPVCScrewQuantity, materailUnit: 'NOS.' }
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataTCVFDArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataTCVFDArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }



                                    if (newDatanew.subactivityname === "Washroom - PVC") {

                                        const dataTCVFDArranew = [
                                            { materailname: 'PVC Baord', materailquantity: materlID.FCPVC_WashroomPVCPVCBoardQuantity, materailUnit: 'SQM' },
                                            { materailname: 'Screw', materailquantity: materlID.FCPVC_WashroomPVCScrewQuantity, materailUnit: 'NOS.' }
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataTCVFDArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataTCVFDArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === "GF - Putty Work & Primer Work") {

                                        const dataTCVFDArranew = [
                                            { materailname: 'Putty - 02 Coat', materailquantity: materlID.GFPuttyPrimerWorkPutty02CoatQuantity, materailUnit: '40 KG BAG' },
                                            { materailname: 'Primer - 01 Coat', materailquantity: materlID.GFPuttyPrimerWorkPrimer01CoatQuantity, materailUnit: 'LITRE' }
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataTCVFDArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataTCVFDArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === "GF - Putty Work & Primer Work") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Surface Prep.', headingforshortingTwo: 'First Coat', headingforshortingThree: 'Second Coat' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Plaster Fini.', NormalHeadingThree: 'Line & Lvl.', NormalHeadingfoure: 'Dust | Wall' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Putty Coat', NormalHeadingThree: 'Undulation', NormalHeadingfoure: 'Corners' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Putty Coat', NormalHeadingThree: 'Undulation', NormalHeadingfoure: 'Corners' },
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }

                                    if (newDatanew.subactivityname === "FF - Putty Work & Primer Work") {

                                        const dataTCVFDArranew = [
                                            { materailname: 'Putty - 02 Coat', materailquantity: materlID.FFPuttyPrimerWorkPutty02CoatQuantity, materailUnit: '40 KG BAG' },
                                            { materailname: 'Primer - 01 Coat', materailquantity: materlID.FFPuttyPrimerWorkPrimer01CoatQuantity, materailUnit: 'LITRE' }
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataTCVFDArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataTCVFDArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }

                                    if (newDatanew.subactivityname === "FF - Putty Work & Primer Work") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Surface Prep.', headingforshortingTwo: 'First Coat', headingforshortingThree: 'Second Coat' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Plaster Fini.', NormalHeadingThree: 'Line & Lvl.', NormalHeadingfoure: 'Dust | Wall' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Putty Coat', NormalHeadingThree: 'Undulation', NormalHeadingfoure: 'Corners' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Putty Coat', NormalHeadingThree: 'Undulation', NormalHeadingfoure: 'Corners' },
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }

                                    if (newDatanew.subactivityname === "SF - Putty Work & Primer Work") {

                                        const dataTCVFDArranew = [
                                            { materailname: 'Putty - 02 Coat', materailquantity: materlID.SFPuttyPrimerWorkPutty02CoatQuantity, materailUnit: '40 KG BAG' },
                                            { materailname: 'Primer - 01 Coat', materailquantity: materlID.SFPuttyPrimerWorkPrimer01CoatQuantity, materailUnit: 'LITRE' }
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataTCVFDArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataTCVFDArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }

                                    if (newDatanew.subactivityname === "SF - Putty Work & Primer Work") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Surface Prep.', headingforshortingTwo: 'First Coat', headingforshortingThree: 'Second Coat' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Plaster Fini.', NormalHeadingThree: 'Line & Lvl.', NormalHeadingfoure: 'Dust | Wall' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Putty Coat', NormalHeadingThree: 'Undulation', NormalHeadingfoure: 'Corners' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Putty Coat', NormalHeadingThree: 'Undulation', NormalHeadingfoure: 'Corners' },
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }


                                    if (newDatanew.subactivityname === "TF - Putty Work & Primer Work") {

                                        const dataTCVFDArranew = [
                                            { materailname: 'Putty - 02 Coat', materailquantity: materlID.TFPuttyPrimerWorkPutty02CoatQuantity, materailUnit: '40 KG BAG' },
                                            { materailname: 'Primer - 01 Coat', materailquantity: materlID.TFPuttyPrimerWorkPrimer01CoatQuantity, materailUnit: 'LITRE' }
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataTCVFDArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataTCVFDArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === "TF - Putty Work & Primer Work") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Surface Prep.', headingforshortingTwo: 'First Coat', headingforshortingThree: 'Second Coat' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Plaster Fini.', NormalHeadingThree: 'Line & Lvl.', NormalHeadingfoure: 'Dust | Wall' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Putty Coat', NormalHeadingThree: 'Undulation', NormalHeadingfoure: 'Corners' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Putty Coat', NormalHeadingThree: 'Undulation', NormalHeadingfoure: 'Corners' },
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }
                                    if (newDatanew.subactivityname === "FoF - Putty Work & Primer Work") {

                                        const dataTCVFDArranew = [
                                            { materailname: 'Putty - 02 Coat', materailquantity: materlID.FoFPuttyPrimerWorkPutty02CoatQuantity, materailUnit: '40 KG BAG' },
                                            { materailname: 'Primer - 01 Coat', materailquantity: materlID.FoFPuttyPrimerWorkPrimer01CoatQuantity, materailUnit: 'LITRE' }
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataTCVFDArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataTCVFDArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }



                                    if (newDatanew.subactivityname === "FoF - Putty Work & Primer Work") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Surface Prep.', headingforshortingTwo: 'First Coat', headingforshortingThree: 'Second Coat' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Plaster Fini.', NormalHeadingThree: 'Line & Lvl.', NormalHeadingfoure: 'Dust | Wall' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Putty Coat', NormalHeadingThree: 'Undulation', NormalHeadingfoure: 'Corners' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Putty Coat', NormalHeadingThree: 'Undulation', NormalHeadingfoure: 'Corners' },
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }
                                    if (newDatanew.subactivityname === "Tower - Putty Work & Primer Work") {

                                        const dataTCVFDArranew = [
                                            { materailname: 'Putty - 02 Coat', materailquantity: materlID.TowerPuttyPrimerWorkPutty02CoatQuantity, materailUnit: '40 KG BAG' },
                                            { materailname: 'Primer - 01 Coat', materailquantity: materlID.TowerPuttyPrimerWorkPrimer01CoatQuantity, materailUnit: 'LITRE' }
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataTCVFDArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataTCVFDArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }

                                    if (newDatanew.subactivityname === "Tower - Putty Work & Primer Work") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Surface Prep.', headingforshortingTwo: 'First Coat', headingforshortingThree: 'Second Coat' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Plaster Fini.', NormalHeadingThree: 'Line & Lvl.', NormalHeadingfoure: 'Dust | Wall' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Putty Coat', NormalHeadingThree: 'Undulation', NormalHeadingfoure: 'Corners' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Putty Coat', NormalHeadingThree: 'Undulation', NormalHeadingfoure: 'Corners' },
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }

                                    await Activities.updateOne(
                                        { _id: newss },
                                        {
                                            $push: {
                                                subactivitiesID: objID
                                            }
                                        }
                                    )
                                    // console.log('Data saved:', savedData);
                                } catch (error) {
                                    // console.error('Error saving data:', error);
                                }
                            }
                        }
                        miscellenousCalling();
                    }







                    if (newData.categoryname === "Tiling Work") {

                        var TerraceAreaFloorinASD = "CobaTilling";

                        const dataArranew = [
                            { subactivityname: 'B1 - Washroom Tiling', activityID: newData._id, projectID: objectproID, estimateDays: 4, TempID: 11 },
                            { subactivityname: 'B2 - Washroom Tiling', activityID: newData._id, projectID: objectproID, estimateDays: 4, TempID: 22 },
                            { subactivityname: 'B3 - Washroom Tiling', activityID: newData._id, projectID: objectproID, estimateDays: 4, TempID: 33 },
                            { subactivityname: 'B4 - Washroom Tiling', activityID: newData._id, projectID: objectproID, estimateDays: 4, TempID: 44 },
                            { subactivityname: 'GF - Washroom Tiling', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                            { subactivityname: 'FF - Washroom Tiling', activityID: newData._id, projectID: objectproID, estimateDays: 4, TempID: 1 },
                            { subactivityname: 'SF - Washroom Tiling', activityID: newData._id, projectID: objectproID, estimateDays: 4, TempID: 2 },
                            { subactivityname: 'TF - Washroom Tiling', activityID: newData._id, projectID: objectproID, estimateDays: 4, TempID: 3 },
                            { subactivityname: 'FoF - Washroom Tiling', activityID: newData._id, projectID: objectproID, estimateDays: 4, TempID: 4 },
                            { subactivityname: 'Tower - Washroom Tiling', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                            { subactivityname: 'B1 - Floor Tiling', activityID: newData._id, projectID: objectproID, estimateDays: b1FloorTiling_ESTD, TempID: 11 },
                            { subactivityname: 'B2 - Floor Tiling', activityID: newData._id, projectID: objectproID, estimateDays: b2FloorTiling_ESTD, TempID: 22 },
                            { subactivityname: 'B3 - Floor Tiling', activityID: newData._id, projectID: objectproID, estimateDays: b3FloorTiling_ESTD, TempID: 33 },
                            { subactivityname: 'B4 - Floor Tiling', activityID: newData._id, projectID: objectproID, estimateDays: b4FloorTiling_ESTD, TempID: 44 },
                            { subactivityname: 'GF - Floor Tiling', activityID: newData._id, projectID: objectproID, estimateDays: gfFloorTiling_ESTD },
                            { subactivityname: 'FF - Floor Tiling', activityID: newData._id, projectID: objectproID, estimateDays: ffFloorTiling_ESTD, TempID: 1 },
                            { subactivityname: 'SF - Floor Tiling', activityID: newData._id, projectID: objectproID, estimateDays: sfFloorTiling_ESTD, TempID: 2 },
                            { subactivityname: 'TF - Floor Tiling', activityID: newData._id, projectID: objectproID, estimateDays: tfFloorTiling_ESTD, TempID: 3 },
                            { subactivityname: 'FoF - Floor Tiling', activityID: newData._id, projectID: objectproID, estimateDays: fofFloorTiling_ESTD, TempID: 4 },
                            { subactivityname: 'Tower - Floor Tiling', activityID: newData._id, projectID: objectproID, estimateDays: towerFloorTiling_ESTD },
                            { subactivityname: 'Other Area Vertical Wall', activityID: newData._id, projectID: objectproID, estimateDays: otherAreaVerticalWall_ESTD },
                            { subactivityname: 'Platform', activityID: newData._id, projectID: objectproID, estimateDays: platform_ESTD },
                            { subactivityname: 'Granite Running', activityID: newData._id, projectID: objectproID, estimateDays: graniteRunning_ESTD },
                            { subactivityname: 'Terrace Area Flooring', activityID: newData._id, projectID: objectproID, estimateDays: terraceAreaFlooring_ESTD },
                            { subactivityname: 'Tower Area Flooring', activityID: newData._id, projectID: objectproID, estimateDays: towerAreaFlooring_ESTD },
                            { subactivityname: 'Staircase', activityID: newData._id, projectID: objectproID, estimateDays: staircase_ESTD },
                            { subactivityname: 'Any Tank or Other Area', activityID: newData._id, projectID: objectproID, estimateDays: anyTankOrOtherArea_ESTD },
                            { subactivityname: 'Ramp - Entrace Level', activityID: newData._id, projectID: objectproID, estimateDays: rampEntranceLevel_ESTD }
                        ];

                        async function miscellenousCalling() {
                            for (let i = 0; i < dataArranew.length; i++) {
                                if (dataArranew[i].TempID === 1 && NumbersOfFlorrs < 1 || dataArranew[i].TempID === 2 && NumbersOfFlorrs < 2 || dataArranew[i].TempID === 3 && NumbersOfFlorrs < 3 || dataArranew[i].TempID === 4 && NumbersOfFlorrs < 4 || dataArranew[i].TempID === 11 && NumbersOfBasemetFloor === 0 || dataArranew[i].TempID === 22 && NumbersOfBasemetFloor === 0 || dataArranew[i].TempID === 33 && NumbersOfBasemetFloor === 0 || dataArranew[i].TempID === 44 && NumbersOfBasemetFloor === 0) {
                                    continue; // Skip this iteration
                                }
                                try {
                                    const newDatanew = new SubActivities(dataArranew[i]);
                                    const savedData = await newDatanew.save();

                                    let objID = new mongoose.Types.ObjectId(newDatanew.id)
                                    let newss = new mongoose.Types.ObjectId(newData._id)
                                    // console.log(objID);


                                    //Anuj
                                    if (newDatanew.subactivityname === 'B1 - Floor Tiling') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Arrange the latest GFC Drawings at Site' },
                                            { subtaskdescription: 'Ask the contractor for cleaning and surface preparation for tiling' },
                                            { subtaskdescription: 'Confirm the availability of clearance from Brick and plaster department to start the work.' },
                                            { subtaskdescription: 'Confirm the availability of clearance from Plumbing and Electrical department to proceed tiling works.' },
                                            { subtaskdescription: 'Ask the contractor to arrange the required tools at site' },
                                            { subtaskdescription: 'Arrange the quantity of tiles required to complete the work available.Code and Brand to be checked' },
                                            { subtaskdescription: 'Explain the contractor about the pattern of laying the tiles' },
                                            { subtaskdescription: 'Ask the purchase manager to arrange the materials at site' },
                                            { subtaskdescription: 'Assign the contractor for the work' },
                                            { subtaskdescription: 'Make the electricity and Water arrangements at the site' },
                                            { subtaskdescription: 'Arrange the adhesive,grouting compound and silicon a site' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the contractor to fix the height indicators properly' },
                                            { subtaskdescription: 'Ask the contractor to cure the ceramic tiles before placing when fiing done using cement mortar' },
                                            { subtaskdescription: 'Ask the contractor to maintain the line and level of skirting' },
                                            { subtaskdescription: 'Ask the contractor to maintain the slopes as per the specifications' },
                                            { subtaskdescription: 'Ask the contractor that the corners of the tiles should be matched' },
                                            { subtaskdescription: 'Ask the contractor to remove the adhesive from the tile surface' },
                                            { subtaskdescription: 'Ask the contractor to gently tap the tiles on the mortar bed for the better settlement' },
                                            { subtaskdescription: 'Ask the contractor to do grouting after 24 hrs of tiling' },
                                            { subtaskdescription: 'Ask the contractor to properly alignt the joints of the tiles' },
                                            { subtaskdescription: 'Ask the contractor for barricading of tile area and covering the tiles with plastic sheets' },
                                        ];

                                        async function FlooringfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        FlooringfunCall();
                                    }
                                    if (newDatanew.subactivityname === 'B1 - Floor Tiling') {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Pattern check', checksdescription: 'Are the tile laying pattern, specifications and tile grout color according to approved drawing?' },
                                            { checksHeading: 'Adhesive check', checksdescription: 'Is the open life of spread adhesive exceeding the recommended limits?' },
                                            { checksHeading: 'Adhesive check', checksdescription: 'Is the tile adhesive being used up within its pot life?' },
                                            { checksHeading: 'Tapping check', checksdescription: 'Is the freshly laid tiles are tapped gently, is there any settlement?' },
                                            { checksHeading: 'Joints check', checksdescription: 'Are the joints properly aligned?' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Excessive adhesive / cement coming out of tile joints have been cleaned properly.' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Cleaning Check', checksdescription: 'The surface on which screed to be laid made moist, free from dust and other contaminations.' },
                                            { checksHeading: 'Undulation Check', checksdescription: 'Are there any undulations observed in surface level?' },
                                            { checksHeading: 'Height indicators Check', checksdescription: 'Button marks / height indicators fixed properly.' },
                                            { checksHeading: 'Side runners check', checksdescription: 'Side runners have been placed as per requirements.' },
                                            { checksHeading: 'Screeding Check', checksdescription: 'Screeding is carried out in presence of Engineer.' },
                                            { checksHeading: 'Sequence check', checksdescription: 'The sequence of concreting well planned and sufficient labours deployed.' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Cleaning of joints from loose mortar done immediately after tile laying.' },
                                        ];

                                        async function FlooringChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        FlooringChacks();
                                    }

                                    //Anuj
                                    if (newDatanew.subactivityname === 'B2 - Floor Tiling') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Arrange the latest GFC Drawings at Site' },
                                            { subtaskdescription: 'Ask the contractor for cleaning and surface preparation for tiling' },
                                            { subtaskdescription: 'Confirm the availability of clearance from Brick and plaster department to start the work.' },
                                            { subtaskdescription: 'Confirm the availability of clearance from Plumbing and Electrical department to proceed tiling works.' },
                                            { subtaskdescription: 'Ask the contractor to arrange the required tools at site' },
                                            { subtaskdescription: 'Arrange the quantity of tiles required to complete the work available.Code and Brand to be checked' },
                                            { subtaskdescription: 'Explain the contractor about the pattern of laying the tiles' },
                                            { subtaskdescription: 'Ask the purchase manager to arrange the materials at site' },
                                            { subtaskdescription: 'Assign the contractor for the work' },
                                            { subtaskdescription: 'Make the electricity and Water arrangements at the site' },
                                            { subtaskdescription: 'Arrange the adhesive,grouting compound and silicon a site' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the contractor to fix the height indicators properly' },
                                            { subtaskdescription: 'Ask the contractor to cure the ceramic tiles before placing when fiing done using cement mortar' },
                                            { subtaskdescription: 'Ask the contractor to maintain the line and level of skirting' },
                                            { subtaskdescription: 'Ask the contractor to maintain the slopes as per the specifications' },
                                            { subtaskdescription: 'Ask the contractor that the corners of the tiles should be matched' },
                                            { subtaskdescription: 'Ask the contractor to remove the adhesive from the tile surface' },
                                            { subtaskdescription: 'Ask the contractor to gently tap the tiles on the mortar bed for the better settlement' },
                                            { subtaskdescription: 'Ask the contractor to do grouting after 24 hrs of tiling' },
                                            { subtaskdescription: 'Ask the contractor to properly alignt the joints of the tiles' },
                                            { subtaskdescription: 'Ask the contractor for barricading of tile area and covering the tiles with plastic sheets' },
                                        ];

                                        async function FlooringfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        FlooringfunCall();
                                    }
                                    if (newDatanew.subactivityname === 'B2 - Floor Tiling') {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Pattern check', checksdescription: 'Are the tile laying pattern, specifications and tile grout color according to approved drawing?' },
                                            { checksHeading: 'Adhesive check', checksdescription: 'Is the open life of spread adhesive exceeding the recommended limits?' },
                                            { checksHeading: 'Adhesive check', checksdescription: 'Is the tile adhesive being used up within its pot life?' },
                                            { checksHeading: 'Tapping check', checksdescription: 'Is the freshly laid tiles are tapped gently, is there any settlement?' },
                                            { checksHeading: 'Joints check', checksdescription: 'Are the joints properly aligned?' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Excessive adhesive / cement coming out of tile joints have been cleaned properly.' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Cleaning Check', checksdescription: 'The surface on which screed to be laid made moist, free from dust and other contaminations.' },
                                            { checksHeading: 'Undulation Check', checksdescription: 'Are there any undulations observed in surface level?' },
                                            { checksHeading: 'Height indicators Check', checksdescription: 'Button marks / height indicators fixed properly.' },
                                            { checksHeading: 'Side runners check', checksdescription: 'Side runners have been placed as per requirements.' },
                                            { checksHeading: 'Screeding Check', checksdescription: 'Screeding is carried out in presence of Engineer.' },
                                            { checksHeading: 'Sequence check', checksdescription: 'The sequence of concreting well planned and sufficient labours deployed.' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Cleaning of joints from loose mortar done immediately after tile laying.' },
                                        ];

                                        async function FlooringChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        FlooringChacks();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'B3 - Floor Tiling') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Arrange the latest GFC Drawings at Site' },
                                            { subtaskdescription: 'Ask the contractor for cleaning and surface preparation for tiling' },
                                            { subtaskdescription: 'Confirm the availability of clearance from Brick and plaster department to start the work.' },
                                            { subtaskdescription: 'Confirm the availability of clearance from Plumbing and Electrical department to proceed tiling works.' },
                                            { subtaskdescription: 'Ask the contractor to arrange the required tools at site' },
                                            { subtaskdescription: 'Arrange the quantity of tiles required to complete the work available.Code and Brand to be checked' },
                                            { subtaskdescription: 'Explain the contractor about the pattern of laying the tiles' },
                                            { subtaskdescription: 'Ask the purchase manager to arrange the materials at site' },
                                            { subtaskdescription: 'Assign the contractor for the work' },
                                            { subtaskdescription: 'Make the electricity and Water arrangements at the site' },
                                            { subtaskdescription: 'Arrange the adhesive,grouting compound and silicon a site' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the contractor to fix the height indicators properly' },
                                            { subtaskdescription: 'Ask the contractor to cure the ceramic tiles before placing when fiing done using cement mortar' },
                                            { subtaskdescription: 'Ask the contractor to maintain the line and level of skirting' },
                                            { subtaskdescription: 'Ask the contractor to maintain the slopes as per the specifications' },
                                            { subtaskdescription: 'Ask the contractor that the corners of the tiles should be matched' },
                                            { subtaskdescription: 'Ask the contractor to remove the adhesive from the tile surface' },
                                            { subtaskdescription: 'Ask the contractor to gently tap the tiles on the mortar bed for the better settlement' },
                                            { subtaskdescription: 'Ask the contractor to do grouting after 24 hrs of tiling' },
                                            { subtaskdescription: 'Ask the contractor to properly alignt the joints of the tiles' },
                                            { subtaskdescription: 'Ask the contractor for barricading of tile area and covering the tiles with plastic sheets' },
                                        ];

                                        async function FlooringfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        FlooringfunCall();
                                    }
                                    if (newDatanew.subactivityname === 'B3 - Floor Tiling') {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Pattern check', checksdescription: 'Are the tile laying pattern, specifications and tile grout color according to approved drawing?' },
                                            { checksHeading: 'Adhesive check', checksdescription: 'Is the open life of spread adhesive exceeding the recommended limits?' },
                                            { checksHeading: 'Adhesive check', checksdescription: 'Is the tile adhesive being used up within its pot life?' },
                                            { checksHeading: 'Tapping check', checksdescription: 'Is the freshly laid tiles are tapped gently, is there any settlement?' },
                                            { checksHeading: 'Joints check', checksdescription: 'Are the joints properly aligned?' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Excessive adhesive / cement coming out of tile joints have been cleaned properly.' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Cleaning Check', checksdescription: 'The surface on which screed to be laid made moist, free from dust and other contaminations.' },
                                            { checksHeading: 'Undulation Check', checksdescription: 'Are there any undulations observed in surface level?' },
                                            { checksHeading: 'Height indicators Check', checksdescription: 'Button marks / height indicators fixed properly.' },
                                            { checksHeading: 'Side runners check', checksdescription: 'Side runners have been placed as per requirements.' },
                                            { checksHeading: 'Screeding Check', checksdescription: 'Screeding is carried out in presence of Engineer.' },
                                            { checksHeading: 'Sequence check', checksdescription: 'The sequence of concreting well planned and sufficient labours deployed.' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Cleaning of joints from loose mortar done immediately after tile laying.' },
                                        ];

                                        async function FlooringChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        FlooringChacks();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'B4 - Floor Tiling') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Arrange the latest GFC Drawings at Site' },
                                            { subtaskdescription: 'Ask the contractor for cleaning and surface preparation for tiling' },
                                            { subtaskdescription: 'Confirm the availability of clearance from Brick and plaster department to start the work.' },
                                            { subtaskdescription: 'Confirm the availability of clearance from Plumbing and Electrical department to proceed tiling works.' },
                                            { subtaskdescription: 'Ask the contractor to arrange the required tools at site' },
                                            { subtaskdescription: 'Arrange the quantity of tiles required to complete the work available.Code and Brand to be checked' },
                                            { subtaskdescription: 'Explain the contractor about the pattern of laying the tiles' },
                                            { subtaskdescription: 'Ask the purchase manager to arrange the materials at site' },
                                            { subtaskdescription: 'Assign the contractor for the work' },
                                            { subtaskdescription: 'Make the electricity and Water arrangements at the site' },
                                            { subtaskdescription: 'Arrange the adhesive,grouting compound and silicon a site' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the contractor to fix the height indicators properly' },
                                            { subtaskdescription: 'Ask the contractor to cure the ceramic tiles before placing when fiing done using cement mortar' },
                                            { subtaskdescription: 'Ask the contractor to maintain the line and level of skirting' },
                                            { subtaskdescription: 'Ask the contractor to maintain the slopes as per the specifications' },
                                            { subtaskdescription: 'Ask the contractor that the corners of the tiles should be matched' },
                                            { subtaskdescription: 'Ask the contractor to remove the adhesive from the tile surface' },
                                            { subtaskdescription: 'Ask the contractor to gently tap the tiles on the mortar bed for the better settlement' },
                                            { subtaskdescription: 'Ask the contractor to do grouting after 24 hrs of tiling' },
                                            { subtaskdescription: 'Ask the contractor to properly alignt the joints of the tiles' },
                                            { subtaskdescription: 'Ask the contractor for barricading of tile area and covering the tiles with plastic sheets' },
                                        ];

                                        async function FlooringfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        FlooringfunCall();
                                    }
                                    if (newDatanew.subactivityname === 'B4 - Floor Tiling') {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Pattern check', checksdescription: 'Are the tile laying pattern, specifications and tile grout color according to approved drawing?' },
                                            { checksHeading: 'Adhesive check', checksdescription: 'Is the open life of spread adhesive exceeding the recommended limits?' },
                                            { checksHeading: 'Adhesive check', checksdescription: 'Is the tile adhesive being used up within its pot life?' },
                                            { checksHeading: 'Tapping check', checksdescription: 'Is the freshly laid tiles are tapped gently, is there any settlement?' },
                                            { checksHeading: 'Joints check', checksdescription: 'Are the joints properly aligned?' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Excessive adhesive / cement coming out of tile joints have been cleaned properly.' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Cleaning Check', checksdescription: 'The surface on which screed to be laid made moist, free from dust and other contaminations.' },
                                            { checksHeading: 'Undulation Check', checksdescription: 'Are there any undulations observed in surface level?' },
                                            { checksHeading: 'Height indicators Check', checksdescription: 'Button marks / height indicators fixed properly.' },
                                            { checksHeading: 'Side runners check', checksdescription: 'Side runners have been placed as per requirements.' },
                                            { checksHeading: 'Screeding Check', checksdescription: 'Screeding is carried out in presence of Engineer.' },
                                            { checksHeading: 'Sequence check', checksdescription: 'The sequence of concreting well planned and sufficient labours deployed.' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Cleaning of joints from loose mortar done immediately after tile laying.' },
                                        ];

                                        async function FlooringChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        FlooringChacks();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'GF - Floor Tiling') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Arrange the latest GFC Drawings at Site' },
                                            { subtaskdescription: 'Ask the contractor for cleaning and surface preparation for tiling' },
                                            { subtaskdescription: 'Confirm the availability of clearance from Brick and plaster department to start the work.' },
                                            { subtaskdescription: 'Confirm the availability of clearance from Plumbing and Electrical department to proceed tiling works.' },
                                            { subtaskdescription: 'Ask the contractor to arrange the required tools at site' },
                                            { subtaskdescription: 'Arrange the quantity of tiles required to complete the work available.Code and Brand to be checked' },
                                            { subtaskdescription: 'Explain the contractor about the pattern of laying the tiles' },
                                            { subtaskdescription: 'Ask the purchase manager to arrange the materials at site' },
                                            { subtaskdescription: 'Assign the contractor for the work' },
                                            { subtaskdescription: 'Make the electricity and Water arrangements at the site' },
                                            { subtaskdescription: 'Arrange the adhesive,grouting compound and silicon a site' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the contractor to fix the height indicators properly' },
                                            { subtaskdescription: 'Ask the contractor to cure the ceramic tiles before placing when fiing done using cement mortar' },
                                            { subtaskdescription: 'Ask the contractor to maintain the line and level of skirting' },
                                            { subtaskdescription: 'Ask the contractor to maintain the slopes as per the specifications' },
                                            { subtaskdescription: 'Ask the contractor that the corners of the tiles should be matched' },
                                            { subtaskdescription: 'Ask the contractor to remove the adhesive from the tile surface' },
                                            { subtaskdescription: 'Ask the contractor to gently tap the tiles on the mortar bed for the better settlement' },
                                            { subtaskdescription: 'Ask the contractor to do grouting after 24 hrs of tiling' },
                                            { subtaskdescription: 'Ask the contractor to properly alignt the joints of the tiles' },
                                            { subtaskdescription: 'Ask the contractor for barricading of tile area and covering the tiles with plastic sheets' },
                                        ];

                                        async function FlooringfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        FlooringfunCall();
                                    }
                                    if (newDatanew.subactivityname === 'GF - Floor Tiling') {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Pattern check', checksdescription: 'Are the tile laying pattern, specifications and tile grout color according to approved drawing?' },
                                            { checksHeading: 'Adhesive check', checksdescription: 'Is the open life of spread adhesive exceeding the recommended limits?' },
                                            { checksHeading: 'Adhesive check', checksdescription: 'Is the tile adhesive being used up within its pot life?' },
                                            { checksHeading: 'Tapping check', checksdescription: 'Is the freshly laid tiles are tapped gently, is there any settlement?' },
                                            { checksHeading: 'Joints check', checksdescription: 'Are the joints properly aligned?' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Excessive adhesive / cement coming out of tile joints have been cleaned properly.' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Cleaning Check', checksdescription: 'The surface on which screed to be laid made moist, free from dust and other contaminations.' },
                                            { checksHeading: 'Undulation Check', checksdescription: 'Are there any undulations observed in surface level?' },
                                            { checksHeading: 'Height indicators Check', checksdescription: 'Button marks / height indicators fixed properly.' },
                                            { checksHeading: 'Side runners check', checksdescription: 'Side runners have been placed as per requirements.' },
                                            { checksHeading: 'Screeding Check', checksdescription: 'Screeding is carried out in presence of Engineer.' },
                                            { checksHeading: 'Sequence check', checksdescription: 'The sequence of concreting well planned and sufficient labours deployed.' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Cleaning of joints from loose mortar done immediately after tile laying.' },
                                        ];

                                        async function FlooringChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        FlooringChacks();
                                    }


                                    if (newDatanew.subactivityname === "GF - Washroom Tiling") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Dependency', headingforshortingTwo: 'Tiling Prep.', headingforshortingThree: 'Tiling', headingforshortingFour: 'Final Finish' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Plaster Fini.', NormalHeadingThree: 'Int. Fitting', NormalHeadingfoure: 'Ele. Condu.' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Waterproof', NormalHeadingThree: 'Base Level', NormalHeadingfoure: 'Base Tile' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: '-X', NormalHeadingThree: '+Y', NormalHeadingfoure: '-Y' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Grout Fill', NormalHeadingThree: 'Traps', NormalHeadingfoure: 'Coin | Verti.' },
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }



                                    if (newDatanew.subactivityname === "GF - Floor Tiling") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Levelling', headingforshortingTwo: 'Base Prep.', headingforshortingThree: 'Tiling' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Undulation', NormalHeadingThree: 'Bot. Level', NormalHeadingfoure: 'Skirting Fin.' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Trap', NormalHeadingThree: 'Base Prep.', NormalHeadingfoure: 'Floor Start' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Flooring', NormalHeadingThree: 'Skirting', NormalHeadingfoure: 'Grout Fill' },
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }





                                    //Anuj
                                    if (newDatanew.subactivityname === 'FF - Floor Tiling') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Arrange the latest GFC Drawings at Site' },
                                            { subtaskdescription: 'Ask the contractor for cleaning and surface preparation for tiling' },
                                            { subtaskdescription: 'Confirm the availability of clearance from Brick and plaster department to start the work.' },
                                            { subtaskdescription: 'Confirm the availability of clearance from Plumbing and Electrical department to proceed tiling works.' },
                                            { subtaskdescription: 'Ask the contractor to arrange the required tools at site' },
                                            { subtaskdescription: 'Arrange the quantity of tiles required to complete the work available.Code and Brand to be checked' },
                                            { subtaskdescription: 'Explain the contractor about the pattern of laying the tiles' },
                                            { subtaskdescription: 'Ask the purchase manager to arrange the materials at site' },
                                            { subtaskdescription: 'Assign the contractor for the work' },
                                            { subtaskdescription: 'Make the electricity and Water arrangements at the site' },
                                            { subtaskdescription: 'Arrange the adhesive,grouting compound and silicon a site' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the contractor to fix the height indicators properly' },
                                            { subtaskdescription: 'Ask the contractor to cure the ceramic tiles before placing when fiing done using cement mortar' },
                                            { subtaskdescription: 'Ask the contractor to maintain the line and level of skirting' },
                                            { subtaskdescription: 'Ask the contractor to maintain the slopes as per the specifications' },
                                            { subtaskdescription: 'Ask the contractor that the corners of the tiles should be matched' },
                                            { subtaskdescription: 'Ask the contractor to remove the adhesive from the tile surface' },
                                            { subtaskdescription: 'Ask the contractor to gently tap the tiles on the mortar bed for the better settlement' },
                                            { subtaskdescription: 'Ask the contractor to do grouting after 24 hrs of tiling' },
                                            { subtaskdescription: 'Ask the contractor to properly alignt the joints of the tiles' },
                                            { subtaskdescription: 'Ask the contractor for barricading of tile area and covering the tiles with plastic sheets' },
                                        ];

                                        async function FlooringfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        FlooringfunCall();
                                    }


                                    if (newDatanew.subactivityname === "FF - Washroom Tiling") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Dependency', headingforshortingTwo: 'Tiling Prep.', headingforshortingThree: 'Tiling', headingforshortingFour: 'Final Finish' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Plaster Fini.', NormalHeadingThree: 'Int. Fitting', NormalHeadingfoure: 'Ele. Condu.' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Waterproof', NormalHeadingThree: 'Base Level', NormalHeadingfoure: 'Base Tile' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: '-X', NormalHeadingThree: '+Y', NormalHeadingfoure: '-Y' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Grout Fill', NormalHeadingThree: 'Traps', NormalHeadingfoure: 'Coin | Verti.' },
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }





                                    if (newDatanew.subactivityname === 'FF - Floor Tiling') {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Pattern check', checksdescription: 'Are the tile laying pattern, specifications and tile grout color according to approved drawing?' },
                                            { checksHeading: 'Adhesive check', checksdescription: 'Is the open life of spread adhesive exceeding the recommended limits?' },
                                            { checksHeading: 'Adhesive check', checksdescription: 'Is the tile adhesive being used up within its pot life?' },
                                            { checksHeading: 'Tapping check', checksdescription: 'Is the freshly laid tiles are tapped gently, is there any settlement?' },
                                            { checksHeading: 'Joints check', checksdescription: 'Are the joints properly aligned?' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Excessive adhesive / cement coming out of tile joints have been cleaned properly.' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Cleaning Check', checksdescription: 'The surface on which screed to be laid made moist, free from dust and other contaminations.' },
                                            { checksHeading: 'Undulation Check', checksdescription: 'Are there any undulations observed in surface level?' },
                                            { checksHeading: 'Height indicators Check', checksdescription: 'Button marks / height indicators fixed properly.' },
                                            { checksHeading: 'Side runners check', checksdescription: 'Side runners have been placed as per requirements.' },
                                            { checksHeading: 'Screeding Check', checksdescription: 'Screeding is carried out in presence of Engineer.' },
                                            { checksHeading: 'Sequence check', checksdescription: 'The sequence of concreting well planned and sufficient labours deployed.' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Cleaning of joints from loose mortar done immediately after tile laying.' },
                                        ];

                                        async function FlooringChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        FlooringChacks();
                                    }



                                    if (newDatanew.subactivityname === "FF - Floor Tiling") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Levelling', headingforshortingTwo: 'Base Prep.', headingforshortingThree: 'Tiling' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Undulation', NormalHeadingThree: 'Bot. Level', NormalHeadingfoure: 'Skirting Fin.' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Trap', NormalHeadingThree: 'Base Prep.', NormalHeadingfoure: 'Floor Start' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Flooring', NormalHeadingThree: 'Skirting', NormalHeadingfoure: 'Grout Fill' },
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'SF - Floor Tiling') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Arrange the latest GFC Drawings at Site' },
                                            { subtaskdescription: 'Ask the contractor for cleaning and surface preparation for tiling' },
                                            { subtaskdescription: 'Confirm the availability of clearance from Brick and plaster department to start the work.' },
                                            { subtaskdescription: 'Confirm the availability of clearance from Plumbing and Electrical department to proceed tiling works.' },
                                            { subtaskdescription: 'Ask the contractor to arrange the required tools at site' },
                                            { subtaskdescription: 'Arrange the quantity of tiles required to complete the work available.Code and Brand to be checked' },
                                            { subtaskdescription: 'Explain the contractor about the pattern of laying the tiles' },
                                            { subtaskdescription: 'Ask the purchase manager to arrange the materials at site' },
                                            { subtaskdescription: 'Assign the contractor for the work' },
                                            { subtaskdescription: 'Make the electricity and Water arrangements at the site' },
                                            { subtaskdescription: 'Arrange the adhesive,grouting compound and silicon a site' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the contractor to fix the height indicators properly' },
                                            { subtaskdescription: 'Ask the contractor to cure the ceramic tiles before placing when fiing done using cement mortar' },
                                            { subtaskdescription: 'Ask the contractor to maintain the line and level of skirting' },
                                            { subtaskdescription: 'Ask the contractor to maintain the slopes as per the specifications' },
                                            { subtaskdescription: 'Ask the contractor that the corners of the tiles should be matched' },
                                            { subtaskdescription: 'Ask the contractor to remove the adhesive from the tile surface' },
                                            { subtaskdescription: 'Ask the contractor to gently tap the tiles on the mortar bed for the better settlement' },
                                            { subtaskdescription: 'Ask the contractor to do grouting after 24 hrs of tiling' },
                                            { subtaskdescription: 'Ask the contractor to properly alignt the joints of the tiles' },
                                            { subtaskdescription: 'Ask the contractor for barricading of tile area and covering the tiles with plastic sheets' },
                                        ];

                                        async function FlooringfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        FlooringfunCall();
                                    }




                                    if (newDatanew.subactivityname === 'SF - Floor Tiling') {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Pattern check', checksdescription: 'Are the tile laying pattern, specifications and tile grout color according to approved drawing?' },
                                            { checksHeading: 'Adhesive check', checksdescription: 'Is the open life of spread adhesive exceeding the recommended limits?' },
                                            { checksHeading: 'Adhesive check', checksdescription: 'Is the tile adhesive being used up within its pot life?' },
                                            { checksHeading: 'Tapping check', checksdescription: 'Is the freshly laid tiles are tapped gently, is there any settlement?' },
                                            { checksHeading: 'Joints check', checksdescription: 'Are the joints properly aligned?' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Excessive adhesive / cement coming out of tile joints have been cleaned properly.' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Cleaning Check', checksdescription: 'The surface on which screed to be laid made moist, free from dust and other contaminations.' },
                                            { checksHeading: 'Undulation Check', checksdescription: 'Are there any undulations observed in surface level?' },
                                            { checksHeading: 'Height indicators Check', checksdescription: 'Button marks / height indicators fixed properly.' },
                                            { checksHeading: 'Side runners check', checksdescription: 'Side runners have been placed as per requirements.' },
                                            { checksHeading: 'Screeding Check', checksdescription: 'Screeding is carried out in presence of Engineer.' },
                                            { checksHeading: 'Sequence check', checksdescription: 'The sequence of concreting well planned and sufficient labours deployed.' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Cleaning of joints from loose mortar done immediately after tile laying.' },
                                        ];

                                        async function FlooringChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        FlooringChacks();
                                    }

                                    if (newDatanew.subactivityname === "SF - Washroom Tiling") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Dependency', headingforshortingTwo: 'Tiling Prep.', headingforshortingThree: 'Tiling', headingforshortingFour: 'Final Finish' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Plaster Fini.', NormalHeadingThree: 'Int. Fitting', NormalHeadingfoure: 'Ele. Condu.' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Waterproof', NormalHeadingThree: 'Base Level', NormalHeadingfoure: 'Base Tile' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: '-X', NormalHeadingThree: '+Y', NormalHeadingfoure: '-Y' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Grout Fill', NormalHeadingThree: 'Traps', NormalHeadingfoure: 'Coin | Verti.' },
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }


                                    if (newDatanew.subactivityname === "SF - Floor Tiling") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Levelling', headingforshortingTwo: 'Base Prep.', headingforshortingThree: 'Tiling' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Undulation', NormalHeadingThree: 'Bot. Level', NormalHeadingfoure: 'Skirting Fin.' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Trap', NormalHeadingThree: 'Base Prep.', NormalHeadingfoure: 'Floor Start' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Flooring', NormalHeadingThree: 'Skirting', NormalHeadingfoure: 'Grout Fill' },
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'TF - Floor Tiling') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Arrange the latest GFC Drawings at Site' },
                                            { subtaskdescription: 'Ask the contractor for cleaning and surface preparation for tiling' },
                                            { subtaskdescription: 'Confirm the availability of clearance from Brick and plaster department to start the work.' },
                                            { subtaskdescription: 'Confirm the availability of clearance from Plumbing and Electrical department to proceed tiling works.' },
                                            { subtaskdescription: 'Ask the contractor to arrange the required tools at site' },
                                            { subtaskdescription: 'Arrange the quantity of tiles required to complete the work available.Code and Brand to be checked' },
                                            { subtaskdescription: 'Explain the contractor about the pattern of laying the tiles' },
                                            { subtaskdescription: 'Ask the purchase manager to arrange the materials at site' },
                                            { subtaskdescription: 'Assign the contractor for the work' },
                                            { subtaskdescription: 'Make the electricity and Water arrangements at the site' },
                                            { subtaskdescription: 'Arrange the adhesive,grouting compound and silicon a site' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the contractor to fix the height indicators properly' },
                                            { subtaskdescription: 'Ask the contractor to cure the ceramic tiles before placing when fiing done using cement mortar' },
                                            { subtaskdescription: 'Ask the contractor to maintain the line and level of skirting' },
                                            { subtaskdescription: 'Ask the contractor to maintain the slopes as per the specifications' },
                                            { subtaskdescription: 'Ask the contractor that the corners of the tiles should be matched' },
                                            { subtaskdescription: 'Ask the contractor to remove the adhesive from the tile surface' },
                                            { subtaskdescription: 'Ask the contractor to gently tap the tiles on the mortar bed for the better settlement' },
                                            { subtaskdescription: 'Ask the contractor to do grouting after 24 hrs of tiling' },
                                            { subtaskdescription: 'Ask the contractor to properly alignt the joints of the tiles' },
                                            { subtaskdescription: 'Ask the contractor for barricading of tile area and covering the tiles with plastic sheets' },
                                        ];

                                        async function FlooringfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        FlooringfunCall();
                                    }
                                    if (newDatanew.subactivityname === 'TF - Floor Tiling') {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Pattern check', checksdescription: 'Are the tile laying pattern, specifications and tile grout color according to approved drawing?' },
                                            { checksHeading: 'Adhesive check', checksdescription: 'Is the open life of spread adhesive exceeding the recommended limits?' },
                                            { checksHeading: 'Adhesive check', checksdescription: 'Is the tile adhesive being used up within its pot life?' },
                                            { checksHeading: 'Tapping check', checksdescription: 'Is the freshly laid tiles are tapped gently, is there any settlement?' },
                                            { checksHeading: 'Joints check', checksdescription: 'Are the joints properly aligned?' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Excessive adhesive / cement coming out of tile joints have been cleaned properly.' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Cleaning Check', checksdescription: 'The surface on which screed to be laid made moist, free from dust and other contaminations.' },
                                            { checksHeading: 'Undulation Check', checksdescription: 'Are there any undulations observed in surface level?' },
                                            { checksHeading: 'Height indicators Check', checksdescription: 'Button marks / height indicators fixed properly.' },
                                            { checksHeading: 'Side runners check', checksdescription: 'Side runners have been placed as per requirements.' },
                                            { checksHeading: 'Screeding Check', checksdescription: 'Screeding is carried out in presence of Engineer.' },
                                            { checksHeading: 'Sequence check', checksdescription: 'The sequence of concreting well planned and sufficient labours deployed.' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Cleaning of joints from loose mortar done immediately after tile laying.' },
                                        ];

                                        async function FlooringChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        FlooringChacks();
                                    }


                                    if (newDatanew.subactivityname === "TF - Washroom Tiling") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Dependency', headingforshortingTwo: 'Tiling Prep.', headingforshortingThree: 'Tiling', headingforshortingFour: 'Final Finish' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Plaster Fini.', NormalHeadingThree: 'Int. Fitting', NormalHeadingfoure: 'Ele. Condu.' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Waterproof', NormalHeadingThree: 'Base Level', NormalHeadingfoure: 'Base Tile' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: '-X', NormalHeadingThree: '+Y', NormalHeadingfoure: '-Y' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Grout Fill', NormalHeadingThree: 'Traps', NormalHeadingfoure: 'Coin | Verti.' },
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }


                                    if (newDatanew.subactivityname === "TF - Floor Tiling") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Levelling', headingforshortingTwo: 'Base Prep.', headingforshortingThree: 'Tiling' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Undulation', NormalHeadingThree: 'Bot. Level', NormalHeadingfoure: 'Skirting Fin.' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Trap', NormalHeadingThree: 'Base Prep.', NormalHeadingfoure: 'Floor Start' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Flooring', NormalHeadingThree: 'Skirting', NormalHeadingfoure: 'Grout Fill' },
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'FoF - Floor Tiling') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Arrange the latest GFC Drawings at Site' },
                                            { subtaskdescription: 'Ask the contractor for cleaning and surface preparation for tiling' },
                                            { subtaskdescription: 'Confirm the availability of clearance from Brick and plaster department to start the work.' },
                                            { subtaskdescription: 'Confirm the availability of clearance from Plumbing and Electrical department to proceed tiling works.' },
                                            { subtaskdescription: 'Ask the contractor to arrange the required tools at site' },
                                            { subtaskdescription: 'Arrange the quantity of tiles required to complete the work available.Code and Brand to be checked' },
                                            { subtaskdescription: 'Explain the contractor about the pattern of laying the tiles' },
                                            { subtaskdescription: 'Ask the purchase manager to arrange the materials at site' },
                                            { subtaskdescription: 'Assign the contractor for the work' },
                                            { subtaskdescription: 'Make the electricity and Water arrangements at the site' },
                                            { subtaskdescription: 'Arrange the adhesive,grouting compound and silicon a site' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the contractor to fix the height indicators properly' },
                                            { subtaskdescription: 'Ask the contractor to cure the ceramic tiles before placing when fiing done using cement mortar' },
                                            { subtaskdescription: 'Ask the contractor to maintain the line and level of skirting' },
                                            { subtaskdescription: 'Ask the contractor to maintain the slopes as per the specifications' },
                                            { subtaskdescription: 'Ask the contractor that the corners of the tiles should be matched' },
                                            { subtaskdescription: 'Ask the contractor to remove the adhesive from the tile surface' },
                                            { subtaskdescription: 'Ask the contractor to gently tap the tiles on the mortar bed for the better settlement' },
                                            { subtaskdescription: 'Ask the contractor to do grouting after 24 hrs of tiling' },
                                            { subtaskdescription: 'Ask the contractor to properly alignt the joints of the tiles' },
                                            { subtaskdescription: 'Ask the contractor for barricading of tile area and covering the tiles with plastic sheets' },
                                        ];

                                        async function FlooringfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        FlooringfunCall();
                                    }
                                    if (newDatanew.subactivityname === 'FoF - Floor Tiling') {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Pattern check', checksdescription: 'Are the tile laying pattern, specifications and tile grout color according to approved drawing?' },
                                            { checksHeading: 'Adhesive check', checksdescription: 'Is the open life of spread adhesive exceeding the recommended limits?' },
                                            { checksHeading: 'Adhesive check', checksdescription: 'Is the tile adhesive being used up within its pot life?' },
                                            { checksHeading: 'Tapping check', checksdescription: 'Is the freshly laid tiles are tapped gently, is there any settlement?' },
                                            { checksHeading: 'Joints check', checksdescription: 'Are the joints properly aligned?' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Excessive adhesive / cement coming out of tile joints have been cleaned properly.' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Cleaning Check', checksdescription: 'The surface on which screed to be laid made moist, free from dust and other contaminations.' },
                                            { checksHeading: 'Undulation Check', checksdescription: 'Are there any undulations observed in surface level?' },
                                            { checksHeading: 'Height indicators Check', checksdescription: 'Button marks / height indicators fixed properly.' },
                                            { checksHeading: 'Side runners check', checksdescription: 'Side runners have been placed as per requirements.' },
                                            { checksHeading: 'Screeding Check', checksdescription: 'Screeding is carried out in presence of Engineer.' },
                                            { checksHeading: 'Sequence check', checksdescription: 'The sequence of concreting well planned and sufficient labours deployed.' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Cleaning of joints from loose mortar done immediately after tile laying.' },
                                        ];

                                        async function FlooringChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        FlooringChacks();
                                    }




                                    if (newDatanew.subactivityname === "FoF - Washroom Tiling") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Dependency', headingforshortingTwo: 'Tiling Prep.', headingforshortingThree: 'Tiling', headingforshortingFour: 'Final Finish' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Plaster Fini.', NormalHeadingThree: 'Int. Fitting', NormalHeadingfoure: 'Ele. Condu.' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Waterproof', NormalHeadingThree: 'Base Level', NormalHeadingfoure: 'Base Tile' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: '-X', NormalHeadingThree: '+Y', NormalHeadingfoure: '-Y' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Grout Fill', NormalHeadingThree: 'Traps', NormalHeadingfoure: 'Coin | Verti.' },
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }


                                    if (newDatanew.subactivityname === "FoF - Floor Tiling") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Levelling', headingforshortingTwo: 'Base Prep.', headingforshortingThree: 'Tiling' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Undulation', NormalHeadingThree: 'Bot. Level', NormalHeadingfoure: 'Skirting Fin.' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Trap', NormalHeadingThree: 'Base Prep.', NormalHeadingfoure: 'Floor Start' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Flooring', NormalHeadingThree: 'Skirting', NormalHeadingfoure: 'Grout Fill' },
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'Tower - Floor Tiling') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Arrange the latest GFC Drawings at Site' },
                                            { subtaskdescription: 'Ask the contractor for cleaning and surface preparation for tiling' },
                                            { subtaskdescription: 'Confirm the availability of clearance from Brick and plaster department to start the work.' },
                                            { subtaskdescription: 'Confirm the availability of clearance from Plumbing and Electrical department to proceed tiling works.' },
                                            { subtaskdescription: 'Ask the contractor to arrange the required tools at site' },
                                            { subtaskdescription: 'Arrange the quantity of tiles required to complete the work available.Code and Brand to be checked' },
                                            { subtaskdescription: 'Explain the contractor about the pattern of laying the tiles' },
                                            { subtaskdescription: 'Ask the purchase manager to arrange the materials at site' },
                                            { subtaskdescription: 'Assign the contractor for the work' },
                                            { subtaskdescription: 'Make the electricity and Water arrangements at the site' },
                                            { subtaskdescription: 'Arrange the adhesive,grouting compound and silicon a site' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the contractor to fix the height indicators properly' },
                                            { subtaskdescription: 'Ask the contractor to cure the ceramic tiles before placing when fiing done using cement mortar' },
                                            { subtaskdescription: 'Ask the contractor to maintain the line and level of skirting' },
                                            { subtaskdescription: 'Ask the contractor to maintain the slopes as per the specifications' },
                                            { subtaskdescription: 'Ask the contractor that the corners of the tiles should be matched' },
                                            { subtaskdescription: 'Ask the contractor to remove the adhesive from the tile surface' },
                                            { subtaskdescription: 'Ask the contractor to gently tap the tiles on the mortar bed for the better settlement' },
                                            { subtaskdescription: 'Ask the contractor to do grouting after 24 hrs of tiling' },
                                            { subtaskdescription: 'Ask the contractor to properly alignt the joints of the tiles' },
                                            { subtaskdescription: 'Ask the contractor for barricading of tile area and covering the tiles with plastic sheets' },
                                        ];

                                        async function FlooringfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        FlooringfunCall();
                                    }
                                    if (newDatanew.subactivityname === 'Tower - Floor Tiling') {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Pattern check', checksdescription: 'Are the tile laying pattern, specifications and tile grout color according to approved drawing?' },
                                            { checksHeading: 'Adhesive check', checksdescription: 'Is the open life of spread adhesive exceeding the recommended limits?' },
                                            { checksHeading: 'Adhesive check', checksdescription: 'Is the tile adhesive being used up within its pot life?' },
                                            { checksHeading: 'Tapping check', checksdescription: 'Is the freshly laid tiles are tapped gently, is there any settlement?' },
                                            { checksHeading: 'Joints check', checksdescription: 'Are the joints properly aligned?' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Excessive adhesive / cement coming out of tile joints have been cleaned properly.' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Cleaning Check', checksdescription: 'The surface on which screed to be laid made moist, free from dust and other contaminations.' },
                                            { checksHeading: 'Undulation Check', checksdescription: 'Are there any undulations observed in surface level?' },
                                            { checksHeading: 'Height indicators Check', checksdescription: 'Button marks / height indicators fixed properly.' },
                                            { checksHeading: 'Side runners check', checksdescription: 'Side runners have been placed as per requirements.' },
                                            { checksHeading: 'Screeding Check', checksdescription: 'Screeding is carried out in presence of Engineer.' },
                                            { checksHeading: 'Sequence check', checksdescription: 'The sequence of concreting well planned and sufficient labours deployed.' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Cleaning of joints from loose mortar done immediately after tile laying.' },
                                        ];

                                        async function FlooringChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        FlooringChacks();
                                    }


                                    if (newDatanew.subactivityname === "Tower - Washroom Tiling") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Dependency', headingforshortingTwo: 'Tiling Prep.', headingforshortingThree: 'Tiling', headingforshortingFour: 'Final Finish' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Plaster Fini.', NormalHeadingThree: 'Int. Fitting', NormalHeadingfoure: 'Ele. Condu.' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Waterproof', NormalHeadingThree: 'Base Level', NormalHeadingfoure: 'Base Tile' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: '-X', NormalHeadingThree: '+Y', NormalHeadingfoure: '-Y' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Grout Fill', NormalHeadingThree: 'Traps', NormalHeadingfoure: 'Coin | Verti.' },
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }

                                    if (newDatanew.subactivityname === "Tower - Floor Tiling") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Levelling', headingforshortingTwo: 'Base Prep.', headingforshortingThree: 'Tiling' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Undulation', NormalHeadingThree: 'Bot. Level', NormalHeadingfoure: 'Skirting Fin.' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Trap', NormalHeadingThree: 'Base Prep.', NormalHeadingfoure: 'Floor Start' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Flooring', NormalHeadingThree: 'Skirting', NormalHeadingfoure: 'Grout Fill' },
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'B1 - Washroom Tiling') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1 Wall Tiles', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Arrange the latest GFC Drawings at Site' },
                                            { subtaskdescription: 'Ask the contractor for cleaning and surface preparation for tiling' },
                                            { subtaskdescription: 'Confirm the availability of clearance from Brick and plaster department to start the work.' },
                                            { subtaskdescription: 'Confirm the availability of clearance from Plumbing and Electrical department to proceed tiling works.' },
                                            { subtaskdescription: 'Ask the contractor to arrange the required tools at site' },
                                            { subtaskdescription: 'Arrange the quantity of tiles required to complete the work available.Code and Brand to be checked' },
                                            { subtaskdescription: 'Explain the contractor about the pattern of laying the tiles' },
                                            { subtaskdescription: 'Ask the purchase manager to arrange the materials at site' },
                                            { subtaskdescription: 'Assign the contractor for the work' },
                                            { subtaskdescription: 'Make the electricity and Water arrangements at the site' },
                                            { subtaskdescription: 'Arrange the adhesive,grouting compound and silicon a site' },
                                            { subtaskdescription: 'Phase 2 Wall Tiles', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the contractor to fix the height indicators properly' },
                                            { subtaskdescription: 'Ask the contractor to cure the ceramic tiles before placing when fiing done using cement mortar' },
                                            { subtaskdescription: 'Ask the contractor that the corners of the tiles should be matched' },
                                            { subtaskdescription: 'Ask the contractor to remove the adhesive from the tile surface' },
                                            { subtaskdescription: 'Ask the contractor to gently tap the tiles  for the better settlement' },
                                            { subtaskdescription: 'Ask the contractor to do grouting after 24 hrs of tiling' },
                                            { subtaskdescription: 'Ask the contractor to properly align the joints of the tiles' },
                                        ];

                                        async function BeamShutteringReinforcementRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamShutteringReinforcementRCCfunCall();
                                    }
                                    if (newDatanew.subactivityname === 'B1 - Washroom Tiling') {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1 Wall Tiles', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'The surface on which tiles are to be laid is moist, free from dust and other contaminations.' },
                                            { checksHeading: 'Tile code check', checksdescription: 'The tile name and tile code number to be used for that particular area of work is correct.' },
                                            { checksHeading: 'Dimension check', checksdescription: 'Are all tiles according to required dimensions?' },
                                            { checksHeading: 'Chipping check', checksdescription: 'Are there any chipped tile being used for tiling?' },
                                            { checksHeading: 'Tile boxes check', checksdescription: 'Tiles of different boxes of same batch are mixed to ensure uniform tonality.' },
                                            { checksHeading: 'Curing check', checksdescription: 'Ceramic tiles cured before placing when cement mortar is being used for tiling.' },
                                            { checksHeading: 'Procedure check', checksdescription: 'Is correct laying procedure followed (like leveling using rubber hammer and checking with spirit level etc).' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Cleaning of joints from loose mortar done immediately after tile laying.' },
                                            { checksHeading: 'Pvc bead check', checksdescription: 'Is the PVC bead laid in a single piece and cut to 45 degree inclination at the joints?' },
                                            { checksHeading: 'Cutting check', checksdescription: 'The circular cutting in tile for the pipes have been properly done.' },
                                            { checksHeading: 'Adhesive check', checksdescription: 'Is flexible tile adhesive used in case of under-tile waterproofing?' },
                                            { checksHeading: 'Adhesive check', checksdescription: 'Is tile adhesive applied using appropriate notch trowel.' },
                                            { checksHeading: 'Adhesive check', checksdescription: 'Are tiles being laid before adhesive starts to dry.' },
                                            { checksHeading: 'Adhesive check', checksdescription: 'Wet tile adhesive cleaned off from the tile surface using damp cloth.' },
                                            { checksHeading: 'Tapping check', checksdescription: 'Checking of tiles by tapping gently done after laying on the mortar bed for settlement.' },
                                            { checksHeading: 'Line and level check', checksdescription: 'Tiles around the Bath Tub fixed in level, with gap for silicon filling and proper slope.' },
                                            { checksHeading: 'Right angle check', checksdescription: 'Skinwalls tiles properly – corner spacing ensured, tile beading and joining unpleasant right angles to the main wall ensured.' },
                                            { checksHeading: 'Level check', checksdescription: 'Tile adhesive applied to back of the tile to accommodate required levels.' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Barricading check', checksdescription: 'Barricading of tiled area suitably done.' },
                                            { checksHeading: 'Covering check', checksdescription: 'Floor tiling covered with low quality POP.' },
                                            { checksHeading: 'Grouting check', checksdescription: 'The grouted joints cleaned of dust and mortar before silicon application.' },
                                            { checksHeading: 'Silicon filling check', checksdescription: 'Silicon filling done in the Kitchen and Bathroom.' },
                                            { checksHeading: 'Silicon filling check', checksdescription: 'The nozzle of silicon cartridge cut at 45 degree.' },
                                            { checksHeading: 'Silicon filling check', checksdescription: 'The grouted joints made dry before silicon application.' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'The surface is found clean and even before silicon application.' },
                                            { checksHeading: 'Masking tape check', checksdescription: 'The masking tape removed immediately after finishing the tile joints before skin develops' },
                                            { checksHeading: 'Joints check', checksdescription: 'Silicon joints smoothen with soap water and tool to get a perfect finish after removing of the masking tape.' },
                                        ];

                                        async function GradeBlankChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        GradeBlankChacks();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'B2 - Washroom Tiling') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1 Wall Tiles', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Arrange the latest GFC Drawings at Site' },
                                            { subtaskdescription: 'Ask the contractor for cleaning and surface preparation for tiling' },
                                            { subtaskdescription: 'Confirm the availability of clearance from Brick and plaster department to start the work.' },
                                            { subtaskdescription: 'Confirm the availability of clearance from Plumbing and Electrical department to proceed tiling works.' },
                                            { subtaskdescription: 'Ask the contractor to arrange the required tools at site' },
                                            { subtaskdescription: 'Arrange the quantity of tiles required to complete the work available.Code and Brand to be checked' },
                                            { subtaskdescription: 'Explain the contractor about the pattern of laying the tiles' },
                                            { subtaskdescription: 'Ask the purchase manager to arrange the materials at site' },
                                            { subtaskdescription: 'Assign the contractor for the work' },
                                            { subtaskdescription: 'Make the electricity and Water arrangements at the site' },
                                            { subtaskdescription: 'Arrange the adhesive,grouting compound and silicon a site' },
                                            { subtaskdescription: 'Phase 2 Wall Tiles', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the contractor to fix the height indicators properly' },
                                            { subtaskdescription: 'Ask the contractor to cure the ceramic tiles before placing when fiing done using cement mortar' },
                                            { subtaskdescription: 'Ask the contractor that the corners of the tiles should be matched' },
                                            { subtaskdescription: 'Ask the contractor to remove the adhesive from the tile surface' },
                                            { subtaskdescription: 'Ask the contractor to gently tap the tiles  for the better settlement' },
                                            { subtaskdescription: 'Ask the contractor to do grouting after 24 hrs of tiling' },
                                            { subtaskdescription: 'Ask the contractor to properly align the joints of the tiles' },
                                        ];

                                        async function BeamShutteringReinforcementRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamShutteringReinforcementRCCfunCall();
                                    }
                                    if (newDatanew.subactivityname === 'B2 - Washroom Tiling') {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1 Wall Tiles', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'The surface on which tiles are to be laid is moist, free from dust and other contaminations.' },
                                            { checksHeading: 'Tile code check', checksdescription: 'The tile name and tile code number to be used for that particular area of work is correct.' },
                                            { checksHeading: 'Dimension check', checksdescription: 'Are all tiles according to required dimensions?' },
                                            { checksHeading: 'Chipping check', checksdescription: 'Are there any chipped tile being used for tiling?' },
                                            { checksHeading: 'Tile boxes check', checksdescription: 'Tiles of different boxes of same batch are mixed to ensure uniform tonality.' },
                                            { checksHeading: 'Curing check', checksdescription: 'Ceramic tiles cured before placing when cement mortar is being used for tiling.' },
                                            { checksHeading: 'Procedure check', checksdescription: 'Is correct laying procedure followed (like leveling using rubber hammer and checking with spirit level etc).' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Cleaning of joints from loose mortar done immediately after tile laying.' },
                                            { checksHeading: 'Pvc bead check', checksdescription: 'Is the PVC bead laid in a single piece and cut to 45 degree inclination at the joints?' },
                                            { checksHeading: 'Cutting check', checksdescription: 'The circular cutting in tile for the pipes have been properly done.' },
                                            { checksHeading: 'Adhesive check', checksdescription: 'Is flexible tile adhesive used in case of under-tile waterproofing?' },
                                            { checksHeading: 'Adhesive check', checksdescription: 'Is tile adhesive applied using appropriate notch trowel.' },
                                            { checksHeading: 'Adhesive check', checksdescription: 'Are tiles being laid before adhesive starts to dry.' },
                                            { checksHeading: 'Adhesive check', checksdescription: 'Wet tile adhesive cleaned off from the tile surface using damp cloth.' },
                                            { checksHeading: 'Tapping check', checksdescription: 'Checking of tiles by tapping gently done after laying on the mortar bed for settlement.' },
                                            { checksHeading: 'Line and level check', checksdescription: 'Tiles around the Bath Tub fixed in level, with gap for silicon filling and proper slope.' },
                                            { checksHeading: 'Right angle check', checksdescription: 'Skinwalls tiles properly – corner spacing ensured, tile beading and joining unpleasant right angles to the main wall ensured.' },
                                            { checksHeading: 'Level check', checksdescription: 'Tile adhesive applied to back of the tile to accommodate required levels.' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Barricading check', checksdescription: 'Barricading of tiled area suitably done.' },
                                            { checksHeading: 'Covering check', checksdescription: 'Floor tiling covered with low quality POP.' },
                                            { checksHeading: 'Grouting check', checksdescription: 'The grouted joints cleaned of dust and mortar before silicon application.' },
                                            { checksHeading: 'Silicon filling check', checksdescription: 'Silicon filling done in the Kitchen and Bathroom.' },
                                            { checksHeading: 'Silicon filling check', checksdescription: 'The nozzle of silicon cartridge cut at 45 degree.' },
                                            { checksHeading: 'Silicon filling check', checksdescription: 'The grouted joints made dry before silicon application.' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'The surface is found clean and even before silicon application.' },
                                            { checksHeading: 'Masking tape check', checksdescription: 'The masking tape removed immediately after finishing the tile joints before skin develops' },
                                            { checksHeading: 'Joints check', checksdescription: 'Silicon joints smoothen with soap water and tool to get a perfect finish after removing of the masking tape.' },
                                        ];

                                        async function GradeBlankChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        GradeBlankChacks();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'B3 - Washroom Tiling') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1 Wall Tiles', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Arrange the latest GFC Drawings at Site' },
                                            { subtaskdescription: 'Ask the contractor for cleaning and surface preparation for tiling' },
                                            { subtaskdescription: 'Confirm the availability of clearance from Brick and plaster department to start the work.' },
                                            { subtaskdescription: 'Confirm the availability of clearance from Plumbing and Electrical department to proceed tiling works.' },
                                            { subtaskdescription: 'Ask the contractor to arrange the required tools at site' },
                                            { subtaskdescription: 'Arrange the quantity of tiles required to complete the work available.Code and Brand to be checked' },
                                            { subtaskdescription: 'Explain the contractor about the pattern of laying the tiles' },
                                            { subtaskdescription: 'Ask the purchase manager to arrange the materials at site' },
                                            { subtaskdescription: 'Assign the contractor for the work' },
                                            { subtaskdescription: 'Make the electricity and Water arrangements at the site' },
                                            { subtaskdescription: 'Arrange the adhesive,grouting compound and silicon a site' },
                                            { subtaskdescription: 'Phase 2 Wall Tiles', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the contractor to fix the height indicators properly' },
                                            { subtaskdescription: 'Ask the contractor to cure the ceramic tiles before placing when fiing done using cement mortar' },
                                            { subtaskdescription: 'Ask the contractor that the corners of the tiles should be matched' },
                                            { subtaskdescription: 'Ask the contractor to remove the adhesive from the tile surface' },
                                            { subtaskdescription: 'Ask the contractor to gently tap the tiles  for the better settlement' },
                                            { subtaskdescription: 'Ask the contractor to do grouting after 24 hrs of tiling' },
                                            { subtaskdescription: 'Ask the contractor to properly align the joints of the tiles' },
                                        ];

                                        async function BeamShutteringReinforcementRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamShutteringReinforcementRCCfunCall();
                                    }
                                    if (newDatanew.subactivityname === 'B3 - Washroom Tiling') {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1 Wall Tiles', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'The surface on which tiles are to be laid is moist, free from dust and other contaminations.' },
                                            { checksHeading: 'Tile code check', checksdescription: 'The tile name and tile code number to be used for that particular area of work is correct.' },
                                            { checksHeading: 'Dimension check', checksdescription: 'Are all tiles according to required dimensions?' },
                                            { checksHeading: 'Chipping check', checksdescription: 'Are there any chipped tile being used for tiling?' },
                                            { checksHeading: 'Tile boxes check', checksdescription: 'Tiles of different boxes of same batch are mixed to ensure uniform tonality.' },
                                            { checksHeading: 'Curing check', checksdescription: 'Ceramic tiles cured before placing when cement mortar is being used for tiling.' },
                                            { checksHeading: 'Procedure check', checksdescription: 'Is correct laying procedure followed (like leveling using rubber hammer and checking with spirit level etc).' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Cleaning of joints from loose mortar done immediately after tile laying.' },
                                            { checksHeading: 'Pvc bead check', checksdescription: 'Is the PVC bead laid in a single piece and cut to 45 degree inclination at the joints?' },
                                            { checksHeading: 'Cutting check', checksdescription: 'The circular cutting in tile for the pipes have been properly done.' },
                                            { checksHeading: 'Adhesive check', checksdescription: 'Is flexible tile adhesive used in case of under-tile waterproofing?' },
                                            { checksHeading: 'Adhesive check', checksdescription: 'Is tile adhesive applied using appropriate notch trowel.' },
                                            { checksHeading: 'Adhesive check', checksdescription: 'Are tiles being laid before adhesive starts to dry.' },
                                            { checksHeading: 'Adhesive check', checksdescription: 'Wet tile adhesive cleaned off from the tile surface using damp cloth.' },
                                            { checksHeading: 'Tapping check', checksdescription: 'Checking of tiles by tapping gently done after laying on the mortar bed for settlement.' },
                                            { checksHeading: 'Line and level check', checksdescription: 'Tiles around the Bath Tub fixed in level, with gap for silicon filling and proper slope.' },
                                            { checksHeading: 'Right angle check', checksdescription: 'Skinwalls tiles properly – corner spacing ensured, tile beading and joining unpleasant right angles to the main wall ensured.' },
                                            { checksHeading: 'Level check', checksdescription: 'Tile adhesive applied to back of the tile to accommodate required levels.' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Barricading check', checksdescription: 'Barricading of tiled area suitably done.' },
                                            { checksHeading: 'Covering check', checksdescription: 'Floor tiling covered with low quality POP.' },
                                            { checksHeading: 'Grouting check', checksdescription: 'The grouted joints cleaned of dust and mortar before silicon application.' },
                                            { checksHeading: 'Silicon filling check', checksdescription: 'Silicon filling done in the Kitchen and Bathroom.' },
                                            { checksHeading: 'Silicon filling check', checksdescription: 'The nozzle of silicon cartridge cut at 45 degree.' },
                                            { checksHeading: 'Silicon filling check', checksdescription: 'The grouted joints made dry before silicon application.' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'The surface is found clean and even before silicon application.' },
                                            { checksHeading: 'Masking tape check', checksdescription: 'The masking tape removed immediately after finishing the tile joints before skin develops' },
                                            { checksHeading: 'Joints check', checksdescription: 'Silicon joints smoothen with soap water and tool to get a perfect finish after removing of the masking tape.' },
                                        ];

                                        async function GradeBlankChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        GradeBlankChacks();
                                    }

                                    //Anuj
                                    if (newDatanew.subactivityname === 'B4 - Washroom Tiling') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1 Wall Tiles', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Arrange the latest GFC Drawings at Site' },
                                            { subtaskdescription: 'Ask the contractor for cleaning and surface preparation for tiling' },
                                            { subtaskdescription: 'Confirm the availability of clearance from Brick and plaster department to start the work.' },
                                            { subtaskdescription: 'Confirm the availability of clearance from Plumbing and Electrical department to proceed tiling works.' },
                                            { subtaskdescription: 'Ask the contractor to arrange the required tools at site' },
                                            { subtaskdescription: 'Arrange the quantity of tiles required to complete the work available.Code and Brand to be checked' },
                                            { subtaskdescription: 'Explain the contractor about the pattern of laying the tiles' },
                                            { subtaskdescription: 'Ask the purchase manager to arrange the materials at site' },
                                            { subtaskdescription: 'Assign the contractor for the work' },
                                            { subtaskdescription: 'Make the electricity and Water arrangements at the site' },
                                            { subtaskdescription: 'Arrange the adhesive,grouting compound and silicon a site' },
                                            { subtaskdescription: 'Phase 2 Wall Tiles', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the contractor to fix the height indicators properly' },
                                            { subtaskdescription: 'Ask the contractor to cure the ceramic tiles before placing when fiing done using cement mortar' },
                                            { subtaskdescription: 'Ask the contractor that the corners of the tiles should be matched' },
                                            { subtaskdescription: 'Ask the contractor to remove the adhesive from the tile surface' },
                                            { subtaskdescription: 'Ask the contractor to gently tap the tiles  for the better settlement' },
                                            { subtaskdescription: 'Ask the contractor to do grouting after 24 hrs of tiling' },
                                            { subtaskdescription: 'Ask the contractor to properly align the joints of the tiles' },
                                        ];

                                        async function BeamShutteringReinforcementRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamShutteringReinforcementRCCfunCall();
                                    }
                                    if (newDatanew.subactivityname === 'B4 - Washroom Tiling') {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1 Wall Tiles', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'The surface on which tiles are to be laid is moist, free from dust and other contaminations.' },
                                            { checksHeading: 'Tile code check', checksdescription: 'The tile name and tile code number to be used for that particular area of work is correct.' },
                                            { checksHeading: 'Dimension check', checksdescription: 'Are all tiles according to required dimensions?' },
                                            { checksHeading: 'Chipping check', checksdescription: 'Are there any chipped tile being used for tiling?' },
                                            { checksHeading: 'Tile boxes check', checksdescription: 'Tiles of different boxes of same batch are mixed to ensure uniform tonality.' },
                                            { checksHeading: 'Curing check', checksdescription: 'Ceramic tiles cured before placing when cement mortar is being used for tiling.' },
                                            { checksHeading: 'Procedure check', checksdescription: 'Is correct laying procedure followed (like leveling using rubber hammer and checking with spirit level etc).' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Cleaning of joints from loose mortar done immediately after tile laying.' },
                                            { checksHeading: 'Pvc bead check', checksdescription: 'Is the PVC bead laid in a single piece and cut to 45 degree inclination at the joints?' },
                                            { checksHeading: 'Cutting check', checksdescription: 'The circular cutting in tile for the pipes have been properly done.' },
                                            { checksHeading: 'Adhesive check', checksdescription: 'Is flexible tile adhesive used in case of under-tile waterproofing?' },
                                            { checksHeading: 'Adhesive check', checksdescription: 'Is tile adhesive applied using appropriate notch trowel.' },
                                            { checksHeading: 'Adhesive check', checksdescription: 'Are tiles being laid before adhesive starts to dry.' },
                                            { checksHeading: 'Adhesive check', checksdescription: 'Wet tile adhesive cleaned off from the tile surface using damp cloth.' },
                                            { checksHeading: 'Tapping check', checksdescription: 'Checking of tiles by tapping gently done after laying on the mortar bed for settlement.' },
                                            { checksHeading: 'Line and level check', checksdescription: 'Tiles around the Bath Tub fixed in level, with gap for silicon filling and proper slope.' },
                                            { checksHeading: 'Right angle check', checksdescription: 'Skinwalls tiles properly – corner spacing ensured, tile beading and joining unpleasant right angles to the main wall ensured.' },
                                            { checksHeading: 'Level check', checksdescription: 'Tile adhesive applied to back of the tile to accommodate required levels.' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Barricading check', checksdescription: 'Barricading of tiled area suitably done.' },
                                            { checksHeading: 'Covering check', checksdescription: 'Floor tiling covered with low quality POP.' },
                                            { checksHeading: 'Grouting check', checksdescription: 'The grouted joints cleaned of dust and mortar before silicon application.' },
                                            { checksHeading: 'Silicon filling check', checksdescription: 'Silicon filling done in the Kitchen and Bathroom.' },
                                            { checksHeading: 'Silicon filling check', checksdescription: 'The nozzle of silicon cartridge cut at 45 degree.' },
                                            { checksHeading: 'Silicon filling check', checksdescription: 'The grouted joints made dry before silicon application.' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'The surface is found clean and even before silicon application.' },
                                            { checksHeading: 'Masking tape check', checksdescription: 'The masking tape removed immediately after finishing the tile joints before skin develops' },
                                            { checksHeading: 'Joints check', checksdescription: 'Silicon joints smoothen with soap water and tool to get a perfect finish after removing of the masking tape.' },
                                        ];

                                        async function GradeBlankChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        GradeBlankChacks();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'GF - Washroom Tiling') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1 Wall Tiles', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Arrange the latest GFC Drawings at Site' },
                                            { subtaskdescription: 'Ask the contractor for cleaning and surface preparation for tiling' },
                                            { subtaskdescription: 'Confirm the availability of clearance from Brick and plaster department to start the work.' },
                                            { subtaskdescription: 'Confirm the availability of clearance from Plumbing and Electrical department to proceed tiling works.' },
                                            { subtaskdescription: 'Ask the contractor to arrange the required tools at site' },
                                            { subtaskdescription: 'Arrange the quantity of tiles required to complete the work available.Code and Brand to be checked' },
                                            { subtaskdescription: 'Explain the contractor about the pattern of laying the tiles' },
                                            { subtaskdescription: 'Ask the purchase manager to arrange the materials at site' },
                                            { subtaskdescription: 'Assign the contractor for the work' },
                                            { subtaskdescription: 'Make the electricity and Water arrangements at the site' },
                                            { subtaskdescription: 'Arrange the adhesive,grouting compound and silicon a site' },
                                            { subtaskdescription: 'Phase 2 Wall Tiles', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the contractor to fix the height indicators properly' },
                                            { subtaskdescription: 'Ask the contractor to cure the ceramic tiles before placing when fiing done using cement mortar' },
                                            { subtaskdescription: 'Ask the contractor that the corners of the tiles should be matched' },
                                            { subtaskdescription: 'Ask the contractor to remove the adhesive from the tile surface' },
                                            { subtaskdescription: 'Ask the contractor to gently tap the tiles  for the better settlement' },
                                            { subtaskdescription: 'Ask the contractor to do grouting after 24 hrs of tiling' },
                                            { subtaskdescription: 'Ask the contractor to properly align the joints of the tiles' },
                                        ];

                                        async function BeamShutteringReinforcementRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamShutteringReinforcementRCCfunCall();
                                    }



                                    if (newDatanew.subactivityname === "GF - Washroom Tiling") {

                                        const dataArranew = [
                                            { materailname: 'Tile - 01', materailquantity: materlID.GFWashroomTilingTile01Quantity, materailUnit: 'SQM' },
                                            { materailname: 'Portland Cement', materailquantity: materlID.GFWashroomTilingPortlandCementQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Course Sand', materailquantity: materlID.GFWashroomTilingCourseSandQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Adhesive', materailquantity: materlID.GFWashroomTilingAdhesiveQuantity, materailUnit: '20 KG BAG' },
                                            { materailname: 'Epoxy', materailquantity: materlID.GFWashroomTilingEpoxyQuantity, materailUnit: 'KG' },
                                            { materailname: 'Metal Strip', materailquantity: materlID.GFWashroomTilingMetalStripQuantity, materailUnit: 'RUFT' },
                                            { materailname: 'Tile Leveller', materailquantity: materlID.GFWashroomTilingTileLevellerQuantity, materailUnit: 'NOS.' }
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }





                                    if (newDatanew.subactivityname === "FF - Washroom Tiling") {

                                        const dataArranew = [
                                            { materailname: 'Tile - 01', materailquantity: materlID.FFWashroomTilingTile01Quantity, materailUnit: 'SQM' },
                                            { materailname: 'Portland Cement', materailquantity: materlID.FFWashroomTilingPortlandCementQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Course Sand', materailquantity: materlID.FFWashroomTilingCourseSandQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Adhesive', materailquantity: materlID.FFWashroomTilingAdhesiveQuantity, materailUnit: '20 KG BAG' },
                                            { materailname: 'Epoxy', materailquantity: materlID.FFWashroomTilingEpoxyQuantity, materailUnit: 'KG' },
                                            { materailname: 'Metal Strip', materailquantity: materlID.FFWashroomTilingMetalStripQuantity, materailUnit: 'RUFT' },
                                            { materailname: 'Tile Leveller', materailquantity: materlID.FFWashroomTilingTileLevellerQuantity, materailUnit: 'NOS.' }
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === "SF - Washroom Tiling") {

                                        const dataArranew = [
                                            { materailname: 'Tile - 01', materailquantity: materlID.SFWashroomTilingTile01Quantity, materailUnit: 'SQM' },
                                            { materailname: 'Portland Cement', materailquantity: materlID.SFWashroomTilingPortlandCementQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Course Sand', materailquantity: materlID.SFWashroomTilingCourseSandQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Adhesive', materailquantity: materlID.SFWashroomTilingAdhesiveQuantity, materailUnit: '20 KG BAG' },
                                            { materailname: 'Epoxy', materailquantity: materlID.SFWashroomTilingEpoxyQuantity, materailUnit: 'KG' },
                                            { materailname: 'Metal Strip', materailquantity: materlID.SFWashroomTilingMetalStripQuantity, materailUnit: 'RUFT' },
                                            { materailname: 'Tile Leveller', materailquantity: materlID.SFWashroomTilingTileLevellerQuantity, materailUnit: 'NOS.' }
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === "TF - Washroom Tiling") {

                                        const dataArranew = [
                                            { materailname: 'Tile - 01', materailquantity: materlID.TFWashroomTilingTile01Quantity, materailUnit: 'SQM' },
                                            { materailname: 'Portland Cement', materailquantity: materlID.TFWashroomTilingPortlandCementQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Course Sand', materailquantity: materlID.TFWashroomTilingCourseSandQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Adhesive', materailquantity: materlID.TFWashroomTilingAdhesiveQuantity, materailUnit: '20 KG BAG' },
                                            { materailname: 'Epoxy', materailquantity: materlID.TFWashroomTilingEpoxyQuantity, materailUnit: 'KG' },
                                            { materailname: 'Metal Strip', materailquantity: materlID.TFWashroomTilingMetalStripQuantity, materailUnit: 'RUFT' },
                                            { materailname: 'Tile Leveller', materailquantity: materlID.TFWashroomTilingTileLevellerQuantity, materailUnit: 'NOS.' }
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }



                                    if (newDatanew.subactivityname === "FoF - Washroom Tiling") {

                                        const dataArranew = [
                                            { materailname: 'Tile - 01', materailquantity: materlID.FoFWashroomTilingTile01Quantity, materailUnit: 'SQM' },
                                            { materailname: 'Portland Cement', materailquantity: materlID.FoFWashroomTilingPortlandCementQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Course Sand', materailquantity: materlID.FoFWashroomTilingCourseSandQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Adhesive', materailquantity: materlID.FoFWashroomTilingAdhesiveQuantity, materailUnit: '20 KG BAG' },
                                            { materailname: 'Epoxy', materailquantity: materlID.FoFWashroomTilingEpoxyQuantity, materailUnit: 'KG' },
                                            { materailname: 'Metal Strip', materailquantity: materlID.FoFWashroomTilingMetalStripQuantity, materailUnit: 'RUFT' },
                                            { materailname: 'Tile Leveller', materailquantity: materlID.FoFWashroomTilingTileLevellerQuantity, materailUnit: 'NOS.' }
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }

                                    if (newDatanew.subactivityname === "Tower - Washroom Tiling") {

                                        const dataArranew = [
                                            { materailname: 'Tile - 01', materailquantity: materlID.TowerWashroomTilingTile01Quantity, materailUnit: 'SQM' },
                                            { materailname: 'Portland Cement', materailquantity: materlID.TowerWashroomTilingPortlandCementQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Course Sand', materailquantity: materlID.TowerWashroomTilingCourseSandQuantity, materailUnit: 'CUFT' },
                                            { materailname: 'Adhesive', materailquantity: materlID.TowerWashroomTilingAdhesiveQuantity, materailUnit: '20 KG BAG' },
                                            { materailname: 'Epoxy', materailquantity: materlID.TowerWashroomTilingEpoxyQuantity, materailUnit: 'KG' },
                                            { materailname: 'Metal Strip', materailquantity: materlID.TowerWashroomTilingMetalStripQuantity, materailUnit: 'RUFT' },
                                            { materailname: 'Tile Leveller', materailquantity: materlID.TowerWashroomTilingTileLevellerQuantity, materailUnit: 'NOS.' }
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === "GF - Floor Tiling") {

                                        const dataArranew = [
                                            { materailname: 'Tile - 01', materailquantity: materlID.GFFloorTilingTile01Quantity, materailUnit: 'SQM' },
                                            { materailname: 'Portland Cement', materailquantity: materlID.GFFloorTilingPortlandCementQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Course Sand', materailquantity: materlID.GFFloorTilingCourseSandQuantity, materailUnit: 'CUFT.' },
                                            { materailname: 'Girra Gitti', materailquantity: materlID.GFFloorTilingGirraGittiQuantity, materailUnit: 'CUFT.' },
                                            { materailname: 'Adhesive', materailquantity: materlID.GFFloorTilingAdhesiveQuantity, materailUnit: '20 KG BAG' },
                                            { materailname: 'Epoxy', materailquantity: materlID.GFFloorTilingEpoxyQuantity, materailUnit: 'KG' },
                                            { materailname: 'Joint Filler', materailquantity: materlID.GFFloorTilingJointFillerQuantity, materailUnit: 'RUFT' },
                                            { materailname: 'Tile Leveller', materailquantity: materlID.GFFloorTilingTileLevellerQuantity, materailUnit: 'NOS.' }
                                        ];


                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }



                                    if (newDatanew.subactivityname === "FF - Floor Tiling") {

                                        const dataArranew = [
                                            { materailname: 'Tile - 01', materailquantity: materlID.FFFloorTilingTile01Quantity, materailUnit: 'SQM' },
                                            { materailname: 'Portland Cement', materailquantity: materlID.FFFloorTilingPortlandCementQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Course Sand', materailquantity: materlID.FFFloorTilingCourseSandQuantity, materailUnit: 'CUFT.' },
                                            { materailname: 'Girra Gitti', materailquantity: materlID.FFFloorTilingGirraGittiQuantity, materailUnit: 'CUFT.' },
                                            { materailname: 'Adhesive', materailquantity: materlID.FFFloorTilingAdhesiveQuantity, materailUnit: '20 KG BAG' },
                                            { materailname: 'Epoxy', materailquantity: materlID.FFFloorTilingEpoxyQuantity, materailUnit: 'KG' },
                                            { materailname: 'Joint Filler', materailquantity: materlID.FFFloorTilingJointFillerQuantity, materailUnit: 'RUFT' },
                                            { materailname: 'Tile Leveller', materailquantity: materlID.FFFloorTilingTileLevellerQuantity, materailUnit: 'NOS.' }
                                        ];


                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }

                                    if (newDatanew.subactivityname === "SF - Floor Tiling") {

                                        const dataArranew = [
                                            { materailname: 'Tile - 01', materailquantity: materlID.SFFloorTilingTile01Quantity, materailUnit: 'SQM' },
                                            { materailname: 'Portland Cement', materailquantity: materlID.SFFloorTilingPortlandCementQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Course Sand', materailquantity: materlID.SFFloorTilingCourseSandQuantity, materailUnit: 'CUFT.' },
                                            { materailname: 'Girra Gitti', materailquantity: materlID.SFFloorTilingGirraGittiQuantity, materailUnit: 'CUFT.' },
                                            { materailname: 'Adhesive', materailquantity: materlID.SFFloorTilingAdhesiveQuantity, materailUnit: '20 KG BAG' },
                                            { materailname: 'Epoxy', materailquantity: materlID.SFFloorTilingEpoxyQuantity, materailUnit: 'KG' },
                                            { materailname: 'Joint Filler', materailquantity: materlID.SFFloorTilingJointFillerQuantity, materailUnit: 'RUFT' },
                                            { materailname: 'Tile Leveller', materailquantity: materlID.SFFloorTilingTileLevellerQuantity, materailUnit: 'NOS.' }
                                        ];


                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }



                                    if (newDatanew.subactivityname === "TF - Floor Tiling") {

                                        const dataArranew = [
                                            { materailname: 'Tile - 01', materailquantity: materlID.TFFloorTilingTile01Quantity, materailUnit: 'SQM' },
                                            { materailname: 'Portland Cement', materailquantity: materlID.TFFloorTilingPortlandCementQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Course Sand', materailquantity: materlID.TFFloorTilingCourseSandQuantity, materailUnit: 'CUFT.' },
                                            { materailname: 'Girra Gitti', materailquantity: materlID.TFFloorTilingGirraGittiQuantity, materailUnit: 'CUFT.' },
                                            { materailname: 'Adhesive', materailquantity: materlID.TFFloorTilingAdhesiveQuantity, materailUnit: '20 KG BAG' },
                                            { materailname: 'Epoxy', materailquantity: materlID.TFFloorTilingEpoxyQuantity, materailUnit: 'KG' },
                                            { materailname: 'Joint Filler', materailquantity: materlID.TFFloorTilingJointFillerQuantity, materailUnit: 'RUFT' },
                                            { materailname: 'Tile Leveller', materailquantity: materlID.TFFloorTilingTileLevellerQuantity, materailUnit: 'NOS.' }
                                        ];


                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === "FoF - Floor Tiling") {

                                        const dataArranew = [
                                            { materailname: 'Tile - 01', materailquantity: materlID.FoFFloorTilingTile01Quantity, materailUnit: 'SQM' },
                                            { materailname: 'Portland Cement', materailquantity: materlID.FoFFloorTilingPortlandCementQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Course Sand', materailquantity: materlID.FoFFloorTilingCourseSandQuantity, materailUnit: 'CUFT.' },
                                            { materailname: 'Girra Gitti', materailquantity: materlID.FoFFloorTilingGirraGittiQuantity, materailUnit: 'CUFT.' },
                                            { materailname: 'Adhesive', materailquantity: materlID.FoFFloorTilingAdhesiveQuantity, materailUnit: '20 KG BAG' },
                                            { materailname: 'Epoxy', materailquantity: materlID.FoFFloorTilingEpoxyQuantity, materailUnit: 'KG' },
                                            { materailname: 'Joint Filler', materailquantity: materlID.FoFFloorTilingJointFillerQuantity, materailUnit: 'RUFT' },
                                            { materailname: 'Tile Leveller', materailquantity: materlID.FoFFloorTilingTileLevellerQuantity, materailUnit: 'NOS.' }
                                        ];


                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }



                                    if (newDatanew.subactivityname === "Tower - Floor Tiling") {

                                        const dataArranew = [
                                            { materailname: 'Tile - 01', materailquantity: materlID.TowerFloorTilingTile01Quantity, materailUnit: 'SQM' },
                                            { materailname: 'Portland Cement', materailquantity: materlID.TowerFloorTilingPortlandCementQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Course Sand', materailquantity: materlID.TowerFloorTilingCourseSandQuantity, materailUnit: 'CUFT.' },
                                            { materailname: 'Girra Gitti', materailquantity: materlID.TowerFloorTilingGirraGittiQuantity, materailUnit: 'CUFT.' },
                                            { materailname: 'Adhesive', materailquantity: materlID.TowerFloorTilingAdhesiveQuantity, materailUnit: '20 KG BAG' },
                                            { materailname: 'Epoxy', materailquantity: materlID.TowerFloorTilingEpoxyQuantity, materailUnit: 'KG' },
                                            { materailname: 'Joint Filler', materailquantity: materlID.TowerFloorTilingJointFillerQuantity, materailUnit: 'RUFT' },
                                            { materailname: 'Tile Leveller', materailquantity: materlID.TowerFloorTilingTileLevellerQuantity, materailUnit: 'NOS.' }
                                        ];


                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }



                                    if (newDatanew.subactivityname === "Other Area Vertical Wall") {

                                        const dataArranew = [
                                            { materailname: 'Tile - 01', materailquantity: materlID.OtherAreaVerticalWallTile01Quantity, materailUnit: 'SQM' },
                                            { materailname: 'Portland Cement', materailquantity: materlID.OtherAreaVerticalWallPortlandCementQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Course Sand', materailquantity: materlID.OtherAreaVerticalWallCourseSandQuantity, materailUnit: 'CUFT.' },
                                            { materailname: 'Adhesive', materailquantity: materlID.OtherAreaVerticalWallAdhesiveQuantity, materailUnit: '20 KG BAG' },
                                            { materailname: 'Epoxy', materailquantity: materlID.OtherAreaVerticalWallEpoxyQuantity, materailUnit: 'KG' },
                                            { materailname: 'Tile Leveller', materailquantity: materlID.OtherAreaVerticalWallTileLevellerQuantity, materailUnit: 'NOS.' }
                                        ];


                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === "Platform") {

                                        const dataArranew = [
                                            { materailname: 'Granite | Stone Work', materailquantity: materlID.PlatformGraniteStoneWorkQuantity, materailUnit: 'SQM' },
                                            { materailname: 'Portland Cement', materailquantity: materlID.PlatformPortlandCementQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Course Sand', materailquantity: materlID.PlatformCourseSandQuantity, materailUnit: 'CUFT.' },
                                            { materailname: 'Adhesive', materailquantity: materlID.PlatformAdhesiveQuantity, materailUnit: '20 KG BAG' },
                                            { materailname: 'Vertical - Baswada', materailquantity: materlID.PlatformVerticalBaswadaQuantity, materailUnit: 'PIECES' },
                                            { materailname: 'Baswada Horizontal - Top + Bottom', materailquantity: materlID.PlatformBaswadaHorizontalTopBottomQuantity, materailUnit: 'SQFT.' }
                                        ];



                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }

                                    if (newDatanew.subactivityname === "Platform") {

                                        const dataArranew = [
                                            {},
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Vertical', NormalHeadingThree: 'Horizontal', NormalHeadingfoure: 'Grout Fill' },
                                            {},
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }

                                    if (newDatanew.subactivityname === "Granite Running") {

                                        const dataArranew = [
                                            { materailname: 'Granite | Stone Work', materailquantity: materlID.GraniteRunningGraniteStoneWorkQuantity, materailUnit: 'SQM' },
                                            { materailname: 'Portland Cement', materailquantity: materlID.GraniteRunningPortlandCementQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Course Sand', materailquantity: materlID.GraniteRunningCourseSandQuantity, materailUnit: 'CUFT.' },
                                            { materailname: 'Adhesive', materailquantity: materlID.GraniteRunningAdhesiveQuantity, materailUnit: '20 KG BAG' },

                                        ];



                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }



                                    if (newDatanew.subactivityname === "Staircase") {

                                        const dataArranew = [
                                            { materailname: 'Stone Work  - Tread', materailquantity: materlID.StaircaseStoneWorkTreadQuantity, materailUnit: 'SQM' },
                                            { materailname: 'Tiling Work  - Riser + Skirting', materailquantity: materlID.StaircaseTilingWorkRiserSkirtingQuantity, materailUnit: 'SQM' },
                                            { materailname: 'Portland Cement', materailquantity: materlID.StaircasePortlandCementQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Course Sand', materailquantity: materlID.StaircaseCourseSandQuantity, materailUnit: 'CUFT.' },
                                            { materailname: 'Adhesive', materailquantity: materlID.StaircaseAdhesiveQuantity, materailUnit: '20 KG BAG' },

                                        ];



                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }



                                    if (newDatanew.subactivityname === "Staircase") {

                                        const dataArranew = [
                                            {},
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Step Level', NormalHeadingThree: 'Tread', NormalHeadingfoure: 'Riser' },
                                            {},
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }

                                    if (newDatanew.subactivityname === "Any Tank or Other Area") {

                                        const dataArranew = [
                                            { materailname: 'Tile - 01', materailquantity: materlID.AnyTankOrOtherAreaTile01Quantity, materailUnit: 'SQM' },
                                            { materailname: 'Portland Cement', materailquantity: materlID.AnyTankOrOtherAreaPortlandCementQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Course Sand', materailquantity: materlID.AnyTankOrOtherAreaCourseSandQuantity, materailUnit: 'CUFT.' },
                                            { materailname: 'Adhesive', materailquantity: materlID.AnyTankOrOtherAreaAdhesiveQuantity, materailUnit: '20 KG BAG' },
                                            { materailname: 'Epoxy', materailquantity: materlID.AnyTankOrOtherAreaEpoxyQuantity, materailUnit: 'KG' },
                                            { materailname: 'Tile Leveller', materailquantity: materlID.AnyTankOrOtherAreaTileLevellerQuantity, materailUnit: 'NOS.' }
                                        ];


                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === "Any Tank or Other Area") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Dependency', headingforshortingTwo: 'Tiling Prep.', headingforshortingThree: 'Tiling', headingforshortingFour: 'Final Finish' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Plaster Fini.', NormalHeadingThree: 'Int. Fitting', NormalHeadingfoure: 'Ele. Condu.' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Waterproof', NormalHeadingThree: 'Base Level', NormalHeadingfoure: 'Base Tile' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: '-X', NormalHeadingThree: '+Y', NormalHeadingfoure: '-Y' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Grout Fill', NormalHeadingThree: 'Traps', NormalHeadingfoure: 'Coin | Verti.' },
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }

                                    if (newDatanew.subactivityname === "Ramp - Entrace Level") {

                                        const dataArranew = [
                                            { materailname: 'Vetrified', materailquantity: materlID.RampEntranceLevelVetrifiedQuantity, materailUnit: 'SQM' },
                                            { materailname: 'Portland Cement', materailquantity: materlID.RampEntranceLevelPortlandCementQuantity, materailUnit: 'BAG' },
                                            { materailname: 'Course Sand', materailquantity: materlID.RampEntranceLevelCourseSandQuantity, materailUnit: 'CUFT.' },
                                            { materailname: 'Adhesive', materailquantity: materlID.RampEntranceLevelAdhesiveQuantity, materailUnit: '20 KG BAG' },

                                        ];


                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }



                                    if (newDatanew.subactivityname === "Terrace Area Flooring") {

                                        if (TerraceAreaFloorinASD === "CobaTilling") {
                                            var dataArraneAAAAAAAw = [
                                                { materailname: 'Cement', materailquantity: materlID.TEF_CobaTilingWorkCementQuantity, materailUnit: 'BAG' },
                                                { materailname: 'Sand', materailquantity: materlID.TEF_CobaTilingWorkSandQuantity, materailUnit: 'CUFT' },
                                                { materailname: 'Brick Bat', materailquantity: materlID.TEF_CobaTilingWorkBrickBatQuantity, materailUnit: 'CUFT' },
                                                { materailname: 'Waterproofing Compound', materailquantity: materlID.TEF_CobaTilingWorkWaterproofingCompoundQuantity, materailUnit: 'KG' },
                                                { materailname: 'Fiber Glass Tissue', materailquantity: materlID.TEF_CobaTilingWorkFiberGlassTissueQuantity, materailUnit: 'SQM' },
                                                { materailname: 'Vetrified Tile', materailquantity: materlID.TEF_CobaTilingWorkVetrifiedTileQuantity, materailUnit: 'SQM' },
                                                { materailname: 'Adhesive', materailquantity: materlID.TEF_CobaTilingWorkAdhesiveQuantity, materailUnit: '20 KG BAG' },
                                                { materailname: 'Epoxy', materailquantity: materlID.TEF_CobaTilingWorkEpoxyQuantity, materailUnit: 'KG' },
                                                { materailname: 'Joint Filler', materailquantity: materlID.TEF_CobaTilingWorkJointFillerQuantity, materailUnit: 'RUFT' },
                                                { materailname: 'Tile Leveller', materailquantity: materlID.TEF_CobaTilingWorkTileLevellerQuantity, materailUnit: 'NOS.' }
                                            ];

                                        } else if (TerraceAreaFloorinASD === "Coba") {
                                            var dataArraneAAAAAAAw = [
                                                { materailname: 'Cement', materailquantity: materlID.TEF_CobaCementQuantity, materailUnit: 'BAG' },
                                                { materailname: 'Sand', materailquantity: materlID.TEF_CobaSandQuantity, materailUnit: 'CUFT' },
                                                { materailname: 'Brick Bat', materailquantity: materlID.TEF_CobaBrickBatQuantity, materailUnit: 'CUFT' },
                                                { materailname: 'Waterproofing Compound', materailquantity: materlID.TEF_CobaWaterproofingCompoundQuantity, materailUnit: 'KG' },
                                                { materailname: 'Fiber Glass Tissue', materailquantity: materlID.TEF_CobaFiberGlassTissueQuantity, materailUnit: 'SQM' }
                                            ];


                                        } else if (TerraceAreaFloorinASD === "PCC") {
                                            var dataArraneAAAAAAAw = [
                                                { materailname: 'Cement', materailquantity: materlID.TEF_PPCWaterproofCementQuantity, materailUnit: 'BAG' },
                                                { materailname: 'Sand', materailquantity: materlID.TEF_PPCWaterproofSandQuantity, materailUnit: 'CUFT' },
                                                { materailname: 'Stone Aggregate', materailquantity: materlID.TEF_PPCWaterproofStoneAggregateQuantity, materailUnit: 'CUM' },
                                                { materailname: 'Waterproofing Compound', materailquantity: materlID.TEF_PPCWaterproofWaterproofingCompoundQuantity, materailUnit: 'KG' }
                                            ];


                                        } else if (TerraceAreaFloorinASD === "Tilling") {
                                            var dataArraneAAAAAAAw = [
                                                { materailname: 'Tile - 01', materailquantity: materlID.TEF_TilingWorkTile01Quantity, materailUnit: 'SQM' },
                                                { materailname: 'Portland Cement', materailquantity: materlID.TEF_TilingWorkPortlandCementQuantity, materailUnit: 'BAG' },
                                                { materailname: 'Course Sand', materailquantity: materlID.TEF_TilingWorkCourseSandQuantity, materailUnit: 'CUFT.' },
                                                { materailname: 'Adhesive', materailquantity: materlID.TEF_TilingWorkAdhesiveQuantity, materailUnit: '20 KG BAG' },
                                                { materailname: 'White Cement', materailquantity: materlID.TEF_TilingWorkWhiteCementQuantity, materailUnit: 'KG' },
                                                { materailname: 'Pigment', materailquantity: materlID.TEF_TilingWorkPigmentQuantity, materailUnit: 'KG' }
                                            ];

                                        } else if (TerraceAreaFloorinASD === "Terrezo") {
                                            var dataArraneAAAAAAAw = [
                                                { materailname: 'Cement', materailquantity: materlID.TEF_TerazzoDanaWorkCementQuantity, materailUnit: 'BAG' },
                                                { materailname: 'Sand', materailquantity: materlID.TEF_TerazzoDanaWorkSandQuantity, materailUnit: 'CUFT' },
                                                { materailname: 'Marble Pieces', materailquantity: materlID.TEF_TerazzoDanaWorkMarblePiecesQuantity, materailUnit: 'Quintal' },
                                                { materailname: 'White Cement', materailquantity: materlID.TEF_TerazzoDanaWorkWhiteCementQuantity, materailUnit: 'KG' },
                                                { materailname: 'Marble Dust', materailquantity: materlID.TEF_TerazzoDanaWorkMarbleDustQuantity, materailUnit: 'CUFT' },
                                                { materailname: 'Light Shade Pigment', materailquantity: materlID.TEF_TerazzoDanaWorkLightShadePigmentQuantity, materailUnit: 'KG' },
                                                { materailname: 'Marble Chip - 4MM White & Black', materailquantity: materlID.TEF_TerazzoDanaWorkMarbleChip4MMWhiteBlackQuantity, materailUnit: 'Quintal' }
                                            ];


                                        } else if (TerraceAreaFloorinASD === "Bituman") {
                                            var dataArraneAAAAAAAw = [
                                                { materailname: 'Portland Cement', materailquantity: materlID.TEF_BitumenMembraceWaterproofingPortlandCementQuantity, materailUnit: 'BAG' },
                                                { materailname: 'Course Sand', materailquantity: materlID.TEF_BitumenMembraceWaterproofingCourseSandQuantity, materailUnit: 'CUFT' },
                                                { materailname: 'Blown Type Petroleum Bitumen', materailquantity: materlID.TEF_BitumenMembraceWaterproofingBlownTypePetroleumBitumenQuantity, materailUnit: 'KG' },
                                                { materailname: 'Polyvinyle Chloride Sheet - 400 Micron', materailquantity: materlID.TEF_BitumenMembraceWaterproofingPolyvinyleChlorideSheet400MicronQuantity, materailUnit: 'SQM' },
                                                { materailname: 'Waterproofing Compound', materailquantity: materlID.TEF_BitumenMembraceWaterproofingWaterproofingCompoundQuantity, materailUnit: 'KG' },
                                                { materailname: 'Vetrified Tile', materailquantity: materlID.TEF_BitumenMembraceWaterproofingVetrifiedTileQuantity, materailUnit: 'SQM' },
                                                { materailname: 'Adhesive', materailquantity: materlID.TEF_BitumenMembraceWaterproofingAdhesiveQuantity, materailUnit: '20 KG BAG' },
                                                { materailname: 'Epoxy', materailquantity: materlID.TEF_BitumenMembraceWaterproofingEpoxyQuantity, materailUnit: 'KG' },
                                                { materailname: 'Joint Filler', materailquantity: materlID.TEF_BitumenMembraceWaterproofingJointFillerQuantity, materailUnit: 'RUFT' },
                                                { materailname: 'Tile Leveller', materailquantity: materlID.TEF_BitumenMembraceWaterproofingTileLevellerQuantity, materailUnit: 'NOS.' }
                                            ];


                                        } else {
                                            var dataArraneAAAAAAAw = [
                                                { materailname: 'APP Modified Polymeric Felt', materailquantity: materlID.TEF_BitumenMembranceAPPModifiedPolymericFeltQuantity, materailUnit: 'SQM' },
                                                { materailname: 'Bitumen Primer', materailquantity: materlID.TEF_BitumenMembranceBitumenPrimerQuantity, materailUnit: 'LITRE' },
                                                { materailname: 'Commercial LPG Gas', materailquantity: materlID.TEF_BitumenMembranceCommercialLPGGasQuantity, materailUnit: 'KG' }
                                            ];

                                        }

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArraneAAAAAAAw.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArraneAAAAAAAw[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === "Tower Area Flooring") {

                                        if (TerraceAreaFloorinASD === "CobaTilling") {
                                            var dataArraneASSSSSDDw = [
                                                { materailname: 'Cement', materailquantity: materlID.TOWF_CobaTilingWorkCementQuantity, materailUnit: 'BAG' },
                                                { materailname: 'Sand', materailquantity: materlID.TOWF_CobaTilingWorkSandQuantity, materailUnit: 'CUFT' },
                                                { materailname: 'Brick Bat', materailquantity: materlID.TOWF_CobaTilingWorkBrickBatQuantity, materailUnit: 'CUFT' },
                                                { materailname: 'Waterproofing Compound', materailquantity: materlID.TOWF_CobaTilingWorkWaterproofingCompoundQuantity, materailUnit: 'KG' },
                                                { materailname: 'Fiber Glass Tissue', materailquantity: materlID.TOWF_CobaTilingWorkFiberGlassTissueQuantity, materailUnit: 'SQM' },
                                                { materailname: 'Vetrified Tile', materailquantity: materlID.TOWF_CobaTilingWorkVetrifiedTileQuantity, materailUnit: 'SQM' },
                                                { materailname: 'Adhesive', materailquantity: materlID.TOWF_CobaTilingWorkAdhesiveQuantity, materailUnit: '20 KG BAG' },
                                                { materailname: 'Epoxy', materailquantity: materlID.TOWF_CobaTilingWorkEpoxyQuantity, materailUnit: 'KG' },
                                                { materailname: 'Joint Filler', materailquantity: materlID.TOWF_CobaTilingWorkJointFillerQuantity, materailUnit: 'RUFT' },
                                                { materailname: 'Tile Leveller', materailquantity: materlID.TOWF_CobaTilingWorkTileLevellerQuantity, materailUnit: 'NOS.' }
                                            ];

                                        } else if (TerraceAreaFloorinASD === "Coba") {
                                            var dataArraneASSSSSDDw = [
                                                { materailname: 'Cement', materailquantity: materlID.TOWF_CobaCementQuantity, materailUnit: 'BAG' },
                                                { materailname: 'Sand', materailquantity: materlID.TOWF_CobaSandQuantity, materailUnit: 'CUFT' },
                                                { materailname: 'Brick Bat', materailquantity: materlID.TOWF_CobaBrickBatQuantity, materailUnit: 'CUFT' },
                                                { materailname: 'Waterproofing Compound', materailquantity: materlID.TOWF_CobaWaterproofingCompoundQuantity, materailUnit: 'KG' },
                                                { materailname: 'Fiber Glass Tissue', materailquantity: materlID.TOWF_CobaFiberGlassTissueQuantity, materailUnit: 'SQM' }
                                            ];


                                        } else if (TerraceAreaFloorinASD === "PCC") {
                                            var dataArraneASSSSSDDw = [
                                                { materailname: 'Cement', materailquantity: materlID.TOWF_PPCWaterproofCementQuantity, materailUnit: 'BAG' },
                                                { materailname: 'Sand', materailquantity: materlID.TOWF_PPCWaterproofSandQuantity, materailUnit: 'CUFT' },
                                                { materailname: 'Stone Aggregate', materailquantity: materlID.TOWF_PPCWaterproofStoneAggregateQuantity, materailUnit: 'CUM' },
                                                { materailname: 'Waterproofing Compound', materailquantity: materlID.TOWF_PPCWaterproofWaterproofingCompoundQuantity, materailUnit: 'KG' }
                                            ];


                                        } else if (TerraceAreaFloorinASD === "Tilling") {
                                            var dataArraneASSSSSDDw = [
                                                { materailname: 'Tile - 01', materailquantity: materlID.TOWF_TilingWorkTile01Quantity, materailUnit: 'SQM' },
                                                { materailname: 'Portland Cement', materailquantity: materlID.TOWF_TilingWorkPortlandCementQuantity, materailUnit: 'BAG' },
                                                { materailname: 'Course Sand', materailquantity: materlID.TOWF_TilingWorkCourseSandQuantity, materailUnit: 'CUFT.' },
                                                { materailname: 'Adhesive', materailquantity: materlID.TOWF_TilingWorkAdhesiveQuantity, materailUnit: '20 KG BAG' },
                                                { materailname: 'White Cement', materailquantity: materlID.TOWF_TilingWorkWhiteCementQuantity, materailUnit: 'KG' },
                                                { materailname: 'Pigment', materailquantity: materlID.TOWF_TilingWorkPigmentQuantity, materailUnit: 'KG' }
                                            ];

                                        } else if (TerraceAreaFloorinASD === "Terrezo") {
                                            var dataArraneASSSSSDDw = [
                                                { materailname: 'Cement', materailquantity: materlID.TOWF_TerazzoDanaWorkCementQuantity, materailUnit: 'BAG' },
                                                { materailname: 'Sand', materailquantity: materlID.TOWF_TerazzoDanaWorkSandQuantity, materailUnit: 'CUFT' },
                                                { materailname: 'Marble Pieces', materailquantity: materlID.TOWF_TerazzoDanaWorkMarblePiecesQuantity, materailUnit: 'Quintal' },
                                                { materailname: 'White Cement', materailquantity: materlID.TOWF_TerazzoDanaWorkWhiteCementQuantity, materailUnit: 'KG' },
                                                { materailname: 'Marble Dust', materailquantity: materlID.TOWF_TerazzoDanaWorkMarbleDustQuantity, materailUnit: 'CUFT' },
                                                { materailname: 'Light Shade Pigment', materailquantity: materlID.TOWF_TerazzoDanaWorkLightShadePigmentQuantity, materailUnit: 'KG' },
                                                { materailname: 'Marble Chip - 4MM White & Black', materailquantity: materlID.TOWF_TerazzoDanaWorkMarbleChip4MMWhiteBlackQuantity, materailUnit: 'Quintal' }
                                            ];


                                        } else if (TerraceAreaFloorinASD === "Bituman") {
                                            var dataArraneASSSSSDDw = [
                                                { materailname: 'Portland Cement', materailquantity: materlID.TOWF_BitumenMembraceWaterproofingPortlandCementQuantity, materailUnit: 'BAG' },
                                                { materailname: 'Course Sand', materailquantity: materlID.TOWF_BitumenMembraceWaterproofingCourseSandQuantity, materailUnit: 'CUFT' },
                                                { materailname: 'Blown Type Petroleum Bitumen', materailquantity: materlID.TOWF_BitumenMembraceWaterproofingBlownTypePetroleumBitumenQuantity, materailUnit: 'KG' },
                                                { materailname: 'Polyvinyle Chloride Sheet - 400 Micron', materailquantity: materlID.TOWF_BitumenMembraceWaterproofingPolyvinyleChlorideSheet400MicronQuantity, materailUnit: 'SQM' },
                                                { materailname: 'Waterproofing Compound', materailquantity: materlID.TOWF_BitumenMembraceWaterproofingWaterproofingCompoundQuantity, materailUnit: 'KG' },
                                                { materailname: 'Vetrified Tile', materailquantity: materlID.TOWF_BitumenMembraceWaterproofingVetrifiedTileQuantity, materailUnit: 'SQM' },
                                                { materailname: 'Adhesive', materailquantity: materlID.TOWF_BitumenMembraceWaterproofingAdhesiveQuantity, materailUnit: '20 KG BAG' },
                                                { materailname: 'Epoxy', materailquantity: materlID.TOWF_BitumenMembraceWaterproofingEpoxyQuantity, materailUnit: 'KG' },
                                                { materailname: 'Joint Filler', materailquantity: materlID.TOWF_BitumenMembraceWaterproofingJointFillerQuantity, materailUnit: 'RUFT' },
                                                { materailname: 'Tile Leveller', materailquantity: materlID.TOWF_BitumenMembraceWaterproofingTileLevellerQuantity, materailUnit: 'NOS.' }
                                            ];


                                        } else {
                                            var dataArraneASSSSSDDw = [
                                                { materailname: 'APP Modified Polymeric Felt', materailquantity: materlID.TOWF_BitumenMembranceAPPModifiedPolymericFeltQuantity, materailUnit: 'SQM' },
                                                { materailname: 'Bitumen Primer', materailquantity: materlID.TOWF_BitumenMembranceBitumenPrimerQuantity, materailUnit: 'LITRE' },
                                                { materailname: 'Commercial LPG Gas', materailquantity: materlID.TOWF_BitumenMembranceCommercialLPGGasQuantity, materailUnit: 'KG' }
                                            ];

                                        }

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArraneASSSSSDDw.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArraneASSSSSDDw[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }




                                    if (newDatanew.subactivityname === 'GF - Washroom Tiling') {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1 Wall Tiles', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'The surface on which tiles are to be laid is moist, free from dust and other contaminations.' },
                                            { checksHeading: 'Tile code check', checksdescription: 'The tile name and tile code number to be used for that particular area of work is correct.' },
                                            { checksHeading: 'Dimension check', checksdescription: 'Are all tiles according to required dimensions?' },
                                            { checksHeading: 'Chipping check', checksdescription: 'Are there any chipped tile being used for tiling?' },
                                            { checksHeading: 'Tile boxes check', checksdescription: 'Tiles of different boxes of same batch are mixed to ensure uniform tonality.' },
                                            { checksHeading: 'Curing check', checksdescription: 'Ceramic tiles cured before placing when cement mortar is being used for tiling.' },
                                            { checksHeading: 'Procedure check', checksdescription: 'Is correct laying procedure followed (like leveling using rubber hammer and checking with spirit level etc).' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Cleaning of joints from loose mortar done immediately after tile laying.' },
                                            { checksHeading: 'Pvc bead check', checksdescription: 'Is the PVC bead laid in a single piece and cut to 45 degree inclination at the joints?' },
                                            { checksHeading: 'Cutting check', checksdescription: 'The circular cutting in tile for the pipes have been properly done.' },
                                            { checksHeading: 'Adhesive check', checksdescription: 'Is flexible tile adhesive used in case of under-tile waterproofing?' },
                                            { checksHeading: 'Adhesive check', checksdescription: 'Is tile adhesive applied using appropriate notch trowel.' },
                                            { checksHeading: 'Adhesive check', checksdescription: 'Are tiles being laid before adhesive starts to dry.' },
                                            { checksHeading: 'Adhesive check', checksdescription: 'Wet tile adhesive cleaned off from the tile surface using damp cloth.' },
                                            { checksHeading: 'Tapping check', checksdescription: 'Checking of tiles by tapping gently done after laying on the mortar bed for settlement.' },
                                            { checksHeading: 'Line and level check', checksdescription: 'Tiles around the Bath Tub fixed in level, with gap for silicon filling and proper slope.' },
                                            { checksHeading: 'Right angle check', checksdescription: 'Skinwalls tiles properly – corner spacing ensured, tile beading and joining unpleasant right angles to the main wall ensured.' },
                                            { checksHeading: 'Level check', checksdescription: 'Tile adhesive applied to back of the tile to accommodate required levels.' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Barricading check', checksdescription: 'Barricading of tiled area suitably done.' },
                                            { checksHeading: 'Covering check', checksdescription: 'Floor tiling covered with low quality POP.' },
                                            { checksHeading: 'Grouting check', checksdescription: 'The grouted joints cleaned of dust and mortar before silicon application.' },
                                            { checksHeading: 'Silicon filling check', checksdescription: 'Silicon filling done in the Kitchen and Bathroom.' },
                                            { checksHeading: 'Silicon filling check', checksdescription: 'The nozzle of silicon cartridge cut at 45 degree.' },
                                            { checksHeading: 'Silicon filling check', checksdescription: 'The grouted joints made dry before silicon application.' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'The surface is found clean and even before silicon application.' },
                                            { checksHeading: 'Masking tape check', checksdescription: 'The masking tape removed immediately after finishing the tile joints before skin develops' },
                                            { checksHeading: 'Joints check', checksdescription: 'Silicon joints smoothen with soap water and tool to get a perfect finish after removing of the masking tape.' },
                                        ];

                                        async function GradeBlankChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        GradeBlankChacks();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'FF - Washroom Tiling') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1 Wall Tiles', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Arrange the latest GFC Drawings at Site' },
                                            { subtaskdescription: 'Ask the contractor for cleaning and surface preparation for tiling' },
                                            { subtaskdescription: 'Confirm the availability of clearance from Brick and plaster department to start the work.' },
                                            { subtaskdescription: 'Confirm the availability of clearance from Plumbing and Electrical department to proceed tiling works.' },
                                            { subtaskdescription: 'Ask the contractor to arrange the required tools at site' },
                                            { subtaskdescription: 'Arrange the quantity of tiles required to complete the work available.Code and Brand to be checked' },
                                            { subtaskdescription: 'Explain the contractor about the pattern of laying the tiles' },
                                            { subtaskdescription: 'Ask the purchase manager to arrange the materials at site' },
                                            { subtaskdescription: 'Assign the contractor for the work' },
                                            { subtaskdescription: 'Make the electricity and Water arrangements at the site' },
                                            { subtaskdescription: 'Arrange the adhesive,grouting compound and silicon a site' },
                                            { subtaskdescription: 'Phase 2 Wall Tiles', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the contractor to fix the height indicators properly' },
                                            { subtaskdescription: 'Ask the contractor to cure the ceramic tiles before placing when fiing done using cement mortar' },
                                            { subtaskdescription: 'Ask the contractor that the corners of the tiles should be matched' },
                                            { subtaskdescription: 'Ask the contractor to remove the adhesive from the tile surface' },
                                            { subtaskdescription: 'Ask the contractor to gently tap the tiles  for the better settlement' },
                                            { subtaskdescription: 'Ask the contractor to do grouting after 24 hrs of tiling' },
                                            { subtaskdescription: 'Ask the contractor to properly align the joints of the tiles' },
                                        ];

                                        async function BeamShutteringReinforcementRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamShutteringReinforcementRCCfunCall();
                                    }
                                    if (newDatanew.subactivityname === 'FF - Washroom Tiling') {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1 Wall Tiles', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'The surface on which tiles are to be laid is moist, free from dust and other contaminations.' },
                                            { checksHeading: 'Tile code check', checksdescription: 'The tile name and tile code number to be used for that particular area of work is correct.' },
                                            { checksHeading: 'Dimension check', checksdescription: 'Are all tiles according to required dimensions?' },
                                            { checksHeading: 'Chipping check', checksdescription: 'Are there any chipped tile being used for tiling?' },
                                            { checksHeading: 'Tile boxes check', checksdescription: 'Tiles of different boxes of same batch are mixed to ensure uniform tonality.' },
                                            { checksHeading: 'Curing check', checksdescription: 'Ceramic tiles cured before placing when cement mortar is being used for tiling.' },
                                            { checksHeading: 'Procedure check', checksdescription: 'Is correct laying procedure followed (like leveling using rubber hammer and checking with spirit level etc).' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Cleaning of joints from loose mortar done immediately after tile laying.' },
                                            { checksHeading: 'Pvc bead check', checksdescription: 'Is the PVC bead laid in a single piece and cut to 45 degree inclination at the joints?' },
                                            { checksHeading: 'Cutting check', checksdescription: 'The circular cutting in tile for the pipes have been properly done.' },
                                            { checksHeading: 'Adhesive check', checksdescription: 'Is flexible tile adhesive used in case of under-tile waterproofing?' },
                                            { checksHeading: 'Adhesive check', checksdescription: 'Is tile adhesive applied using appropriate notch trowel.' },
                                            { checksHeading: 'Adhesive check', checksdescription: 'Are tiles being laid before adhesive starts to dry.' },
                                            { checksHeading: 'Adhesive check', checksdescription: 'Wet tile adhesive cleaned off from the tile surface using damp cloth.' },
                                            { checksHeading: 'Tapping check', checksdescription: 'Checking of tiles by tapping gently done after laying on the mortar bed for settlement.' },
                                            { checksHeading: 'Line and level check', checksdescription: 'Tiles around the Bath Tub fixed in level, with gap for silicon filling and proper slope.' },
                                            { checksHeading: 'Right angle check', checksdescription: 'Skinwalls tiles properly – corner spacing ensured, tile beading and joining unpleasant right angles to the main wall ensured.' },
                                            { checksHeading: 'Level check', checksdescription: 'Tile adhesive applied to back of the tile to accommodate required levels.' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Barricading check', checksdescription: 'Barricading of tiled area suitably done.' },
                                            { checksHeading: 'Covering check', checksdescription: 'Floor tiling covered with low quality POP.' },
                                            { checksHeading: 'Grouting check', checksdescription: 'The grouted joints cleaned of dust and mortar before silicon application.' },
                                            { checksHeading: 'Silicon filling check', checksdescription: 'Silicon filling done in the Kitchen and Bathroom.' },
                                            { checksHeading: 'Silicon filling check', checksdescription: 'The nozzle of silicon cartridge cut at 45 degree.' },
                                            { checksHeading: 'Silicon filling check', checksdescription: 'The grouted joints made dry before silicon application.' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'The surface is found clean and even before silicon application.' },
                                            { checksHeading: 'Masking tape check', checksdescription: 'The masking tape removed immediately after finishing the tile joints before skin develops' },
                                            { checksHeading: 'Joints check', checksdescription: 'Silicon joints smoothen with soap water and tool to get a perfect finish after removing of the masking tape.' },
                                        ];

                                        async function GradeBlankChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        GradeBlankChacks();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'SF - Washroom Tiling') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1 Wall Tiles', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Arrange the latest GFC Drawings at Site' },
                                            { subtaskdescription: 'Ask the contractor for cleaning and surface preparation for tiling' },
                                            { subtaskdescription: 'Confirm the availability of clearance from Brick and plaster department to start the work.' },
                                            { subtaskdescription: 'Confirm the availability of clearance from Plumbing and Electrical department to proceed tiling works.' },
                                            { subtaskdescription: 'Ask the contractor to arrange the required tools at site' },
                                            { subtaskdescription: 'Arrange the quantity of tiles required to complete the work available.Code and Brand to be checked' },
                                            { subtaskdescription: 'Explain the contractor about the pattern of laying the tiles' },
                                            { subtaskdescription: 'Ask the purchase manager to arrange the materials at site' },
                                            { subtaskdescription: 'Assign the contractor for the work' },
                                            { subtaskdescription: 'Make the electricity and Water arrangements at the site' },
                                            { subtaskdescription: 'Arrange the adhesive,grouting compound and silicon a site' },
                                            { subtaskdescription: 'Phase 2 Wall Tiles', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the contractor to fix the height indicators properly' },
                                            { subtaskdescription: 'Ask the contractor to cure the ceramic tiles before placing when fiing done using cement mortar' },
                                            { subtaskdescription: 'Ask the contractor that the corners of the tiles should be matched' },
                                            { subtaskdescription: 'Ask the contractor to remove the adhesive from the tile surface' },
                                            { subtaskdescription: 'Ask the contractor to gently tap the tiles  for the better settlement' },
                                            { subtaskdescription: 'Ask the contractor to do grouting after 24 hrs of tiling' },
                                            { subtaskdescription: 'Ask the contractor to properly align the joints of the tiles' },
                                        ];

                                        async function BeamShutteringReinforcementRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamShutteringReinforcementRCCfunCall();
                                    }
                                    if (newDatanew.subactivityname === 'SF - Washroom Tiling') {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1 Wall Tiles', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'The surface on which tiles are to be laid is moist, free from dust and other contaminations.' },
                                            { checksHeading: 'Tile code check', checksdescription: 'The tile name and tile code number to be used for that particular area of work is correct.' },
                                            { checksHeading: 'Dimension check', checksdescription: 'Are all tiles according to required dimensions?' },
                                            { checksHeading: 'Chipping check', checksdescription: 'Are there any chipped tile being used for tiling?' },
                                            { checksHeading: 'Tile boxes check', checksdescription: 'Tiles of different boxes of same batch are mixed to ensure uniform tonality.' },
                                            { checksHeading: 'Curing check', checksdescription: 'Ceramic tiles cured before placing when cement mortar is being used for tiling.' },
                                            { checksHeading: 'Procedure check', checksdescription: 'Is correct laying procedure followed (like leveling using rubber hammer and checking with spirit level etc).' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Cleaning of joints from loose mortar done immediately after tile laying.' },
                                            { checksHeading: 'Pvc bead check', checksdescription: 'Is the PVC bead laid in a single piece and cut to 45 degree inclination at the joints?' },
                                            { checksHeading: 'Cutting check', checksdescription: 'The circular cutting in tile for the pipes have been properly done.' },
                                            { checksHeading: 'Adhesive check', checksdescription: 'Is flexible tile adhesive used in case of under-tile waterproofing?' },
                                            { checksHeading: 'Adhesive check', checksdescription: 'Is tile adhesive applied using appropriate notch trowel.' },
                                            { checksHeading: 'Adhesive check', checksdescription: 'Are tiles being laid before adhesive starts to dry.' },
                                            { checksHeading: 'Adhesive check', checksdescription: 'Wet tile adhesive cleaned off from the tile surface using damp cloth.' },
                                            { checksHeading: 'Tapping check', checksdescription: 'Checking of tiles by tapping gently done after laying on the mortar bed for settlement.' },
                                            { checksHeading: 'Line and level check', checksdescription: 'Tiles around the Bath Tub fixed in level, with gap for silicon filling and proper slope.' },
                                            { checksHeading: 'Right angle check', checksdescription: 'Skinwalls tiles properly – corner spacing ensured, tile beading and joining unpleasant right angles to the main wall ensured.' },
                                            { checksHeading: 'Level check', checksdescription: 'Tile adhesive applied to back of the tile to accommodate required levels.' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Barricading check', checksdescription: 'Barricading of tiled area suitably done.' },
                                            { checksHeading: 'Covering check', checksdescription: 'Floor tiling covered with low quality POP.' },
                                            { checksHeading: 'Grouting check', checksdescription: 'The grouted joints cleaned of dust and mortar before silicon application.' },
                                            { checksHeading: 'Silicon filling check', checksdescription: 'Silicon filling done in the Kitchen and Bathroom.' },
                                            { checksHeading: 'Silicon filling check', checksdescription: 'The nozzle of silicon cartridge cut at 45 degree.' },
                                            { checksHeading: 'Silicon filling check', checksdescription: 'The grouted joints made dry before silicon application.' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'The surface is found clean and even before silicon application.' },
                                            { checksHeading: 'Masking tape check', checksdescription: 'The masking tape removed immediately after finishing the tile joints before skin develops' },
                                            { checksHeading: 'Joints check', checksdescription: 'Silicon joints smoothen with soap water and tool to get a perfect finish after removing of the masking tape.' },
                                        ];

                                        async function GradeBlankChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        GradeBlankChacks();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'TF - Washroom Tiling') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1 Wall Tiles', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Arrange the latest GFC Drawings at Site' },
                                            { subtaskdescription: 'Ask the contractor for cleaning and surface preparation for tiling' },
                                            { subtaskdescription: 'Confirm the availability of clearance from Brick and plaster department to start the work.' },
                                            { subtaskdescription: 'Confirm the availability of clearance from Plumbing and Electrical department to proceed tiling works.' },
                                            { subtaskdescription: 'Ask the contractor to arrange the required tools at site' },
                                            { subtaskdescription: 'Arrange the quantity of tiles required to complete the work available.Code and Brand to be checked' },
                                            { subtaskdescription: 'Explain the contractor about the pattern of laying the tiles' },
                                            { subtaskdescription: 'Ask the purchase manager to arrange the materials at site' },
                                            { subtaskdescription: 'Assign the contractor for the work' },
                                            { subtaskdescription: 'Make the electricity and Water arrangements at the site' },
                                            { subtaskdescription: 'Arrange the adhesive,grouting compound and silicon a site' },
                                            { subtaskdescription: 'Phase 2 Wall Tiles', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the contractor to fix the height indicators properly' },
                                            { subtaskdescription: 'Ask the contractor to cure the ceramic tiles before placing when fiing done using cement mortar' },
                                            { subtaskdescription: 'Ask the contractor that the corners of the tiles should be matched' },
                                            { subtaskdescription: 'Ask the contractor to remove the adhesive from the tile surface' },
                                            { subtaskdescription: 'Ask the contractor to gently tap the tiles  for the better settlement' },
                                            { subtaskdescription: 'Ask the contractor to do grouting after 24 hrs of tiling' },
                                            { subtaskdescription: 'Ask the contractor to properly align the joints of the tiles' },
                                        ];

                                        async function BeamShutteringReinforcementRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamShutteringReinforcementRCCfunCall();
                                    }
                                    if (newDatanew.subactivityname === 'TF - Washroom Tiling') {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1 Wall Tiles', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'The surface on which tiles are to be laid is moist, free from dust and other contaminations.' },
                                            { checksHeading: 'Tile code check', checksdescription: 'The tile name and tile code number to be used for that particular area of work is correct.' },
                                            { checksHeading: 'Dimension check', checksdescription: 'Are all tiles according to required dimensions?' },
                                            { checksHeading: 'Chipping check', checksdescription: 'Are there any chipped tile being used for tiling?' },
                                            { checksHeading: 'Tile boxes check', checksdescription: 'Tiles of different boxes of same batch are mixed to ensure uniform tonality.' },
                                            { checksHeading: 'Curing check', checksdescription: 'Ceramic tiles cured before placing when cement mortar is being used for tiling.' },
                                            { checksHeading: 'Procedure check', checksdescription: 'Is correct laying procedure followed (like leveling using rubber hammer and checking with spirit level etc).' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Cleaning of joints from loose mortar done immediately after tile laying.' },
                                            { checksHeading: 'Pvc bead check', checksdescription: 'Is the PVC bead laid in a single piece and cut to 45 degree inclination at the joints?' },
                                            { checksHeading: 'Cutting check', checksdescription: 'The circular cutting in tile for the pipes have been properly done.' },
                                            { checksHeading: 'Adhesive check', checksdescription: 'Is flexible tile adhesive used in case of under-tile waterproofing?' },
                                            { checksHeading: 'Adhesive check', checksdescription: 'Is tile adhesive applied using appropriate notch trowel.' },
                                            { checksHeading: 'Adhesive check', checksdescription: 'Are tiles being laid before adhesive starts to dry.' },
                                            { checksHeading: 'Adhesive check', checksdescription: 'Wet tile adhesive cleaned off from the tile surface using damp cloth.' },
                                            { checksHeading: 'Tapping check', checksdescription: 'Checking of tiles by tapping gently done after laying on the mortar bed for settlement.' },
                                            { checksHeading: 'Line and level check', checksdescription: 'Tiles around the Bath Tub fixed in level, with gap for silicon filling and proper slope.' },
                                            { checksHeading: 'Right angle check', checksdescription: 'Skinwalls tiles properly – corner spacing ensured, tile beading and joining unpleasant right angles to the main wall ensured.' },
                                            { checksHeading: 'Level check', checksdescription: 'Tile adhesive applied to back of the tile to accommodate required levels.' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Barricading check', checksdescription: 'Barricading of tiled area suitably done.' },
                                            { checksHeading: 'Covering check', checksdescription: 'Floor tiling covered with low quality POP.' },
                                            { checksHeading: 'Grouting check', checksdescription: 'The grouted joints cleaned of dust and mortar before silicon application.' },
                                            { checksHeading: 'Silicon filling check', checksdescription: 'Silicon filling done in the Kitchen and Bathroom.' },
                                            { checksHeading: 'Silicon filling check', checksdescription: 'The nozzle of silicon cartridge cut at 45 degree.' },
                                            { checksHeading: 'Silicon filling check', checksdescription: 'The grouted joints made dry before silicon application.' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'The surface is found clean and even before silicon application.' },
                                            { checksHeading: 'Masking tape check', checksdescription: 'The masking tape removed immediately after finishing the tile joints before skin develops' },
                                            { checksHeading: 'Joints check', checksdescription: 'Silicon joints smoothen with soap water and tool to get a perfect finish after removing of the masking tape.' },
                                        ];

                                        async function GradeBlankChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        GradeBlankChacks();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'FOF - Washroom Tiling') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1 Wall Tiles', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Arrange the latest GFC Drawings at Site' },
                                            { subtaskdescription: 'Ask the contractor for cleaning and surface preparation for tiling' },
                                            { subtaskdescription: 'Confirm the availability of clearance from Brick and plaster department to start the work.' },
                                            { subtaskdescription: 'Confirm the availability of clearance from Plumbing and Electrical department to proceed tiling works.' },
                                            { subtaskdescription: 'Ask the contractor to arrange the required tools at site' },
                                            { subtaskdescription: 'Arrange the quantity of tiles required to complete the work available.Code and Brand to be checked' },
                                            { subtaskdescription: 'Explain the contractor about the pattern of laying the tiles' },
                                            { subtaskdescription: 'Ask the purchase manager to arrange the materials at site' },
                                            { subtaskdescription: 'Assign the contractor for the work' },
                                            { subtaskdescription: 'Make the electricity and Water arrangements at the site' },
                                            { subtaskdescription: 'Arrange the adhesive,grouting compound and silicon a site' },
                                            { subtaskdescription: 'Phase 2 Wall Tiles', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the contractor to fix the height indicators properly' },
                                            { subtaskdescription: 'Ask the contractor to cure the ceramic tiles before placing when fiing done using cement mortar' },
                                            { subtaskdescription: 'Ask the contractor that the corners of the tiles should be matched' },
                                            { subtaskdescription: 'Ask the contractor to remove the adhesive from the tile surface' },
                                            { subtaskdescription: 'Ask the contractor to gently tap the tiles  for the better settlement' },
                                            { subtaskdescription: 'Ask the contractor to do grouting after 24 hrs of tiling' },
                                            { subtaskdescription: 'Ask the contractor to properly align the joints of the tiles' },
                                        ];

                                        async function BeamShutteringReinforcementRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamShutteringReinforcementRCCfunCall();
                                    }
                                    if (newDatanew.subactivityname === 'FOF - Washroom Tiling') {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1 Wall Tiles', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'The surface on which tiles are to be laid is moist, free from dust and other contaminations.' },
                                            { checksHeading: 'Tile code check', checksdescription: 'The tile name and tile code number to be used for that particular area of work is correct.' },
                                            { checksHeading: 'Dimension check', checksdescription: 'Are all tiles according to required dimensions?' },
                                            { checksHeading: 'Chipping check', checksdescription: 'Are there any chipped tile being used for tiling?' },
                                            { checksHeading: 'Tile boxes check', checksdescription: 'Tiles of different boxes of same batch are mixed to ensure uniform tonality.' },
                                            { checksHeading: 'Curing check', checksdescription: 'Ceramic tiles cured before placing when cement mortar is being used for tiling.' },
                                            { checksHeading: 'Procedure check', checksdescription: 'Is correct laying procedure followed (like leveling using rubber hammer and checking with spirit level etc).' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Cleaning of joints from loose mortar done immediately after tile laying.' },
                                            { checksHeading: 'Pvc bead check', checksdescription: 'Is the PVC bead laid in a single piece and cut to 45 degree inclination at the joints?' },
                                            { checksHeading: 'Cutting check', checksdescription: 'The circular cutting in tile for the pipes have been properly done.' },
                                            { checksHeading: 'Adhesive check', checksdescription: 'Is flexible tile adhesive used in case of under-tile waterproofing?' },
                                            { checksHeading: 'Adhesive check', checksdescription: 'Is tile adhesive applied using appropriate notch trowel.' },
                                            { checksHeading: 'Adhesive check', checksdescription: 'Are tiles being laid before adhesive starts to dry.' },
                                            { checksHeading: 'Adhesive check', checksdescription: 'Wet tile adhesive cleaned off from the tile surface using damp cloth.' },
                                            { checksHeading: 'Tapping check', checksdescription: 'Checking of tiles by tapping gently done after laying on the mortar bed for settlement.' },
                                            { checksHeading: 'Line and level check', checksdescription: 'Tiles around the Bath Tub fixed in level, with gap for silicon filling and proper slope.' },
                                            { checksHeading: 'Right angle check', checksdescription: 'Skinwalls tiles properly – corner spacing ensured, tile beading and joining unpleasant right angles to the main wall ensured.' },
                                            { checksHeading: 'Level check', checksdescription: 'Tile adhesive applied to back of the tile to accommodate required levels.' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Barricading check', checksdescription: 'Barricading of tiled area suitably done.' },
                                            { checksHeading: 'Covering check', checksdescription: 'Floor tiling covered with low quality POP.' },
                                            { checksHeading: 'Grouting check', checksdescription: 'The grouted joints cleaned of dust and mortar before silicon application.' },
                                            { checksHeading: 'Silicon filling check', checksdescription: 'Silicon filling done in the Kitchen and Bathroom.' },
                                            { checksHeading: 'Silicon filling check', checksdescription: 'The nozzle of silicon cartridge cut at 45 degree.' },
                                            { checksHeading: 'Silicon filling check', checksdescription: 'The grouted joints made dry before silicon application.' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'The surface is found clean and even before silicon application.' },
                                            { checksHeading: 'Masking tape check', checksdescription: 'The masking tape removed immediately after finishing the tile joints before skin develops' },
                                            { checksHeading: 'Joints check', checksdescription: 'Silicon joints smoothen with soap water and tool to get a perfect finish after removing of the masking tape.' },
                                        ];

                                        async function GradeBlankChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        GradeBlankChacks();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'Tower - Floor Tiling') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1 Wall Tiles', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Arrange the latest GFC Drawings at Site' },
                                            { subtaskdescription: 'Ask the contractor for cleaning and surface preparation for tiling' },
                                            { subtaskdescription: 'Confirm the availability of clearance from Brick and plaster department to start the work.' },
                                            { subtaskdescription: 'Confirm the availability of clearance from Plumbing and Electrical department to proceed tiling works.' },
                                            { subtaskdescription: 'Ask the contractor to arrange the required tools at site' },
                                            { subtaskdescription: 'Arrange the quantity of tiles required to complete the work available.Code and Brand to be checked' },
                                            { subtaskdescription: 'Explain the contractor about the pattern of laying the tiles' },
                                            { subtaskdescription: 'Ask the purchase manager to arrange the materials at site' },
                                            { subtaskdescription: 'Assign the contractor for the work' },
                                            { subtaskdescription: 'Make the electricity and Water arrangements at the site' },
                                            { subtaskdescription: 'Arrange the adhesive,grouting compound and silicon a site' },
                                            { subtaskdescription: 'Phase 2 Wall Tiles', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the contractor to fix the height indicators properly' },
                                            { subtaskdescription: 'Ask the contractor to cure the ceramic tiles before placing when fiing done using cement mortar' },
                                            { subtaskdescription: 'Ask the contractor that the corners of the tiles should be matched' },
                                            { subtaskdescription: 'Ask the contractor to remove the adhesive from the tile surface' },
                                            { subtaskdescription: 'Ask the contractor to gently tap the tiles  for the better settlement' },
                                            { subtaskdescription: 'Ask the contractor to do grouting after 24 hrs of tiling' },
                                            { subtaskdescription: 'Ask the contractor to properly align the joints of the tiles' },
                                        ];

                                        async function BeamShutteringReinforcementRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamShutteringReinforcementRCCfunCall();
                                    }
                                    if (newDatanew.subactivityname === 'Tower - Floor Tiling') {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1 Wall Tiles', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'The surface on which tiles are to be laid is moist, free from dust and other contaminations.' },
                                            { checksHeading: 'Tile code check', checksdescription: 'The tile name and tile code number to be used for that particular area of work is correct.' },
                                            { checksHeading: 'Dimension check', checksdescription: 'Are all tiles according to required dimensions?' },
                                            { checksHeading: 'Chipping check', checksdescription: 'Are there any chipped tile being used for tiling?' },
                                            { checksHeading: 'Tile boxes check', checksdescription: 'Tiles of different boxes of same batch are mixed to ensure uniform tonality.' },
                                            { checksHeading: 'Curing check', checksdescription: 'Ceramic tiles cured before placing when cement mortar is being used for tiling.' },
                                            { checksHeading: 'Procedure check', checksdescription: 'Is correct laying procedure followed (like leveling using rubber hammer and checking with spirit level etc).' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Cleaning of joints from loose mortar done immediately after tile laying.' },
                                            { checksHeading: 'Pvc bead check', checksdescription: 'Is the PVC bead laid in a single piece and cut to 45 degree inclination at the joints?' },
                                            { checksHeading: 'Cutting check', checksdescription: 'The circular cutting in tile for the pipes have been properly done.' },
                                            { checksHeading: 'Adhesive check', checksdescription: 'Is flexible tile adhesive used in case of under-tile waterproofing?' },
                                            { checksHeading: 'Adhesive check', checksdescription: 'Is tile adhesive applied using appropriate notch trowel.' },
                                            { checksHeading: 'Adhesive check', checksdescription: 'Are tiles being laid before adhesive starts to dry.' },
                                            { checksHeading: 'Adhesive check', checksdescription: 'Wet tile adhesive cleaned off from the tile surface using damp cloth.' },
                                            { checksHeading: 'Tapping check', checksdescription: 'Checking of tiles by tapping gently done after laying on the mortar bed for settlement.' },
                                            { checksHeading: 'Line and level check', checksdescription: 'Tiles around the Bath Tub fixed in level, with gap for silicon filling and proper slope.' },
                                            { checksHeading: 'Right angle check', checksdescription: 'Skinwalls tiles properly – corner spacing ensured, tile beading and joining unpleasant right angles to the main wall ensured.' },
                                            { checksHeading: 'Level check', checksdescription: 'Tile adhesive applied to back of the tile to accommodate required levels.' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Barricading check', checksdescription: 'Barricading of tiled area suitably done.' },
                                            { checksHeading: 'Covering check', checksdescription: 'Floor tiling covered with low quality POP.' },
                                            { checksHeading: 'Grouting check', checksdescription: 'The grouted joints cleaned of dust and mortar before silicon application.' },
                                            { checksHeading: 'Silicon filling check', checksdescription: 'Silicon filling done in the Kitchen and Bathroom.' },
                                            { checksHeading: 'Silicon filling check', checksdescription: 'The nozzle of silicon cartridge cut at 45 degree.' },
                                            { checksHeading: 'Silicon filling check', checksdescription: 'The grouted joints made dry before silicon application.' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'The surface is found clean and even before silicon application.' },
                                            { checksHeading: 'Masking tape check', checksdescription: 'The masking tape removed immediately after finishing the tile joints before skin develops' },
                                            { checksHeading: 'Joints check', checksdescription: 'Silicon joints smoothen with soap water and tool to get a perfect finish after removing of the masking tape.' },
                                        ];

                                        async function GradeBlankChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        GradeBlankChacks();
                                    }

                                    //Anuj
                                    if (newDatanew.subactivityname === 'Other Area Vertical Wall') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1 Wall Tiles', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Arrange the latest GFC Drawings at Site' },
                                            { subtaskdescription: 'Ask the contractor for cleaning and surface preparation for tiling' },
                                            { subtaskdescription: 'Confirm the availability of clearance from Brick and plaster department to start the work.' },
                                            { subtaskdescription: 'Confirm the availability of clearance from Plumbing and Electrical department to proceed tiling works.' },
                                            { subtaskdescription: 'Ask the contractor to arrange the required tools at site' },
                                            { subtaskdescription: 'Arrange the quantity of tiles required to complete the work available.Code and Brand to be checked' },
                                            { subtaskdescription: 'Explain the contractor about the pattern of laying the tiles' },
                                            { subtaskdescription: 'Ask the purchase manager to arrange the materials at site' },
                                            { subtaskdescription: 'Assign the contractor for the work' },
                                            { subtaskdescription: 'Make the electricity and Water arrangements at the site' },
                                            { subtaskdescription: 'Arrange the adhesive,grouting compound and silicon a site' },
                                            { subtaskdescription: 'Phase 2 Wall Tiles', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the contractor to fix the height indicators properly' },
                                            { subtaskdescription: 'Ask the contractor to cure the ceramic tiles before placing when fiing done using cement mortar' },
                                            { subtaskdescription: 'Ask the contractor that the corners of the tiles should be matched' },
                                            { subtaskdescription: 'Ask the contractor to remove the adhesive from the tile surface' },
                                            { subtaskdescription: 'Ask the contractor to gently tap the tiles  for the better settlement' },
                                            { subtaskdescription: 'Ask the contractor to do grouting after 24 hrs of tiling' },
                                            { subtaskdescription: 'Ask the contractor to properly align the joints of the tiles' },
                                        ];

                                        async function BeamShutteringReinforcementRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamShutteringReinforcementRCCfunCall();
                                    }
                                    if (newDatanew.subactivityname === 'Other Area Vertical Wall') {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1 Wall Tiles', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'The surface on which tiles are to be laid is moist, free from dust and other contaminations.' },
                                            { checksHeading: 'Tile code check', checksdescription: 'The tile name and tile code number to be used for that particular area of work is correct.' },
                                            { checksHeading: 'Dimension check', checksdescription: 'Are all tiles according to required dimensions?' },
                                            { checksHeading: 'Chipping check', checksdescription: 'Are there any chipped tile being used for tiling?' },
                                            { checksHeading: 'Tile boxes check', checksdescription: 'Tiles of different boxes of same batch are mixed to ensure uniform tonality.' },
                                            { checksHeading: 'Curing check', checksdescription: 'Ceramic tiles cured before placing when cement mortar is being used for tiling.' },
                                            { checksHeading: 'Procedure check', checksdescription: 'Is correct laying procedure followed (like leveling using rubber hammer and checking with spirit level etc).' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Cleaning of joints from loose mortar done immediately after tile laying.' },
                                            { checksHeading: 'Pvc bead check', checksdescription: 'Is the PVC bead laid in a single piece and cut to 45 degree inclination at the joints?' },
                                            { checksHeading: 'Cutting check', checksdescription: 'The circular cutting in tile for the pipes have been properly done.' },
                                            { checksHeading: 'Adhesive check', checksdescription: 'Is flexible tile adhesive used in case of under-tile waterproofing?' },
                                            { checksHeading: 'Adhesive check', checksdescription: 'Is tile adhesive applied using appropriate notch trowel.' },
                                            { checksHeading: 'Adhesive check', checksdescription: 'Are tiles being laid before adhesive starts to dry.' },
                                            { checksHeading: 'Adhesive check', checksdescription: 'Wet tile adhesive cleaned off from the tile surface using damp cloth.' },
                                            { checksHeading: 'Tapping check', checksdescription: 'Checking of tiles by tapping gently done after laying on the mortar bed for settlement.' },
                                            { checksHeading: 'Line and level check', checksdescription: 'Tiles around the Bath Tub fixed in level, with gap for silicon filling and proper slope.' },
                                            { checksHeading: 'Right angle check', checksdescription: 'Skinwalls tiles properly – corner spacing ensured, tile beading and joining unpleasant right angles to the main wall ensured.' },
                                            { checksHeading: 'Level check', checksdescription: 'Tile adhesive applied to back of the tile to accommodate required levels.' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Barricading check', checksdescription: 'Barricading of tiled area suitably done.' },
                                            { checksHeading: 'Covering check', checksdescription: 'Floor tiling covered with low quality POP.' },
                                            { checksHeading: 'Grouting check', checksdescription: 'The grouted joints cleaned of dust and mortar before silicon application.' },
                                            { checksHeading: 'Silicon filling check', checksdescription: 'Silicon filling done in the Kitchen and Bathroom.' },
                                            { checksHeading: 'Silicon filling check', checksdescription: 'The nozzle of silicon cartridge cut at 45 degree.' },
                                            { checksHeading: 'Silicon filling check', checksdescription: 'The grouted joints made dry before silicon application.' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'The surface is found clean and even before silicon application.' },
                                            { checksHeading: 'Masking tape check', checksdescription: 'The masking tape removed immediately after finishing the tile joints before skin develops' },
                                            { checksHeading: 'Joints check', checksdescription: 'Silicon joints smoothen with soap water and tool to get a perfect finish after removing of the masking tape.' },
                                        ];

                                        async function GradeBlankChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        GradeBlankChacks();
                                    }




                                    if (newDatanew.subactivityname === "Other Area Vertical Wall") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Dependency', headingforshortingTwo: 'Tiling Prep.', headingforshortingThree: 'Tiling', headingforshortingFour: 'Final Finish' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Plaster Fini.', NormalHeadingThree: 'Int. Fitting', NormalHeadingfoure: 'Ele. Condu.' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Waterproof', NormalHeadingThree: 'Base Level', NormalHeadingfoure: 'Base Tile' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: '-X', NormalHeadingThree: '+Y', NormalHeadingfoure: '-Y' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Grout Fill', NormalHeadingThree: 'Traps', NormalHeadingfoure: 'Coin | Verti.' },
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'Staircase') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1 Wall Tiles', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Arrange the latest GFC Drawings at Site' },
                                            { subtaskdescription: 'Ask the contractor for cleaning and surface preparation for tiling' },
                                            { subtaskdescription: 'Confirm the availability of clearance from Brick and plaster department to start the work.' },
                                            { subtaskdescription: 'Confirm the availability of clearance from Plumbing and Electrical department to proceed tiling works.' },
                                            { subtaskdescription: 'Ask the contractor to arrange the required tools at site' },
                                            { subtaskdescription: 'Arrange the quantity of tiles required to complete the work available.Code and Brand to be checked' },
                                            { subtaskdescription: 'Explain the contractor about the pattern of laying the tiles' },
                                            { subtaskdescription: 'Ask the purchase manager to arrange the materials at site' },
                                            { subtaskdescription: 'Assign the contractor for the work' },
                                            { subtaskdescription: 'Make the electricity and Water arrangements at the site' },
                                            { subtaskdescription: 'Arrange the adhesive,grouting compound and silicon a site' },
                                            { subtaskdescription: 'Phase 2 Wall Tiles', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ask the contractor to fix the height indicators properly' },
                                            { subtaskdescription: 'Ask the contractor to cure the ceramic tiles before placing when fiing done using cement mortar' },
                                            { subtaskdescription: 'Ask the contractor that the corners of the tiles should be matched' },
                                            { subtaskdescription: 'Ask the contractor to remove the adhesive from the tile surface' },
                                            { subtaskdescription: 'Ask the contractor to gently tap the tiles  for the better settlement' },
                                            { subtaskdescription: 'Ask the contractor to do grouting after 24 hrs of tiling' },
                                            { subtaskdescription: 'Ask the contractor to properly align the joints of the tiles' },
                                        ];

                                        async function BeamShutteringReinforcementRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamShutteringReinforcementRCCfunCall();
                                    }
                                    if (newDatanew.subactivityname === 'Staircase') {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1 Wall Tiles', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'The surface on which tiles are to be laid is moist, free from dust and other contaminations.' },
                                            { checksHeading: 'Tile code check', checksdescription: 'The tile name and tile code number to be used for that particular area of work is correct.' },
                                            { checksHeading: 'Dimension check', checksdescription: 'Are all tiles according to required dimensions?' },
                                            { checksHeading: 'Chipping check', checksdescription: 'Are there any chipped tile being used for tiling?' },
                                            { checksHeading: 'Tile boxes check', checksdescription: 'Tiles of different boxes of same batch are mixed to ensure uniform tonality.' },
                                            { checksHeading: 'Curing check', checksdescription: 'Ceramic tiles cured before placing when cement mortar is being used for tiling.' },
                                            { checksHeading: 'Procedure check', checksdescription: 'Is correct laying procedure followed (like leveling using rubber hammer and checking with spirit level etc).' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Cleaning of joints from loose mortar done immediately after tile laying.' },
                                            { checksHeading: 'Pvc bead check', checksdescription: 'Is the PVC bead laid in a single piece and cut to 45 degree inclination at the joints?' },
                                            { checksHeading: 'Cutting check', checksdescription: 'The circular cutting in tile for the pipes have been properly done.' },
                                            { checksHeading: 'Adhesive check', checksdescription: 'Is flexible tile adhesive used in case of under-tile waterproofing?' },
                                            { checksHeading: 'Adhesive check', checksdescription: 'Is tile adhesive applied using appropriate notch trowel.' },
                                            { checksHeading: 'Adhesive check', checksdescription: 'Are tiles being laid before adhesive starts to dry.' },
                                            { checksHeading: 'Adhesive check', checksdescription: 'Wet tile adhesive cleaned off from the tile surface using damp cloth.' },
                                            { checksHeading: 'Tapping check', checksdescription: 'Checking of tiles by tapping gently done after laying on the mortar bed for settlement.' },
                                            { checksHeading: 'Line and level check', checksdescription: 'Tiles around the Bath Tub fixed in level, with gap for silicon filling and proper slope.' },
                                            { checksHeading: 'Right angle check', checksdescription: 'Skinwalls tiles properly – corner spacing ensured, tile beading and joining unpleasant right angles to the main wall ensured.' },
                                            { checksHeading: 'Level check', checksdescription: 'Tile adhesive applied to back of the tile to accommodate required levels.' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Barricading check', checksdescription: 'Barricading of tiled area suitably done.' },
                                            { checksHeading: 'Covering check', checksdescription: 'Floor tiling covered with low quality POP.' },
                                            { checksHeading: 'Grouting check', checksdescription: 'The grouted joints cleaned of dust and mortar before silicon application.' },
                                            { checksHeading: 'Silicon filling check', checksdescription: 'Silicon filling done in the Kitchen and Bathroom.' },
                                            { checksHeading: 'Silicon filling check', checksdescription: 'The nozzle of silicon cartridge cut at 45 degree.' },
                                            { checksHeading: 'Silicon filling check', checksdescription: 'The grouted joints made dry before silicon application.' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'The surface is found clean and even before silicon application.' },
                                            { checksHeading: 'Masking tape check', checksdescription: 'The masking tape removed immediately after finishing the tile joints before skin develops' },
                                            { checksHeading: 'Joints check', checksdescription: 'Silicon joints smoothen with soap water and tool to get a perfect finish after removing of the masking tape.' },
                                        ];

                                        async function GradeBlankChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        GradeBlankChacks();
                                    }











                                    await Activities.updateOne(
                                        { _id: newss },
                                        {
                                            $push: {
                                                subactivitiesID: objID
                                            }
                                        }
                                    )
                                    // console.log('Data saved:', savedData);
                                } catch (error) {
                                    // console.error('Error saving data:', error);
                                }
                            }
                        }
                        miscellenousCalling();
                    }










                    if (newData.categoryname === "Door & Window") {
                        const dataArranew = [
                            { subactivityname: 'B1 - Door Panelling', activityID: newData._id, projectID: objectproID, estimateDays: 4, TempID: 11 },
                            { subactivityname: 'B2 - Door Panelling', activityID: newData._id, projectID: objectproID, estimateDays: 4, TempID: 22 },
                            { subactivityname: 'B3 - Door Panelling', activityID: newData._id, projectID: objectproID, estimateDays: 4, TempID: 33 },
                            { subactivityname: 'B4 - Door Panelling', activityID: newData._id, projectID: objectproID, estimateDays: 4, TempID: 44 },
                            { subactivityname: 'GF - Door Panelling', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                            { subactivityname: 'FF - Door Panelling', activityID: newData._id, projectID: objectproID, estimateDays: 4, TempID: 1 },
                            { subactivityname: 'SF - Door Panelling', activityID: newData._id, projectID: objectproID, estimateDays: 4, TempID: 2 },
                            { subactivityname: 'TF - Door Panelling', activityID: newData._id, projectID: objectproID, estimateDays: 4, TempID: 3 },
                            { subactivityname: 'FoF - Door Panelling', activityID: newData._id, projectID: objectproID, estimateDays: 4, TempID: 4 },
                            { subactivityname: 'Tower - Door Panelling', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                            { subactivityname: 'B1 - Window Panelling', activityID: newData._id, projectID: objectproID, estimateDays: b1WindowPanelling_ESTD, TempID: 11 },
                            { subactivityname: 'B2 - Window Panelling', activityID: newData._id, projectID: objectproID, estimateDays: b2WindowPanelling_ESTD, TempID: 22 },
                            { subactivityname: 'B3 - Window Panelling', activityID: newData._id, projectID: objectproID, estimateDays: b3WindowPanelling_ESTD, TempID: 33 },
                            { subactivityname: 'B4 - Window Panelling', activityID: newData._id, projectID: objectproID, estimateDays: b4WindowPanelling_ESTD, TempID: 44 },
                            { subactivityname: 'GF - Window Panelling', activityID: newData._id, projectID: objectproID, estimateDays: gfWindowPanelling_ESTD },
                            { subactivityname: 'FF - Window Panelling', activityID: newData._id, projectID: objectproID, estimateDays: ffWindowPanelling_ESTD, TempID: 1 },
                            { subactivityname: 'SF - Window Panelling', activityID: newData._id, projectID: objectproID, estimateDays: sfWindowPanelling_ESTD, TempID: 2 },
                            { subactivityname: 'TF - Window Panelling', activityID: newData._id, projectID: objectproID, estimateDays: tfWindowPanelling_ESTD, TempID: 3 },
                            { subactivityname: 'FoF - Window Panelling', activityID: newData._id, projectID: objectproID, estimateDays: fofWindowPanelling_ESTD, TempID: 4 },
                            { subactivityname: 'Tower - Window Panelling', activityID: newData._id, projectID: objectproID, estimateDays: towerWindowPanelling_ESTD },
                        ];

                        async function miscellenousCalling() {
                            for (let i = 0; i < dataArranew.length; i++) {

                                if (dataArranew[i].TempID === 1 && NumbersOfFlorrs < 1 || dataArranew[i].TempID === 2 && NumbersOfFlorrs < 2 || dataArranew[i].TempID === 3 && NumbersOfFlorrs < 3 || dataArranew[i].TempID === 4 && NumbersOfFlorrs < 4 || dataArranew[i].TempID === 11 && NumbersOfBasemetFloor === 0 || dataArranew[i].TempID === 22 && NumbersOfBasemetFloor === 0 || dataArranew[i].TempID === 33 && NumbersOfBasemetFloor === 0 || dataArranew[i].TempID === 44 && NumbersOfBasemetFloor === 0) {
                                    continue; // Skip this iteration
                                }
                                try {
                                    const newDatanew = new SubActivities(dataArranew[i]);
                                    const savedData = await newDatanew.save();

                                    let objID = new mongoose.Types.ObjectId(newDatanew.id)
                                    let newss = new mongoose.Types.ObjectId(newData._id)
                                    // console.log(objID);

                                    //Anuj
                                    if (newDatanew.subactivityname === 'B1 - Door Panelling') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Assign the carpenter for the work and ask to review if any interdepencies occur' },
                                            { subtaskdescription: 'Ask the Carpenter to clear the interdepencies and coordinate with the other agencies' },
                                            { subtaskdescription: 'Arrange the material as per site requierment, please confirm the frame type before PO, as per sizes, frame type & other' },
                                            { subtaskdescription: 'Explain the door size,swing and opening direction to the carpenter for all the door type' },
                                            { subtaskdescription: 'Make the arrangement for the electriciy' },
                                            { subtaskdescription: 'Ask the contractor to make the  arrangements  for the supports to the frame' },
                                            { subtaskdescription: 'Final Lintel height confirmation as per drawing' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ensure that Access is clear and safe, temporary access has been provided as required.' },
                                            { subtaskdescription: 'Fastening methods to be confirmed with drawings and details.' },
                                            { subtaskdescription: 'All walls and ceilings to be confirmed plumb and square/are within tolerances for for frames.' },
                                            { subtaskdescription: 'Ensure that Door frame has been installed per drawings and specifications' },
                                            { subtaskdescription: 'Verify the frame as per the hardware schedule' },
                                            { subtaskdescription: 'Check the Size & specification of shutter,Side of opening,Slots & spacing of hinges.' },
                                            { subtaskdescription: 'Confirm the Frames for plumb & alignment' },
                                            { subtaskdescription: 'Ensure the clearance from all side of the shutters' },
                                        ];

                                        async function DoorfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        DoorfunCall();
                                    }
                                    if (newDatanew.subactivityname === 'B1 - Door Panelling') {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Quality Check', checksdescription: 'Quality of door shutters should be good. Warping of surface i.e. formation of the wave pattern on the surface of shutter & broken edges of the shutters should be avoided.' },
                                            { checksHeading: 'Bend Check', checksdescription: 'Shutters with bends at the corners should be rejected.' },
                                            { checksHeading: 'Support Check', checksdescription: 'Temporary frame supports are in place.' },
                                            { checksHeading: 'Unevenness check', checksdescription: 'All visible dents, scratches, unevenness, etc. should be properly repaired by applying putty made from wood dust & resin. It should be properly scraped with sandpaper.' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Paint Check', checksdescription: 'Primer, putty & first coat of the oil paint should be completed before fixing any fittings on the shutter.' },
                                            { checksHeading: 'Tolerance Check', checksdescription: 'Once the shutter is fixed, there should be just the nominal gap between the shutter & frame, required for working tolerance.' },
                                            { checksHeading: 'Beading Check', checksdescription: 'Beading should be fixed to three sides before fixing the shutter.' },
                                            { checksHeading: 'Moulding Check', checksdescription: 'No joint should be provided to cover moulding except at the corners.' },
                                            { checksHeading: 'Support Check', checksdescription: 'Proper placing and support to the frames' },
                                        ];

                                        async function DoorChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        DoorChacks();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'B2 - Door Panelling') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Assign the carpenter for the work and ask to review if any interdepencies occur' },
                                            { subtaskdescription: 'Ask the Carpenter to clear the interdepencies and coordinate with the other agencies' },
                                            { subtaskdescription: 'Arrange the material as per site requierment, please confirm the frame type before PO, as per sizes, frame type & other' },
                                            { subtaskdescription: 'Explain the door size,swing and opening direction to the carpenter for all the door type' },
                                            { subtaskdescription: 'Make the arrangement for the electriciy' },
                                            { subtaskdescription: 'Ask the contractor to make the  arrangements  for the supports to the frame' },
                                            { subtaskdescription: 'Final Lintel height confirmation as per drawing' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ensure that Access is clear and safe, temporary access has been provided as required.' },
                                            { subtaskdescription: 'Fastening methods to be confirmed with drawings and details.' },
                                            { subtaskdescription: 'All walls and ceilings to be confirmed plumb and square/are within tolerances for for frames.' },
                                            { subtaskdescription: 'Ensure that Door frame has been installed per drawings and specifications' },
                                            { subtaskdescription: 'Verify the frame as per the hardware schedule' },
                                            { subtaskdescription: 'Check the Size & specification of shutter,Side of opening,Slots & spacing of hinges.' },
                                            { subtaskdescription: 'Confirm the Frames for plumb & alignment' },
                                            { subtaskdescription: 'Ensure the clearance from all side of the shutters' },
                                        ];

                                        async function DoorfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        DoorfunCall();
                                    }
                                    if (newDatanew.subactivityname === 'B2 - Door Panelling') {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Quality Check', checksdescription: 'Quality of door shutters should be good. Warping of surface i.e. formation of the wave pattern on the surface of shutter & broken edges of the shutters should be avoided.' },
                                            { checksHeading: 'Bend Check', checksdescription: 'Shutters with bends at the corners should be rejected.' },
                                            { checksHeading: 'Support Check', checksdescription: 'Temporary frame supports are in place.' },
                                            { checksHeading: 'Unevenness check', checksdescription: 'All visible dents, scratches, unevenness, etc. should be properly repaired by applying putty made from wood dust & resin. It should be properly scraped with sandpaper.' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Paint Check', checksdescription: 'Primer, putty & first coat of the oil paint should be completed before fixing any fittings on the shutter.' },
                                            { checksHeading: 'Tolerance Check', checksdescription: 'Once the shutter is fixed, there should be just the nominal gap between the shutter & frame, required for working tolerance.' },
                                            { checksHeading: 'Beading Check', checksdescription: 'Beading should be fixed to three sides before fixing the shutter.' },
                                            { checksHeading: 'Moulding Check', checksdescription: 'No joint should be provided to cover moulding except at the corners.' },
                                            { checksHeading: 'Support Check', checksdescription: 'Proper placing and support to the frames' },
                                        ];

                                        async function DoorChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        DoorChacks();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'B3 - Door Panelling') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Assign the carpenter for the work and ask to review if any interdepencies occur' },
                                            { subtaskdescription: 'Ask the Carpenter to clear the interdepencies and coordinate with the other agencies' },
                                            { subtaskdescription: 'Arrange the material as per site requierment, please confirm the frame type before PO, as per sizes, frame type & other' },
                                            { subtaskdescription: 'Explain the door size,swing and opening direction to the carpenter for all the door type' },
                                            { subtaskdescription: 'Make the arrangement for the electriciy' },
                                            { subtaskdescription: 'Ask the contractor to make the  arrangements  for the supports to the frame' },
                                            { subtaskdescription: 'Final Lintel height confirmation as per drawing' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ensure that Access is clear and safe, temporary access has been provided as required.' },
                                            { subtaskdescription: 'Fastening methods to be confirmed with drawings and details.' },
                                            { subtaskdescription: 'All walls and ceilings to be confirmed plumb and square/are within tolerances for for frames.' },
                                            { subtaskdescription: 'Ensure that Door frame has been installed per drawings and specifications' },
                                            { subtaskdescription: 'Verify the frame as per the hardware schedule' },
                                            { subtaskdescription: 'Check the Size & specification of shutter,Side of opening,Slots & spacing of hinges.' },
                                            { subtaskdescription: 'Confirm the Frames for plumb & alignment' },
                                            { subtaskdescription: 'Ensure the clearance from all side of the shutters' },
                                        ];

                                        async function DoorfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        DoorfunCall();
                                    }
                                    if (newDatanew.subactivityname === 'B3 - Door Panelling') {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Quality Check', checksdescription: 'Quality of door shutters should be good. Warping of surface i.e. formation of the wave pattern on the surface of shutter & broken edges of the shutters should be avoided.' },
                                            { checksHeading: 'Bend Check', checksdescription: 'Shutters with bends at the corners should be rejected.' },
                                            { checksHeading: 'Support Check', checksdescription: 'Temporary frame supports are in place.' },
                                            { checksHeading: 'Unevenness check', checksdescription: 'All visible dents, scratches, unevenness, etc. should be properly repaired by applying putty made from wood dust & resin. It should be properly scraped with sandpaper.' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Paint Check', checksdescription: 'Primer, putty & first coat of the oil paint should be completed before fixing any fittings on the shutter.' },
                                            { checksHeading: 'Tolerance Check', checksdescription: 'Once the shutter is fixed, there should be just the nominal gap between the shutter & frame, required for working tolerance.' },
                                            { checksHeading: 'Beading Check', checksdescription: 'Beading should be fixed to three sides before fixing the shutter.' },
                                            { checksHeading: 'Moulding Check', checksdescription: 'No joint should be provided to cover moulding except at the corners.' },
                                            { checksHeading: 'Support Check', checksdescription: 'Proper placing and support to the frames' },
                                        ];

                                        async function DoorChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        DoorChacks();
                                    }

                                    //Anuj
                                    if (newDatanew.subactivityname === 'B4 - Door Panelling') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Assign the carpenter for the work and ask to review if any interdepencies occur' },
                                            { subtaskdescription: 'Ask the Carpenter to clear the interdepencies and coordinate with the other agencies' },
                                            { subtaskdescription: 'Arrange the material as per site requierment, please confirm the frame type before PO, as per sizes, frame type & other' },
                                            { subtaskdescription: 'Explain the door size,swing and opening direction to the carpenter for all the door type' },
                                            { subtaskdescription: 'Make the arrangement for the electriciy' },
                                            { subtaskdescription: 'Ask the contractor to make the  arrangements  for the supports to the frame' },
                                            { subtaskdescription: 'Final Lintel height confirmation as per drawing' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ensure that Access is clear and safe, temporary access has been provided as required.' },
                                            { subtaskdescription: 'Fastening methods to be confirmed with drawings and details.' },
                                            { subtaskdescription: 'All walls and ceilings to be confirmed plumb and square/are within tolerances for for frames.' },
                                            { subtaskdescription: 'Ensure that Door frame has been installed per drawings and specifications' },
                                            { subtaskdescription: 'Verify the frame as per the hardware schedule' },
                                            { subtaskdescription: 'Check the Size & specification of shutter,Side of opening,Slots & spacing of hinges.' },
                                            { subtaskdescription: 'Confirm the Frames for plumb & alignment' },
                                            { subtaskdescription: 'Ensure the clearance from all side of the shutters' },
                                        ];

                                        async function DoorfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        DoorfunCall();
                                    }
                                    if (newDatanew.subactivityname === 'B4 - Door Panelling') {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Quality Check', checksdescription: 'Quality of door shutters should be good. Warping of surface i.e. formation of the wave pattern on the surface of shutter & broken edges of the shutters should be avoided.' },
                                            { checksHeading: 'Bend Check', checksdescription: 'Shutters with bends at the corners should be rejected.' },
                                            { checksHeading: 'Support Check', checksdescription: 'Temporary frame supports are in place.' },
                                            { checksHeading: 'Unevenness check', checksdescription: 'All visible dents, scratches, unevenness, etc. should be properly repaired by applying putty made from wood dust & resin. It should be properly scraped with sandpaper.' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Paint Check', checksdescription: 'Primer, putty & first coat of the oil paint should be completed before fixing any fittings on the shutter.' },
                                            { checksHeading: 'Tolerance Check', checksdescription: 'Once the shutter is fixed, there should be just the nominal gap between the shutter & frame, required for working tolerance.' },
                                            { checksHeading: 'Beading Check', checksdescription: 'Beading should be fixed to three sides before fixing the shutter.' },
                                            { checksHeading: 'Moulding Check', checksdescription: 'No joint should be provided to cover moulding except at the corners.' },
                                            { checksHeading: 'Support Check', checksdescription: 'Proper placing and support to the frames' },
                                        ];

                                        async function DoorChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        DoorChacks();
                                    }


                                    if (newDatanew.subactivityname === 'GF - Door Panelling') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Assign the carpenter for the work and ask to review if any interdepencies occur' },
                                            { subtaskdescription: 'Ask the Carpenter to clear the interdepencies and coordinate with the other agencies' },
                                            { subtaskdescription: 'Arrange the material as per site requierment, please confirm the frame type before PO, as per sizes, frame type & other' },
                                            { subtaskdescription: 'Explain the door size,swing and opening direction to the carpenter for all the door type' },
                                            { subtaskdescription: 'Make the arrangement for the electriciy' },
                                            { subtaskdescription: 'Ask the contractor to make the  arrangements  for the supports to the frame' },
                                            { subtaskdescription: 'Final Lintel height confirmation as per drawing' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ensure that Access is clear and safe, temporary access has been provided as required.' },
                                            { subtaskdescription: 'Fastening methods to be confirmed with drawings and details.' },
                                            { subtaskdescription: 'All walls and ceilings to be confirmed plumb and square/are within tolerances for for frames.' },
                                            { subtaskdescription: 'Ensure that Door frame has been installed per drawings and specifications' },
                                            { subtaskdescription: 'Verify the frame as per the hardware schedule' },
                                            { subtaskdescription: 'Check the Size & specification of shutter,Side of opening,Slots & spacing of hinges.' },
                                            { subtaskdescription: 'Confirm the Frames for plumb & alignment' },
                                            { subtaskdescription: 'Ensure the clearance from all side of the shutters' },
                                        ];

                                        async function DoorfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        DoorfunCall();
                                    }

                                    if (newDatanew.subactivityname === "GF - Door Panelling") {

                                        const dataArranew = [
                                            { materailname: 'Door Area - Wooden', materailquantity: materlID.DPW_GFDoorPanellingDoorAreaWoodenQuantity, materailUnit: 'CUM' },
                                            { materailname: 'Door Panel Area - HDRM | Flush', materailquantity: materlID.DPW_GFDoorPanellingDoorPanelAreaHDRMFlushQuantity, materailUnit: 'SQFT.' },
                                            { materailname: 'Mica | Veneer | Designer Sheet', materailquantity: materlID.DPW_GFDoorPanellingMicaVeneerDesignerSheetQuantity, materailUnit: 'SQFT.' },
                                            { materailname: 'Carving', materailquantity: materlID.DPW_GFDoorPanellingCarvingQuantity, materailUnit: 'SQFT.' },
                                            { materailname: 'HDMR | MDF Board', materailquantity: materlID.DPW_GFDoorPanellingHDMRMDFBoardQuantity, materailUnit: 'SQFT.' },
                                            { materailname: 'Wooden Polish', materailquantity: materlID.DPW_GFDoorPanellingWoodenPolishQuantity, materailUnit: 'SQFT.' },
                                            { materailname: 'PU | Deco | Paint', materailquantity: materlID.DPW_GFDoorPanellingPUDecoPaintQuantity, materailUnit: 'SQFT.' },
                                            { materailname: 'HIngers', materailquantity: materlID.DPW_GFDoorPanellingHingersQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Other Accessories', materailquantity: materlID.DPW_GFDoorPanellingOtherAccessoriesQuantity, materailUnit: 'NOS.' }
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }




                                    if (newDatanew.subactivityname === "GF - Door Panelling") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Panel', headingforshortingTwo: 'Accessories' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Internal Siz.', NormalHeadingThree: 'Final Panel', NormalHeadingfoure: 'Laminate' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Hinges', NormalHeadingThree: 'Locks', NormalHeadingfoure: 'Stopper' },
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }


                                    if (newDatanew.subactivityname === "FF - Door Panelling") {

                                        const dataArranew = [
                                            { materailname: 'Door Area - Wooden', materailquantity: materlID.DPW_FFDoorPanellingDoorAreaWoodenQuantity, materailUnit: 'CUM' },
                                            { materailname: 'Door Panel Area - HDRM | Flush', materailquantity: materlID.DPW_FFDoorPanellingDoorPanelAreaHDRMFlushQuantity, materailUnit: 'SQFT.' },
                                            { materailname: 'Mica | Veneer | Designer Sheet', materailquantity: materlID.DPW_FFDoorPanellingMicaVeneerDesignerSheetQuantity, materailUnit: 'SQFT.' },
                                            { materailname: 'Carving', materailquantity: materlID.DPW_FFDoorPanellingCarvingQuantity, materailUnit: 'SQFT.' },
                                            { materailname: 'HDMR | MDF Board', materailquantity: materlID.DPW_FFDoorPanellingHDMRMDFBoardQuantity, materailUnit: 'SQFT.' },
                                            { materailname: 'Wooden Polish', materailquantity: materlID.DPW_FFDoorPanellingWoodenPolishQuantity, materailUnit: 'SQFT.' },
                                            { materailname: 'PU | Deco | Paint', materailquantity: materlID.DPW_FFDoorPanellingPUDecoPaintQuantity, materailUnit: 'SQFT.' },
                                            { materailname: 'HIngers', materailquantity: materlID.DPW_FFDoorPanellingHingersQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Other Accessories', materailquantity: materlID.DPW_FFDoorPanellingOtherAccessoriesQuantity, materailUnit: 'NOS.' }
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }



                                    if (newDatanew.subactivityname === "FF - Door Panelling") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Panel', headingforshortingTwo: 'Accessories' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Internal Siz.', NormalHeadingThree: 'Final Panel', NormalHeadingfoure: 'Laminate' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Hinges', NormalHeadingThree: 'Locks', NormalHeadingfoure: 'Stopper' },
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }


                                    if (newDatanew.subactivityname === "SF - Door Panelling") {

                                        const dataArranew = [
                                            { materailname: 'Door Area - Wooden', materailquantity: materlID.DPW_SFDoorPanellingDoorAreaWoodenQuantity, materailUnit: 'CUM' },
                                            { materailname: 'Door Panel Area - HDRM | Flush', materailquantity: materlID.DPW_SFDoorPanellingDoorPanelAreaHDRMFlushQuantity, materailUnit: 'SQFT.' },
                                            { materailname: 'Mica | Veneer | Designer Sheet', materailquantity: materlID.DPW_SFDoorPanellingMicaVeneerDesignerSheetQuantity, materailUnit: 'SQFT.' },
                                            { materailname: 'Carving', materailquantity: materlID.DPW_SFDoorPanellingCarvingQuantity, materailUnit: 'SQFT.' },
                                            { materailname: 'HDMR | MDF Board', materailquantity: materlID.DPW_SFDoorPanellingHDMRMDFBoardQuantity, materailUnit: 'SQFT.' },
                                            { materailname: 'Wooden Polish', materailquantity: materlID.DPW_SFDoorPanellingWoodenPolishQuantity, materailUnit: 'SQFT.' },
                                            { materailname: 'PU | Deco | Paint', materailquantity: materlID.DPW_SFDoorPanellingPUDecoPaintQuantity, materailUnit: 'SQFT.' },
                                            { materailname: 'HIngers', materailquantity: materlID.DPW_SFDoorPanellingHingersQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Other Accessories', materailquantity: materlID.DPW_SFDoorPanellingOtherAccessoriesQuantity, materailUnit: 'NOS.' }
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }

                                    if (newDatanew.subactivityname === "SF - Door Panelling") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Panel', headingforshortingTwo: 'Accessories' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Internal Siz.', NormalHeadingThree: 'Final Panel', NormalHeadingfoure: 'Laminate' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Hinges', NormalHeadingThree: 'Locks', NormalHeadingfoure: 'Stopper' },
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }


                                    if (newDatanew.subactivityname === "TF - Door Panelling") {

                                        const dataArranew = [
                                            { materailname: 'Door Area - Wooden', materailquantity: materlID.DPW_TFDoorPanellingDoorAreaWoodenQuantity, materailUnit: 'CUM' },
                                            { materailname: 'Door Panel Area - HDRM | Flush', materailquantity: materlID.DPW_TFDoorPanellingDoorPanelAreaHDRMFlushQuantity, materailUnit: 'SQFT.' },
                                            { materailname: 'Mica | Veneer | Designer Sheet', materailquantity: materlID.DPW_TFDoorPanellingMicaVeneerDesignerSheetQuantity, materailUnit: 'SQFT.' },
                                            { materailname: 'Carving', materailquantity: materlID.DPW_TFDoorPanellingCarvingQuantity, materailUnit: 'SQFT.' },
                                            { materailname: 'HDMR | MDF Board', materailquantity: materlID.DPW_TFDoorPanellingHDMRMDFBoardQuantity, materailUnit: 'SQFT.' },
                                            { materailname: 'Wooden Polish', materailquantity: materlID.DPW_TFDoorPanellingWoodenPolishQuantity, materailUnit: 'SQFT.' },
                                            { materailname: 'PU | Deco | Paint', materailquantity: materlID.DPW_TFDoorPanellingPUDecoPaintQuantity, materailUnit: 'SQFT.' },
                                            { materailname: 'HIngers', materailquantity: materlID.DPW_TFDoorPanellingHingersQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Other Accessories', materailquantity: materlID.DPW_TFDoorPanellingOtherAccessoriesQuantity, materailUnit: 'NOS.' }
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === "TF - Door Panelling") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Panel', headingforshortingTwo: 'Accessories' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Internal Siz.', NormalHeadingThree: 'Final Panel', NormalHeadingfoure: 'Laminate' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Hinges', NormalHeadingThree: 'Locks', NormalHeadingfoure: 'Stopper' },
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }


                                    if (newDatanew.subactivityname === "FoF - Door Panelling") {

                                        const dataArranew = [
                                            { materailname: 'Door Area - Wooden', materailquantity: materlID.DPW_FoFDoorPanellingDoorAreaWoodenQuantity, materailUnit: 'CUM' },
                                            { materailname: 'Door Panel Area - HDRM | Flush', materailquantity: materlID.DPW_FoFDoorPanellingDoorPanelAreaHDRMFlushQuantity, materailUnit: 'SQFT.' },
                                            { materailname: 'Mica | Veneer | Designer Sheet', materailquantity: materlID.DPW_FoFDoorPanellingMicaVeneerDesignerSheetQuantity, materailUnit: 'SQFT.' },
                                            { materailname: 'Carving', materailquantity: materlID.DPW_FoFDoorPanellingCarvingQuantity, materailUnit: 'SQFT.' },
                                            { materailname: 'HDMR | MDF Board', materailquantity: materlID.DPW_FoFDoorPanellingHDMRMDFBoardQuantity, materailUnit: 'SQFT.' },
                                            { materailname: 'Wooden Polish', materailquantity: materlID.DPW_FoFDoorPanellingWoodenPolishQuantity, materailUnit: 'SQFT.' },
                                            { materailname: 'PU | Deco | Paint', materailquantity: materlID.DPW_FoFDoorPanellingPUDecoPaintQuantity, materailUnit: 'SQFT.' },
                                            { materailname: 'HIngers', materailquantity: materlID.DPW_FoFDoorPanellingHingersQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Other Accessories', materailquantity: materlID.DPW_FoFDoorPanellingOtherAccessoriesQuantity, materailUnit: 'NOS.' }
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }

                                    if (newDatanew.subactivityname === "FoF - Door Panelling") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Panel', headingforshortingTwo: 'Accessories' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Internal Siz.', NormalHeadingThree: 'Final Panel', NormalHeadingfoure: 'Laminate' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Hinges', NormalHeadingThree: 'Locks', NormalHeadingfoure: 'Stopper' },
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }


                                    if (newDatanew.subactivityname === "Tower - Door Panelling") {

                                        const dataArranew = [
                                            { materailname: 'Door Area - Wooden', materailquantity: materlID.DPW_TowerDoorPanellingDoorAreaWoodenQuantity, materailUnit: 'CUM' },
                                            { materailname: 'Door Panel Area - HDRM | Flush', materailquantity: materlID.DPW_TowerDoorPanellingDoorPanelAreaHDRMFlushQuantity, materailUnit: 'SQFT.' },
                                            { materailname: 'Mica | Veneer | Designer Sheet', materailquantity: materlID.DPW_TowerDoorPanellingMicaVeneerDesignerSheetQuantity, materailUnit: 'SQFT.' },
                                            { materailname: 'Carving', materailquantity: materlID.DPW_TowerDoorPanellingCarvingQuantity, materailUnit: 'SQFT.' },
                                            { materailname: 'HDMR | MDF Board', materailquantity: materlID.DPW_TowerDoorPanellingHDMRMDFBoardQuantity, materailUnit: 'SQFT.' },
                                            { materailname: 'Wooden Polish', materailquantity: materlID.DPW_TowerDoorPanellingWoodenPolishQuantity, materailUnit: 'SQFT.' },
                                            { materailname: 'PU | Deco | Paint', materailquantity: materlID.DPW_TowerDoorPanellingPUDecoPaintQuantity, materailUnit: 'SQFT.' },
                                            { materailname: 'HIngers', materailquantity: materlID.DPW_TowerDoorPanellingHingersQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Other Accessories', materailquantity: materlID.DPW_TowerDoorPanellingOtherAccessoriesQuantity, materailUnit: 'NOS.' }
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }



                                    if (newDatanew.subactivityname === "Tower - Door Panelling") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Panel', headingforshortingTwo: 'Accessories' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Internal Siz.', NormalHeadingThree: 'Final Panel', NormalHeadingfoure: 'Laminate' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Hinges', NormalHeadingThree: 'Locks', NormalHeadingfoure: 'Stopper' },
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }

                                    if (newDatanew.subactivityname === "GF - Window Panelling") {

                                        const dataArranew = [
                                            { materailname: 'Aluminium | UPVC| System', materailquantity: materlID.WPW_GFWindowPanellingAluminiumUPVCSystemQuantity, materailUnit: 'SQFT.' },
                                            { materailname: 'Wooden Panel', materailquantity: materlID.WPW_GFWindowPanellingWoodenPanelQuantity, materailUnit: 'CUFT.' },
                                            { materailname: 'Glass as per Requiremnt', materailquantity: materlID.WPW_GFWindowPanellingGlassAsPerRequirementQuantity, materailUnit: 'SQFT.' },
                                            { materailname: 'Beading', materailquantity: materlID.WPW_GFWindowPanellingBeadingQuantity, materailUnit: 'RUFT.' },
                                            { materailname: 'Polish', materailquantity: materlID.WPW_GFWindowPanellingPolishQuantity, materailUnit: 'SQFT.' },
                                            { materailname: 'HIngers', materailquantity: materlID.WPW_GFWindowPanellingHingesQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Other Accessories', materailquantity: materlID.WPW_GFWindowPanellingOtherAccessoriesQuantity, materailUnit: 'NOS.' }
                                        ];


                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === "GF - Window Panelling") {

                                        const dataArranew = [
                                            {},
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Internal Siz.', NormalHeadingThree: 'Fixing', NormalHeadingfoure: 'Gap|Move.' },
                                            {},
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }

                                    if (newDatanew.subactivityname === "FF - Window Panelling") {

                                        const dataArranew = [
                                            { materailname: 'Aluminium | UPVC| System', materailquantity: materlID.WPW_FFWindowPanellingAluminiumUPVCSystemQuantity, materailUnit: 'SQFT.' },
                                            { materailname: 'Wooden Panel', materailquantity: materlID.WPW_FFWindowPanellingWoodenPanelQuantity, materailUnit: 'CUFT.' },
                                            { materailname: 'Glass as per Requiremnt', materailquantity: materlID.WPW_FFWindowPanellingGlassAsPerRequirementQuantity, materailUnit: 'SQFT.' },
                                            { materailname: 'Beading', materailquantity: materlID.WPW_FFWindowPanellingBeadingQuantity, materailUnit: 'RUFT.' },
                                            { materailname: 'Polish', materailquantity: materlID.WPW_FFWindowPanellingPolishQuantity, materailUnit: 'SQFT.' },
                                            { materailname: 'HIngers', materailquantity: materlID.WPW_FFWindowPanellingHingesQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Other Accessories', materailquantity: materlID.WPW_FFWindowPanellingOtherAccessoriesQuantity, materailUnit: 'NOS.' }
                                        ];


                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }

                                    if (newDatanew.subactivityname === "FF - Window Panelling") {

                                        const dataArranew = [
                                            {},
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Internal Siz.', NormalHeadingThree: 'Fixing', NormalHeadingfoure: 'Gap|Move.' },
                                            {},
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }


                                    if (newDatanew.subactivityname === "SF - Window Panelling") {

                                        const dataArranew = [
                                            { materailname: 'Aluminium | UPVC| System', materailquantity: materlID.WPW_SFWindowPanellingAluminiumUPVCSystemQuantity, materailUnit: 'SQFT.' },
                                            { materailname: 'Wooden Panel', materailquantity: materlID.WPW_SFWindowPanellingWoodenPanelQuantity, materailUnit: 'CUFT.' },
                                            { materailname: 'Glass as per Requiremnt', materailquantity: materlID.WPW_SFWindowPanellingGlassAsPerRequirementQuantity, materailUnit: 'SQFT.' },
                                            { materailname: 'Beading', materailquantity: materlID.WPW_SFWindowPanellingBeadingQuantity, materailUnit: 'RUFT.' },
                                            { materailname: 'Polish', materailquantity: materlID.WPW_SFWindowPanellingPolishQuantity, materailUnit: 'SQFT.' },
                                            { materailname: 'HIngers', materailquantity: materlID.WPW_SFWindowPanellingHingesQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Other Accessories', materailquantity: materlID.WPW_SFWindowPanellingOtherAccessoriesQuantity, materailUnit: 'NOS.' }
                                        ];


                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }

                                    if (newDatanew.subactivityname === "SF - Window Panelling") {

                                        const dataArranew = [
                                            {},
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Internal Siz.', NormalHeadingThree: 'Fixing', NormalHeadingfoure: 'Gap|Move.' },
                                            {},
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }


                                    if (newDatanew.subactivityname === "TF - Window Panelling") {

                                        const dataArranew = [
                                            { materailname: 'Aluminium | UPVC| System', materailquantity: materlID.WPW_TFWindowPanellingAluminiumUPVCSystemQuantity, materailUnit: 'SQFT.' },
                                            { materailname: 'Wooden Panel', materailquantity: materlID.WPW_TFWindowPanellingWoodenPanelQuantity, materailUnit: 'CUFT.' },
                                            { materailname: 'Glass as per Requiremnt', materailquantity: materlID.WPW_TFWindowPanellingGlassAsPerRequirementQuantity, materailUnit: 'SQFT.' },
                                            { materailname: 'Beading', materailquantity: materlID.WPW_TFWindowPanellingBeadingQuantity, materailUnit: 'RUFT.' },
                                            { materailname: 'Polish', materailquantity: materlID.WPW_TFWindowPanellingPolishQuantity, materailUnit: 'SQFT.' },
                                            { materailname: 'HIngers', materailquantity: materlID.WPW_TFWindowPanellingHingesQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Other Accessories', materailquantity: materlID.WPW_TFWindowPanellingOtherAccessoriesQuantity, materailUnit: 'NOS.' }
                                        ];


                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === "TF - Window Panelling") {

                                        const dataArranew = [
                                            {},
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Internal Siz.', NormalHeadingThree: 'Fixing', NormalHeadingfoure: 'Gap|Move.' },
                                            {},
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }

                                    if (newDatanew.subactivityname === "FoF - Window Panelling") {

                                        const dataArranew = [
                                            { materailname: 'Aluminium | UPVC| System', materailquantity: materlID.WPW_FoFWindowPanellingAluminiumUPVCSystemQuantity, materailUnit: 'SQFT.' },
                                            { materailname: 'Wooden Panel', materailquantity: materlID.WPW_FoFWindowPanellingWoodenPanelQuantity, materailUnit: 'CUFT.' },
                                            { materailname: 'Glass as per Requiremnt', materailquantity: materlID.WPW_FoFWindowPanellingGlassAsPerRequirementQuantity, materailUnit: 'SQFT.' },
                                            { materailname: 'Beading', materailquantity: materlID.WPW_FoFWindowPanellingBeadingQuantity, materailUnit: 'RUFT.' },
                                            { materailname: 'Polish', materailquantity: materlID.WPW_FoFWindowPanellingPolishQuantity, materailUnit: 'SQFT.' },
                                            { materailname: 'HIngers', materailquantity: materlID.WPW_FoFWindowPanellingHingesQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Other Accessories', materailquantity: materlID.WPW_FoFWindowPanellingOtherAccessoriesQuantity, materailUnit: 'NOS.' }
                                        ];


                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === "FoF - Window Panelling") {

                                        const dataArranew = [
                                            {},
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Internal Siz.', NormalHeadingThree: 'Fixing', NormalHeadingfoure: 'Gap|Move.' },
                                            {},
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }

                                    if (newDatanew.subactivityname === "Tower - Window Panelling") {

                                        const dataArranew = [
                                            { materailname: 'Aluminium | UPVC| System', materailquantity: materlID.WPW_TowerWindowPanellingAluminiumUPVCSystemQuantity, materailUnit: 'SQFT.' },
                                            { materailname: 'Wooden Panel', materailquantity: materlID.WPW_TowerWindowPanellingWoodenPanelQuantity, materailUnit: 'CUFT.' },
                                            { materailname: 'Glass as per Requiremnt', materailquantity: materlID.WPW_TowerWindowPanellingGlassAsPerRequirementQuantity, materailUnit: 'SQFT.' },
                                            { materailname: 'Beading', materailquantity: materlID.WPW_TowerWindowPanellingBeadingQuantity, materailUnit: 'RUFT.' },
                                            { materailname: 'Polish', materailquantity: materlID.WPW_TowerWindowPanellingPolishQuantity, materailUnit: 'SQFT.' },
                                            { materailname: 'HIngers', materailquantity: materlID.WPW_TowerWindowPanellingHingesQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Other Accessories', materailquantity: materlID.WPW_TowerWindowPanellingOtherAccessoriesQuantity, materailUnit: 'NOS.' }
                                        ];


                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === "Tower - Window Panelling") {

                                        const dataArranew = [
                                            {},
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Internal Siz.', NormalHeadingThree: 'Fixing', NormalHeadingfoure: 'Gap|Move.' },
                                            {},
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }

                                    if (newDatanew.subactivityname === 'GF - Door Panelling') {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Quality Check', checksdescription: 'Quality of door shutters should be good. Warping of surface i.e. formation of the wave pattern on the surface of shutter & broken edges of the shutters should be avoided.' },
                                            { checksHeading: 'Bend Check', checksdescription: 'Shutters with bends at the corners should be rejected.' },
                                            { checksHeading: 'Support Check', checksdescription: 'Temporary frame supports are in place.' },
                                            { checksHeading: 'Unevenness check', checksdescription: 'All visible dents, scratches, unevenness, etc. should be properly repaired by applying putty made from wood dust & resin. It should be properly scraped with sandpaper.' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Paint Check', checksdescription: 'Primer, putty & first coat of the oil paint should be completed before fixing any fittings on the shutter.' },
                                            { checksHeading: 'Tolerance Check', checksdescription: 'Once the shutter is fixed, there should be just the nominal gap between the shutter & frame, required for working tolerance.' },
                                            { checksHeading: 'Beading Check', checksdescription: 'Beading should be fixed to three sides before fixing the shutter.' },
                                            { checksHeading: 'Moulding Check', checksdescription: 'No joint should be provided to cover moulding except at the corners.' },
                                            { checksHeading: 'Support Check', checksdescription: 'Proper placing and support to the frames' },
                                        ];

                                        async function DoorChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        DoorChacks();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'FF - Window Panelling') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Assign the carpenter for the work and ask to review if any interdepencies occur' },
                                            { subtaskdescription: 'Ask the Carpenter to clear the interdepencies and coordinate with the other agencies' },
                                            { subtaskdescription: 'Arrange the material as per site requierment, please confirm the frame type before PO, as per sizes, frame type & other' },
                                            { subtaskdescription: 'Explain the door size,swing and opening direction to the carpenter for all the door type' },
                                            { subtaskdescription: 'Make the arrangement for the electriciy' },
                                            { subtaskdescription: 'Ask the contractor to make the  arrangements  for the supports to the frame' },
                                            { subtaskdescription: 'Final Lintel height confirmation as per drawing' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ensure that Access is clear and safe, temporary access has been provided as required.' },
                                            { subtaskdescription: 'Fastening methods to be confirmed with drawings and details.' },
                                            { subtaskdescription: 'All walls and ceilings to be confirmed plumb and square/are within tolerances for for frames.' },
                                            { subtaskdescription: 'Ensure that Door frame has been installed per drawings and specifications' },
                                            { subtaskdescription: 'Verify the frame as per the hardware schedule' },
                                            { subtaskdescription: 'Check the Size & specification of shutter,Side of opening,Slots & spacing of hinges.' },
                                            { subtaskdescription: 'Confirm the Frames for plumb & alignment' },
                                            { subtaskdescription: 'Ensure the clearance from all side of the shutters' },
                                        ];

                                        async function DoorfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        DoorfunCall();
                                    }
                                    if (newDatanew.subactivityname === 'FF - Window Panelling') {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Quality Check', checksdescription: 'Quality of door shutters should be good. Warping of surface i.e. formation of the wave pattern on the surface of shutter & broken edges of the shutters should be avoided.' },
                                            { checksHeading: 'Bend Check', checksdescription: 'Shutters with bends at the corners should be rejected.' },
                                            { checksHeading: 'Support Check', checksdescription: 'Temporary frame supports are in place.' },
                                            { checksHeading: 'Unevenness check', checksdescription: 'All visible dents, scratches, unevenness, etc. should be properly repaired by applying putty made from wood dust & resin. It should be properly scraped with sandpaper.' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Paint Check', checksdescription: 'Primer, putty & first coat of the oil paint should be completed before fixing any fittings on the shutter.' },
                                            { checksHeading: 'Tolerance Check', checksdescription: 'Once the shutter is fixed, there should be just the nominal gap between the shutter & frame, required for working tolerance.' },
                                            { checksHeading: 'Beading Check', checksdescription: 'Beading should be fixed to three sides before fixing the shutter.' },
                                            { checksHeading: 'Moulding Check', checksdescription: 'No joint should be provided to cover moulding except at the corners.' },
                                            { checksHeading: 'Support Check', checksdescription: 'Proper placing and support to the frames' },
                                        ];

                                        async function DoorChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        DoorChacks();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'SF - Window Panelling') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Assign the carpenter for the work and ask to review if any interdepencies occur' },
                                            { subtaskdescription: 'Ask the Carpenter to clear the interdepencies and coordinate with the other agencies' },
                                            { subtaskdescription: 'Arrange the material as per site requierment, please confirm the frame type before PO, as per sizes, frame type & other' },
                                            { subtaskdescription: 'Explain the door size,swing and opening direction to the carpenter for all the door type' },
                                            { subtaskdescription: 'Make the arrangement for the electriciy' },
                                            { subtaskdescription: 'Ask the contractor to make the  arrangements  for the supports to the frame' },
                                            { subtaskdescription: 'Final Lintel height confirmation as per drawing' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ensure that Access is clear and safe, temporary access has been provided as required.' },
                                            { subtaskdescription: 'Fastening methods to be confirmed with drawings and details.' },
                                            { subtaskdescription: 'All walls and ceilings to be confirmed plumb and square/are within tolerances for for frames.' },
                                            { subtaskdescription: 'Ensure that Door frame has been installed per drawings and specifications' },
                                            { subtaskdescription: 'Verify the frame as per the hardware schedule' },
                                            { subtaskdescription: 'Check the Size & specification of shutter,Side of opening,Slots & spacing of hinges.' },
                                            { subtaskdescription: 'Confirm the Frames for plumb & alignment' },
                                            { subtaskdescription: 'Ensure the clearance from all side of the shutters' },
                                        ];

                                        async function DoorfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        DoorfunCall();
                                    }
                                    if (newDatanew.subactivityname === 'SF - Window Panelling') {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Quality Check', checksdescription: 'Quality of door shutters should be good. Warping of surface i.e. formation of the wave pattern on the surface of shutter & broken edges of the shutters should be avoided.' },
                                            { checksHeading: 'Bend Check', checksdescription: 'Shutters with bends at the corners should be rejected.' },
                                            { checksHeading: 'Support Check', checksdescription: 'Temporary frame supports are in place.' },
                                            { checksHeading: 'Unevenness check', checksdescription: 'All visible dents, scratches, unevenness, etc. should be properly repaired by applying putty made from wood dust & resin. It should be properly scraped with sandpaper.' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Paint Check', checksdescription: 'Primer, putty & first coat of the oil paint should be completed before fixing any fittings on the shutter.' },
                                            { checksHeading: 'Tolerance Check', checksdescription: 'Once the shutter is fixed, there should be just the nominal gap between the shutter & frame, required for working tolerance.' },
                                            { checksHeading: 'Beading Check', checksdescription: 'Beading should be fixed to three sides before fixing the shutter.' },
                                            { checksHeading: 'Moulding Check', checksdescription: 'No joint should be provided to cover moulding except at the corners.' },
                                            { checksHeading: 'Support Check', checksdescription: 'Proper placing and support to the frames' },
                                        ];

                                        async function DoorChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        DoorChacks();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'TF - Window Panelling') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Assign the carpenter for the work and ask to review if any interdepencies occur' },
                                            { subtaskdescription: 'Ask the Carpenter to clear the interdepencies and coordinate with the other agencies' },
                                            { subtaskdescription: 'Arrange the material as per site requierment, please confirm the frame type before PO, as per sizes, frame type & other' },
                                            { subtaskdescription: 'Explain the door size,swing and opening direction to the carpenter for all the door type' },
                                            { subtaskdescription: 'Make the arrangement for the electriciy' },
                                            { subtaskdescription: 'Ask the contractor to make the  arrangements  for the supports to the frame' },
                                            { subtaskdescription: 'Final Lintel height confirmation as per drawing' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ensure that Access is clear and safe, temporary access has been provided as required.' },
                                            { subtaskdescription: 'Fastening methods to be confirmed with drawings and details.' },
                                            { subtaskdescription: 'All walls and ceilings to be confirmed plumb and square/are within tolerances for for frames.' },
                                            { subtaskdescription: 'Ensure that Door frame has been installed per drawings and specifications' },
                                            { subtaskdescription: 'Verify the frame as per the hardware schedule' },
                                            { subtaskdescription: 'Check the Size & specification of shutter,Side of opening,Slots & spacing of hinges.' },
                                            { subtaskdescription: 'Confirm the Frames for plumb & alignment' },
                                            { subtaskdescription: 'Ensure the clearance from all side of the shutters' },
                                        ];

                                        async function DoorfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        DoorfunCall();
                                    }
                                    if (newDatanew.subactivityname === 'TF - Window Panelling') {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Quality Check', checksdescription: 'Quality of door shutters should be good. Warping of surface i.e. formation of the wave pattern on the surface of shutter & broken edges of the shutters should be avoided.' },
                                            { checksHeading: 'Bend Check', checksdescription: 'Shutters with bends at the corners should be rejected.' },
                                            { checksHeading: 'Support Check', checksdescription: 'Temporary frame supports are in place.' },
                                            { checksHeading: 'Unevenness check', checksdescription: 'All visible dents, scratches, unevenness, etc. should be properly repaired by applying putty made from wood dust & resin. It should be properly scraped with sandpaper.' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Paint Check', checksdescription: 'Primer, putty & first coat of the oil paint should be completed before fixing any fittings on the shutter.' },
                                            { checksHeading: 'Tolerance Check', checksdescription: 'Once the shutter is fixed, there should be just the nominal gap between the shutter & frame, required for working tolerance.' },
                                            { checksHeading: 'Beading Check', checksdescription: 'Beading should be fixed to three sides before fixing the shutter.' },
                                            { checksHeading: 'Moulding Check', checksdescription: 'No joint should be provided to cover moulding except at the corners.' },
                                            { checksHeading: 'Support Check', checksdescription: 'Proper placing and support to the frames' },
                                        ];

                                        async function DoorChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        DoorChacks();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'FOF - Window Panelling') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Assign the carpenter for the work and ask to review if any interdepencies occur' },
                                            { subtaskdescription: 'Ask the Carpenter to clear the interdepencies and coordinate with the other agencies' },
                                            { subtaskdescription: 'Arrange the material as per site requierment, please confirm the frame type before PO, as per sizes, frame type & other' },
                                            { subtaskdescription: 'Explain the door size,swing and opening direction to the carpenter for all the door type' },
                                            { subtaskdescription: 'Make the arrangement for the electriciy' },
                                            { subtaskdescription: 'Ask the contractor to make the  arrangements  for the supports to the frame' },
                                            { subtaskdescription: 'Final Lintel height confirmation as per drawing' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ensure that Access is clear and safe, temporary access has been provided as required.' },
                                            { subtaskdescription: 'Fastening methods to be confirmed with drawings and details.' },
                                            { subtaskdescription: 'All walls and ceilings to be confirmed plumb and square/are within tolerances for for frames.' },
                                            { subtaskdescription: 'Ensure that Door frame has been installed per drawings and specifications' },
                                            { subtaskdescription: 'Verify the frame as per the hardware schedule' },
                                            { subtaskdescription: 'Check the Size & specification of shutter,Side of opening,Slots & spacing of hinges.' },
                                            { subtaskdescription: 'Confirm the Frames for plumb & alignment' },
                                            { subtaskdescription: 'Ensure the clearance from all side of the shutters' },
                                        ];

                                        async function DoorfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        DoorfunCall();
                                    }
                                    if (newDatanew.subactivityname === 'FOF - Window Panelling') {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Quality Check', checksdescription: 'Quality of door shutters should be good. Warping of surface i.e. formation of the wave pattern on the surface of shutter & broken edges of the shutters should be avoided.' },
                                            { checksHeading: 'Bend Check', checksdescription: 'Shutters with bends at the corners should be rejected.' },
                                            { checksHeading: 'Support Check', checksdescription: 'Temporary frame supports are in place.' },
                                            { checksHeading: 'Unevenness check', checksdescription: 'All visible dents, scratches, unevenness, etc. should be properly repaired by applying putty made from wood dust & resin. It should be properly scraped with sandpaper.' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Paint Check', checksdescription: 'Primer, putty & first coat of the oil paint should be completed before fixing any fittings on the shutter.' },
                                            { checksHeading: 'Tolerance Check', checksdescription: 'Once the shutter is fixed, there should be just the nominal gap between the shutter & frame, required for working tolerance.' },
                                            { checksHeading: 'Beading Check', checksdescription: 'Beading should be fixed to three sides before fixing the shutter.' },
                                            { checksHeading: 'Moulding Check', checksdescription: 'No joint should be provided to cover moulding except at the corners.' },
                                            { checksHeading: 'Support Check', checksdescription: 'Proper placing and support to the frames' },
                                        ];

                                        async function DoorChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        DoorChacks();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'Tower - Window Panelling') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Assign the carpenter for the work and ask to review if any interdepencies occur' },
                                            { subtaskdescription: 'Ask the Carpenter to clear the interdepencies and coordinate with the other agencies' },
                                            { subtaskdescription: 'Arrange the material as per site requierment, please confirm the frame type before PO, as per sizes, frame type & other' },
                                            { subtaskdescription: 'Explain the door size,swing and opening direction to the carpenter for all the door type' },
                                            { subtaskdescription: 'Make the arrangement for the electriciy' },
                                            { subtaskdescription: 'Ask the contractor to make the  arrangements  for the supports to the frame' },
                                            { subtaskdescription: 'Final Lintel height confirmation as per drawing' },
                                            { subtaskdescription: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Ensure that Access is clear and safe, temporary access has been provided as required.' },
                                            { subtaskdescription: 'Fastening methods to be confirmed with drawings and details.' },
                                            { subtaskdescription: 'All walls and ceilings to be confirmed plumb and square/are within tolerances for for frames.' },
                                            { subtaskdescription: 'Ensure that Door frame has been installed per drawings and specifications' },
                                            { subtaskdescription: 'Verify the frame as per the hardware schedule' },
                                            { subtaskdescription: 'Check the Size & specification of shutter,Side of opening,Slots & spacing of hinges.' },
                                            { subtaskdescription: 'Confirm the Frames for plumb & alignment' },
                                            { subtaskdescription: 'Ensure the clearance from all side of the shutters' },
                                        ];

                                        async function DoorfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        DoorfunCall();
                                    }
                                    if (newDatanew.subactivityname === 'Tower - Window Panelling') {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Quality Check', checksdescription: 'Quality of door shutters should be good. Warping of surface i.e. formation of the wave pattern on the surface of shutter & broken edges of the shutters should be avoided.' },
                                            { checksHeading: 'Bend Check', checksdescription: 'Shutters with bends at the corners should be rejected.' },
                                            { checksHeading: 'Support Check', checksdescription: 'Temporary frame supports are in place.' },
                                            { checksHeading: 'Unevenness check', checksdescription: 'All visible dents, scratches, unevenness, etc. should be properly repaired by applying putty made from wood dust & resin. It should be properly scraped with sandpaper.' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Paint Check', checksdescription: 'Primer, putty & first coat of the oil paint should be completed before fixing any fittings on the shutter.' },
                                            { checksHeading: 'Tolerance Check', checksdescription: 'Once the shutter is fixed, there should be just the nominal gap between the shutter & frame, required for working tolerance.' },
                                            { checksHeading: 'Beading Check', checksdescription: 'Beading should be fixed to three sides before fixing the shutter.' },
                                            { checksHeading: 'Moulding Check', checksdescription: 'No joint should be provided to cover moulding except at the corners.' },
                                            { checksHeading: 'Support Check', checksdescription: 'Proper placing and support to the frames' },
                                        ];

                                        async function DoorChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        DoorChacks();
                                    }

                                    //Anuj 
                                    if (newDatanew.subactivityname === 'B1 - Window Panelling') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1 : Before Installation ', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Rubber while fixing the glass need to be in line, with no disapparencies into it' },
                                            { subtaskdescription: 'Please assure the diagonal of all the windows, accurately, so that no gapping and other disapperancies happen' },
                                            { subtaskdescription: 'While fixing the frame with screw, make sure its done accuretaly' },
                                            { subtaskdescription: 'Frame material as per the Guage type & if you find that as per the window area, it need to be change as per site, please inform to the architect team | client for the same' },
                                            { subtaskdescription: 'Window Type as per the drawing is to be shared with contractor before PO & confirmation with the same' },
                                            { subtaskdescription: 'Confiramtion of Color, Shade of Glass, Thickness of Glass & Other accessories before PO' },
                                            { subtaskdescription: 'Phase 2 : Installation', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Make sure that the windows application film applied into the window direction is as per instruction' },
                                        ];

                                        async function BeamSlabShutteringReinforcementRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteringReinforcementRCCfunCall();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'B1 - Window Panelling') {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: '', checksdescription: 'Check that any pre-drilled holes are sealed.' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Cutting Check', checksdescription: 'According to the measurements, cut the aluminium sections for making the window on the site and fix it on the wall with screws.' },
                                            { checksHeading: 'Fixing Check', checksdescription: 'Fix the shutters in the track of the window, after providing rubber packing on all the sides of the glass panel. These shutters slide because of the rollers attached at the ' },
                                            { checksHeading: 'Cleaning Check', checksdescription: 'Clean tracks with a vacuum cleaner or air blower.' },
                                            { checksHeading: 'Gap filling Check', checksdescription: 'The gaps formed between the walls and windows should be grouted with epoxy-based, rubberized compound e.g., tough seal or polysulphide using a grouting gun. ' },
                                            { checksHeading: 'Grills Check', checksdescription: 'If required, the M.S. aluminium grill should be fixed from outside for safety purposes.' },
                                            { checksHeading: 'Gaps filling check', checksdescription: 'Gaps between the window and the wall,Sealant filling in gaps' },
                                            { checksHeading: 'Holes check', checksdescription: 'Holes in the tracks are inside or outside' },
                                            { checksHeading: 'Cleaning Check', checksdescription: 'Cleanliness of the track,Any damages, cracks, dents, etc.' },
                                            { checksHeading: 'Rubber packing check', checksdescription: 'The intactness of rubber packing all around.' },
                                            { checksHeading: 'Window Glass', checksdescription: 'Check window panes for signs of moisture and scratches or cracks.' },
                                            { checksHeading: 'Reveal Check', checksdescription: 'Check if your window reveals are even.' },
                                            { checksHeading: 'Open Check', checksdescription: 'Test each window to see if it opens and closes easily.' },
                                            { checksHeading: 'Breather Holes', checksdescription: 'Examine window weep or breather holes for obstructions.' },
                                            { checksHeading: 'Windwo Flim check', checksdescription: 'Inspect your window’s film for damages such as bubbling, discoloring, and scratches.' },
                                        ];

                                        async function WindowsChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        WindowsChacks();
                                    }
                                    //Anuj 
                                    if (newDatanew.subactivityname === 'B2 - Window Panelling') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1 : Before Installation ', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Rubber while fixing the glass need to be in line, with no disapparencies into it' },
                                            { subtaskdescription: 'Please assure the diagonal of all the windows, accurately, so that no gapping and other disapperancies happen' },
                                            { subtaskdescription: 'While fixing the frame with screw, make sure its done accuretaly' },
                                            { subtaskdescription: 'Frame material as per the Guage type & if you find that as per the window area, it need to be change as per site, please inform to the architect team | client for the same' },
                                            { subtaskdescription: 'Window Type as per the drawing is to be shared with contractor before PO & confirmation with the same' },
                                            { subtaskdescription: 'Confiramtion of Color, Shade of Glass, Thickness of Glass & Other accessories before PO' },
                                            { subtaskdescription: 'Phase 2 : Installation', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Make sure that the windows application film applied into the window direction is as per instruction' },
                                        ];

                                        async function BeamSlabShutteringReinforcementRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteringReinforcementRCCfunCall();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'B2 - Window Panelling') {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: '', checksdescription: 'Check that any pre-drilled holes are sealed.' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Cutting Check', checksdescription: 'According to the measurements, cut the aluminium sections for making the window on the site and fix it on the wall with screws.' },
                                            { checksHeading: 'Fixing Check', checksdescription: 'Fix the shutters in the track of the window, after providing rubber packing on all the sides of the glass panel. These shutters slide because of the rollers attached at the ' },
                                            { checksHeading: 'Cleaning Check', checksdescription: 'Clean tracks with a vacuum cleaner or air blower.' },
                                            { checksHeading: 'Gap filling Check', checksdescription: 'The gaps formed between the walls and windows should be grouted with epoxy-based, rubberized compound e.g., tough seal or polysulphide using a grouting gun. ' },
                                            { checksHeading: 'Grills Check', checksdescription: 'If required, the M.S. aluminium grill should be fixed from outside for safety purposes.' },
                                            { checksHeading: 'Gaps filling check', checksdescription: 'Gaps between the window and the wall,Sealant filling in gaps' },
                                            { checksHeading: 'Holes check', checksdescription: 'Holes in the tracks are inside or outside' },
                                            { checksHeading: 'Cleaning Check', checksdescription: 'Cleanliness of the track,Any damages, cracks, dents, etc.' },
                                            { checksHeading: 'Rubber packing check', checksdescription: 'The intactness of rubber packing all around.' },
                                            { checksHeading: 'Window Glass', checksdescription: 'Check window panes for signs of moisture and scratches or cracks.' },
                                            { checksHeading: 'Reveal Check', checksdescription: 'Check if your window reveals are even.' },
                                            { checksHeading: 'Open Check', checksdescription: 'Test each window to see if it opens and closes easily.' },
                                            { checksHeading: 'Breather Holes', checksdescription: 'Examine window weep or breather holes for obstructions.' },
                                            { checksHeading: 'Windwo Flim check', checksdescription: 'Inspect your window’s film for damages such as bubbling, discoloring, and scratches.' },
                                        ];

                                        async function WindowsChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        WindowsChacks();
                                    }
                                    //Anuj 
                                    if (newDatanew.subactivityname === 'B3 - Window Panelling') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1 : Before Installation ', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Rubber while fixing the glass need to be in line, with no disapparencies into it' },
                                            { subtaskdescription: 'Please assure the diagonal of all the windows, accurately, so that no gapping and other disapperancies happen' },
                                            { subtaskdescription: 'While fixing the frame with screw, make sure its done accuretaly' },
                                            { subtaskdescription: 'Frame material as per the Guage type & if you find that as per the window area, it need to be change as per site, please inform to the architect team | client for the same' },
                                            { subtaskdescription: 'Window Type as per the drawing is to be shared with contractor before PO & confirmation with the same' },
                                            { subtaskdescription: 'Confiramtion of Color, Shade of Glass, Thickness of Glass & Other accessories before PO' },
                                            { subtaskdescription: 'Phase 2 : Installation', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Make sure that the windows application film applied into the window direction is as per instruction' },
                                        ];

                                        async function BeamSlabShutteringReinforcementRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteringReinforcementRCCfunCall();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'B3 - Window Panelling') {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: '', checksdescription: 'Check that any pre-drilled holes are sealed.' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Cutting Check', checksdescription: 'According to the measurements, cut the aluminium sections for making the window on the site and fix it on the wall with screws.' },
                                            { checksHeading: 'Fixing Check', checksdescription: 'Fix the shutters in the track of the window, after providing rubber packing on all the sides of the glass panel. These shutters slide because of the rollers attached at the ' },
                                            { checksHeading: 'Cleaning Check', checksdescription: 'Clean tracks with a vacuum cleaner or air blower.' },
                                            { checksHeading: 'Gap filling Check', checksdescription: 'The gaps formed between the walls and windows should be grouted with epoxy-based, rubberized compound e.g., tough seal or polysulphide using a grouting gun. ' },
                                            { checksHeading: 'Grills Check', checksdescription: 'If required, the M.S. aluminium grill should be fixed from outside for safety purposes.' },
                                            { checksHeading: 'Gaps filling check', checksdescription: 'Gaps between the window and the wall,Sealant filling in gaps' },
                                            { checksHeading: 'Holes check', checksdescription: 'Holes in the tracks are inside or outside' },
                                            { checksHeading: 'Cleaning Check', checksdescription: 'Cleanliness of the track,Any damages, cracks, dents, etc.' },
                                            { checksHeading: 'Rubber packing check', checksdescription: 'The intactness of rubber packing all around.' },
                                            { checksHeading: 'Window Glass', checksdescription: 'Check window panes for signs of moisture and scratches or cracks.' },
                                            { checksHeading: 'Reveal Check', checksdescription: 'Check if your window reveals are even.' },
                                            { checksHeading: 'Open Check', checksdescription: 'Test each window to see if it opens and closes easily.' },
                                            { checksHeading: 'Breather Holes', checksdescription: 'Examine window weep or breather holes for obstructions.' },
                                            { checksHeading: 'Windwo Flim check', checksdescription: 'Inspect your window’s film for damages such as bubbling, discoloring, and scratches.' },
                                        ];

                                        async function WindowsChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        WindowsChacks();
                                    }
                                    //Anuj 
                                    if (newDatanew.subactivityname === 'B4 - Window Panelling') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1 : Before Installation ', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Rubber while fixing the glass need to be in line, with no disapparencies into it' },
                                            { subtaskdescription: 'Please assure the diagonal of all the windows, accurately, so that no gapping and other disapperancies happen' },
                                            { subtaskdescription: 'While fixing the frame with screw, make sure its done accuretaly' },
                                            { subtaskdescription: 'Frame material as per the Guage type & if you find that as per the window area, it need to be change as per site, please inform to the architect team | client for the same' },
                                            { subtaskdescription: 'Window Type as per the drawing is to be shared with contractor before PO & confirmation with the same' },
                                            { subtaskdescription: 'Confiramtion of Color, Shade of Glass, Thickness of Glass & Other accessories before PO' },
                                            { subtaskdescription: 'Phase 2 : Installation', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Make sure that the windows application film applied into the window direction is as per instruction' },
                                        ];

                                        async function BeamSlabShutteringReinforcementRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteringReinforcementRCCfunCall();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'B4 - Window Panelling') {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: '', checksdescription: 'Check that any pre-drilled holes are sealed.' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Cutting Check', checksdescription: 'According to the measurements, cut the aluminium sections for making the window on the site and fix it on the wall with screws.' },
                                            { checksHeading: 'Fixing Check', checksdescription: 'Fix the shutters in the track of the window, after providing rubber packing on all the sides of the glass panel. These shutters slide because of the rollers attached at the ' },
                                            { checksHeading: 'Cleaning Check', checksdescription: 'Clean tracks with a vacuum cleaner or air blower.' },
                                            { checksHeading: 'Gap filling Check', checksdescription: 'The gaps formed between the walls and windows should be grouted with epoxy-based, rubberized compound e.g., tough seal or polysulphide using a grouting gun. ' },
                                            { checksHeading: 'Grills Check', checksdescription: 'If required, the M.S. aluminium grill should be fixed from outside for safety purposes.' },
                                            { checksHeading: 'Gaps filling check', checksdescription: 'Gaps between the window and the wall,Sealant filling in gaps' },
                                            { checksHeading: 'Holes check', checksdescription: 'Holes in the tracks are inside or outside' },
                                            { checksHeading: 'Cleaning Check', checksdescription: 'Cleanliness of the track,Any damages, cracks, dents, etc.' },
                                            { checksHeading: 'Rubber packing check', checksdescription: 'The intactness of rubber packing all around.' },
                                            { checksHeading: 'Window Glass', checksdescription: 'Check window panes for signs of moisture and scratches or cracks.' },
                                            { checksHeading: 'Reveal Check', checksdescription: 'Check if your window reveals are even.' },
                                            { checksHeading: 'Open Check', checksdescription: 'Test each window to see if it opens and closes easily.' },
                                            { checksHeading: 'Breather Holes', checksdescription: 'Examine window weep or breather holes for obstructions.' },
                                            { checksHeading: 'Windwo Flim check', checksdescription: 'Inspect your window’s film for damages such as bubbling, discoloring, and scratches.' },
                                        ];

                                        async function WindowsChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        WindowsChacks();
                                    }
                                    //Anuj 
                                    if (newDatanew.subactivityname === 'GF - Window Panelling') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1 : Before Installation ', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Rubber while fixing the glass need to be in line, with no disapparencies into it' },
                                            { subtaskdescription: 'Please assure the diagonal of all the windows, accurately, so that no gapping and other disapperancies happen' },
                                            { subtaskdescription: 'While fixing the frame with screw, make sure its done accuretaly' },
                                            { subtaskdescription: 'Frame material as per the Guage type & if you find that as per the window area, it need to be change as per site, please inform to the architect team | client for the same' },
                                            { subtaskdescription: 'Window Type as per the drawing is to be shared with contractor before PO & confirmation with the same' },
                                            { subtaskdescription: 'Confiramtion of Color, Shade of Glass, Thickness of Glass & Other accessories before PO' },
                                            { subtaskdescription: 'Phase 2 : Installation', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Make sure that the windows application film applied into the window direction is as per instruction' },
                                        ];

                                        async function BeamSlabShutteringReinforcementRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteringReinforcementRCCfunCall();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'GF - Window Panelling') {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: '', checksdescription: 'Check that any pre-drilled holes are sealed.' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Cutting Check', checksdescription: 'According to the measurements, cut the aluminium sections for making the window on the site and fix it on the wall with screws.' },
                                            { checksHeading: 'Fixing Check', checksdescription: 'Fix the shutters in the track of the window, after providing rubber packing on all the sides of the glass panel. These shutters slide because of the rollers attached at the ' },
                                            { checksHeading: 'Cleaning Check', checksdescription: 'Clean tracks with a vacuum cleaner or air blower.' },
                                            { checksHeading: 'Gap filling Check', checksdescription: 'The gaps formed between the walls and windows should be grouted with epoxy-based, rubberized compound e.g., tough seal or polysulphide using a grouting gun. ' },
                                            { checksHeading: 'Grills Check', checksdescription: 'If required, the M.S. aluminium grill should be fixed from outside for safety purposes.' },
                                            { checksHeading: 'Gaps filling check', checksdescription: 'Gaps between the window and the wall,Sealant filling in gaps' },
                                            { checksHeading: 'Holes check', checksdescription: 'Holes in the tracks are inside or outside' },
                                            { checksHeading: 'Cleaning Check', checksdescription: 'Cleanliness of the track,Any damages, cracks, dents, etc.' },
                                            { checksHeading: 'Rubber packing check', checksdescription: 'The intactness of rubber packing all around.' },
                                            { checksHeading: 'Window Glass', checksdescription: 'Check window panes for signs of moisture and scratches or cracks.' },
                                            { checksHeading: 'Reveal Check', checksdescription: 'Check if your window reveals are even.' },
                                            { checksHeading: 'Open Check', checksdescription: 'Test each window to see if it opens and closes easily.' },
                                            { checksHeading: 'Breather Holes', checksdescription: 'Examine window weep or breather holes for obstructions.' },
                                            { checksHeading: 'Windwo Flim check', checksdescription: 'Inspect your window’s film for damages such as bubbling, discoloring, and scratches.' },
                                        ];

                                        async function WindowsChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        WindowsChacks();
                                    }
                                    //Anuj 
                                    if (newDatanew.subactivityname === 'FF - Window Panelling') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1 : Before Installation ', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Rubber while fixing the glass need to be in line, with no disapparencies into it' },
                                            { subtaskdescription: 'Please assure the diagonal of all the windows, accurately, so that no gapping and other disapperancies happen' },
                                            { subtaskdescription: 'While fixing the frame with screw, make sure its done accuretaly' },
                                            { subtaskdescription: 'Frame material as per the Guage type & if you find that as per the window area, it need to be change as per site, please inform to the architect team | client for the same' },
                                            { subtaskdescription: 'Window Type as per the drawing is to be shared with contractor before PO & confirmation with the same' },
                                            { subtaskdescription: 'Confiramtion of Color, Shade of Glass, Thickness of Glass & Other accessories before PO' },
                                            { subtaskdescription: 'Phase 2 : Installation', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Make sure that the windows application film applied into the window direction is as per instruction' },
                                        ];

                                        async function BeamSlabShutteringReinforcementRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteringReinforcementRCCfunCall();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'FF - Window Panelling') {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: '', checksdescription: 'Check that any pre-drilled holes are sealed.' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Cutting Check', checksdescription: 'According to the measurements, cut the aluminium sections for making the window on the site and fix it on the wall with screws.' },
                                            { checksHeading: 'Fixing Check', checksdescription: 'Fix the shutters in the track of the window, after providing rubber packing on all the sides of the glass panel. These shutters slide because of the rollers attached at the ' },
                                            { checksHeading: 'Cleaning Check', checksdescription: 'Clean tracks with a vacuum cleaner or air blower.' },
                                            { checksHeading: 'Gap filling Check', checksdescription: 'The gaps formed between the walls and windows should be grouted with epoxy-based, rubberized compound e.g., tough seal or polysulphide using a grouting gun. ' },
                                            { checksHeading: 'Grills Check', checksdescription: 'If required, the M.S. aluminium grill should be fixed from outside for safety purposes.' },
                                            { checksHeading: 'Gaps filling check', checksdescription: 'Gaps between the window and the wall,Sealant filling in gaps' },
                                            { checksHeading: 'Holes check', checksdescription: 'Holes in the tracks are inside or outside' },
                                            { checksHeading: 'Cleaning Check', checksdescription: 'Cleanliness of the track,Any damages, cracks, dents, etc.' },
                                            { checksHeading: 'Rubber packing check', checksdescription: 'The intactness of rubber packing all around.' },
                                            { checksHeading: 'Window Glass', checksdescription: 'Check window panes for signs of moisture and scratches or cracks.' },
                                            { checksHeading: 'Reveal Check', checksdescription: 'Check if your window reveals are even.' },
                                            { checksHeading: 'Open Check', checksdescription: 'Test each window to see if it opens and closes easily.' },
                                            { checksHeading: 'Breather Holes', checksdescription: 'Examine window weep or breather holes for obstructions.' },
                                            { checksHeading: 'Windwo Flim check', checksdescription: 'Inspect your window’s film for damages such as bubbling, discoloring, and scratches.' },
                                        ];

                                        async function WindowsChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        WindowsChacks();
                                    }
                                    //Anuj 
                                    if (newDatanew.subactivityname === 'SF - Window Panelling') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1 : Before Installation ', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Rubber while fixing the glass need to be in line, with no disapparencies into it' },
                                            { subtaskdescription: 'Please assure the diagonal of all the windows, accurately, so that no gapping and other disapperancies happen' },
                                            { subtaskdescription: 'While fixing the frame with screw, make sure its done accuretaly' },
                                            { subtaskdescription: 'Frame material as per the Guage type & if you find that as per the window area, it need to be change as per site, please inform to the architect team | client for the same' },
                                            { subtaskdescription: 'Window Type as per the drawing is to be shared with contractor before PO & confirmation with the same' },
                                            { subtaskdescription: 'Confiramtion of Color, Shade of Glass, Thickness of Glass & Other accessories before PO' },
                                            { subtaskdescription: 'Phase 2 : Installation', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Make sure that the windows application film applied into the window direction is as per instruction' },
                                        ];

                                        async function BeamSlabShutteringReinforcementRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteringReinforcementRCCfunCall();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'SF - Window Panelling') {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: '', checksdescription: 'Check that any pre-drilled holes are sealed.' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Cutting Check', checksdescription: 'According to the measurements, cut the aluminium sections for making the window on the site and fix it on the wall with screws.' },
                                            { checksHeading: 'Fixing Check', checksdescription: 'Fix the shutters in the track of the window, after providing rubber packing on all the sides of the glass panel. These shutters slide because of the rollers attached at the ' },
                                            { checksHeading: 'Cleaning Check', checksdescription: 'Clean tracks with a vacuum cleaner or air blower.' },
                                            { checksHeading: 'Gap filling Check', checksdescription: 'The gaps formed between the walls and windows should be grouted with epoxy-based, rubberized compound e.g., tough seal or polysulphide using a grouting gun. ' },
                                            { checksHeading: 'Grills Check', checksdescription: 'If required, the M.S. aluminium grill should be fixed from outside for safety purposes.' },
                                            { checksHeading: 'Gaps filling check', checksdescription: 'Gaps between the window and the wall,Sealant filling in gaps' },
                                            { checksHeading: 'Holes check', checksdescription: 'Holes in the tracks are inside or outside' },
                                            { checksHeading: 'Cleaning Check', checksdescription: 'Cleanliness of the track,Any damages, cracks, dents, etc.' },
                                            { checksHeading: 'Rubber packing check', checksdescription: 'The intactness of rubber packing all around.' },
                                            { checksHeading: 'Window Glass', checksdescription: 'Check window panes for signs of moisture and scratches or cracks.' },
                                            { checksHeading: 'Reveal Check', checksdescription: 'Check if your window reveals are even.' },
                                            { checksHeading: 'Open Check', checksdescription: 'Test each window to see if it opens and closes easily.' },
                                            { checksHeading: 'Breather Holes', checksdescription: 'Examine window weep or breather holes for obstructions.' },
                                            { checksHeading: 'Windwo Flim check', checksdescription: 'Inspect your window’s film for damages such as bubbling, discoloring, and scratches.' },
                                        ];

                                        async function WindowsChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        WindowsChacks();
                                    }
                                    //Anuj 
                                    if (newDatanew.subactivityname === 'TF - Window Panelling') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1 : Before Installation ', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Rubber while fixing the glass need to be in line, with no disapparencies into it' },
                                            { subtaskdescription: 'Please assure the diagonal of all the windows, accurately, so that no gapping and other disapperancies happen' },
                                            { subtaskdescription: 'While fixing the frame with screw, make sure its done accuretaly' },
                                            { subtaskdescription: 'Frame material as per the Guage type & if you find that as per the window area, it need to be change as per site, please inform to the architect team | client for the same' },
                                            { subtaskdescription: 'Window Type as per the drawing is to be shared with contractor before PO & confirmation with the same' },
                                            { subtaskdescription: 'Confiramtion of Color, Shade of Glass, Thickness of Glass & Other accessories before PO' },
                                            { subtaskdescription: 'Phase 2 : Installation', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Make sure that the windows application film applied into the window direction is as per instruction' },
                                        ];

                                        async function BeamSlabShutteringReinforcementRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteringReinforcementRCCfunCall();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'TF - Window Panelling') {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: '', checksdescription: 'Check that any pre-drilled holes are sealed.' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Cutting Check', checksdescription: 'According to the measurements, cut the aluminium sections for making the window on the site and fix it on the wall with screws.' },
                                            { checksHeading: 'Fixing Check', checksdescription: 'Fix the shutters in the track of the window, after providing rubber packing on all the sides of the glass panel. These shutters slide because of the rollers attached at the ' },
                                            { checksHeading: 'Cleaning Check', checksdescription: 'Clean tracks with a vacuum cleaner or air blower.' },
                                            { checksHeading: 'Gap filling Check', checksdescription: 'The gaps formed between the walls and windows should be grouted with epoxy-based, rubberized compound e.g., tough seal or polysulphide using a grouting gun. ' },
                                            { checksHeading: 'Grills Check', checksdescription: 'If required, the M.S. aluminium grill should be fixed from outside for safety purposes.' },
                                            { checksHeading: 'Gaps filling check', checksdescription: 'Gaps between the window and the wall,Sealant filling in gaps' },
                                            { checksHeading: 'Holes check', checksdescription: 'Holes in the tracks are inside or outside' },
                                            { checksHeading: 'Cleaning Check', checksdescription: 'Cleanliness of the track,Any damages, cracks, dents, etc.' },
                                            { checksHeading: 'Rubber packing check', checksdescription: 'The intactness of rubber packing all around.' },
                                            { checksHeading: 'Window Glass', checksdescription: 'Check window panes for signs of moisture and scratches or cracks.' },
                                            { checksHeading: 'Reveal Check', checksdescription: 'Check if your window reveals are even.' },
                                            { checksHeading: 'Open Check', checksdescription: 'Test each window to see if it opens and closes easily.' },
                                            { checksHeading: 'Breather Holes', checksdescription: 'Examine window weep or breather holes for obstructions.' },
                                            { checksHeading: 'Windwo Flim check', checksdescription: 'Inspect your window’s film for damages such as bubbling, discoloring, and scratches.' },
                                        ];

                                        async function WindowsChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        WindowsChacks();
                                    }
                                    //Anuj 
                                    if (newDatanew.subactivityname === 'FoF - Window Panelling') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1 : Before Installation ', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Rubber while fixing the glass need to be in line, with no disapparencies into it' },
                                            { subtaskdescription: 'Please assure the diagonal of all the windows, accurately, so that no gapping and other disapperancies happen' },
                                            { subtaskdescription: 'While fixing the frame with screw, make sure its done accuretaly' },
                                            { subtaskdescription: 'Frame material as per the Guage type & if you find that as per the window area, it need to be change as per site, please inform to the architect team | client for the same' },
                                            { subtaskdescription: 'Window Type as per the drawing is to be shared with contractor before PO & confirmation with the same' },
                                            { subtaskdescription: 'Confiramtion of Color, Shade of Glass, Thickness of Glass & Other accessories before PO' },
                                            { subtaskdescription: 'Phase 2 : Installation', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Make sure that the windows application film applied into the window direction is as per instruction' },
                                        ];

                                        async function BeamSlabShutteringReinforcementRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteringReinforcementRCCfunCall();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'FoF - Window Panelling') {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: '', checksdescription: 'Check that any pre-drilled holes are sealed.' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Cutting Check', checksdescription: 'According to the measurements, cut the aluminium sections for making the window on the site and fix it on the wall with screws.' },
                                            { checksHeading: 'Fixing Check', checksdescription: 'Fix the shutters in the track of the window, after providing rubber packing on all the sides of the glass panel. These shutters slide because of the rollers attached at the ' },
                                            { checksHeading: 'Cleaning Check', checksdescription: 'Clean tracks with a vacuum cleaner or air blower.' },
                                            { checksHeading: 'Gap filling Check', checksdescription: 'The gaps formed between the walls and windows should be grouted with epoxy-based, rubberized compound e.g., tough seal or polysulphide using a grouting gun. ' },
                                            { checksHeading: 'Grills Check', checksdescription: 'If required, the M.S. aluminium grill should be fixed from outside for safety purposes.' },
                                            { checksHeading: 'Gaps filling check', checksdescription: 'Gaps between the window and the wall,Sealant filling in gaps' },
                                            { checksHeading: 'Holes check', checksdescription: 'Holes in the tracks are inside or outside' },
                                            { checksHeading: 'Cleaning Check', checksdescription: 'Cleanliness of the track,Any damages, cracks, dents, etc.' },
                                            { checksHeading: 'Rubber packing check', checksdescription: 'The intactness of rubber packing all around.' },
                                            { checksHeading: 'Window Glass', checksdescription: 'Check window panes for signs of moisture and scratches or cracks.' },
                                            { checksHeading: 'Reveal Check', checksdescription: 'Check if your window reveals are even.' },
                                            { checksHeading: 'Open Check', checksdescription: 'Test each window to see if it opens and closes easily.' },
                                            { checksHeading: 'Breather Holes', checksdescription: 'Examine window weep or breather holes for obstructions.' },
                                            { checksHeading: 'Windwo Flim check', checksdescription: 'Inspect your window’s film for damages such as bubbling, discoloring, and scratches.' },
                                        ];

                                        async function WindowsChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        WindowsChacks();
                                    }
                                    //Anuj 
                                    if (newDatanew.subactivityname === 'Tower - Window Panelling') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Phase 1 : Before Installation ', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Rubber while fixing the glass need to be in line, with no disapparencies into it' },
                                            { subtaskdescription: 'Please assure the diagonal of all the windows, accurately, so that no gapping and other disapperancies happen' },
                                            { subtaskdescription: 'While fixing the frame with screw, make sure its done accuretaly' },
                                            { subtaskdescription: 'Frame material as per the Guage type & if you find that as per the window area, it need to be change as per site, please inform to the architect team | client for the same' },
                                            { subtaskdescription: 'Window Type as per the drawing is to be shared with contractor before PO & confirmation with the same' },
                                            { subtaskdescription: 'Confiramtion of Color, Shade of Glass, Thickness of Glass & Other accessories before PO' },
                                            { subtaskdescription: 'Phase 2 : Installation', phaseHeadingShow: 'Yes' },
                                            { subtaskdescription: 'Make sure that the windows application film applied into the window direction is as per instruction' },
                                        ];

                                        async function BeamSlabShutteringReinforcementRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteringReinforcementRCCfunCall();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'Tower - Window Panelling') {

                                        const dataArranew = [
                                            { checksHeading: 'Phase 1', phaseHeadingShow: 'Yes' },
                                            { checksHeading: '', checksdescription: 'Check that any pre-drilled holes are sealed.' },
                                            { checksHeading: 'Phase 2', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Cutting Check', checksdescription: 'According to the measurements, cut the aluminium sections for making the window on the site and fix it on the wall with screws.' },
                                            { checksHeading: 'Fixing Check', checksdescription: 'Fix the shutters in the track of the window, after providing rubber packing on all the sides of the glass panel. These shutters slide because of the rollers attached at the ' },
                                            { checksHeading: 'Cleaning Check', checksdescription: 'Clean tracks with a vacuum cleaner or air blower.' },
                                            { checksHeading: 'Gap filling Check', checksdescription: 'The gaps formed between the walls and windows should be grouted with epoxy-based, rubberized compound e.g., tough seal or polysulphide using a grouting gun. ' },
                                            { checksHeading: 'Grills Check', checksdescription: 'If required, the M.S. aluminium grill should be fixed from outside for safety purposes.' },
                                            { checksHeading: 'Gaps filling check', checksdescription: 'Gaps between the window and the wall,Sealant filling in gaps' },
                                            { checksHeading: 'Holes check', checksdescription: 'Holes in the tracks are inside or outside' },
                                            { checksHeading: 'Cleaning Check', checksdescription: 'Cleanliness of the track,Any damages, cracks, dents, etc.' },
                                            { checksHeading: 'Rubber packing check', checksdescription: 'The intactness of rubber packing all around.' },
                                            { checksHeading: 'Window Glass', checksdescription: 'Check window panes for signs of moisture and scratches or cracks.' },
                                            { checksHeading: 'Reveal Check', checksdescription: 'Check if your window reveals are even.' },
                                            { checksHeading: 'Open Check', checksdescription: 'Test each window to see if it opens and closes easily.' },
                                            { checksHeading: 'Breather Holes', checksdescription: 'Examine window weep or breather holes for obstructions.' },
                                            { checksHeading: 'Windwo Flim check', checksdescription: 'Inspect your window’s film for damages such as bubbling, discoloring, and scratches.' },
                                        ];

                                        async function WindowsChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        WindowsChacks();
                                    }


                                    await Activities.updateOne(
                                        { _id: newss },
                                        {
                                            $push: {
                                                subactivitiesID: objID
                                            }
                                        }
                                    )
                                    // console.log('Data saved:', savedData);
                                } catch (error) {
                                    // console.error('Error saving data:', error);
                                }
                            }
                        }
                        miscellenousCalling();
                    }




                    if (newData.categoryname === "Paint Work") {
                        const dataArranew = [
                            { subactivityname: 'B1 - Paint', activityID: newData._id, projectID: objectproID, estimateDays: b1Paint_ESTD, TempID: 11 },
                            { subactivityname: 'B2 - Paint', activityID: newData._id, projectID: objectproID, estimateDays: b2Paint_ESTD, TempID: 22 },
                            { subactivityname: 'B3 - Paint', activityID: newData._id, projectID: objectproID, estimateDays: b3Paint_ESTD, TempID: 3 },
                            { subactivityname: 'B4 - Paint', activityID: newData._id, projectID: objectproID, estimateDays: b4Paint_ESTD, TempID: 44 },
                            { subactivityname: 'GF - Paint', activityID: newData._id, projectID: objectproID, estimateDays: gfPaint_ESTD },
                            { subactivityname: 'FF - Paint', activityID: newData._id, projectID: objectproID, estimateDays: ffPaint_ESTD, TempID: 1 },
                            { subactivityname: 'SF - Paint', activityID: newData._id, projectID: objectproID, estimateDays: sfPaint_ESTD, TempID: 2 },
                            { subactivityname: 'TF - Paint', activityID: newData._id, projectID: objectproID, estimateDays: tfPaint_ESTD, TempID: 3 },
                            { subactivityname: 'FoF - Paint', activityID: newData._id, projectID: objectproID, estimateDays: fofPaint_ESTD, TempID: 4 },
                            { subactivityname: 'Tower - Paint', activityID: newData._id, projectID: objectproID, estimateDays: towerPaint_ESTD },
                            { subactivityname: 'Side - 01', activityID: newData._id, projectID: objectproID, estimateDays: side01_ESTD },
                            { subactivityname: 'Side - 02', activityID: newData._id, projectID: objectproID, estimateDays: side02_ESTD },
                            { subactivityname: 'Side - 03', activityID: newData._id, projectID: objectproID, estimateDays: side03_ESTD },
                            { subactivityname: 'Side - 04', activityID: newData._id, projectID: objectproID, estimateDays: side04_ESTD },
                        ];

                        async function miscellenousCalling() {
                            for (let i = 0; i < dataArranew.length; i++) {
                                if (dataArranew[i].TempID === 1 && NumbersOfFlorrs < 1 || dataArranew[i].TempID === 2 && NumbersOfFlorrs < 2 || dataArranew[i].TempID === 3 && NumbersOfFlorrs < 3 || dataArranew[i].TempID === 4 && NumbersOfFlorrs < 4 || dataArranew[i].TempID === 11 && NumbersOfBasemetFloor === 0 || dataArranew[i].TempID === 22 && NumbersOfBasemetFloor === 0 || dataArranew[i].TempID === 33 && NumbersOfBasemetFloor === 0 || dataArranew[i].TempID === 44 && NumbersOfBasemetFloor === 0) {
                                    continue; // Skip this iteration
                                }
                                try {
                                    const newDatanew = new SubActivities(dataArranew[i]);
                                    const savedData = await newDatanew.save();

                                    let objID = new mongoose.Types.ObjectId(newDatanew.id)
                                    let newss = new mongoose.Types.ObjectId(newData._id)
                                    // console.log(objID);

                                    //Anuj
                                    if (newDatanew.subactivityname === 'B1 - Paint') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Assign the contractor for the work' },
                                            { subtaskdescription: 'Assign the labour for the cleaning work' },
                                            { subtaskdescription: 'Complete all the prechecks  and contractor to be informed to start the work' },
                                            { subtaskdescription: 'If the defects been identified ask the contractor  to rectify the defects within the given deadline' },
                                            { subtaskdescription: 'Ensure that the brand and color shade of paint is as per approval' },
                                            { subtaskdescription: 'Ask the contractor for the time gape between two coat putty as per manufacturer guidelines.' },
                                            { subtaskdescription: 'Ask the contractor for the sanding of putty surface before applying primer. (if applicable)' },
                                            { subtaskdescription: 'Arrange the paint material (primer,paint,putty,distemper,oil paint, red oxide,turpentine oil ,brush ) at site or  inform to the purchase manager' },
                                        ];

                                        async function PaintWorkfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PaintWorkfunCall();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'B1 - Paint') {

                                        const dataArranew = [
                                            { checksHeading: 'Before Putty Work', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Previous Work Check', checksdescription: 'All civil and electrical works complete' },
                                            { checksHeading: 'Curing check', checksdescription: 'Check that the curing period  of the walls is completed.' },
                                            { checksHeading: 'Cracks check', checksdescription: 'Check the wall cracks , dampness any other defects before application of primer' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Check if the wall surface is clean and is rubbed by fine grade paper 120 No.' },
                                            { checksHeading: 'Door Check', checksdescription: 'Main door provided with locking arrangement' },
                                            { checksHeading: 'Wall Dry Check', checksdescription: 'Wall surface dry checked' },
                                            { checksHeading: 'Wall Surface Check', checksdescription: 'Alkalinity of wall surface checked' },
                                            { checksHeading: 'Dust Check', checksdescription: 'Dirt and dust particles removed off from wall surface by papering' },
                                            { checksHeading: 'Electrical & Other Service Check', checksdescription: 'Electrical boards/switches/windows/decorative pieces /covered properly with masking tape' },
                                            { checksHeading: 'Material Check', checksdescription: 'Material - Primer, paint, putty, to be used of approved brand /color / shade/ texture.' },
                                            { checksHeading: 'Scaffod Check', checksdescription: 'Scaffold to be used with proper protection for legs to avoid scratches on flooring' },
                                            { checksHeading: 'Undulations check', checksdescription: 'All the undulations of minor nature, dents, cracks, etc. are filled up with putty and surface is smooth to receive paint.' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Check for surface is smooth & uniform and edges & corners are straight and crisp.' },

                                            { checksHeading: 'During Putty & Primer Coats', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Putty Material Check', checksdescription: 'Check for the proper mixing of Putty as per manufacturer guidelines.' },
                                            { checksHeading: 'First Coat Putty', checksdescription: 'Check for the proper application of 1st coat putty (i.e. Coarse/Filler putty) ' },
                                            { checksHeading: 'First Coat Primer', checksdescription: 'Check for the proper application of 1st coat primer (i.e. Coarse/Filler putty) ' },
                                            { checksHeading: 'Second Coat Putty', checksdescription: 'Check for the proper application of 2nd coat putty (i.e. fine putty) on 1 st coat of putty' },
                                            { checksHeading: 'Uniform Check', checksdescription: 'Check for the putty is applied uniformly.' },
                                        ];

                                        async function PaintWorkChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PaintWorkChacks();
                                    }

                                    //Anuj
                                    if (newDatanew.subactivityname === 'B2 - Paint') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Assign the contractor for the work' },
                                            { subtaskdescription: 'Assign the labour for the cleaning work' },
                                            { subtaskdescription: 'Complete all the prechecks  and contractor to be informed to start the work' },
                                            { subtaskdescription: 'If the defects been identified ask the contractor  to rectify the defects within the given deadline' },
                                            { subtaskdescription: 'Ensure that the brand and color shade of paint is as per approval' },
                                            { subtaskdescription: 'Ask the contractor for the time gape between two coat putty as per manufacturer guidelines.' },
                                            { subtaskdescription: 'Ask the contractor for the sanding of putty surface before applying primer. (if applicable)' },
                                            { subtaskdescription: 'Arrange the paint material (primer,paint,putty,distemper,oil paint, red oxide,turpentine oil ,brush ) at site or  inform to the purchase manager' },
                                        ];

                                        async function PaintWorkfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PaintWorkfunCall();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'B2 - Paint') {

                                        const dataArranew = [
                                            { checksHeading: 'Before Putty Work', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Previous Work Check', checksdescription: 'All civil and electrical works complete' },
                                            { checksHeading: 'Curing check', checksdescription: 'Check that the curing period  of the walls is completed.' },
                                            { checksHeading: 'Cracks check', checksdescription: 'Check the wall cracks , dampness any other defects before application of primer' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Check if the wall surface is clean and is rubbed by fine grade paper 120 No.' },
                                            { checksHeading: 'Door Check', checksdescription: 'Main door provided with locking arrangement' },
                                            { checksHeading: 'Wall Dry Check', checksdescription: 'Wall surface dry checked' },
                                            { checksHeading: 'Wall Surface Check', checksdescription: 'Alkalinity of wall surface checked' },
                                            { checksHeading: 'Dust Check', checksdescription: 'Dirt and dust particles removed off from wall surface by papering' },
                                            { checksHeading: 'Electrical & Other Service Check', checksdescription: 'Electrical boards/switches/windows/decorative pieces /covered properly with masking tape' },
                                            { checksHeading: 'Material Check', checksdescription: 'Material - Primer, paint, putty, to be used of approved brand /color / shade/ texture.' },
                                            { checksHeading: 'Scaffod Check', checksdescription: 'Scaffold to be used with proper protection for legs to avoid scratches on flooring' },
                                            { checksHeading: 'Undulations check', checksdescription: 'All the undulations of minor nature, dents, cracks, etc. are filled up with putty and surface is smooth to receive paint.' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Check for surface is smooth & uniform and edges & corners are straight and crisp.' },

                                            { checksHeading: 'During Putty & Primer Coats', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Putty Material Check', checksdescription: 'Check for the proper mixing of Putty as per manufacturer guidelines.' },
                                            { checksHeading: 'First Coat Putty', checksdescription: 'Check for the proper application of 1st coat putty (i.e. Coarse/Filler putty) ' },
                                            { checksHeading: 'First Coat Primer', checksdescription: 'Check for the proper application of 1st coat primer (i.e. Coarse/Filler putty) ' },
                                            { checksHeading: 'Second Coat Putty', checksdescription: 'Check for the proper application of 2nd coat putty (i.e. fine putty) on 1 st coat of putty' },
                                            { checksHeading: 'Uniform Check', checksdescription: 'Check for the putty is applied uniformly.' },
                                        ];

                                        async function PaintWorkChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PaintWorkChacks();
                                    }

                                    //Anuj
                                    if (newDatanew.subactivityname === 'B3 - Paint') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Assign the contractor for the work' },
                                            { subtaskdescription: 'Assign the labour for the cleaning work' },
                                            { subtaskdescription: 'Complete all the prechecks  and contractor to be informed to start the work' },
                                            { subtaskdescription: 'If the defects been identified ask the contractor  to rectify the defects within the given deadline' },
                                            { subtaskdescription: 'Ensure that the brand and color shade of paint is as per approval' },
                                            { subtaskdescription: 'Ask the contractor for the time gape between two coat putty as per manufacturer guidelines.' },
                                            { subtaskdescription: 'Ask the contractor for the sanding of putty surface before applying primer. (if applicable)' },
                                            { subtaskdescription: 'Arrange the paint material (primer,paint,putty,distemper,oil paint, red oxide,turpentine oil ,brush ) at site or  inform to the purchase manager' },
                                        ];

                                        async function PaintWorkfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PaintWorkfunCall();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'B3 - Paint') {

                                        const dataArranew = [
                                            { checksHeading: 'Before Putty Work', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Previous Work Check', checksdescription: 'All civil and electrical works complete' },
                                            { checksHeading: 'Curing check', checksdescription: 'Check that the curing period  of the walls is completed.' },
                                            { checksHeading: 'Cracks check', checksdescription: 'Check the wall cracks , dampness any other defects before application of primer' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Check if the wall surface is clean and is rubbed by fine grade paper 120 No.' },
                                            { checksHeading: 'Door Check', checksdescription: 'Main door provided with locking arrangement' },
                                            { checksHeading: 'Wall Dry Check', checksdescription: 'Wall surface dry checked' },
                                            { checksHeading: 'Wall Surface Check', checksdescription: 'Alkalinity of wall surface checked' },
                                            { checksHeading: 'Dust Check', checksdescription: 'Dirt and dust particles removed off from wall surface by papering' },
                                            { checksHeading: 'Electrical & Other Service Check', checksdescription: 'Electrical boards/switches/windows/decorative pieces /covered properly with masking tape' },
                                            { checksHeading: 'Material Check', checksdescription: 'Material - Primer, paint, putty, to be used of approved brand /color / shade/ texture.' },
                                            { checksHeading: 'Scaffod Check', checksdescription: 'Scaffold to be used with proper protection for legs to avoid scratches on flooring' },
                                            { checksHeading: 'Undulations check', checksdescription: 'All the undulations of minor nature, dents, cracks, etc. are filled up with putty and surface is smooth to receive paint.' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Check for surface is smooth & uniform and edges & corners are straight and crisp.' },

                                            { checksHeading: 'During Putty & Primer Coats', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Putty Material Check', checksdescription: 'Check for the proper mixing of Putty as per manufacturer guidelines.' },
                                            { checksHeading: 'First Coat Putty', checksdescription: 'Check for the proper application of 1st coat putty (i.e. Coarse/Filler putty) ' },
                                            { checksHeading: 'First Coat Primer', checksdescription: 'Check for the proper application of 1st coat primer (i.e. Coarse/Filler putty) ' },
                                            { checksHeading: 'Second Coat Putty', checksdescription: 'Check for the proper application of 2nd coat putty (i.e. fine putty) on 1 st coat of putty' },
                                            { checksHeading: 'Uniform Check', checksdescription: 'Check for the putty is applied uniformly.' },
                                        ];

                                        async function PaintWorkChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PaintWorkChacks();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'B4 - Paint') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Assign the contractor for the work' },
                                            { subtaskdescription: 'Assign the labour for the cleaning work' },
                                            { subtaskdescription: 'Complete all the prechecks  and contractor to be informed to start the work' },
                                            { subtaskdescription: 'If the defects been identified ask the contractor  to rectify the defects within the given deadline' },
                                            { subtaskdescription: 'Ensure that the brand and color shade of paint is as per approval' },
                                            { subtaskdescription: 'Ask the contractor for the time gape between two coat putty as per manufacturer guidelines.' },
                                            { subtaskdescription: 'Ask the contractor for the sanding of putty surface before applying primer. (if applicable)' },
                                            { subtaskdescription: 'Arrange the paint material (primer,paint,putty,distemper,oil paint, red oxide,turpentine oil ,brush ) at site or  inform to the purchase manager' },
                                        ];

                                        async function PaintWorkfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PaintWorkfunCall();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'B4 - Paint') {

                                        const dataArranew = [
                                            { checksHeading: 'Before Putty Work', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Previous Work Check', checksdescription: 'All civil and electrical works complete' },
                                            { checksHeading: 'Curing check', checksdescription: 'Check that the curing period  of the walls is completed.' },
                                            { checksHeading: 'Cracks check', checksdescription: 'Check the wall cracks , dampness any other defects before application of primer' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Check if the wall surface is clean and is rubbed by fine grade paper 120 No.' },
                                            { checksHeading: 'Door Check', checksdescription: 'Main door provided with locking arrangement' },
                                            { checksHeading: 'Wall Dry Check', checksdescription: 'Wall surface dry checked' },
                                            { checksHeading: 'Wall Surface Check', checksdescription: 'Alkalinity of wall surface checked' },
                                            { checksHeading: 'Dust Check', checksdescription: 'Dirt and dust particles removed off from wall surface by papering' },
                                            { checksHeading: 'Electrical & Other Service Check', checksdescription: 'Electrical boards/switches/windows/decorative pieces /covered properly with masking tape' },
                                            { checksHeading: 'Material Check', checksdescription: 'Material - Primer, paint, putty, to be used of approved brand /color / shade/ texture.' },
                                            { checksHeading: 'Scaffod Check', checksdescription: 'Scaffold to be used with proper protection for legs to avoid scratches on flooring' },
                                            { checksHeading: 'Undulations check', checksdescription: 'All the undulations of minor nature, dents, cracks, etc. are filled up with putty and surface is smooth to receive paint.' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Check for surface is smooth & uniform and edges & corners are straight and crisp.' },

                                            { checksHeading: 'During Putty & Primer Coats', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Putty Material Check', checksdescription: 'Check for the proper mixing of Putty as per manufacturer guidelines.' },
                                            { checksHeading: 'First Coat Putty', checksdescription: 'Check for the proper application of 1st coat putty (i.e. Coarse/Filler putty) ' },
                                            { checksHeading: 'First Coat Primer', checksdescription: 'Check for the proper application of 1st coat primer (i.e. Coarse/Filler putty) ' },
                                            { checksHeading: 'Second Coat Putty', checksdescription: 'Check for the proper application of 2nd coat putty (i.e. fine putty) on 1 st coat of putty' },
                                            { checksHeading: 'Uniform Check', checksdescription: 'Check for the putty is applied uniformly.' },
                                        ];

                                        async function PaintWorkChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PaintWorkChacks();
                                    }

                                    //Anuj
                                    if (newDatanew.subactivityname === 'GF - Paint') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Assign the contractor for the work' },
                                            { subtaskdescription: 'Assign the labour for the cleaning work' },
                                            { subtaskdescription: 'Complete all the prechecks  and contractor to be informed to start the work' },
                                            { subtaskdescription: 'If the defects been identified ask the contractor  to rectify the defects within the given deadline' },
                                            { subtaskdescription: 'Ensure that the brand and color shade of paint is as per approval' },
                                            { subtaskdescription: 'Ask the contractor for the time gape between two coat putty as per manufacturer guidelines.' },
                                            { subtaskdescription: 'Ask the contractor for the sanding of putty surface before applying primer. (if applicable)' },
                                            { subtaskdescription: 'Arrange the paint material (primer,paint,putty,distemper,oil paint, red oxide,turpentine oil ,brush ) at site or  inform to the purchase manager' },
                                        ];

                                        async function PaintWorkfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PaintWorkfunCall();
                                    }




                                    if (newDatanew.subactivityname === "GF - Paint") {

                                        const dataArranew = [
                                            { materailname: 'Paint - 01', materailquantity: materlID.PNTW_GFPaintPaint01Quantity, materailUnit: 'LITER' },
                                            { materailname: 'Paint - 02', materailquantity: materlID.PNTW_GFPaintPaint02Quantity, materailUnit: 'LITER' },

                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }

                                    if (newDatanew.subactivityname === "GF - Paint") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Surface Prep.', headingforshortingTwo: 'Paint Coat' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'P|P Check', NormalHeadingThree: 'Board Cov.', NormalHeadingfoure: 'Surface C.' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Paint : 01', NormalHeadingThree: 'Paint : 02', NormalHeadingfoure: 'Final Finish' },
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }


                                    if (newDatanew.subactivityname === "FF - Paint") {

                                        const dataArranew = [
                                            { materailname: 'Paint - 01', materailquantity: materlID.PNTW_FFPaintPaint01Quantity, materailUnit: 'LITER' },
                                            { materailname: 'Paint - 02', materailquantity: materlID.PNTW_FFPaintPaint02Quantity, materailUnit: 'LITER' },
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }



                                    if (newDatanew.subactivityname === "FF - Paint") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Surface Prep.', headingforshortingTwo: 'Paint Coat' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'P|P Check', NormalHeadingThree: 'Board Cov.', NormalHeadingfoure: 'Surface C.' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Paint : 01', NormalHeadingThree: 'Paint : 02', NormalHeadingfoure: 'Final Finish' },
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }

                                    if (newDatanew.subactivityname === "SF - Paint") {

                                        const dataArranew = [
                                            { materailname: 'Paint - 01', materailquantity: materlID.PNTW_SFPaintPaint01Quantity, materailUnit: 'LITER' },
                                            { materailname: 'Paint - 02', materailquantity: materlID.PNTW_SFPaintPaint02Quantity, materailUnit: 'LITER' },
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }

                                    if (newDatanew.subactivityname === "SF - Paint") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Surface Prep.', headingforshortingTwo: 'Paint Coat' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'P|P Check', NormalHeadingThree: 'Board Cov.', NormalHeadingfoure: 'Surface C.' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Paint : 01', NormalHeadingThree: 'Paint : 02', NormalHeadingfoure: 'Final Finish' },
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }


                                    if (newDatanew.subactivityname === "TF - Paint") {

                                        const dataArranew = [
                                            { materailname: 'Paint - 01', materailquantity: materlID.PNTW_TFPaintPaint01Quantity, materailUnit: 'LITER' },
                                            { materailname: 'Paint - 02', materailquantity: materlID.PNTW_TFPaintPaint02Quantity, materailUnit: 'LITER' },
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }

                                    if (newDatanew.subactivityname === "TF - Paint") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Surface Prep.', headingforshortingTwo: 'Paint Coat' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'P|P Check', NormalHeadingThree: 'Board Cov.', NormalHeadingfoure: 'Surface C.' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Paint : 01', NormalHeadingThree: 'Paint : 02', NormalHeadingfoure: 'Final Finish' },
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }


                                    if (newDatanew.subactivityname === "FoF - Paint") {

                                        const dataArranew = [
                                            { materailname: 'Paint - 01', materailquantity: materlID.PNTW_FoFPaintPaint01Quantity, materailUnit: 'LITER' },
                                            { materailname: 'Paint - 02', materailquantity: materlID.PNTW_FoFPaintPaint02Quantity, materailUnit: 'LITER' },
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === "FoF - Paint") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Surface Prep.', headingforshortingTwo: 'Paint Coat' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'P|P Check', NormalHeadingThree: 'Board Cov.', NormalHeadingfoure: 'Surface C.' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Paint : 01', NormalHeadingThree: 'Paint : 02', NormalHeadingfoure: 'Final Finish' },
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }

                                    if (newDatanew.subactivityname === "Tower - Paint") {

                                        const dataArranew = [
                                            { materailname: 'Paint - 01', materailquantity: materlID.PNTW_TowerPaintPaint01Quantity, materailUnit: 'LITER' },
                                            { materailname: 'Paint - 02', materailquantity: materlID.PNTW_TowerPaintPaint02Quantity, materailUnit: 'LITER' },
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }

                                    if (newDatanew.subactivityname === "Tower - Paint") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Surface Prep.', headingforshortingTwo: 'Paint Coat' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'P|P Check', NormalHeadingThree: 'Board Cov.', NormalHeadingfoure: 'Surface C.' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Paint : 01', NormalHeadingThree: 'Paint : 02', NormalHeadingfoure: 'Final Finish' },
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }

                                    if (newDatanew.subactivityname === "Side - 01") {

                                        const dataArranew = [
                                            { materailname: 'White Cement', materailquantity: materlID.EXTRP_Side01WhiteCementQuantity, materailUnit: 'KG' },
                                            { materailname: 'Waterproof Coat', materailquantity: materlID.EXTRP_Side01WaterproofCoatQuantity, materailUnit: 'LITRE' },
                                            { materailname: 'Texture Exterior Paint', materailquantity: materlID.EXTRP_Side01TextureExteriorPaintQuantity, materailUnit: 'LITRE' },
                                            { materailname: 'Acrylic Primer', materailquantity: materlID.EXTRP_Side01AcrylicPrimerQuantity, materailUnit: 'LITRE' },
                                            { materailname: 'Contract Base', materailquantity: materlID.EXTRP_Side01ContractBaseQuantity, materailUnit: 'LITRE' },
                                            { materailname: 'Acrylic Smooth Exterior Paint', materailquantity: materlID.EXTRP_Side01AcrylicSmoothExteriorPaintQuantity, materailUnit: 'LITRE' },
                                            { materailname: 'Acrylic Exterior Primer', materailquantity: materlID.EXTRP_Side01AcrylicExteriorPrimerQuantity, materailUnit: 'LITRE' },
                                            { materailname: 'Acrylic Smooth Exterior Paint', materailquantity: materlID.EXTRP_Side01AcrylicSmoothExteriorPaintTwoQuantity, materailUnit: 'LITRE' },
                                            { materailname: 'Acrylic Exterior Primer', materailquantity: materlID.EXTRP_Side01AcrylicExteriorPrimerTwoQuantity, materailUnit: 'LITRE' },
                                            { materailname: 'White Cement', materailquantity: materlID.EXTRP_Side01WhiteCementTwoQuantity, materailUnit: 'KG' },
                                            { materailname: 'Waterproof Coat', materailquantity: materlID.EXTRP_Side01WaterproofCoatTwoQuantity, materailUnit: 'LITRE' }
                                        ];


                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }





                                    if (newDatanew.subactivityname === "Side - 02") {

                                        const dataArranew = [
                                            { materailname: 'White Cement', materailquantity: materlID.EXTRP_Side02WhiteCementQuantity, materailUnit: 'KG' },
                                            { materailname: 'Waterproof Coat', materailquantity: materlID.EXTRP_Side02WaterproofCoatQuantity, materailUnit: 'LITRE' },
                                            { materailname: 'Texture Exterior Paint', materailquantity: materlID.EXTRP_Side02TextureExteriorPaintQuantity, materailUnit: 'LITRE' },
                                            { materailname: 'Acrylic Primer', materailquantity: materlID.EXTRP_Side02AcrylicPrimerQuantity, materailUnit: 'LITRE' },
                                            { materailname: 'Contract Base', materailquantity: materlID.EXTRP_Side02ContractBaseQuantity, materailUnit: 'LITRE' },
                                            { materailname: 'Acrylic Smooth Exterior Paint', materailquantity: materlID.EXTRP_Side02AcrylicSmoothExteriorPaintQuantity, materailUnit: 'LITRE' },
                                            { materailname: 'Acrylic Exterior Primer', materailquantity: materlID.EXTRP_Side02AcrylicExteriorPrimerQuantity, materailUnit: 'LITRE' },
                                            { materailname: 'Acrylic Smooth Exterior Paint', materailquantity: materlID.EXTRP_Side02AcrylicSmoothExteriorPaintTwoQuantity, materailUnit: 'LITRE' },
                                            { materailname: 'Acrylic Exterior Primer', materailquantity: materlID.EXTRP_Side02AcrylicExteriorPrimerTwoQuantity, materailUnit: 'LITRE' },
                                            { materailname: 'White Cement', materailquantity: materlID.EXTRP_Side02WhiteCementTwoQuantity, materailUnit: 'KG' },
                                            { materailname: 'Waterproof Coat', materailquantity: materlID.EXTRP_Side02WaterproofCoatTwoQuantity, materailUnit: 'LITRE' }
                                        ];


                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }




                                    if (newDatanew.subactivityname === "Side - 03") {

                                        const dataArranew = [
                                            { materailname: 'White Cement', materailquantity: materlID.EXTRP_Side03WhiteCementQuantity, materailUnit: 'KG' },
                                            { materailname: 'Waterproof Coat', materailquantity: materlID.EXTRP_Side03WaterproofCoatQuantity, materailUnit: 'LITRE' },
                                            { materailname: 'Texture Exterior Paint', materailquantity: materlID.EXTRP_Side03TextureExteriorPaintQuantity, materailUnit: 'LITRE' },
                                            { materailname: 'Acrylic Primer', materailquantity: materlID.EXTRP_Side03AcrylicPrimerQuantity, materailUnit: 'LITRE' },
                                            { materailname: 'Contract Base', materailquantity: materlID.EXTRP_Side03ContractBaseQuantity, materailUnit: 'LITRE' },
                                            { materailname: 'Acrylic Smooth Exterior Paint', materailquantity: materlID.EXTRP_Side03AcrylicSmoothExteriorPaintQuantity, materailUnit: 'LITRE' },
                                            { materailname: 'Acrylic Exterior Primer', materailquantity: materlID.EXTRP_Side03AcrylicExteriorPrimerQuantity, materailUnit: 'LITRE' },
                                            { materailname: 'Acrylic Smooth Exterior Paint', materailquantity: materlID.EXTRP_Side03AcrylicSmoothExteriorPaintTwoQuantity, materailUnit: 'LITRE' },
                                            { materailname: 'Acrylic Exterior Primer', materailquantity: materlID.EXTRP_Side03AcrylicExteriorPrimerTwoQuantity, materailUnit: 'LITRE' },
                                            { materailname: 'White Cement', materailquantity: materlID.EXTRP_Side03WhiteCementTwoQuantity, materailUnit: 'KG' },
                                            { materailname: 'Waterproof Coat', materailquantity: materlID.EXTRP_Side03WaterproofCoatTwoQuantity, materailUnit: 'LITRE' }
                                        ];


                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }




                                    if (newDatanew.subactivityname === "Side - 04") {

                                        const dataArranew = [
                                            { materailname: 'White Cement', materailquantity: materlID.EXTRP_Side04WhiteCementQuantity, materailUnit: 'KG' },
                                            { materailname: 'Waterproof Coat', materailquantity: materlID.EXTRP_Side04WaterproofCoatQuantity, materailUnit: 'LITRE' },
                                            { materailname: 'Texture Exterior Paint', materailquantity: materlID.EXTRP_Side04TextureExteriorPaintQuantity, materailUnit: 'LITRE' },
                                            { materailname: 'Acrylic Primer', materailquantity: materlID.EXTRP_Side04AcrylicPrimerQuantity, materailUnit: 'LITRE' },
                                            { materailname: 'Contract Base', materailquantity: materlID.EXTRP_Side04ContractBaseQuantity, materailUnit: 'LITRE' },
                                            { materailname: 'Acrylic Smooth Exterior Paint', materailquantity: materlID.EXTRP_Side04AcrylicSmoothExteriorPaintQuantity, materailUnit: 'LITRE' },
                                            { materailname: 'Acrylic Exterior Primer', materailquantity: materlID.EXTRP_Side04AcrylicExteriorPrimerQuantity, materailUnit: 'LITRE' },
                                            { materailname: 'Acrylic Smooth Exterior Paint', materailquantity: materlID.EXTRP_Side04AcrylicSmoothExteriorPaintTwoQuantity, materailUnit: 'LITRE' },
                                            { materailname: 'Acrylic Exterior Primer', materailquantity: materlID.EXTRP_Side04AcrylicExteriorPrimerTwoQuantity, materailUnit: 'LITRE' },
                                            { materailname: 'White Cement', materailquantity: materlID.EXTRP_Side04WhiteCementTwoQuantity, materailUnit: 'KG' },
                                            { materailname: 'Waterproof Coat', materailquantity: materlID.EXTRP_Side04WaterproofCoatTwoQuantity, materailUnit: 'LITRE' }
                                        ];


                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }






                                    //Anuj
                                    if (newDatanew.subactivityname === 'GF - Paint') {

                                        const dataArranew = [
                                            { checksHeading: 'Before Putty Work', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Previous Work Check', checksdescription: 'All civil and electrical works complete' },
                                            { checksHeading: 'Curing check', checksdescription: 'Check that the curing period  of the walls is completed.' },
                                            { checksHeading: 'Cracks check', checksdescription: 'Check the wall cracks , dampness any other defects before application of primer' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Check if the wall surface is clean and is rubbed by fine grade paper 120 No.' },
                                            { checksHeading: 'Door Check', checksdescription: 'Main door provided with locking arrangement' },
                                            { checksHeading: 'Wall Dry Check', checksdescription: 'Wall surface dry checked' },
                                            { checksHeading: 'Wall Surface Check', checksdescription: 'Alkalinity of wall surface checked' },
                                            { checksHeading: 'Dust Check', checksdescription: 'Dirt and dust particles removed off from wall surface by papering' },
                                            { checksHeading: 'Electrical & Other Service Check', checksdescription: 'Electrical boards/switches/windows/decorative pieces /covered properly with masking tape' },
                                            { checksHeading: 'Material Check', checksdescription: 'Material - Primer, paint, putty, to be used of approved brand /color / shade/ texture.' },
                                            { checksHeading: 'Scaffod Check', checksdescription: 'Scaffold to be used with proper protection for legs to avoid scratches on flooring' },
                                            { checksHeading: 'Undulations check', checksdescription: 'All the undulations of minor nature, dents, cracks, etc. are filled up with putty and surface is smooth to receive paint.' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Check for surface is smooth & uniform and edges & corners are straight and crisp.' },

                                            { checksHeading: 'During Putty & Primer Coats', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Putty Material Check', checksdescription: 'Check for the proper mixing of Putty as per manufacturer guidelines.' },
                                            { checksHeading: 'First Coat Putty', checksdescription: 'Check for the proper application of 1st coat putty (i.e. Coarse/Filler putty) ' },
                                            { checksHeading: 'First Coat Primer', checksdescription: 'Check for the proper application of 1st coat primer (i.e. Coarse/Filler putty) ' },
                                            { checksHeading: 'Second Coat Putty', checksdescription: 'Check for the proper application of 2nd coat putty (i.e. fine putty) on 1 st coat of putty' },
                                            { checksHeading: 'Uniform Check', checksdescription: 'Check for the putty is applied uniformly.' },
                                        ];

                                        async function PaintWorkChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PaintWorkChacks();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'FF - Paint') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Assign the contractor for the work' },
                                            { subtaskdescription: 'Assign the labour for the cleaning work' },
                                            { subtaskdescription: 'Complete all the prechecks  and contractor to be informed to start the work' },
                                            { subtaskdescription: 'If the defects been identified ask the contractor  to rectify the defects within the given deadline' },
                                            { subtaskdescription: 'Ensure that the brand and color shade of paint is as per approval' },
                                            { subtaskdescription: 'Ask the contractor for the time gape between two coat putty as per manufacturer guidelines.' },
                                            { subtaskdescription: 'Ask the contractor for the sanding of putty surface before applying primer. (if applicable)' },
                                            { subtaskdescription: 'Arrange the paint material (primer,paint,putty,distemper,oil paint, red oxide,turpentine oil ,brush ) at site or  inform to the purchase manager' },
                                        ];

                                        async function PaintWorkfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PaintWorkfunCall();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'FF - Paint') {

                                        const dataArranew = [
                                            { checksHeading: 'Before Putty Work', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Previous Work Check', checksdescription: 'All civil and electrical works complete' },
                                            { checksHeading: 'Curing check', checksdescription: 'Check that the curing period  of the walls is completed.' },
                                            { checksHeading: 'Cracks check', checksdescription: 'Check the wall cracks , dampness any other defects before application of primer' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Check if the wall surface is clean and is rubbed by fine grade paper 120 No.' },
                                            { checksHeading: 'Door Check', checksdescription: 'Main door provided with locking arrangement' },
                                            { checksHeading: 'Wall Dry Check', checksdescription: 'Wall surface dry checked' },
                                            { checksHeading: 'Wall Surface Check', checksdescription: 'Alkalinity of wall surface checked' },
                                            { checksHeading: 'Dust Check', checksdescription: 'Dirt and dust particles removed off from wall surface by papering' },
                                            { checksHeading: 'Electrical & Other Service Check', checksdescription: 'Electrical boards/switches/windows/decorative pieces /covered properly with masking tape' },
                                            { checksHeading: 'Material Check', checksdescription: 'Material - Primer, paint, putty, to be used of approved brand /color / shade/ texture.' },
                                            { checksHeading: 'Scaffod Check', checksdescription: 'Scaffold to be used with proper protection for legs to avoid scratches on flooring' },
                                            { checksHeading: 'Undulations check', checksdescription: 'All the undulations of minor nature, dents, cracks, etc. are filled up with putty and surface is smooth to receive paint.' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Check for surface is smooth & uniform and edges & corners are straight and crisp.' },

                                            { checksHeading: 'During Putty & Primer Coats', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Putty Material Check', checksdescription: 'Check for the proper mixing of Putty as per manufacturer guidelines.' },
                                            { checksHeading: 'First Coat Putty', checksdescription: 'Check for the proper application of 1st coat putty (i.e. Coarse/Filler putty) ' },
                                            { checksHeading: 'First Coat Primer', checksdescription: 'Check for the proper application of 1st coat primer (i.e. Coarse/Filler putty) ' },
                                            { checksHeading: 'Second Coat Putty', checksdescription: 'Check for the proper application of 2nd coat putty (i.e. fine putty) on 1 st coat of putty' },
                                            { checksHeading: 'Uniform Check', checksdescription: 'Check for the putty is applied uniformly.' },
                                        ];

                                        async function PaintWorkChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PaintWorkChacks();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'SF - Paint') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Assign the contractor for the work' },
                                            { subtaskdescription: 'Assign the labour for the cleaning work' },
                                            { subtaskdescription: 'Complete all the prechecks  and contractor to be informed to start the work' },
                                            { subtaskdescription: 'If the defects been identified ask the contractor  to rectify the defects within the given deadline' },
                                            { subtaskdescription: 'Ensure that the brand and color shade of paint is as per approval' },
                                            { subtaskdescription: 'Ask the contractor for the time gape between two coat putty as per manufacturer guidelines.' },
                                            { subtaskdescription: 'Ask the contractor for the sanding of putty surface before applying primer. (if applicable)' },
                                            { subtaskdescription: 'Arrange the paint material (primer,paint,putty,distemper,oil paint, red oxide,turpentine oil ,brush ) at site or  inform to the purchase manager' },
                                        ];

                                        async function PaintWorkfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PaintWorkfunCall();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'SF - Paint') {

                                        const dataArranew = [
                                            { checksHeading: 'Before Putty Work', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Previous Work Check', checksdescription: 'All civil and electrical works complete' },
                                            { checksHeading: 'Curing check', checksdescription: 'Check that the curing period  of the walls is completed.' },
                                            { checksHeading: 'Cracks check', checksdescription: 'Check the wall cracks , dampness any other defects before application of primer' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Check if the wall surface is clean and is rubbed by fine grade paper 120 No.' },
                                            { checksHeading: 'Door Check', checksdescription: 'Main door provided with locking arrangement' },
                                            { checksHeading: 'Wall Dry Check', checksdescription: 'Wall surface dry checked' },
                                            { checksHeading: 'Wall Surface Check', checksdescription: 'Alkalinity of wall surface checked' },
                                            { checksHeading: 'Dust Check', checksdescription: 'Dirt and dust particles removed off from wall surface by papering' },
                                            { checksHeading: 'Electrical & Other Service Check', checksdescription: 'Electrical boards/switches/windows/decorative pieces /covered properly with masking tape' },
                                            { checksHeading: 'Material Check', checksdescription: 'Material - Primer, paint, putty, to be used of approved brand /color / shade/ texture.' },
                                            { checksHeading: 'Scaffod Check', checksdescription: 'Scaffold to be used with proper protection for legs to avoid scratches on flooring' },
                                            { checksHeading: 'Undulations check', checksdescription: 'All the undulations of minor nature, dents, cracks, etc. are filled up with putty and surface is smooth to receive paint.' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Check for surface is smooth & uniform and edges & corners are straight and crisp.' },

                                            { checksHeading: 'During Putty & Primer Coats', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Putty Material Check', checksdescription: 'Check for the proper mixing of Putty as per manufacturer guidelines.' },
                                            { checksHeading: 'First Coat Putty', checksdescription: 'Check for the proper application of 1st coat putty (i.e. Coarse/Filler putty) ' },
                                            { checksHeading: 'First Coat Primer', checksdescription: 'Check for the proper application of 1st coat primer (i.e. Coarse/Filler putty) ' },
                                            { checksHeading: 'Second Coat Putty', checksdescription: 'Check for the proper application of 2nd coat putty (i.e. fine putty) on 1 st coat of putty' },
                                            { checksHeading: 'Uniform Check', checksdescription: 'Check for the putty is applied uniformly.' },
                                        ];

                                        async function PaintWorkChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PaintWorkChacks();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'TF - Paint') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Assign the contractor for the work' },
                                            { subtaskdescription: 'Assign the labour for the cleaning work' },
                                            { subtaskdescription: 'Complete all the prechecks  and contractor to be informed to start the work' },
                                            { subtaskdescription: 'If the defects been identified ask the contractor  to rectify the defects within the given deadline' },
                                            { subtaskdescription: 'Ensure that the brand and color shade of paint is as per approval' },
                                            { subtaskdescription: 'Ask the contractor for the time gape between two coat putty as per manufacturer guidelines.' },
                                            { subtaskdescription: 'Ask the contractor for the sanding of putty surface before applying primer. (if applicable)' },
                                            { subtaskdescription: 'Arrange the paint material (primer,paint,putty,distemper,oil paint, red oxide,turpentine oil ,brush ) at site or  inform to the purchase manager' },
                                        ];

                                        async function PaintWorkfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PaintWorkfunCall();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'TF - Paint') {

                                        const dataArranew = [
                                            { checksHeading: 'Before Putty Work', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Previous Work Check', checksdescription: 'All civil and electrical works complete' },
                                            { checksHeading: 'Curing check', checksdescription: 'Check that the curing period  of the walls is completed.' },
                                            { checksHeading: 'Cracks check', checksdescription: 'Check the wall cracks , dampness any other defects before application of primer' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Check if the wall surface is clean and is rubbed by fine grade paper 120 No.' },
                                            { checksHeading: 'Door Check', checksdescription: 'Main door provided with locking arrangement' },
                                            { checksHeading: 'Wall Dry Check', checksdescription: 'Wall surface dry checked' },
                                            { checksHeading: 'Wall Surface Check', checksdescription: 'Alkalinity of wall surface checked' },
                                            { checksHeading: 'Dust Check', checksdescription: 'Dirt and dust particles removed off from wall surface by papering' },
                                            { checksHeading: 'Electrical & Other Service Check', checksdescription: 'Electrical boards/switches/windows/decorative pieces /covered properly with masking tape' },
                                            { checksHeading: 'Material Check', checksdescription: 'Material - Primer, paint, putty, to be used of approved brand /color / shade/ texture.' },
                                            { checksHeading: 'Scaffod Check', checksdescription: 'Scaffold to be used with proper protection for legs to avoid scratches on flooring' },
                                            { checksHeading: 'Undulations check', checksdescription: 'All the undulations of minor nature, dents, cracks, etc. are filled up with putty and surface is smooth to receive paint.' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Check for surface is smooth & uniform and edges & corners are straight and crisp.' },

                                            { checksHeading: 'During Putty & Primer Coats', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Putty Material Check', checksdescription: 'Check for the proper mixing of Putty as per manufacturer guidelines.' },
                                            { checksHeading: 'First Coat Putty', checksdescription: 'Check for the proper application of 1st coat putty (i.e. Coarse/Filler putty) ' },
                                            { checksHeading: 'First Coat Primer', checksdescription: 'Check for the proper application of 1st coat primer (i.e. Coarse/Filler putty) ' },
                                            { checksHeading: 'Second Coat Putty', checksdescription: 'Check for the proper application of 2nd coat putty (i.e. fine putty) on 1 st coat of putty' },
                                            { checksHeading: 'Uniform Check', checksdescription: 'Check for the putty is applied uniformly.' },
                                        ];

                                        async function PaintWorkChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PaintWorkChacks();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'FoF - Paint') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Assign the contractor for the work' },
                                            { subtaskdescription: 'Assign the labour for the cleaning work' },
                                            { subtaskdescription: 'Complete all the prechecks  and contractor to be informed to start the work' },
                                            { subtaskdescription: 'If the defects been identified ask the contractor  to rectify the defects within the given deadline' },
                                            { subtaskdescription: 'Ensure that the brand and color shade of paint is as per approval' },
                                            { subtaskdescription: 'Ask the contractor for the time gape between two coat putty as per manufacturer guidelines.' },
                                            { subtaskdescription: 'Ask the contractor for the sanding of putty surface before applying primer. (if applicable)' },
                                            { subtaskdescription: 'Arrange the paint material (primer,paint,putty,distemper,oil paint, red oxide,turpentine oil ,brush ) at site or  inform to the purchase manager' },
                                        ];

                                        async function PaintWorkfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PaintWorkfunCall();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'FoF - Paint') {

                                        const dataArranew = [
                                            { checksHeading: 'Before Putty Work', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Previous Work Check', checksdescription: 'All civil and electrical works complete' },
                                            { checksHeading: 'Curing check', checksdescription: 'Check that the curing period  of the walls is completed.' },
                                            { checksHeading: 'Cracks check', checksdescription: 'Check the wall cracks , dampness any other defects before application of primer' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Check if the wall surface is clean and is rubbed by fine grade paper 120 No.' },
                                            { checksHeading: 'Door Check', checksdescription: 'Main door provided with locking arrangement' },
                                            { checksHeading: 'Wall Dry Check', checksdescription: 'Wall surface dry checked' },
                                            { checksHeading: 'Wall Surface Check', checksdescription: 'Alkalinity of wall surface checked' },
                                            { checksHeading: 'Dust Check', checksdescription: 'Dirt and dust particles removed off from wall surface by papering' },
                                            { checksHeading: 'Electrical & Other Service Check', checksdescription: 'Electrical boards/switches/windows/decorative pieces /covered properly with masking tape' },
                                            { checksHeading: 'Material Check', checksdescription: 'Material - Primer, paint, putty, to be used of approved brand /color / shade/ texture.' },
                                            { checksHeading: 'Scaffod Check', checksdescription: 'Scaffold to be used with proper protection for legs to avoid scratches on flooring' },
                                            { checksHeading: 'Undulations check', checksdescription: 'All the undulations of minor nature, dents, cracks, etc. are filled up with putty and surface is smooth to receive paint.' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Check for surface is smooth & uniform and edges & corners are straight and crisp.' },

                                            { checksHeading: 'During Putty & Primer Coats', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Putty Material Check', checksdescription: 'Check for the proper mixing of Putty as per manufacturer guidelines.' },
                                            { checksHeading: 'First Coat Putty', checksdescription: 'Check for the proper application of 1st coat putty (i.e. Coarse/Filler putty) ' },
                                            { checksHeading: 'First Coat Primer', checksdescription: 'Check for the proper application of 1st coat primer (i.e. Coarse/Filler putty) ' },
                                            { checksHeading: 'Second Coat Putty', checksdescription: 'Check for the proper application of 2nd coat putty (i.e. fine putty) on 1 st coat of putty' },
                                            { checksHeading: 'Uniform Check', checksdescription: 'Check for the putty is applied uniformly.' },
                                        ];

                                        async function PaintWorkChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PaintWorkChacks();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'Tower - Paint') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Assign the contractor for the work' },
                                            { subtaskdescription: 'Assign the labour for the cleaning work' },
                                            { subtaskdescription: 'Complete all the prechecks  and contractor to be informed to start the work' },
                                            { subtaskdescription: 'If the defects been identified ask the contractor  to rectify the defects within the given deadline' },
                                            { subtaskdescription: 'Ensure that the brand and color shade of paint is as per approval' },
                                            { subtaskdescription: 'Ask the contractor for the time gape between two coat putty as per manufacturer guidelines.' },
                                            { subtaskdescription: 'Ask the contractor for the sanding of putty surface before applying primer. (if applicable)' },
                                            { subtaskdescription: 'Arrange the paint material (primer,paint,putty,distemper,oil paint, red oxide,turpentine oil ,brush ) at site or  inform to the purchase manager' },
                                        ];

                                        async function PaintWorkfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PaintWorkfunCall();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'Tower - Paint') {

                                        const dataArranew = [
                                            { checksHeading: 'Before Putty Work', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Previous Work Check', checksdescription: 'All civil and electrical works complete' },
                                            { checksHeading: 'Curing check', checksdescription: 'Check that the curing period  of the walls is completed.' },
                                            { checksHeading: 'Cracks check', checksdescription: 'Check the wall cracks , dampness any other defects before application of primer' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Check if the wall surface is clean and is rubbed by fine grade paper 120 No.' },
                                            { checksHeading: 'Door Check', checksdescription: 'Main door provided with locking arrangement' },
                                            { checksHeading: 'Wall Dry Check', checksdescription: 'Wall surface dry checked' },
                                            { checksHeading: 'Wall Surface Check', checksdescription: 'Alkalinity of wall surface checked' },
                                            { checksHeading: 'Dust Check', checksdescription: 'Dirt and dust particles removed off from wall surface by papering' },
                                            { checksHeading: 'Electrical & Other Service Check', checksdescription: 'Electrical boards/switches/windows/decorative pieces /covered properly with masking tape' },
                                            { checksHeading: 'Material Check', checksdescription: 'Material - Primer, paint, putty, to be used of approved brand /color / shade/ texture.' },
                                            { checksHeading: 'Scaffod Check', checksdescription: 'Scaffold to be used with proper protection for legs to avoid scratches on flooring' },
                                            { checksHeading: 'Undulations check', checksdescription: 'All the undulations of minor nature, dents, cracks, etc. are filled up with putty and surface is smooth to receive paint.' },
                                            { checksHeading: 'Cleaning check', checksdescription: 'Check for surface is smooth & uniform and edges & corners are straight and crisp.' },

                                            { checksHeading: 'During Putty & Primer Coats', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Putty Material Check', checksdescription: 'Check for the proper mixing of Putty as per manufacturer guidelines.' },
                                            { checksHeading: 'First Coat Putty', checksdescription: 'Check for the proper application of 1st coat putty (i.e. Coarse/Filler putty) ' },
                                            { checksHeading: 'First Coat Primer', checksdescription: 'Check for the proper application of 1st coat primer (i.e. Coarse/Filler putty) ' },
                                            { checksHeading: 'Second Coat Putty', checksdescription: 'Check for the proper application of 2nd coat putty (i.e. fine putty) on 1 st coat of putty' },
                                            { checksHeading: 'Uniform Check', checksdescription: 'Check for the putty is applied uniformly.' },
                                        ];

                                        async function PaintWorkChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        PaintWorkChacks();
                                    }

                                    //Anuj
                                    if (newDatanew.subactivityname === 'Side - 01') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Confirm the type of paint, or as per the sides ' },
                                            { subtaskdescription: 'Material calcualtion as per the coat & paint type, please ask the PM for the factors or quatities for site' },
                                            { subtaskdescription: 'Inform the contractor regarding the taping work on skirting, windows, furniture cover & other things if needed' },
                                            { subtaskdescription: 'Its the contractor responsibility that the cleaning of floor and other items while painting' },
                                            { subtaskdescription: 'Sample paint as per the coat is to be applied for the finishes and other incase of any doubtfull, and approved by the client ' },
                                        ];

                                        async function BeamSlabShutteringReinforcementRCll() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteringReinforcementRCll();
                                    }
                                    if (newDatanew.subactivityname === 'Side - 01') {

                                        const dataArranew = [
                                            { checksHeading: 'PRIOR TO PAINTING', phaseHeadingShow: 'Yes' },
                                            { checksHeading: '', checksdescription: 'Check for the safety process is followed for Painting activities.' },
                                            { checksHeading: '', checksdescription: 'Check for approval of work methodology of external painting.' },
                                            { checksHeading: '', checksdescription: 'Check for availability of Tool and tackles for external painting.' },
                                            { checksHeading: '', checksdescription: 'Check for Suitability & Safety of Scaffolding for external painting.' },
                                            { checksHeading: '', checksdescription: 'Check for the availability of approved manufacturers specifications for painting activities.' },
                                            { checksHeading: '', checksdescription: 'Check for the approved mock-up of process & shade code.' },
                                            { checksHeading: '', checksdescription: 'Check for the surface is free from dead mortar, dust, oil, grease, etc.' },
                                            { checksHeading: '', checksdescription: 'Check for the grouting of tie patti / tie rod holes before painting.' },
                                            { checksHeading: '', checksdescription: 'Check for the repairing of RCC surface id done before painting. (if required)' },
                                            { checksHeading: '', checksdescription: 'Check for proper protection of Plumbing & fire fighting pipelines, windows, etc external before start of painting activities to avoid paint stain.' },
                                            { checksHeading: '', checksdescription: 'Check the watering of surface before application of putty.' },
                                            { checksHeading: 'Application for Putty', phaseHeadingShow: 'Yes' },
                                            { checksHeading: '', checksdescription: 'Check for the proper mixing of Putty as per manufacturer guidelines.' },
                                            { checksHeading: '', checksdescription: 'Check for the proper application of 1st coat putty (i.e. Coarse/Filler putty) on external wall surface.' },
                                            { checksHeading: '', checksdescription: 'Check for the proper application of 2nd coat putty (i.e. fine putty) on 1 st coat of putty' },
                                            { checksHeading: '', checksdescription: 'Check for the putty is applied uniformly.' },
                                            { checksHeading: '', checksdescription: 'Check the time gape between two coat putty as per manufacturer guidelines.' },
                                            { checksHeading: '', checksdescription: 'Check for the sanding of putty surface before applying primer. (if applicable)' },
                                            { checksHeading: 'Application of Texture', phaseHeadingShow: 'Yes' },
                                            { checksHeading: '', checksdescription: 'Check the primer is applied evenly / uniformly as per requirements. (if required)' },
                                            { checksHeading: '', checksdescription: 'Check for the proper mixing of texture as per manufacturer guidelines.' },
                                            { checksHeading: '', checksdescription: 'Check the texture is applied evenly / uniformly as per requirements.' },
                                            { checksHeading: 'Application of Paint', phaseHeadingShow: 'Yes' },
                                            { checksHeading: '', checksdescription: 'Check the primer is applied evenly / uniformly as per requirements.' },
                                            { checksHeading: '', checksdescription: 'Check for the proper mixing of paint as per manufacturer guidelines.' },
                                            { checksHeading: '', checksdescription: 'Check for proper application of 1st coat paint as per manufacturer guidelines.' },
                                            { checksHeading: '', checksdescription: 'Check for proper application of 2nd coat paint as per manufacturer guidelines.' },
                                            { checksHeading: '', checksdescription: 'Check for time gape between 1st coat and 2nd coat of paint as per manufacturer guidelines.' },
                                            { checksHeading: '', checksdescription: 'Check for the uniform thickness of paint application.' },
                                            { checksHeading: 'After PAINTING', phaseHeadingShow: 'Yes' },
                                            { checksHeading: '', checksdescription: 'Check for any patch mark / shade variation is visible on painted surface.' },
                                            { checksHeading: '', checksdescription: 'Check proper cleaning of surrounding surface of windows/ventilators of external wall.' },
                                            { checksHeading: '', checksdescription: 'Remove all the protection tapes which were provided before painting' },
                                        ];

                                        async function GradElectricChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        GradElectricChacks();
                                    }

                                    //Anuj
                                    if (newDatanew.subactivityname === 'Side - 02') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Confirm the type of paint, or as per the sides ' },
                                            { subtaskdescription: 'Material calcualtion as per the coat & paint type, please ask the PM for the factors or quatities for site' },
                                            { subtaskdescription: 'Inform the contractor regarding the taping work on skirting, windows, furniture cover & other things if needed' },
                                            { subtaskdescription: 'Its the contractor responsibility that the cleaning of floor and other items while painting' },
                                            { subtaskdescription: 'Sample paint as per the coat is to be applied for the finishes and other incase of any doubtfull, and approved by the client ' },
                                        ];

                                        async function BeamSlabShutteringReinforcementRCll() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteringReinforcementRCll();
                                    }
                                    if (newDatanew.subactivityname === 'Side - 02') {

                                        const dataArranew = [
                                            { checksHeading: 'PRIOR TO PAINTING', phaseHeadingShow: 'Yes' },
                                            { checksHeading: '', checksdescription: 'Check for the safety process is followed for Painting activities.' },
                                            { checksHeading: '', checksdescription: 'Check for approval of work methodology of external painting.' },
                                            { checksHeading: '', checksdescription: 'Check for availability of Tool and tackles for external painting.' },
                                            { checksHeading: '', checksdescription: 'Check for Suitability & Safety of Scaffolding for external painting.' },
                                            { checksHeading: '', checksdescription: 'Check for the availability of approved manufacturers specifications for painting activities.' },
                                            { checksHeading: '', checksdescription: 'Check for the approved mock-up of process & shade code.' },
                                            { checksHeading: '', checksdescription: 'Check for the surface is free from dead mortar, dust, oil, grease, etc.' },
                                            { checksHeading: '', checksdescription: 'Check for the grouting of tie patti / tie rod holes before painting.' },
                                            { checksHeading: '', checksdescription: 'Check for the repairing of RCC surface id done before painting. (if required)' },
                                            { checksHeading: '', checksdescription: 'Check for proper protection of Plumbing & fire fighting pipelines, windows, etc external before start of painting activities to avoid paint stain.' },
                                            { checksHeading: '', checksdescription: 'Check the watering of surface before application of putty.' },
                                            { checksHeading: 'Application for Putty', phaseHeadingShow: 'Yes' },
                                            { checksHeading: '', checksdescription: 'Check for the proper mixing of Putty as per manufacturer guidelines.' },
                                            { checksHeading: '', checksdescription: 'Check for the proper application of 1st coat putty (i.e. Coarse/Filler putty) on external wall surface.' },
                                            { checksHeading: '', checksdescription: 'Check for the proper application of 2nd coat putty (i.e. fine putty) on 1 st coat of putty' },
                                            { checksHeading: '', checksdescription: 'Check for the putty is applied uniformly.' },
                                            { checksHeading: '', checksdescription: 'Check the time gape between two coat putty as per manufacturer guidelines.' },
                                            { checksHeading: '', checksdescription: 'Check for the sanding of putty surface before applying primer. (if applicable)' },
                                            { checksHeading: 'Application of Texture', phaseHeadingShow: 'Yes' },
                                            { checksHeading: '', checksdescription: 'Check the primer is applied evenly / uniformly as per requirements. (if required)' },
                                            { checksHeading: '', checksdescription: 'Check for the proper mixing of texture as per manufacturer guidelines.' },
                                            { checksHeading: '', checksdescription: 'Check the texture is applied evenly / uniformly as per requirements.' },
                                            { checksHeading: 'Application of Paint', phaseHeadingShow: 'Yes' },
                                            { checksHeading: '', checksdescription: 'Check the primer is applied evenly / uniformly as per requirements.' },
                                            { checksHeading: '', checksdescription: 'Check for the proper mixing of paint as per manufacturer guidelines.' },
                                            { checksHeading: '', checksdescription: 'Check for proper application of 1st coat paint as per manufacturer guidelines.' },
                                            { checksHeading: '', checksdescription: 'Check for proper application of 2nd coat paint as per manufacturer guidelines.' },
                                            { checksHeading: '', checksdescription: 'Check for time gape between 1st coat and 2nd coat of paint as per manufacturer guidelines.' },
                                            { checksHeading: '', checksdescription: 'Check for the uniform thickness of paint application.' },
                                            { checksHeading: 'After PAINTING', phaseHeadingShow: 'Yes' },
                                            { checksHeading: '', checksdescription: 'Check for any patch mark / shade variation is visible on painted surface.' },
                                            { checksHeading: '', checksdescription: 'Check proper cleaning of surrounding surface of windows/ventilators of external wall.' },
                                            { checksHeading: '', checksdescription: 'Remove all the protection tapes which were provided before painting' },
                                        ];

                                        async function GradElectricChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        GradElectricChacks();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'Side - 03') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Confirm the type of paint, or as per the sides ' },
                                            { subtaskdescription: 'Material calcualtion as per the coat & paint type, please ask the PM for the factors or quatities for site' },
                                            { subtaskdescription: 'Inform the contractor regarding the taping work on skirting, windows, furniture cover & other things if needed' },
                                            { subtaskdescription: 'Its the contractor responsibility that the cleaning of floor and other items while painting' },
                                            { subtaskdescription: 'Sample paint as per the coat is to be applied for the finishes and other incase of any doubtfull, and approved by the client ' },
                                        ];

                                        async function BeamSlabShutteringReinforcementRCll() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteringReinforcementRCll();
                                    }
                                    if (newDatanew.subactivityname === 'Side - 03') {

                                        const dataArranew = [
                                            { checksHeading: 'PRIOR TO PAINTING', phaseHeadingShow: 'Yes' },
                                            { checksHeading: '', checksdescription: 'Check for the safety process is followed for Painting activities.' },
                                            { checksHeading: '', checksdescription: 'Check for approval of work methodology of external painting.' },
                                            { checksHeading: '', checksdescription: 'Check for availability of Tool and tackles for external painting.' },
                                            { checksHeading: '', checksdescription: 'Check for Suitability & Safety of Scaffolding for external painting.' },
                                            { checksHeading: '', checksdescription: 'Check for the availability of approved manufacturers specifications for painting activities.' },
                                            { checksHeading: '', checksdescription: 'Check for the approved mock-up of process & shade code.' },
                                            { checksHeading: '', checksdescription: 'Check for the surface is free from dead mortar, dust, oil, grease, etc.' },
                                            { checksHeading: '', checksdescription: 'Check for the grouting of tie patti / tie rod holes before painting.' },
                                            { checksHeading: '', checksdescription: 'Check for the repairing of RCC surface id done before painting. (if required)' },
                                            { checksHeading: '', checksdescription: 'Check for proper protection of Plumbing & fire fighting pipelines, windows, etc external before start of painting activities to avoid paint stain.' },
                                            { checksHeading: '', checksdescription: 'Check the watering of surface before application of putty.' },
                                            { checksHeading: 'Application for Putty', phaseHeadingShow: 'Yes' },
                                            { checksHeading: '', checksdescription: 'Check for the proper mixing of Putty as per manufacturer guidelines.' },
                                            { checksHeading: '', checksdescription: 'Check for the proper application of 1st coat putty (i.e. Coarse/Filler putty) on external wall surface.' },
                                            { checksHeading: '', checksdescription: 'Check for the proper application of 2nd coat putty (i.e. fine putty) on 1 st coat of putty' },
                                            { checksHeading: '', checksdescription: 'Check for the putty is applied uniformly.' },
                                            { checksHeading: '', checksdescription: 'Check the time gape between two coat putty as per manufacturer guidelines.' },
                                            { checksHeading: '', checksdescription: 'Check for the sanding of putty surface before applying primer. (if applicable)' },
                                            { checksHeading: 'Application of Texture', phaseHeadingShow: 'Yes' },
                                            { checksHeading: '', checksdescription: 'Check the primer is applied evenly / uniformly as per requirements. (if required)' },
                                            { checksHeading: '', checksdescription: 'Check for the proper mixing of texture as per manufacturer guidelines.' },
                                            { checksHeading: '', checksdescription: 'Check the texture is applied evenly / uniformly as per requirements.' },
                                            { checksHeading: 'Application of Paint', phaseHeadingShow: 'Yes' },
                                            { checksHeading: '', checksdescription: 'Check the primer is applied evenly / uniformly as per requirements.' },
                                            { checksHeading: '', checksdescription: 'Check for the proper mixing of paint as per manufacturer guidelines.' },
                                            { checksHeading: '', checksdescription: 'Check for proper application of 1st coat paint as per manufacturer guidelines.' },
                                            { checksHeading: '', checksdescription: 'Check for proper application of 2nd coat paint as per manufacturer guidelines.' },
                                            { checksHeading: '', checksdescription: 'Check for time gape between 1st coat and 2nd coat of paint as per manufacturer guidelines.' },
                                            { checksHeading: '', checksdescription: 'Check for the uniform thickness of paint application.' },
                                            { checksHeading: 'After PAINTING', phaseHeadingShow: 'Yes' },
                                            { checksHeading: '', checksdescription: 'Check for any patch mark / shade variation is visible on painted surface.' },
                                            { checksHeading: '', checksdescription: 'Check proper cleaning of surrounding surface of windows/ventilators of external wall.' },
                                            { checksHeading: '', checksdescription: 'Remove all the protection tapes which were provided before painting' },
                                        ];

                                        async function GradElectricChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        GradElectricChacks();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'Side - 04') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Confirm the type of paint, or as per the sides ' },
                                            { subtaskdescription: 'Material calcualtion as per the coat & paint type, please ask the PM for the factors or quatities for site' },
                                            { subtaskdescription: 'Inform the contractor regarding the taping work on skirting, windows, furniture cover & other things if needed' },
                                            { subtaskdescription: 'Its the contractor responsibility that the cleaning of floor and other items while painting' },
                                            { subtaskdescription: 'Sample paint as per the coat is to be applied for the finishes and other incase of any doubtfull, and approved by the client ' },
                                        ];

                                        async function BeamSlabShutteringReinforcementRCll() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShutteringReinforcementRCll();
                                    }
                                    if (newDatanew.subactivityname === 'Side - 04') {

                                        const dataArranew = [
                                            { checksHeading: 'PRIOR TO PAINTING', phaseHeadingShow: 'Yes' },
                                            { checksHeading: '', checksdescription: 'Check for the safety process is followed for Painting activities.' },
                                            { checksHeading: '', checksdescription: 'Check for approval of work methodology of external painting.' },
                                            { checksHeading: '', checksdescription: 'Check for availability of Tool and tackles for external painting.' },
                                            { checksHeading: '', checksdescription: 'Check for Suitability & Safety of Scaffolding for external painting.' },
                                            { checksHeading: '', checksdescription: 'Check for the availability of approved manufacturers specifications for painting activities.' },
                                            { checksHeading: '', checksdescription: 'Check for the approved mock-up of process & shade code.' },
                                            { checksHeading: '', checksdescription: 'Check for the surface is free from dead mortar, dust, oil, grease, etc.' },
                                            { checksHeading: '', checksdescription: 'Check for the grouting of tie patti / tie rod holes before painting.' },
                                            { checksHeading: '', checksdescription: 'Check for the repairing of RCC surface id done before painting. (if required)' },
                                            { checksHeading: '', checksdescription: 'Check for proper protection of Plumbing & fire fighting pipelines, windows, etc external before start of painting activities to avoid paint stain.' },
                                            { checksHeading: '', checksdescription: 'Check the watering of surface before application of putty.' },
                                            { checksHeading: 'Application for Putty', phaseHeadingShow: 'Yes' },
                                            { checksHeading: '', checksdescription: 'Check for the proper mixing of Putty as per manufacturer guidelines.' },
                                            { checksHeading: '', checksdescription: 'Check for the proper application of 1st coat putty (i.e. Coarse/Filler putty) on external wall surface.' },
                                            { checksHeading: '', checksdescription: 'Check for the proper application of 2nd coat putty (i.e. fine putty) on 1 st coat of putty' },
                                            { checksHeading: '', checksdescription: 'Check for the putty is applied uniformly.' },
                                            { checksHeading: '', checksdescription: 'Check the time gape between two coat putty as per manufacturer guidelines.' },
                                            { checksHeading: '', checksdescription: 'Check for the sanding of putty surface before applying primer. (if applicable)' },
                                            { checksHeading: 'Application of Texture', phaseHeadingShow: 'Yes' },
                                            { checksHeading: '', checksdescription: 'Check the primer is applied evenly / uniformly as per requirements. (if required)' },
                                            { checksHeading: '', checksdescription: 'Check for the proper mixing of texture as per manufacturer guidelines.' },
                                            { checksHeading: '', checksdescription: 'Check the texture is applied evenly / uniformly as per requirements.' },
                                            { checksHeading: 'Application of Paint', phaseHeadingShow: 'Yes' },
                                            { checksHeading: '', checksdescription: 'Check the primer is applied evenly / uniformly as per requirements.' },
                                            { checksHeading: '', checksdescription: 'Check for the proper mixing of paint as per manufacturer guidelines.' },
                                            { checksHeading: '', checksdescription: 'Check for proper application of 1st coat paint as per manufacturer guidelines.' },
                                            { checksHeading: '', checksdescription: 'Check for proper application of 2nd coat paint as per manufacturer guidelines.' },
                                            { checksHeading: '', checksdescription: 'Check for time gape between 1st coat and 2nd coat of paint as per manufacturer guidelines.' },
                                            { checksHeading: '', checksdescription: 'Check for the uniform thickness of paint application.' },
                                            { checksHeading: 'After PAINTING', phaseHeadingShow: 'Yes' },
                                            { checksHeading: '', checksdescription: 'Check for any patch mark / shade variation is visible on painted surface.' },
                                            { checksHeading: '', checksdescription: 'Check proper cleaning of surrounding surface of windows/ventilators of external wall.' },
                                            { checksHeading: '', checksdescription: 'Remove all the protection tapes which were provided before painting' },
                                        ];

                                        async function GradElectricChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        GradElectricChacks();
                                    }

                                    await Activities.updateOne(
                                        { _id: newss },
                                        {
                                            $push: {
                                                subactivitiesID: objID
                                            }
                                        }
                                    )
                                    // console.log('Data saved:', savedData);
                                } catch (error) {
                                    // console.error('Error saving data:', error);
                                }
                            }
                        }
                        miscellenousCalling();
                    }











                    if (newData.categoryname === "Sanitary, Door Handels & Final Finishes") {
                        var StaricaseRailinType = "SS";
                        var BalconyRailingType = "SS";

                        const dataArranew = [
                            { subactivityname: 'B1 - Sanitary', activityID: newData._id, projectID: objectproID, estimateDays: b1Sanitary_ESTD, TempID: 11 },
                            { subactivityname: 'B2 - Sanitary', activityID: newData._id, projectID: objectproID, estimateDays: b2Sanitary_ESTD, TempID: 22 },
                            { subactivityname: 'B3 - Sanitary', activityID: newData._id, projectID: objectproID, estimateDays: b3Sanitary_ESTD, TempID: 33 },
                            { subactivityname: 'B4 - Sanitary', activityID: newData._id, projectID: objectproID, estimateDays: b4Sanitary_ESTD, TempID: 44 },
                            { subactivityname: 'GF - Sanitary', activityID: newData._id, projectID: objectproID, estimateDays: gfSanitary_ESTD },
                            { subactivityname: 'FF - Sanitary', activityID: newData._id, projectID: objectproID, estimateDays: ffSanitary_ESTD, TempID: 1 },
                            { subactivityname: 'SF - Sanitary', activityID: newData._id, projectID: objectproID, estimateDays: sfSanitary_ESTD, TempID: 2 },
                            { subactivityname: 'TF - Sanitary', activityID: newData._id, projectID: objectproID, estimateDays: tfSanitary_ESTD, TempID: 3 },
                            { subactivityname: 'FoF - Sanitary', activityID: newData._id, projectID: objectproID, estimateDays: fofSanitary_ESTD, TempID: 4 },
                            { subactivityname: 'Tower - Sanitary', activityID: newData._id, projectID: objectproID, estimateDays: towerSanitary_ESTD },
                            { subactivityname: 'B1 - Door Accessories + Switch Board', activityID: newData._id, projectID: objectproID, estimateDays: b1DoorAccessoriesSwitchBoard_ESTD, TempID: 11 },
                            { subactivityname: 'B2 - Door Accessories + Switch Board', activityID: newData._id, projectID: objectproID, estimateDays: b2DoorAccessoriesSwitchBoard_ESTD, TempID: 22 },
                            { subactivityname: 'B3 - Door Accessories + Switch Board', activityID: newData._id, projectID: objectproID, estimateDays: b3DoorAccessoriesSwitchBoard_ESTD, TempID: 33 },
                            { subactivityname: 'B4 - Door Accessories + Switch Board', activityID: newData._id, projectID: objectproID, estimateDays: b4DoorAccessoriesSwitchBoard_ESTD, TempID: 44 },
                            { subactivityname: 'GF - Door Accessories + Switch Board', activityID: newData._id, projectID: objectproID, estimateDays: gfDoorAccessoriesSwitchBoard_ESTD },
                            { subactivityname: 'FF - Door Accessories + Switch Board', activityID: newData._id, projectID: objectproID, estimateDays: ffDoorAccessoriesSwitchBoard_ESTD, TempID: 1 },
                            { subactivityname: 'SF - Door Accessories + Switch Board', activityID: newData._id, projectID: objectproID, estimateDays: sfDoorAccessoriesSwitchBoard_ESTD, TempID: 2 },
                            { subactivityname: 'TF - Door Accessories + Switch Board', activityID: newData._id, projectID: objectproID, estimateDays: tfDoorAccessoriesSwitchBoard_ESTD, TempID: 3 },
                            { subactivityname: 'FoF - Door Accessories + Switch Board', activityID: newData._id, projectID: objectproID, estimateDays: fofDoorAccessoriesSwitchBoard_ESTD, TempID: 4 },
                            { subactivityname: 'Tower - Door Accessories + Switch Board', activityID: newData._id, projectID: objectproID, estimateDays: towerDoorAccessoriesSwitchBoard_ESTD },
                            { subactivityname: 'Staricase Railing', activityID: newData._id, projectID: objectproID, estimateDays: staircaseRailing_ESTD },
                            { subactivityname: 'Light Fixing & Fan', activityID: newData._id, projectID: objectproID, estimateDays: 4 },
                            { subactivityname: 'Balcony Railing', activityID: newData._id, projectID: objectproID, estimateDays: balconyRailing_ESTD },
                        ];

                        async function miscellenousCalling() {
                            for (let i = 0; i < dataArranew.length; i++) {
                                if (dataArranew[i].TempID === 1 && NumbersOfFlorrs < 1 || dataArranew[i].TempID === 2 && NumbersOfFlorrs < 2 || dataArranew[i].TempID === 3 && NumbersOfFlorrs < 3 || dataArranew[i].TempID === 4 && NumbersOfFlorrs < 4 || dataArranew[i].TempID === 11 && NumbersOfBasemetFloor === 0 || dataArranew[i].TempID === 22 && NumbersOfBasemetFloor === 0 || dataArranew[i].TempID === 33 && NumbersOfBasemetFloor === 0 || dataArranew[i].TempID === 44 && NumbersOfBasemetFloor === 0) {
                                    continue; // Skip this iteration
                                }
                                try {
                                    const newDatanew = new SubActivities(dataArranew[i]);
                                    const savedData = await newDatanew.save();

                                    let objID = new mongoose.Types.ObjectId(newDatanew.id)
                                    let newss = new mongoose.Types.ObjectId(newData._id)
                                    // console.log(objID);

                                    //Anuj
                                    if (newDatanew.subactivityname === "MS Paint Work (490)") {

                                        const dataArranew = [
                                            { checksHeading: 'Oil paint For M.S. Windows, doors, gates, grills & railings etc.', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'primer check', checksdescription: 'All cement mortar, unwanted welding burr etc. are removed before application of primer.' },
                                            { checksHeading: 'hinges check', checksdescription: 'Free movement of hinges, working systems before application of primer.' },
                                            { checksHeading: 'metal primer check', checksdescription: 'Application of zinc cromite metal primer before application of first coat of oil paint.' },
                                            { checksHeading: 'cleaning check', checksdescription: 'Cleaning of the window glass, terrace, floor, pipes, doors, fixtures, electrical switches etc. has been done properly.' },
                                        ];

                                        async function GNewSlabChacks() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        GNewSlabChacks();
                                    }


                                    if (newDatanew.subactivityname === "GF - Sanitary") {

                                        const dataArranew = [
                                            { materailname: 'Water Closet Unit', materailquantity: materlID.SNTW_GFSanitaryWaterClosetUnitQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Wash Basin Unit', materailquantity: materlID.SNTW_GFSanitaryWashBasinUnitQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Shower Unit', materailquantity: materlID.SNTW_GFSanitaryShowerUnitQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Mirror', materailquantity: materlID.SNTW_GFSanitaryMirrorQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Other Accessories', materailquantity: materlID.SNTW_GFSanitaryOtherAccessoriesQuantity, materailUnit: 'NOS.' }
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === "GF - Sanitary") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Sanitary', headingforshortingTwo: 'Toilet Access.', headingforshortingThree: 'Other Access.' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Washbasin', NormalHeadingThree: 'W.C', NormalHeadingfoure: 'Shower' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Traps', NormalHeadingThree: 'Faucets', NormalHeadingfoure: 'Remaining' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Taps', NormalHeadingThree: 'Traps', NormalHeadingfoure: 'Faucets' },
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }




                                    if (newDatanew.subactivityname === "FF - Sanitary") {

                                        const dataArranew = [
                                            { materailname: 'Water Closet Unit', materailquantity: materlID.SNTW_FFSanitaryWaterClosetUnitQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Wash Basin Unit', materailquantity: materlID.SNTW_FFSanitaryWashBasinUnitQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Shower Unit', materailquantity: materlID.SNTW_FFSanitaryShowerUnitQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Mirror', materailquantity: materlID.SNTW_FFSanitaryMirrorQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Other Accessories', materailquantity: materlID.SNTW_FFSanitaryOtherAccessoriesQuantity, materailUnit: 'NOS.' }
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }



                                    if (newDatanew.subactivityname === "FF - Sanitary") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Sanitary', headingforshortingTwo: 'Toilet Access.', headingforshortingThree: 'Other Access.' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Washbasin', NormalHeadingThree: 'W.C', NormalHeadingfoure: 'Shower' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Traps', NormalHeadingThree: 'Faucets', NormalHeadingfoure: 'Remaining' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Taps', NormalHeadingThree: 'Traps', NormalHeadingfoure: 'Faucets' },
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }


                                    if (newDatanew.subactivityname === "SF - Sanitary") {

                                        const dataArranew = [
                                            { materailname: 'Water Closet Unit', materailquantity: materlID.SNTW_SFSanitaryWaterClosetUnitQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Wash Basin Unit', materailquantity: materlID.SNTW_SFSanitaryWashBasinUnitQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Shower Unit', materailquantity: materlID.SNTW_SFSanitaryShowerUnitQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Mirror', materailquantity: materlID.SNTW_SFSanitaryMirrorQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Other Accessories', materailquantity: materlID.SNTW_SFSanitaryOtherAccessoriesQuantity, materailUnit: 'NOS.' }
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === "SF - Sanitary") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Sanitary', headingforshortingTwo: 'Toilet Access.', headingforshortingThree: 'Other Access.' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Washbasin', NormalHeadingThree: 'W.C', NormalHeadingfoure: 'Shower' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Traps', NormalHeadingThree: 'Faucets', NormalHeadingfoure: 'Remaining' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Taps', NormalHeadingThree: 'Traps', NormalHeadingfoure: 'Faucets' },
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }


                                    if (newDatanew.subactivityname === "TF - Sanitary") {

                                        const dataArranew = [
                                            { materailname: 'Water Closet Unit', materailquantity: materlID.SNTW_TFSanitaryWaterClosetUnitQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Wash Basin Unit', materailquantity: materlID.SNTW_TFSanitaryWashBasinUnitQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Shower Unit', materailquantity: materlID.SNTW_TFSanitaryShowerUnitQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Mirror', materailquantity: materlID.SNTW_TFSanitaryMirrorQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Other Accessories', materailquantity: materlID.SNTW_TFSanitaryOtherAccessoriesQuantity, materailUnit: 'NOS.' }
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === "TF - Sanitary") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Sanitary', headingforshortingTwo: 'Toilet Access.', headingforshortingThree: 'Other Access.' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Washbasin', NormalHeadingThree: 'W.C', NormalHeadingfoure: 'Shower' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Traps', NormalHeadingThree: 'Faucets', NormalHeadingfoure: 'Remaining' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Taps', NormalHeadingThree: 'Traps', NormalHeadingfoure: 'Faucets' },
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }

                                    if (newDatanew.subactivityname === "FoF - Sanitary") {

                                        const dataArranew = [
                                            { materailname: 'Water Closet Unit', materailquantity: materlID.SNTW_FoFSanitaryWaterClosetUnitQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Wash Basin Unit', materailquantity: materlID.SNTW_FoFSanitaryWashBasinUnitQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Shower Unit', materailquantity: materlID.SNTW_FoFSanitaryShowerUnitQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Mirror', materailquantity: materlID.SNTW_FoFSanitaryMirrorQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Other Accessories', materailquantity: materlID.SNTW_FoFSanitaryOtherAccessoriesQuantity, materailUnit: 'NOS.' }
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    
                                    if (newDatanew.subactivityname === "FoF - Sanitary") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Sanitary', headingforshortingTwo: 'Toilet Access.', headingforshortingThree: 'Other Access.' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Washbasin', NormalHeadingThree: 'W.C', NormalHeadingfoure: 'Shower' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Traps', NormalHeadingThree: 'Faucets', NormalHeadingfoure: 'Remaining' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Taps', NormalHeadingThree: 'Traps', NormalHeadingfoure: 'Faucets' },
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }

                                    if (newDatanew.subactivityname === "Tower - Sanitary") {

                                        const dataArranew = [
                                            { materailname: 'Water Closet Unit', materailquantity: materlID.SNTW_TowerSanitaryWaterClosetUnitQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Wash Basin Unit', materailquantity: materlID.SNTW_TowerSanitaryWashBasinUnitQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Shower Unit', materailquantity: materlID.SNTW_TowerSanitaryShowerUnitQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Mirror', materailquantity: materlID.SNTW_TowerSanitaryMirrorQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Other Accessories', materailquantity: materlID.SNTW_TowerSanitaryOtherAccessoriesQuantity, materailUnit: 'NOS.' }
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === "Tower - Sanitary") {

                                        const dataArranew = [
                                            { headingforshortingOne: 'Sanitary', headingforshortingTwo: 'Toilet Access.', headingforshortingThree: 'Other Access.' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Washbasin', NormalHeadingThree: 'W.C', NormalHeadingfoure: 'Shower' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Traps', NormalHeadingThree: 'Faucets', NormalHeadingfoure: 'Remaining' },
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Taps', NormalHeadingThree: 'Traps', NormalHeadingfoure: 'Faucets' },
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }


                                    if (newDatanew.subactivityname === "GF - Door Accessories + Switch Board") {

                                        const dataArranew = [
                                            { materailname: '2 & 3 Module - CP & MB', materailquantity: materlID.SWB_SwitchBoardGFCP_MB_2_3_ModuleQuantity, materailUnit: 'NOS.' },
                                            { materailname: '4 Module - CP & MB', materailquantity: materlID.SWB_SwitchBoardGFCP_MB_4_ModuleQuantity, materailUnit: 'NOS.' },
                                            { materailname: '6 Module - CP & MB', materailquantity: materlID.SWB_SwitchBoardGFCP_MB_6_ModuleQuantity, materailUnit: 'NOS.' },
                                            { materailname: '8 Module - CP & MB', materailquantity: materlID.SWB_SwitchBoardGFCP_MB_8_ModuleQuantity, materailUnit: 'NOS.' },
                                            { materailname: '12 Module - CP & MB', materailquantity: materlID.SWB_SwitchBoardGFCP_MB_12_ModuleQuantity, materailUnit: 'NOS.' },
                                            { materailname: '5 Amp Switch', materailquantity: materlID.SWB_SwitchBoardGFAmp_Switch_5Quantity, materailUnit: 'NOS.' },
                                            { materailname: '2 way 5/6 amps switch', materailquantity: materlID.SWB_SwitchBoardGFTwo_Way_5_6_Amp_SwitchQuantity, materailUnit: 'NOS.' },
                                            { materailname: '15/16 amp switch', materailquantity: materlID.SWB_SwitchBoardGFAmp_Switch_15_16_Quantity, materailUnit: 'NOS.' },
                                            { materailname: '3 pin 5/6 amp socket outlet', materailquantity: materlID.SWB_SwitchBoardGFPin_5_6_Amp_Socket_OutletQuantity, materailUnit: 'NOS.' },
                                            { materailname: '6 pin 15/16 amp socket outlet', materailquantity: materlID.SWB_SwitchBoardGFPin_15_16_Amp_Socket_OutletQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Modular Fan (2 module)', materailquantity: materlID.SWB_SwitchBoardGFModular_Fan_2_ModuleQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Door Lock', materailquantity: materlID.Door_Accessories_GFDoor_LockQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Door Handel', materailquantity: materlID.Door_Accessories_GFDoor_HandleQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Brass hanging type door stopper', materailquantity: materlID.Door_Accessories_GFBrass_Hanging_Type_Door_StopperQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Stainless steel butt hinges', materailquantity: materlID.Door_Accessories_GFStainless_Steel_Butt_HingesQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Stainless steel screws 40 mm', materailquantity: materlID.Door_Accessories_GFStainless_Steel_Screws_40_MM_Quantity, materailUnit: 'NOS.' }
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }

                                    if (newDatanew.subactivityname === "GF - Door Accessories + Switch Board") {

                                        const dataArranew = [
                                            {},
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Looping C.', NormalHeadingThree: 'Board Base', NormalHeadingfoure: 'Plate' },
                                            {},
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }


                                    if (newDatanew.subactivityname === "FF - Door Accessories + Switch Board") {

                                        const dataArranew = [
                                            { materailname: '2 & 3 Module - CP & MB', materailquantity: materlID.SWB_SwitchBoardFFCP_MB_2_3_ModuleQuantity, materailUnit: 'NOS.' },
                                            { materailname: '4 Module - CP & MB', materailquantity: materlID.SWB_SwitchBoardFFCP_MB_4_ModuleQuantity, materailUnit: 'NOS.' },
                                            { materailname: '6 Module - CP & MB', materailquantity: materlID.SWB_SwitchBoardFFCP_MB_6_ModuleQuantity, materailUnit: 'NOS.' },
                                            { materailname: '8 Module - CP & MB', materailquantity: materlID.SWB_SwitchBoardFFCP_MB_8_ModuleQuantity, materailUnit: 'NOS.' },
                                            { materailname: '12 Module - CP & MB', materailquantity: materlID.SWB_SwitchBoardFFCP_MB_12_ModuleQuantity, materailUnit: 'NOS.' },
                                            { materailname: '5 Amp Switch', materailquantity: materlID.SWB_SwitchBoardFFAmp_Switch_5Quantity, materailUnit: 'NOS.' },
                                            { materailname: '2 way 5/6 amps switch', materailquantity: materlID.SWB_SwitchBoardFFTwo_Way_5_6_Amp_SwitchQuantity, materailUnit: 'NOS.' },
                                            { materailname: '15/16 amp switch', materailquantity: materlID.SWB_SwitchBoardFFAmp_Switch_15_16_Quantity, materailUnit: 'NOS.' },
                                            { materailname: '3 pin 5/6 amp socket outlet', materailquantity: materlID.SWB_SwitchBoardFFPin_5_6_Amp_Socket_OutletQuantity, materailUnit: 'NOS.' },
                                            { materailname: '6 pin 15/16 amp socket outlet', materailquantity: materlID.SWB_SwitchBoardFFPin_15_16_Amp_Socket_OutletQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Modular Fan (2 module)', materailquantity: materlID.SWB_SwitchBoardFFModular_Fan_2_ModuleQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Door Lock', materailquantity: materlID.Door_Accessories_FFDoor_LockQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Door Handel', materailquantity: materlID.Door_Accessories_FFDoor_HandleQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Brass hanging type door stopper', materailquantity: materlID.Door_Accessories_FFBrass_Hanging_Type_Door_StopperQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Stainless steel butt hinges', materailquantity: materlID.Door_Accessories_FFStainless_Steel_Butt_HingesQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Stainless steel screws 40 mm', materailquantity: materlID.Door_Accessories_FFStainless_Steel_Screws_40_MM_Quantity, materailUnit: 'NOS.' }
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === "FF - Door Accessories + Switch Board") {

                                        const dataArranew = [
                                            {},
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Looping C.', NormalHeadingThree: 'Board Base', NormalHeadingfoure: 'Plate' },
                                            {},
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }


                                    if (newDatanew.subactivityname === "SF - Door Accessories + Switch Board") {

                                        const dataArranew = [
                                            { materailname: '2 & 3 Module - CP & MB', materailquantity: materlID.SWB_SwitchBoardSFCP_MB_2_3_ModuleQuantity, materailUnit: 'NOS.' },
                                            { materailname: '4 Module - CP & MB', materailquantity: materlID.SWB_SwitchBoardSFCP_MB_4_ModuleQuantity, materailUnit: 'NOS.' },
                                            { materailname: '6 Module - CP & MB', materailquantity: materlID.SWB_SwitchBoardSFCP_MB_6_ModuleQuantity, materailUnit: 'NOS.' },
                                            { materailname: '8 Module - CP & MB', materailquantity: materlID.SWB_SwitchBoardSFCP_MB_8_ModuleQuantity, materailUnit: 'NOS.' },
                                            { materailname: '12 Module - CP & MB', materailquantity: materlID.SWB_SwitchBoardSFCP_MB_12_ModuleQuantity, materailUnit: 'NOS.' },
                                            { materailname: '5 Amp Switch', materailquantity: materlID.SWB_SwitchBoardSFAmp_Switch_5Quantity, materailUnit: 'NOS.' },
                                            { materailname: '2 way 5/6 amps switch', materailquantity: materlID.SWB_SwitchBoardSFTwo_Way_5_6_Amp_SwitchQuantity, materailUnit: 'NOS.' },
                                            { materailname: '15/16 amp switch', materailquantity: materlID.SWB_SwitchBoardSFAmp_Switch_15_16_Quantity, materailUnit: 'NOS.' },
                                            { materailname: '3 pin 5/6 amp socket outlet', materailquantity: materlID.SWB_SwitchBoardSFPin_5_6_Amp_Socket_OutletQuantity, materailUnit: 'NOS.' },
                                            { materailname: '6 pin 15/16 amp socket outlet', materailquantity: materlID.SWB_SwitchBoardSFPin_15_16_Amp_Socket_OutletQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Modular Fan (2 module)', materailquantity: materlID.SWB_SwitchBoardSFModular_Fan_2_ModuleQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Door Lock', materailquantity: materlID.Door_Accessories_SFDoor_LockQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Door Handel', materailquantity: materlID.Door_Accessories_SFDoor_HandleQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Brass hanging type door stopper', materailquantity: materlID.Door_Accessories_SFBrass_Hanging_Type_Door_StopperQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Stainless steel butt hinges', materailquantity: materlID.Door_Accessories_SFStainless_Steel_Butt_HingesQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Stainless steel screws 40 mm', materailquantity: materlID.Door_Accessories_SFStainless_Steel_Screws_40_MM_Quantity, materailUnit: 'NOS.' }
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === "SF - Door Accessories + Switch Board") {

                                        const dataArranew = [
                                            {},
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Looping C.', NormalHeadingThree: 'Board Base', NormalHeadingfoure: 'Plate' },
                                            {},
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }


                                    if (newDatanew.subactivityname === "TF - Door Accessories + Switch Board") {

                                        const dataArranew = [
                                            { materailname: '2 & 3 Module - CP & MB', materailquantity: materlID.SWB_SwitchBoardTFCP_MB_2_3_ModuleQuantity, materailUnit: 'NOS.' },
                                            { materailname: '4 Module - CP & MB', materailquantity: materlID.SWB_SwitchBoardTFCP_MB_4_ModuleQuantity, materailUnit: 'NOS.' },
                                            { materailname: '6 Module - CP & MB', materailquantity: materlID.SWB_SwitchBoardTFCP_MB_6_ModuleQuantity, materailUnit: 'NOS.' },
                                            { materailname: '8 Module - CP & MB', materailquantity: materlID.SWB_SwitchBoardTFCP_MB_8_ModuleQuantity, materailUnit: 'NOS.' },
                                            { materailname: '12 Module - CP & MB', materailquantity: materlID.SWB_SwitchBoardTFCP_MB_12_ModuleQuantity, materailUnit: 'NOS.' },
                                            { materailname: '5 Amp Switch', materailquantity: materlID.SWB_SwitchBoardTFAmp_Switch_5Quantity, materailUnit: 'NOS.' },
                                            { materailname: '2 way 5/6 amps switch', materailquantity: materlID.SWB_SwitchBoardTFTwo_Way_5_6_Amp_SwitchQuantity, materailUnit: 'NOS.' },
                                            { materailname: '15/16 amp switch', materailquantity: materlID.SWB_SwitchBoardTFAmp_Switch_15_16_Quantity, materailUnit: 'NOS.' },
                                            { materailname: '3 pin 5/6 amp socket outlet', materailquantity: materlID.SWB_SwitchBoardTFPin_5_6_Amp_Socket_OutletQuantity, materailUnit: 'NOS.' },
                                            { materailname: '6 pin 15/16 amp socket outlet', materailquantity: materlID.SWB_SwitchBoardTFPin_15_16_Amp_Socket_OutletQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Modular Fan (2 module)', materailquantity: materlID.SWB_SwitchBoardTFModular_Fan_2_ModuleQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Door Lock', materailquantity: materlID.Door_Accessories_TFDoor_LockQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Door Handel', materailquantity: materlID.Door_Accessories_TFDoor_HandleQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Brass hanging type door stopper', materailquantity: materlID.Door_Accessories_TFBrass_Hanging_Type_Door_StopperQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Stainless steel butt hinges', materailquantity: materlID.Door_Accessories_TFStainless_Steel_Butt_HingesQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Stainless steel screws 40 mm', materailquantity: materlID.Door_Accessories_TFStainless_Steel_Screws_40_MM_Quantity, materailUnit: 'NOS.' }
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === "TF - Door Accessories + Switch Board") {

                                        const dataArranew = [
                                            {},
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Looping C.', NormalHeadingThree: 'Board Base', NormalHeadingfoure: 'Plate' },
                                            {},
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }


                                    if (newDatanew.subactivityname === "FoF - Door Accessories + Switch Board") {

                                        const dataArranew = [
                                            { materailname: '2 & 3 Module - CP & MB', materailquantity: materlID.SWB_SwitchBoardFoFCP_MB_2_3_ModuleQuantity, materailUnit: 'NOS.' },
                                            { materailname: '4 Module - CP & MB', materailquantity: materlID.SWB_SwitchBoardFoFCP_MB_4_ModuleQuantity, materailUnit: 'NOS.' },
                                            { materailname: '6 Module - CP & MB', materailquantity: materlID.SWB_SwitchBoardFoFCP_MB_6_ModuleQuantity, materailUnit: 'NOS.' },
                                            { materailname: '8 Module - CP & MB', materailquantity: materlID.SWB_SwitchBoardFoFCP_MB_8_ModuleQuantity, materailUnit: 'NOS.' },
                                            { materailname: '12 Module - CP & MB', materailquantity: materlID.SWB_SwitchBoardFoFCP_MB_12_ModuleQuantity, materailUnit: 'NOS.' },
                                            { materailname: '5 Amp Switch', materailquantity: materlID.SWB_SwitchBoardFoFAmp_Switch_5Quantity, materailUnit: 'NOS.' },
                                            { materailname: '2 way 5/6 amps switch', materailquantity: materlID.SWB_SwitchBoardFoFTwo_Way_5_6_Amp_SwitchQuantity, materailUnit: 'NOS.' },
                                            { materailname: '15/16 amp switch', materailquantity: materlID.SWB_SwitchBoardFoFAmp_Switch_15_16_Quantity, materailUnit: 'NOS.' },
                                            { materailname: '3 pin 5/6 amp socket outlet', materailquantity: materlID.SWB_SwitchBoardFoFPin_5_6_Amp_Socket_OutletQuantity, materailUnit: 'NOS.' },
                                            { materailname: '6 pin 15/16 amp socket outlet', materailquantity: materlID.SWB_SwitchBoardFoFPin_15_16_Amp_Socket_OutletQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Modular Fan (2 module)', materailquantity: materlID.SWB_SwitchBoardFoFModular_Fan_2_ModuleQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Door Lock', materailquantity: materlID.Door_Accessories_FoFDoor_LockQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Door Handel', materailquantity: materlID.Door_Accessories_FoFDoor_HandleQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Brass hanging type door stopper', materailquantity: materlID.Door_Accessories_FoFBrass_Hanging_Type_Door_StopperQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Stainless steel butt hinges', materailquantity: materlID.Door_Accessories_FoFStainless_Steel_Butt_HingesQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Stainless steel screws 40 mm', materailquantity: materlID.Door_Accessories_FoFStainless_Steel_Screws_40_MM_Quantity, materailUnit: 'NOS.' }
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }


                                    if (newDatanew.subactivityname === "FoF - Door Accessories + Switch Board") {

                                        const dataArranew = [
                                            {},
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Looping C.', NormalHeadingThree: 'Board Base', NormalHeadingfoure: 'Plate' },
                                            {},
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }


                                    if (newDatanew.subactivityname === "Tower - Door Accessories + Switch Board") {

                                        const dataArranew = [
                                            { materailname: '2 & 3 Module - CP & MB', materailquantity: materlID.SWB_SwitchBoardTowerCP_MB_2_3_ModuleQuantity, materailUnit: 'NOS.' },
                                            { materailname: '4 Module - CP & MB', materailquantity: materlID.SWB_SwitchBoardTowerCP_MB_4_ModuleQuantity, materailUnit: 'NOS.' },
                                            { materailname: '6 Module - CP & MB', materailquantity: materlID.SWB_SwitchBoardTowerCP_MB_6_ModuleQuantity, materailUnit: 'NOS.' },
                                            { materailname: '8 Module - CP & MB', materailquantity: materlID.SWB_SwitchBoardTowerCP_MB_8_ModuleQuantity, materailUnit: 'NOS.' },
                                            { materailname: '12 Module - CP & MB', materailquantity: materlID.SWB_SwitchBoardTowerCP_MB_12_ModuleQuantity, materailUnit: 'NOS.' },
                                            { materailname: '5 Amp Switch', materailquantity: materlID.SWB_SwitchBoardTowerAmp_Switch_5Quantity, materailUnit: 'NOS.' },
                                            { materailname: '2 way 5/6 amps switch', materailquantity: materlID.SWB_SwitchBoardTowerTwo_Way_5_6_Amp_SwitchQuantity, materailUnit: 'NOS.' },
                                            { materailname: '15/16 amp switch', materailquantity: materlID.SWB_SwitchBoardTowerAmp_Switch_15_16_Quantity, materailUnit: 'NOS.' },
                                            { materailname: '3 pin 5/6 amp socket outlet', materailquantity: materlID.SWB_SwitchBoardTowerPin_5_6_Amp_Socket_OutletQuantity, materailUnit: 'NOS.' },
                                            { materailname: '6 pin 15/16 amp socket outlet', materailquantity: materlID.SWB_SwitchBoardTowerPin_15_16_Amp_Socket_OutletQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Modular Fan (2 module)', materailquantity: materlID.SWB_SwitchBoardTowerModular_Fan_2_ModuleQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Door Lock', materailquantity: materlID.Door_Accessories_TowerDoor_LockQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Door Handel', materailquantity: materlID.Door_Accessories_TowerDoor_HandleQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Brass hanging type door stopper', materailquantity: materlID.Door_Accessories_TowerBrass_Hanging_Type_Door_StopperQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Stainless steel butt hinges', materailquantity: materlID.Door_Accessories_TowerStainless_Steel_Butt_HingesQuantity, materailUnit: 'NOS.' },
                                            { materailname: 'Stainless steel screws 40 mm', materailquantity: materlID.Door_Accessories_TowerStainless_Steel_Screws_40_MM_Quantity, materailUnit: 'NOS.' }
                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }

                                    if (newDatanew.subactivityname === "Tower - Door Accessories + Switch Board") {

                                        const dataArranew = [
                                            {},
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Looping C.', NormalHeadingThree: 'Board Base', NormalHeadingfoure: 'Plate' },
                                            {},
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }


                                    if (newDatanew.subactivityname === "Staricase Railing") {

                                        if (StaricaseRailinType === "SS") {
                                            var dArrynBataArra = [
                                                { materailname: 'SS Railing', materailquantity: materlID.SCLW_SSRailingSSRailingQuantity, materailUnit: 'KG' },

                                            ];
                                        } else if (StaricaseRailinType === "SS + GLASS") {
                                            var dArrynBataArra = [
                                                { materailname: 'SS Railing', materailquantity: materlID.SCLW_SSGlassSSRailingQuantity, materailUnit: 'KG' },
                                                { materailname: 'Glass', materailquantity: materlID.SCLW_SSGlassGlassQuantity, materailUnit: 'SQFT' },
                                            ];
                                        } else if (StaricaseRailinType === "MS") {
                                            var dArrynBataArra = [
                                                { materailname: 'MS Railing', materailquantity: materlID.SCLW_MSMSRailingQuantity, materailUnit: 'KG' },

                                            ];
                                        } else if (StaricaseRailinType === "MS + WOODEN TOP") {
                                            var dArrynBataArra = [
                                                { materailname: 'MS', materailquantity: materlID.SCLW_MSWoodenTopMSQuantity, materailUnit: 'KG' },
                                                { materailname: 'Wooden Top', materailquantity: materlID.SCLW_MSWoodenTopWoodenTopQuantity, materailUnit: 'CUFT' },
                                            ];
                                        } else if (StaricaseRailinType === "MS BESPOKEN") {
                                            var dArrynBataArra = [
                                                { materailname: 'MS', materailquantity: materlID.SCLW_MSBespokenMSQuantity, materailUnit: 'KG' },

                                            ];
                                        } else if (StaricaseRailinType === "GLASS + WOODEN TOP") {
                                            var dArrynBataArra = [
                                                { materailname: 'Glass', materailquantity: materlID.SCLW_GlassWoodenTopGlassQuantity, materailUnit: 'SQFT' },
                                                { materailname: 'Wooden Top', materailquantity: materlID.SCLW_GlassWoodenTopWoodenTopQuantity, materailUnit: 'CUFT' },
                                                { materailname: 'Other Accessories', materailquantity: materlID.SCLW_GlassWoodenTopOtherAccessoriesQuantity, materailUnit: 'NOS.' },
                                            ];
                                        } else if (StaricaseRailinType === "FULL WOODEN") {
                                            var dArrynBataArra = [
                                                { materailname: 'Wooden', materailquantity: materlID.SCLW_FullWoodenWoodenQuantity, materailUnit: 'CUFT' },
                                                { materailname: 'Other Accessories', materailquantity: materlID.SCLW_FullWoodenOtherAccessoriesQuantity, materailUnit: 'NOS.' },
                                            ];
                                        } else {
                                            var dArrynBataArra = [
                                                { materailname: 'String System', materailquantity: materlID.SCLW_StringSystemStringSystemQuantity, materailUnit: 'NOS.' },
                                            ];
                                        }

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dArrynBataArra.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dArrynBataArra[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }



                                    if (newDatanew.subactivityname === "Staricase Railing") {

                                        const dataArranew = [
                                            {},
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Holes', NormalHeadingThree: 'Fixing', NormalHeadingfoure: 'Final Finish' },
                                            {},
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }

                                    if (newDatanew.subactivityname === "Light Fixing & Fan") {

                                        const dataArranew = [
                                            { materailname: 'Light - 01', materailquantity: materlID.LF_Light_01Quantity, materailUnit: 'NOS.' },
                                            { materailname: 'Fan', materailquantity: materlID.LF_FanQuantity, materailUnit: 'NOS.' },

                                        ];

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }

                                    if (newDatanew.subactivityname === "Light Fixing & Fan") {

                                        const dataArranew = [
                                            {},
                                            { NormalHeadingOne: 'Name', NormalHeadingTwo: 'Ceiling L.', NormalHeadingThree: 'Fan', NormalHeadingfoure: 'Elevation L.' },
                                            {},
                                            {},
                                            {},
                                            {},
                                        ];

                                        async function RccsnagsSnags() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Snags(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                snagsID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        RccsnagsSnags();
                                    }


                                    if (newDatanew.subactivityname === "Balcony Railing") {

                                        if (BalconyRailingType === "SS") {
                                            var dArrynBataArra = [
                                                { materailname: 'SS Railing', materailquantity: materlID.FERW_SSRailingSSRailingQuantity, materailUnit: 'KG' },

                                            ];
                                        } else if (BalconyRailingType === "SS + GLASS") {
                                            var dArrynBataArra = [
                                                { materailname: 'SS Railing', materailquantity: materlID.FERW_SSGlassSSRailingQuantity, materailUnit: 'KG' },
                                                { materailname: 'Glass', materailquantity: materlID.FERW_SSGlassGlassQuantity, materailUnit: 'SQFT' },
                                            ];
                                        } else if (BalconyRailingType === "MS") {
                                            var dArrynBataArra = [
                                                { materailname: 'MS Railing', materailquantity: materlID.FERW_MSMSRailingQuantity, materailUnit: 'KG' },

                                            ];
                                        } else if (BalconyRailingType === "MS + WOODEN TOP") {
                                            var dArrynBataArra = [
                                                { materailname: 'MS', materailquantity: materlID.FERW_MSWoodenTopMSQuantity, materailUnit: 'KG' },
                                                { materailname: 'Wooden Top', materailquantity: materlID.FERW_MSWoodenTopWoodenTopQuantity, materailUnit: 'CUFT' },
                                            ];
                                        } else if (BalconyRailingType === "MS BESPOKEN") {
                                            var dArrynBataArra = [
                                                { materailname: 'MS', materailquantity: materlID.FERW_MSBespokenMSQuantity, materailUnit: 'KG' },

                                            ];
                                        } else if (BalconyRailingType === "GLASS + WOODEN TOP") {
                                            var dArrynBataArra = [
                                                { materailname: 'Glass', materailquantity: materlID.FERW_GlassWoodenTopGlassQuantity, materailUnit: 'SQFT' },
                                                { materailname: 'Wooden Top', materailquantity: materlID.FERW_GlassWoodenTopWoodenTopQuantity, materailUnit: 'CUFT' },
                                                { materailname: 'Other Accessories', materailquantity: materlID.FERW_GlassWoodenTopOtherAccessoriesQuantity, materailUnit: 'NOS.' },
                                            ];
                                        } else if (BalconyRailingType === "FULL WOODEN") {
                                            var dArrynBataArra = [
                                                { materailname: 'Wooden', materailquantity: materlID.FERW_FullWoodenWoodenQuantity, materailUnit: 'CUFT' },
                                                { materailname: 'Other Accessories', materailquantity: materlID.FERW_FullWoodenOtherAccessoriesQuantity, materailUnit: 'NOS.' },
                                            ];
                                        } else {
                                            var dArrynBataArra = [
                                                { materailname: 'String System', materailquantity: materlID.FERW_StringSystemStringSystemQuantity, materailUnit: 'NOS.' },
                                            ];
                                        }

                                        async function SteelReinforcementfunHGHCall() {
                                            for (let i = 0; i < dArrynBataArra.length; i++) {
                                                try {
                                                    const newDatanewtask = new Material(dArrynBataArra[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                materialsName: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        SteelReinforcementfunHGHCall();
                                    }

                                    //Anuj
                                    if (newDatanew.subactivityname === 'B1 - Door Accessories + Switch Board') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Please confirm the colour/ shade & make/ brand as per client & mark it on drawing tenative so that no confusion among the contractor or any person' },
                                            { subtaskdescription: 'Material calcualtion as per the coat & paint type, please ask the PM for the factors or quatities for site' },
                                            { subtaskdescription: 'Inform the contractor regarding the taping work on skirting, windows, furniture cover & other things if needed' },
                                            { subtaskdescription: 'Its the contractor responsibility that the cleaning of floor and other items while painting' },
                                            { subtaskdescription: 'Sample paint as per the coat is to be applied for the finishes and other incase of any doubtfull, and approved by the client ' },
                                            { subtaskdescription: 'There are undualtion in the plaster surface, the paint contractor should inform the KONNBOT team, so that after the painting work no obligation by painting contractor on other for undulation ' },
                                            { subtaskdescription: 'Corner of all the areas, to be very clear need the straightness, if can be corrected, if not then punning procedure to be applied ' },
                                            { subtaskdescription: 'Analysis of the finishes of the first coat is to be discuseed with the team in case of any issues raises on the site,' },
                                        ];

                                        async function BeamSlabShuttRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShuttRCCfunCall();
                                    }
                                    if (newDatanew.subactivityname === 'B1 - Door Accessories + Switch Board') {

                                        const dataArranew = [
                                            { checksHeading: 'First Paint Coat', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Putty & Primer Check', checksdescription: 'Application of putty completed & primer coat applied.' },
                                            { checksHeading: 'Skirting Check', checksdescription: 'Skirting should have also been completed.' },
                                            { checksHeading: 'Damage Check', checksdescription: 'Is there any damage to the putty applied surface and if yes, has the same been repaired prior to paint application' },
                                            { checksHeading: 'Covering Check', checksdescription: 'Check if necessary precautions such as proper covering of floor surface and other finished work surfaces have been undertaken to avoid the paint stains on other surfaces.' },
                                            { checksHeading: 'Finish Check', checksdescription: 'Check for surface finish and shade of first coat of paint.' },
                                            { checksHeading: 'Paint Check', checksdescription: 'Check the consistency of paint.' },
                                            { checksHeading: 'Final Paint Coat', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Other Fixture Check', checksdescription: 'Check if all MEP fixture (including electrical fittings) installation is completed' },
                                            { checksHeading: 'Surface Check', checksdescription: 'Check the surface for the application of 2nd coat of paint' },
                                            { checksHeading: 'Undulation Check', checksdescription: 'Prior to application of second coat, check the first coat of paint with light for any undulations that are to be rectified.' },
                                            { checksHeading: 'Uniform Check', checksdescription: 'Check the Uniformity of 2nd coat of paint' },
                                            { checksHeading: 'Curing Check', checksdescription: 'Check for curing if required.' },
                                            { checksHeading: 'Edge Check', checksdescription: 'Check that all edges and other surfaces are cleaned and also the scaffolds are all removed.' },
                                            { checksHeading: 'Cleaning Check', checksdescription: 'Has the floor, doors, windows and other areas been cleaned after application of paint' },
                                            { checksHeading: 'Final Clean Check', checksdescription: 'Cleaning of the window glass, terrace, floor, pipes, doors, fixtures, electrical switches etc. has been done properly.' },
                                        ];

                                        async function GradeSlabfuncrtion() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        GradeSlabfuncrtion();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'B2 - Door Accessories + Switch Board') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Please confirm the colour/ shade & make/ brand as per client & mark it on drawing tenative so that no confusion among the contractor or any person' },
                                            { subtaskdescription: 'Material calcualtion as per the coat & paint type, please ask the PM for the factors or quatities for site' },
                                            { subtaskdescription: 'Inform the contractor regarding the taping work on skirting, windows, furniture cover & other things if needed' },
                                            { subtaskdescription: 'Its the contractor responsibility that the cleaning of floor and other items while painting' },
                                            { subtaskdescription: 'Sample paint as per the coat is to be applied for the finishes and other incase of any doubtfull, and approved by the client ' },
                                            { subtaskdescription: 'There are undualtion in the plaster surface, the paint contractor should inform the KONNBOT team, so that after the painting work no obligation by painting contractor on other for undulation ' },
                                            { subtaskdescription: 'Corner of all the areas, to be very clear need the straightness, if can be corrected, if not then punning procedure to be applied ' },
                                            { subtaskdescription: 'Analysis of the finishes of the first coat is to be discuseed with the team in case of any issues raises on the site,' },
                                        ];

                                        async function BeamSlabShuttRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShuttRCCfunCall();
                                    }
                                    if (newDatanew.subactivityname === 'B2 - Door Accessories + Switch Board') {

                                        const dataArranew = [
                                            { checksHeading: 'First Paint Coat', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Putty & Primer Check', checksdescription: 'Application of putty completed & primer coat applied.' },
                                            { checksHeading: 'Skirting Check', checksdescription: 'Skirting should have also been completed.' },
                                            { checksHeading: 'Damage Check', checksdescription: 'Is there any damage to the putty applied surface and if yes, has the same been repaired prior to paint application' },
                                            { checksHeading: 'Covering Check', checksdescription: 'Check if necessary precautions such as proper covering of floor surface and other finished work surfaces have been undertaken to avoid the paint stains on other surfaces.' },
                                            { checksHeading: 'Finish Check', checksdescription: 'Check for surface finish and shade of first coat of paint.' },
                                            { checksHeading: 'Paint Check', checksdescription: 'Check the consistency of paint.' },
                                            { checksHeading: 'Final Paint Coat', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Other Fixture Check', checksdescription: 'Check if all MEP fixture (including electrical fittings) installation is completed' },
                                            { checksHeading: 'Surface Check', checksdescription: 'Check the surface for the application of 2nd coat of paint' },
                                            { checksHeading: 'Undulation Check', checksdescription: 'Prior to application of second coat, check the first coat of paint with light for any undulations that are to be rectified.' },
                                            { checksHeading: 'Uniform Check', checksdescription: 'Check the Uniformity of 2nd coat of paint' },
                                            { checksHeading: 'Curing Check', checksdescription: 'Check for curing if required.' },
                                            { checksHeading: 'Edge Check', checksdescription: 'Check that all edges and other surfaces are cleaned and also the scaffolds are all removed.' },
                                            { checksHeading: 'Cleaning Check', checksdescription: 'Has the floor, doors, windows and other areas been cleaned after application of paint' },
                                            { checksHeading: 'Final Clean Check', checksdescription: 'Cleaning of the window glass, terrace, floor, pipes, doors, fixtures, electrical switches etc. has been done properly.' },
                                        ];

                                        async function GradeSlabfuncrtion() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        GradeSlabfuncrtion();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'B3 - Door Accessories + Switch Board') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Please confirm the colour/ shade & make/ brand as per client & mark it on drawing tenative so that no confusion among the contractor or any person' },
                                            { subtaskdescription: 'Material calcualtion as per the coat & paint type, please ask the PM for the factors or quatities for site' },
                                            { subtaskdescription: 'Inform the contractor regarding the taping work on skirting, windows, furniture cover & other things if needed' },
                                            { subtaskdescription: 'Its the contractor responsibility that the cleaning of floor and other items while painting' },
                                            { subtaskdescription: 'Sample paint as per the coat is to be applied for the finishes and other incase of any doubtfull, and approved by the client ' },
                                            { subtaskdescription: 'There are undualtion in the plaster surface, the paint contractor should inform the KONNBOT team, so that after the painting work no obligation by painting contractor on other for undulation ' },
                                            { subtaskdescription: 'Corner of all the areas, to be very clear need the straightness, if can be corrected, if not then punning procedure to be applied ' },
                                            { subtaskdescription: 'Analysis of the finishes of the first coat is to be discuseed with the team in case of any issues raises on the site,' },
                                        ];

                                        async function BeamSlabShuttRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShuttRCCfunCall();
                                    }
                                    if (newDatanew.subactivityname === 'B3 - Door Accessories + Switch Board') {

                                        const dataArranew = [
                                            { checksHeading: 'First Paint Coat', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Putty & Primer Check', checksdescription: 'Application of putty completed & primer coat applied.' },
                                            { checksHeading: 'Skirting Check', checksdescription: 'Skirting should have also been completed.' },
                                            { checksHeading: 'Damage Check', checksdescription: 'Is there any damage to the putty applied surface and if yes, has the same been repaired prior to paint application' },
                                            { checksHeading: 'Covering Check', checksdescription: 'Check if necessary precautions such as proper covering of floor surface and other finished work surfaces have been undertaken to avoid the paint stains on other surfaces.' },
                                            { checksHeading: 'Finish Check', checksdescription: 'Check for surface finish and shade of first coat of paint.' },
                                            { checksHeading: 'Paint Check', checksdescription: 'Check the consistency of paint.' },
                                            { checksHeading: 'Final Paint Coat', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Other Fixture Check', checksdescription: 'Check if all MEP fixture (including electrical fittings) installation is completed' },
                                            { checksHeading: 'Surface Check', checksdescription: 'Check the surface for the application of 2nd coat of paint' },
                                            { checksHeading: 'Undulation Check', checksdescription: 'Prior to application of second coat, check the first coat of paint with light for any undulations that are to be rectified.' },
                                            { checksHeading: 'Uniform Check', checksdescription: 'Check the Uniformity of 2nd coat of paint' },
                                            { checksHeading: 'Curing Check', checksdescription: 'Check for curing if required.' },
                                            { checksHeading: 'Edge Check', checksdescription: 'Check that all edges and other surfaces are cleaned and also the scaffolds are all removed.' },
                                            { checksHeading: 'Cleaning Check', checksdescription: 'Has the floor, doors, windows and other areas been cleaned after application of paint' },
                                            { checksHeading: 'Final Clean Check', checksdescription: 'Cleaning of the window glass, terrace, floor, pipes, doors, fixtures, electrical switches etc. has been done properly.' },
                                        ];

                                        async function GradeSlabfuncrtion() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        GradeSlabfuncrtion();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'B4 - Door Accessories + Switch Board') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Please confirm the colour/ shade & make/ brand as per client & mark it on drawing tenative so that no confusion among the contractor or any person' },
                                            { subtaskdescription: 'Material calcualtion as per the coat & paint type, please ask the PM for the factors or quatities for site' },
                                            { subtaskdescription: 'Inform the contractor regarding the taping work on skirting, windows, furniture cover & other things if needed' },
                                            { subtaskdescription: 'Its the contractor responsibility that the cleaning of floor and other items while painting' },
                                            { subtaskdescription: 'Sample paint as per the coat is to be applied for the finishes and other incase of any doubtfull, and approved by the client ' },
                                            { subtaskdescription: 'There are undualtion in the plaster surface, the paint contractor should inform the KONNBOT team, so that after the painting work no obligation by painting contractor on other for undulation ' },
                                            { subtaskdescription: 'Corner of all the areas, to be very clear need the straightness, if can be corrected, if not then punning procedure to be applied ' },
                                            { subtaskdescription: 'Analysis of the finishes of the first coat is to be discuseed with the team in case of any issues raises on the site,' },
                                        ];

                                        async function BeamSlabShuttRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShuttRCCfunCall();
                                    }
                                    if (newDatanew.subactivityname === 'B4 - Door Accessories + Switch Board') {

                                        const dataArranew = [
                                            { checksHeading: 'First Paint Coat', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Putty & Primer Check', checksdescription: 'Application of putty completed & primer coat applied.' },
                                            { checksHeading: 'Skirting Check', checksdescription: 'Skirting should have also been completed.' },
                                            { checksHeading: 'Damage Check', checksdescription: 'Is there any damage to the putty applied surface and if yes, has the same been repaired prior to paint application' },
                                            { checksHeading: 'Covering Check', checksdescription: 'Check if necessary precautions such as proper covering of floor surface and other finished work surfaces have been undertaken to avoid the paint stains on other surfaces.' },
                                            { checksHeading: 'Finish Check', checksdescription: 'Check for surface finish and shade of first coat of paint.' },
                                            { checksHeading: 'Paint Check', checksdescription: 'Check the consistency of paint.' },
                                            { checksHeading: 'Final Paint Coat', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Other Fixture Check', checksdescription: 'Check if all MEP fixture (including electrical fittings) installation is completed' },
                                            { checksHeading: 'Surface Check', checksdescription: 'Check the surface for the application of 2nd coat of paint' },
                                            { checksHeading: 'Undulation Check', checksdescription: 'Prior to application of second coat, check the first coat of paint with light for any undulations that are to be rectified.' },
                                            { checksHeading: 'Uniform Check', checksdescription: 'Check the Uniformity of 2nd coat of paint' },
                                            { checksHeading: 'Curing Check', checksdescription: 'Check for curing if required.' },
                                            { checksHeading: 'Edge Check', checksdescription: 'Check that all edges and other surfaces are cleaned and also the scaffolds are all removed.' },
                                            { checksHeading: 'Cleaning Check', checksdescription: 'Has the floor, doors, windows and other areas been cleaned after application of paint' },
                                            { checksHeading: 'Final Clean Check', checksdescription: 'Cleaning of the window glass, terrace, floor, pipes, doors, fixtures, electrical switches etc. has been done properly.' },
                                        ];

                                        async function GradeSlabfuncrtion() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        GradeSlabfuncrtion();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'GF - Door Accessories + Switch Board') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Please confirm the colour/ shade & make/ brand as per client & mark it on drawing tenative so that no confusion among the contractor or any person' },
                                            { subtaskdescription: 'Material calcualtion as per the coat & paint type, please ask the PM for the factors or quatities for site' },
                                            { subtaskdescription: 'Inform the contractor regarding the taping work on skirting, windows, furniture cover & other things if needed' },
                                            { subtaskdescription: 'Its the contractor responsibility that the cleaning of floor and other items while painting' },
                                            { subtaskdescription: 'Sample paint as per the coat is to be applied for the finishes and other incase of any doubtfull, and approved by the client ' },
                                            { subtaskdescription: 'There are undualtion in the plaster surface, the paint contractor should inform the KONNBOT team, so that after the painting work no obligation by painting contractor on other for undulation ' },
                                            { subtaskdescription: 'Corner of all the areas, to be very clear need the straightness, if can be corrected, if not then punning procedure to be applied ' },
                                            { subtaskdescription: 'Analysis of the finishes of the first coat is to be discuseed with the team in case of any issues raises on the site,' },
                                        ];

                                        async function BeamSlabShuttRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShuttRCCfunCall();
                                    }
                                    if (newDatanew.subactivityname === 'GF - Door Accessories + Switch Board') {

                                        const dataArranew = [
                                            { checksHeading: 'First Paint Coat', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Putty & Primer Check', checksdescription: 'Application of putty completed & primer coat applied.' },
                                            { checksHeading: 'Skirting Check', checksdescription: 'Skirting should have also been completed.' },
                                            { checksHeading: 'Damage Check', checksdescription: 'Is there any damage to the putty applied surface and if yes, has the same been repaired prior to paint application' },
                                            { checksHeading: 'Covering Check', checksdescription: 'Check if necessary precautions such as proper covering of floor surface and other finished work surfaces have been undertaken to avoid the paint stains on other surfaces.' },
                                            { checksHeading: 'Finish Check', checksdescription: 'Check for surface finish and shade of first coat of paint.' },
                                            { checksHeading: 'Paint Check', checksdescription: 'Check the consistency of paint.' },
                                            { checksHeading: 'Final Paint Coat', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Other Fixture Check', checksdescription: 'Check if all MEP fixture (including electrical fittings) installation is completed' },
                                            { checksHeading: 'Surface Check', checksdescription: 'Check the surface for the application of 2nd coat of paint' },
                                            { checksHeading: 'Undulation Check', checksdescription: 'Prior to application of second coat, check the first coat of paint with light for any undulations that are to be rectified.' },
                                            { checksHeading: 'Uniform Check', checksdescription: 'Check the Uniformity of 2nd coat of paint' },
                                            { checksHeading: 'Curing Check', checksdescription: 'Check for curing if required.' },
                                            { checksHeading: 'Edge Check', checksdescription: 'Check that all edges and other surfaces are cleaned and also the scaffolds are all removed.' },
                                            { checksHeading: 'Cleaning Check', checksdescription: 'Has the floor, doors, windows and other areas been cleaned after application of paint' },
                                            { checksHeading: 'Final Clean Check', checksdescription: 'Cleaning of the window glass, terrace, floor, pipes, doors, fixtures, electrical switches etc. has been done properly.' },
                                        ];

                                        async function GradeSlabfuncrtion() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        GradeSlabfuncrtion();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'FF - Door Accessories + Switch Board') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Please confirm the colour/ shade & make/ brand as per client & mark it on drawing tenative so that no confusion among the contractor or any person' },
                                            { subtaskdescription: 'Material calcualtion as per the coat & paint type, please ask the PM for the factors or quatities for site' },
                                            { subtaskdescription: 'Inform the contractor regarding the taping work on skirting, windows, furniture cover & other things if needed' },
                                            { subtaskdescription: 'Its the contractor responsibility that the cleaning of floor and other items while painting' },
                                            { subtaskdescription: 'Sample paint as per the coat is to be applied for the finishes and other incase of any doubtfull, and approved by the client ' },
                                            { subtaskdescription: 'There are undualtion in the plaster surface, the paint contractor should inform the KONNBOT team, so that after the painting work no obligation by painting contractor on other for undulation ' },
                                            { subtaskdescription: 'Corner of all the areas, to be very clear need the straightness, if can be corrected, if not then punning procedure to be applied ' },
                                            { subtaskdescription: 'Analysis of the finishes of the first coat is to be discuseed with the team in case of any issues raises on the site,' },
                                        ];

                                        async function BeamSlabShuttRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShuttRCCfunCall();
                                    }
                                    if (newDatanew.subactivityname === 'FF - Door Accessories + Switch Board') {

                                        const dataArranew = [
                                            { checksHeading: 'First Paint Coat', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Putty & Primer Check', checksdescription: 'Application of putty completed & primer coat applied.' },
                                            { checksHeading: 'Skirting Check', checksdescription: 'Skirting should have also been completed.' },
                                            { checksHeading: 'Damage Check', checksdescription: 'Is there any damage to the putty applied surface and if yes, has the same been repaired prior to paint application' },
                                            { checksHeading: 'Covering Check', checksdescription: 'Check if necessary precautions such as proper covering of floor surface and other finished work surfaces have been undertaken to avoid the paint stains on other surfaces.' },
                                            { checksHeading: 'Finish Check', checksdescription: 'Check for surface finish and shade of first coat of paint.' },
                                            { checksHeading: 'Paint Check', checksdescription: 'Check the consistency of paint.' },
                                            { checksHeading: 'Final Paint Coat', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Other Fixture Check', checksdescription: 'Check if all MEP fixture (including electrical fittings) installation is completed' },
                                            { checksHeading: 'Surface Check', checksdescription: 'Check the surface for the application of 2nd coat of paint' },
                                            { checksHeading: 'Undulation Check', checksdescription: 'Prior to application of second coat, check the first coat of paint with light for any undulations that are to be rectified.' },
                                            { checksHeading: 'Uniform Check', checksdescription: 'Check the Uniformity of 2nd coat of paint' },
                                            { checksHeading: 'Curing Check', checksdescription: 'Check for curing if required.' },
                                            { checksHeading: 'Edge Check', checksdescription: 'Check that all edges and other surfaces are cleaned and also the scaffolds are all removed.' },
                                            { checksHeading: 'Cleaning Check', checksdescription: 'Has the floor, doors, windows and other areas been cleaned after application of paint' },
                                            { checksHeading: 'Final Clean Check', checksdescription: 'Cleaning of the window glass, terrace, floor, pipes, doors, fixtures, electrical switches etc. has been done properly.' },
                                        ];

                                        async function GradeSlabfuncrtion() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        GradeSlabfuncrtion();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'SF - Door Accessories + Switch Board') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Please confirm the colour/ shade & make/ brand as per client & mark it on drawing tenative so that no confusion among the contractor or any person' },
                                            { subtaskdescription: 'Material calcualtion as per the coat & paint type, please ask the PM for the factors or quatities for site' },
                                            { subtaskdescription: 'Inform the contractor regarding the taping work on skirting, windows, furniture cover & other things if needed' },
                                            { subtaskdescription: 'Its the contractor responsibility that the cleaning of floor and other items while painting' },
                                            { subtaskdescription: 'Sample paint as per the coat is to be applied for the finishes and other incase of any doubtfull, and approved by the client ' },
                                            { subtaskdescription: 'There are undualtion in the plaster surface, the paint contractor should inform the KONNBOT team, so that after the painting work no obligation by painting contractor on other for undulation ' },
                                            { subtaskdescription: 'Corner of all the areas, to be very clear need the straightness, if can be corrected, if not then punning procedure to be applied ' },
                                            { subtaskdescription: 'Analysis of the finishes of the first coat is to be discuseed with the team in case of any issues raises on the site,' },
                                        ];

                                        async function BeamSlabShuttRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShuttRCCfunCall();
                                    }
                                    if (newDatanew.subactivityname === 'SF - Door Accessories + Switch Board') {

                                        const dataArranew = [
                                            { checksHeading: 'First Paint Coat', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Putty & Primer Check', checksdescription: 'Application of putty completed & primer coat applied.' },
                                            { checksHeading: 'Skirting Check', checksdescription: 'Skirting should have also been completed.' },
                                            { checksHeading: 'Damage Check', checksdescription: 'Is there any damage to the putty applied surface and if yes, has the same been repaired prior to paint application' },
                                            { checksHeading: 'Covering Check', checksdescription: 'Check if necessary precautions such as proper covering of floor surface and other finished work surfaces have been undertaken to avoid the paint stains on other surfaces.' },
                                            { checksHeading: 'Finish Check', checksdescription: 'Check for surface finish and shade of first coat of paint.' },
                                            { checksHeading: 'Paint Check', checksdescription: 'Check the consistency of paint.' },
                                            { checksHeading: 'Final Paint Coat', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Other Fixture Check', checksdescription: 'Check if all MEP fixture (including electrical fittings) installation is completed' },
                                            { checksHeading: 'Surface Check', checksdescription: 'Check the surface for the application of 2nd coat of paint' },
                                            { checksHeading: 'Undulation Check', checksdescription: 'Prior to application of second coat, check the first coat of paint with light for any undulations that are to be rectified.' },
                                            { checksHeading: 'Uniform Check', checksdescription: 'Check the Uniformity of 2nd coat of paint' },
                                            { checksHeading: 'Curing Check', checksdescription: 'Check for curing if required.' },
                                            { checksHeading: 'Edge Check', checksdescription: 'Check that all edges and other surfaces are cleaned and also the scaffolds are all removed.' },
                                            { checksHeading: 'Cleaning Check', checksdescription: 'Has the floor, doors, windows and other areas been cleaned after application of paint' },
                                            { checksHeading: 'Final Clean Check', checksdescription: 'Cleaning of the window glass, terrace, floor, pipes, doors, fixtures, electrical switches etc. has been done properly.' },
                                        ];

                                        async function GradeSlabfuncrtion() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        GradeSlabfuncrtion();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'TF - Door Accessories + Switch Board') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Please confirm the colour/ shade & make/ brand as per client & mark it on drawing tenative so that no confusion among the contractor or any person' },
                                            { subtaskdescription: 'Material calcualtion as per the coat & paint type, please ask the PM for the factors or quatities for site' },
                                            { subtaskdescription: 'Inform the contractor regarding the taping work on skirting, windows, furniture cover & other things if needed' },
                                            { subtaskdescription: 'Its the contractor responsibility that the cleaning of floor and other items while painting' },
                                            { subtaskdescription: 'Sample paint as per the coat is to be applied for the finishes and other incase of any doubtfull, and approved by the client ' },
                                            { subtaskdescription: 'There are undualtion in the plaster surface, the paint contractor should inform the KONNBOT team, so that after the painting work no obligation by painting contractor on other for undulation ' },
                                            { subtaskdescription: 'Corner of all the areas, to be very clear need the straightness, if can be corrected, if not then punning procedure to be applied ' },
                                            { subtaskdescription: 'Analysis of the finishes of the first coat is to be discuseed with the team in case of any issues raises on the site,' },
                                        ];

                                        async function BeamSlabShuttRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShuttRCCfunCall();
                                    }
                                    if (newDatanew.subactivityname === 'TF - Door Accessories + Switch Board') {

                                        const dataArranew = [
                                            { checksHeading: 'First Paint Coat', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Putty & Primer Check', checksdescription: 'Application of putty completed & primer coat applied.' },
                                            { checksHeading: 'Skirting Check', checksdescription: 'Skirting should have also been completed.' },
                                            { checksHeading: 'Damage Check', checksdescription: 'Is there any damage to the putty applied surface and if yes, has the same been repaired prior to paint application' },
                                            { checksHeading: 'Covering Check', checksdescription: 'Check if necessary precautions such as proper covering of floor surface and other finished work surfaces have been undertaken to avoid the paint stains on other surfaces.' },
                                            { checksHeading: 'Finish Check', checksdescription: 'Check for surface finish and shade of first coat of paint.' },
                                            { checksHeading: 'Paint Check', checksdescription: 'Check the consistency of paint.' },
                                            { checksHeading: 'Final Paint Coat', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Other Fixture Check', checksdescription: 'Check if all MEP fixture (including electrical fittings) installation is completed' },
                                            { checksHeading: 'Surface Check', checksdescription: 'Check the surface for the application of 2nd coat of paint' },
                                            { checksHeading: 'Undulation Check', checksdescription: 'Prior to application of second coat, check the first coat of paint with light for any undulations that are to be rectified.' },
                                            { checksHeading: 'Uniform Check', checksdescription: 'Check the Uniformity of 2nd coat of paint' },
                                            { checksHeading: 'Curing Check', checksdescription: 'Check for curing if required.' },
                                            { checksHeading: 'Edge Check', checksdescription: 'Check that all edges and other surfaces are cleaned and also the scaffolds are all removed.' },
                                            { checksHeading: 'Cleaning Check', checksdescription: 'Has the floor, doors, windows and other areas been cleaned after application of paint' },
                                            { checksHeading: 'Final Clean Check', checksdescription: 'Cleaning of the window glass, terrace, floor, pipes, doors, fixtures, electrical switches etc. has been done properly.' },
                                        ];

                                        async function GradeSlabfuncrtion() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        GradeSlabfuncrtion();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'FoF - Door Accessories + Switch Board') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Please confirm the colour/ shade & make/ brand as per client & mark it on drawing tenative so that no confusion among the contractor or any person' },
                                            { subtaskdescription: 'Material calcualtion as per the coat & paint type, please ask the PM for the factors or quatities for site' },
                                            { subtaskdescription: 'Inform the contractor regarding the taping work on skirting, windows, furniture cover & other things if needed' },
                                            { subtaskdescription: 'Its the contractor responsibility that the cleaning of floor and other items while painting' },
                                            { subtaskdescription: 'Sample paint as per the coat is to be applied for the finishes and other incase of any doubtfull, and approved by the client ' },
                                            { subtaskdescription: 'There are undualtion in the plaster surface, the paint contractor should inform the KONNBOT team, so that after the painting work no obligation by painting contractor on other for undulation ' },
                                            { subtaskdescription: 'Corner of all the areas, to be very clear need the straightness, if can be corrected, if not then punning procedure to be applied ' },
                                            { subtaskdescription: 'Analysis of the finishes of the first coat is to be discuseed with the team in case of any issues raises on the site,' },
                                        ];

                                        async function BeamSlabShuttRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShuttRCCfunCall();
                                    }
                                    if (newDatanew.subactivityname === 'FoF - Door Accessories + Switch Board') {

                                        const dataArranew = [
                                            { checksHeading: 'First Paint Coat', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Putty & Primer Check', checksdescription: 'Application of putty completed & primer coat applied.' },
                                            { checksHeading: 'Skirting Check', checksdescription: 'Skirting should have also been completed.' },
                                            { checksHeading: 'Damage Check', checksdescription: 'Is there any damage to the putty applied surface and if yes, has the same been repaired prior to paint application' },
                                            { checksHeading: 'Covering Check', checksdescription: 'Check if necessary precautions such as proper covering of floor surface and other finished work surfaces have been undertaken to avoid the paint stains on other surfaces.' },
                                            { checksHeading: 'Finish Check', checksdescription: 'Check for surface finish and shade of first coat of paint.' },
                                            { checksHeading: 'Paint Check', checksdescription: 'Check the consistency of paint.' },
                                            { checksHeading: 'Final Paint Coat', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Other Fixture Check', checksdescription: 'Check if all MEP fixture (including electrical fittings) installation is completed' },
                                            { checksHeading: 'Surface Check', checksdescription: 'Check the surface for the application of 2nd coat of paint' },
                                            { checksHeading: 'Undulation Check', checksdescription: 'Prior to application of second coat, check the first coat of paint with light for any undulations that are to be rectified.' },
                                            { checksHeading: 'Uniform Check', checksdescription: 'Check the Uniformity of 2nd coat of paint' },
                                            { checksHeading: 'Curing Check', checksdescription: 'Check for curing if required.' },
                                            { checksHeading: 'Edge Check', checksdescription: 'Check that all edges and other surfaces are cleaned and also the scaffolds are all removed.' },
                                            { checksHeading: 'Cleaning Check', checksdescription: 'Has the floor, doors, windows and other areas been cleaned after application of paint' },
                                            { checksHeading: 'Final Clean Check', checksdescription: 'Cleaning of the window glass, terrace, floor, pipes, doors, fixtures, electrical switches etc. has been done properly.' },
                                        ];

                                        async function GradeSlabfuncrtion() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        GradeSlabfuncrtion();
                                    }
                                    //Anuj
                                    if (newDatanew.subactivityname === 'Tower - Door Accessories + Switch Board') {

                                        const dataArranew = [
                                            { subtaskdescription: 'Please confirm the colour/ shade & make/ brand as per client & mark it on drawing tenative so that no confusion among the contractor or any person' },
                                            { subtaskdescription: 'Material calcualtion as per the coat & paint type, please ask the PM for the factors or quatities for site' },
                                            { subtaskdescription: 'Inform the contractor regarding the taping work on skirting, windows, furniture cover & other things if needed' },
                                            { subtaskdescription: 'Its the contractor responsibility that the cleaning of floor and other items while painting' },
                                            { subtaskdescription: 'Sample paint as per the coat is to be applied for the finishes and other incase of any doubtfull, and approved by the client ' },
                                            { subtaskdescription: 'There are undualtion in the plaster surface, the paint contractor should inform the KONNBOT team, so that after the painting work no obligation by painting contractor on other for undulation ' },
                                            { subtaskdescription: 'Corner of all the areas, to be very clear need the straightness, if can be corrected, if not then punning procedure to be applied ' },
                                            { subtaskdescription: 'Analysis of the finishes of the first coat is to be discuseed with the team in case of any issues raises on the site,' },
                                        ];

                                        async function BeamSlabShuttRCCfunCall() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Subtask(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                subtaskID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        BeamSlabShuttRCCfunCall();
                                    }
                                    if (newDatanew.subactivityname === 'Tower - Door Accessories + Switch Board') {

                                        const dataArranew = [
                                            { checksHeading: 'First Paint Coat', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Putty & Primer Check', checksdescription: 'Application of putty completed & primer coat applied.' },
                                            { checksHeading: 'Skirting Check', checksdescription: 'Skirting should have also been completed.' },
                                            { checksHeading: 'Damage Check', checksdescription: 'Is there any damage to the putty applied surface and if yes, has the same been repaired prior to paint application' },
                                            { checksHeading: 'Covering Check', checksdescription: 'Check if necessary precautions such as proper covering of floor surface and other finished work surfaces have been undertaken to avoid the paint stains on other surfaces.' },
                                            { checksHeading: 'Finish Check', checksdescription: 'Check for surface finish and shade of first coat of paint.' },
                                            { checksHeading: 'Paint Check', checksdescription: 'Check the consistency of paint.' },
                                            { checksHeading: 'Final Paint Coat', phaseHeadingShow: 'Yes' },
                                            { checksHeading: 'Other Fixture Check', checksdescription: 'Check if all MEP fixture (including electrical fittings) installation is completed' },
                                            { checksHeading: 'Surface Check', checksdescription: 'Check the surface for the application of 2nd coat of paint' },
                                            { checksHeading: 'Undulation Check', checksdescription: 'Prior to application of second coat, check the first coat of paint with light for any undulations that are to be rectified.' },
                                            { checksHeading: 'Uniform Check', checksdescription: 'Check the Uniformity of 2nd coat of paint' },
                                            { checksHeading: 'Curing Check', checksdescription: 'Check for curing if required.' },
                                            { checksHeading: 'Edge Check', checksdescription: 'Check that all edges and other surfaces are cleaned and also the scaffolds are all removed.' },
                                            { checksHeading: 'Cleaning Check', checksdescription: 'Has the floor, doors, windows and other areas been cleaned after application of paint' },
                                            { checksHeading: 'Final Clean Check', checksdescription: 'Cleaning of the window glass, terrace, floor, pipes, doors, fixtures, electrical switches etc. has been done properly.' },
                                        ];

                                        async function GradeSlabfuncrtion() {
                                            for (let i = 0; i < dataArranew.length; i++) {
                                                try {
                                                    const newDatanewtask = new Checks(dataArranew[i]);
                                                    const savedData = await newDatanewtask.save();

                                                    let objID = new mongoose.Types.ObjectId(newDatanewtask.id)
                                                    let newss = new mongoose.Types.ObjectId(newDatanew._id)
                                                    // console.log(objID);
                                                    await SubActivities.updateOne(
                                                        { _id: newss },
                                                        {
                                                            $push: {
                                                                checksID: objID
                                                            }
                                                        }
                                                    )
                                                    // console.log('Data saved:', savedData);
                                                } catch (error) {
                                                    // console.error('Error saving data:', error);
                                                }
                                            }
                                        }
                                        GradeSlabfuncrtion();
                                    }





                                    await Activities.updateOne(
                                        { _id: newss },
                                        {
                                            $push: {
                                                subactivitiesID: objID
                                            }
                                        }
                                    )
                                    // console.log('Data saved:', savedData);
                                } catch (error) {
                                    // console.error('Error saving data:', error);
                                }
                            }
                        }
                        miscellenousCalling();
                    }














                    await Project.updateOne(
                        { _id: objectproID },
                        {
                            $push: {
                                activitiesID: objID
                            }
                        }
                    )

                    // // console.log('Data saved:', savedData);
                } catch (error) {
                    // console.error('Error saving data:', error);
                }
            }
        }
        saveDataSequentially();
        resp.send("Done");
    } catch (error) {
        resp.status(500).json(error);
    }
};














module.exports = {
    createAllActivites,
    getSingleLeadactivities,
    getSingleProjectAllPhotoes,
    getSingleProjectAllDocuments,
    getSingleLeadOnlyActivities,
    addNewActivities,
    updateActivities,
    deleteActivities
};